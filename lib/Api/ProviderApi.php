<?php
/**
 * ProviderApi
 * PHP version 5
 *
 * @category Class
 * @package  Ivz\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ivoz Provider
 *
 * Client REST API
 *
 * OpenAPI spec version: 2.20.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.31
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ivz\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Ivz\Client\ApiException;
use Ivz\Client\Configuration;
use Ivz\Client\HeaderSelector;
use Ivz\Client\ObjectSerializer;

/**
 * ProviderApi Class Doc Comment
 *
 * @category Class
 * @package  Ivz\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProviderApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation callcsvreportCsvCallCsvReportItem
     *
     * Retrieves a CallCsvReport resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function callcsvreportCsvCallCsvReportItem($id)
    {
        $this->callcsvreportCsvCallCsvReportItemWithHttpInfo($id);
    }

    /**
     * Operation callcsvreportCsvCallCsvReportItemWithHttpInfo
     *
     * Retrieves a CallCsvReport resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function callcsvreportCsvCallCsvReportItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->callcsvreportCsvCallCsvReportItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation callcsvreportCsvCallCsvReportItemAsync
     *
     * Retrieves a CallCsvReport resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callcsvreportCsvCallCsvReportItemAsync($id)
    {
        return $this->callcsvreportCsvCallCsvReportItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callcsvreportCsvCallCsvReportItemAsyncWithHttpInfo
     *
     * Retrieves a CallCsvReport resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callcsvreportCsvCallCsvReportItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->callcsvreportCsvCallCsvReportItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'callcsvreportCsvCallCsvReportItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callcsvreportCsvCallCsvReportItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling callcsvreportCsvCallCsvReportItem'
            );
        }

        $resourcePath = '/call_csv_reports/{id}/csv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCalendarItem
     *
     * Removes the Calendar resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCalendarItem($id)
    {
        $this->deleteCalendarItemWithHttpInfo($id);
    }

    /**
     * Operation deleteCalendarItemWithHttpInfo
     *
     * Removes the Calendar resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCalendarItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteCalendarItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCalendarItemAsync
     *
     * Removes the Calendar resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCalendarItemAsync($id)
    {
        return $this->deleteCalendarItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCalendarItemAsyncWithHttpInfo
     *
     * Removes the Calendar resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCalendarItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteCalendarItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCalendarItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteCalendarItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteCalendarItem'
            );
        }

        $resourcePath = '/calendars/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCalendarPeriodItem
     *
     * Removes the CalendarPeriod resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCalendarPeriodItem($id)
    {
        $this->deleteCalendarPeriodItemWithHttpInfo($id);
    }

    /**
     * Operation deleteCalendarPeriodItemWithHttpInfo
     *
     * Removes the CalendarPeriod resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCalendarPeriodItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteCalendarPeriodItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCalendarPeriodItemAsync
     *
     * Removes the CalendarPeriod resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCalendarPeriodItemAsync($id)
    {
        return $this->deleteCalendarPeriodItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCalendarPeriodItemAsyncWithHttpInfo
     *
     * Removes the CalendarPeriod resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCalendarPeriodItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteCalendarPeriodItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCalendarPeriodItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteCalendarPeriodItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteCalendarPeriodItem'
            );
        }

        $resourcePath = '/calendar_periods/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCalendarPeriodsRelScheduleItem
     *
     * Removes the CalendarPeriodsRelSchedule resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCalendarPeriodsRelScheduleItem($id)
    {
        $this->deleteCalendarPeriodsRelScheduleItemWithHttpInfo($id);
    }

    /**
     * Operation deleteCalendarPeriodsRelScheduleItemWithHttpInfo
     *
     * Removes the CalendarPeriodsRelSchedule resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCalendarPeriodsRelScheduleItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteCalendarPeriodsRelScheduleItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCalendarPeriodsRelScheduleItemAsync
     *
     * Removes the CalendarPeriodsRelSchedule resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCalendarPeriodsRelScheduleItemAsync($id)
    {
        return $this->deleteCalendarPeriodsRelScheduleItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCalendarPeriodsRelScheduleItemAsyncWithHttpInfo
     *
     * Removes the CalendarPeriodsRelSchedule resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCalendarPeriodsRelScheduleItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteCalendarPeriodsRelScheduleItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCalendarPeriodsRelScheduleItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteCalendarPeriodsRelScheduleItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteCalendarPeriodsRelScheduleItem'
            );
        }

        $resourcePath = '/calendar_periods_rel_schedules/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCallAclItem
     *
     * Removes the CallAcl resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCallAclItem($id)
    {
        $this->deleteCallAclItemWithHttpInfo($id);
    }

    /**
     * Operation deleteCallAclItemWithHttpInfo
     *
     * Removes the CallAcl resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCallAclItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteCallAclItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCallAclItemAsync
     *
     * Removes the CallAcl resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCallAclItemAsync($id)
    {
        return $this->deleteCallAclItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCallAclItemAsyncWithHttpInfo
     *
     * Removes the CallAcl resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCallAclItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteCallAclItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCallAclItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteCallAclItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteCallAclItem'
            );
        }

        $resourcePath = '/call_acls/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCallAclRelMatchListItem
     *
     * Removes the CallAclRelMatchList resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCallAclRelMatchListItem($id)
    {
        $this->deleteCallAclRelMatchListItemWithHttpInfo($id);
    }

    /**
     * Operation deleteCallAclRelMatchListItemWithHttpInfo
     *
     * Removes the CallAclRelMatchList resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCallAclRelMatchListItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteCallAclRelMatchListItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCallAclRelMatchListItemAsync
     *
     * Removes the CallAclRelMatchList resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCallAclRelMatchListItemAsync($id)
    {
        return $this->deleteCallAclRelMatchListItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCallAclRelMatchListItemAsyncWithHttpInfo
     *
     * Removes the CallAclRelMatchList resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCallAclRelMatchListItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteCallAclRelMatchListItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCallAclRelMatchListItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteCallAclRelMatchListItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteCallAclRelMatchListItem'
            );
        }

        $resourcePath = '/call_acl_rel_match_lists/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCallCsvSchedulerItem
     *
     * Removes the CallCsvScheduler resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCallCsvSchedulerItem($id)
    {
        $this->deleteCallCsvSchedulerItemWithHttpInfo($id);
    }

    /**
     * Operation deleteCallCsvSchedulerItemWithHttpInfo
     *
     * Removes the CallCsvScheduler resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCallCsvSchedulerItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteCallCsvSchedulerItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCallCsvSchedulerItemAsync
     *
     * Removes the CallCsvScheduler resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCallCsvSchedulerItemAsync($id)
    {
        return $this->deleteCallCsvSchedulerItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCallCsvSchedulerItemAsyncWithHttpInfo
     *
     * Removes the CallCsvScheduler resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCallCsvSchedulerItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteCallCsvSchedulerItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCallCsvSchedulerItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteCallCsvSchedulerItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteCallCsvSchedulerItem'
            );
        }

        $resourcePath = '/call_csv_schedulers/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCallForwardSettingItem
     *
     * Removes the CallForwardSetting resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCallForwardSettingItem($id)
    {
        $this->deleteCallForwardSettingItemWithHttpInfo($id);
    }

    /**
     * Operation deleteCallForwardSettingItemWithHttpInfo
     *
     * Removes the CallForwardSetting resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCallForwardSettingItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteCallForwardSettingItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCallForwardSettingItemAsync
     *
     * Removes the CallForwardSetting resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCallForwardSettingItemAsync($id)
    {
        return $this->deleteCallForwardSettingItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCallForwardSettingItemAsyncWithHttpInfo
     *
     * Removes the CallForwardSetting resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCallForwardSettingItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteCallForwardSettingItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCallForwardSettingItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteCallForwardSettingItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteCallForwardSettingItem'
            );
        }

        $resourcePath = '/call_forward_settings/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCompanyServiceItem
     *
     * Removes the CompanyService resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCompanyServiceItem($id)
    {
        $this->deleteCompanyServiceItemWithHttpInfo($id);
    }

    /**
     * Operation deleteCompanyServiceItemWithHttpInfo
     *
     * Removes the CompanyService resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCompanyServiceItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteCompanyServiceItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCompanyServiceItemAsync
     *
     * Removes the CompanyService resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCompanyServiceItemAsync($id)
    {
        return $this->deleteCompanyServiceItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCompanyServiceItemAsyncWithHttpInfo
     *
     * Removes the CompanyService resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCompanyServiceItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteCompanyServiceItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCompanyServiceItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteCompanyServiceItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteCompanyServiceItem'
            );
        }

        $resourcePath = '/company_services/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteConditionalRouteItem
     *
     * Removes the ConditionalRoute resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteConditionalRouteItem($id)
    {
        $this->deleteConditionalRouteItemWithHttpInfo($id);
    }

    /**
     * Operation deleteConditionalRouteItemWithHttpInfo
     *
     * Removes the ConditionalRoute resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteConditionalRouteItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteConditionalRouteItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteConditionalRouteItemAsync
     *
     * Removes the ConditionalRoute resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteConditionalRouteItemAsync($id)
    {
        return $this->deleteConditionalRouteItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteConditionalRouteItemAsyncWithHttpInfo
     *
     * Removes the ConditionalRoute resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteConditionalRouteItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteConditionalRouteItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteConditionalRouteItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteConditionalRouteItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteConditionalRouteItem'
            );
        }

        $resourcePath = '/conditional_routes/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteConditionalRoutesConditionItem
     *
     * Removes the ConditionalRoutesCondition resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteConditionalRoutesConditionItem($id)
    {
        $this->deleteConditionalRoutesConditionItemWithHttpInfo($id);
    }

    /**
     * Operation deleteConditionalRoutesConditionItemWithHttpInfo
     *
     * Removes the ConditionalRoutesCondition resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteConditionalRoutesConditionItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteConditionalRoutesConditionItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteConditionalRoutesConditionItemAsync
     *
     * Removes the ConditionalRoutesCondition resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteConditionalRoutesConditionItemAsync($id)
    {
        return $this->deleteConditionalRoutesConditionItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteConditionalRoutesConditionItemAsyncWithHttpInfo
     *
     * Removes the ConditionalRoutesCondition resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteConditionalRoutesConditionItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteConditionalRoutesConditionItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteConditionalRoutesConditionItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteConditionalRoutesConditionItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteConditionalRoutesConditionItem'
            );
        }

        $resourcePath = '/conditional_routes_conditions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteConditionalRoutesConditionsRelCalendarItem
     *
     * Removes the ConditionalRoutesConditionsRelCalendar resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteConditionalRoutesConditionsRelCalendarItem($id)
    {
        $this->deleteConditionalRoutesConditionsRelCalendarItemWithHttpInfo($id);
    }

    /**
     * Operation deleteConditionalRoutesConditionsRelCalendarItemWithHttpInfo
     *
     * Removes the ConditionalRoutesConditionsRelCalendar resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteConditionalRoutesConditionsRelCalendarItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteConditionalRoutesConditionsRelCalendarItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteConditionalRoutesConditionsRelCalendarItemAsync
     *
     * Removes the ConditionalRoutesConditionsRelCalendar resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteConditionalRoutesConditionsRelCalendarItemAsync($id)
    {
        return $this->deleteConditionalRoutesConditionsRelCalendarItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteConditionalRoutesConditionsRelCalendarItemAsyncWithHttpInfo
     *
     * Removes the ConditionalRoutesConditionsRelCalendar resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteConditionalRoutesConditionsRelCalendarItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteConditionalRoutesConditionsRelCalendarItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteConditionalRoutesConditionsRelCalendarItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteConditionalRoutesConditionsRelCalendarItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteConditionalRoutesConditionsRelCalendarItem'
            );
        }

        $resourcePath = '/conditional_routes_conditions_rel_calendars/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteConditionalRoutesConditionsRelMatchlistItem
     *
     * Removes the ConditionalRoutesConditionsRelMatchlist resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteConditionalRoutesConditionsRelMatchlistItem($id)
    {
        $this->deleteConditionalRoutesConditionsRelMatchlistItemWithHttpInfo($id);
    }

    /**
     * Operation deleteConditionalRoutesConditionsRelMatchlistItemWithHttpInfo
     *
     * Removes the ConditionalRoutesConditionsRelMatchlist resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteConditionalRoutesConditionsRelMatchlistItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteConditionalRoutesConditionsRelMatchlistItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteConditionalRoutesConditionsRelMatchlistItemAsync
     *
     * Removes the ConditionalRoutesConditionsRelMatchlist resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteConditionalRoutesConditionsRelMatchlistItemAsync($id)
    {
        return $this->deleteConditionalRoutesConditionsRelMatchlistItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteConditionalRoutesConditionsRelMatchlistItemAsyncWithHttpInfo
     *
     * Removes the ConditionalRoutesConditionsRelMatchlist resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteConditionalRoutesConditionsRelMatchlistItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteConditionalRoutesConditionsRelMatchlistItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteConditionalRoutesConditionsRelMatchlistItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteConditionalRoutesConditionsRelMatchlistItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteConditionalRoutesConditionsRelMatchlistItem'
            );
        }

        $resourcePath = '/conditional_routes_conditions_rel_matchlists/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteConditionalRoutesConditionsRelRouteLockItem
     *
     * Removes the ConditionalRoutesConditionsRelRouteLock resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteConditionalRoutesConditionsRelRouteLockItem($id)
    {
        $this->deleteConditionalRoutesConditionsRelRouteLockItemWithHttpInfo($id);
    }

    /**
     * Operation deleteConditionalRoutesConditionsRelRouteLockItemWithHttpInfo
     *
     * Removes the ConditionalRoutesConditionsRelRouteLock resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteConditionalRoutesConditionsRelRouteLockItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteConditionalRoutesConditionsRelRouteLockItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteConditionalRoutesConditionsRelRouteLockItemAsync
     *
     * Removes the ConditionalRoutesConditionsRelRouteLock resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteConditionalRoutesConditionsRelRouteLockItemAsync($id)
    {
        return $this->deleteConditionalRoutesConditionsRelRouteLockItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteConditionalRoutesConditionsRelRouteLockItemAsyncWithHttpInfo
     *
     * Removes the ConditionalRoutesConditionsRelRouteLock resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteConditionalRoutesConditionsRelRouteLockItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteConditionalRoutesConditionsRelRouteLockItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteConditionalRoutesConditionsRelRouteLockItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteConditionalRoutesConditionsRelRouteLockItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteConditionalRoutesConditionsRelRouteLockItem'
            );
        }

        $resourcePath = '/conditional_routes_conditions_rel_route_locks/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteConditionalRoutesConditionsRelScheduleItem
     *
     * Removes the ConditionalRoutesConditionsRelSchedule resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteConditionalRoutesConditionsRelScheduleItem($id)
    {
        $this->deleteConditionalRoutesConditionsRelScheduleItemWithHttpInfo($id);
    }

    /**
     * Operation deleteConditionalRoutesConditionsRelScheduleItemWithHttpInfo
     *
     * Removes the ConditionalRoutesConditionsRelSchedule resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteConditionalRoutesConditionsRelScheduleItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteConditionalRoutesConditionsRelScheduleItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteConditionalRoutesConditionsRelScheduleItemAsync
     *
     * Removes the ConditionalRoutesConditionsRelSchedule resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteConditionalRoutesConditionsRelScheduleItemAsync($id)
    {
        return $this->deleteConditionalRoutesConditionsRelScheduleItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteConditionalRoutesConditionsRelScheduleItemAsyncWithHttpInfo
     *
     * Removes the ConditionalRoutesConditionsRelSchedule resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteConditionalRoutesConditionsRelScheduleItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteConditionalRoutesConditionsRelScheduleItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteConditionalRoutesConditionsRelScheduleItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteConditionalRoutesConditionsRelScheduleItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteConditionalRoutesConditionsRelScheduleItem'
            );
        }

        $resourcePath = '/conditional_routes_conditions_rel_schedules/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteConferenceRoomItem
     *
     * Removes the ConferenceRoom resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteConferenceRoomItem($id)
    {
        $this->deleteConferenceRoomItemWithHttpInfo($id);
    }

    /**
     * Operation deleteConferenceRoomItemWithHttpInfo
     *
     * Removes the ConferenceRoom resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteConferenceRoomItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteConferenceRoomItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteConferenceRoomItemAsync
     *
     * Removes the ConferenceRoom resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteConferenceRoomItemAsync($id)
    {
        return $this->deleteConferenceRoomItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteConferenceRoomItemAsyncWithHttpInfo
     *
     * Removes the ConferenceRoom resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteConferenceRoomItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteConferenceRoomItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteConferenceRoomItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteConferenceRoomItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteConferenceRoomItem'
            );
        }

        $resourcePath = '/conference_rooms/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteExtensionItem
     *
     * Removes the Extension resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteExtensionItem($id)
    {
        $this->deleteExtensionItemWithHttpInfo($id);
    }

    /**
     * Operation deleteExtensionItemWithHttpInfo
     *
     * Removes the Extension resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteExtensionItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteExtensionItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteExtensionItemAsync
     *
     * Removes the Extension resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteExtensionItemAsync($id)
    {
        return $this->deleteExtensionItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteExtensionItemAsyncWithHttpInfo
     *
     * Removes the Extension resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteExtensionItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteExtensionItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteExtensionItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteExtensionItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteExtensionItem'
            );
        }

        $resourcePath = '/extensions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteExternalCallFilterBlackListItem
     *
     * Removes the ExternalCallFilterBlackList resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteExternalCallFilterBlackListItem($id)
    {
        $this->deleteExternalCallFilterBlackListItemWithHttpInfo($id);
    }

    /**
     * Operation deleteExternalCallFilterBlackListItemWithHttpInfo
     *
     * Removes the ExternalCallFilterBlackList resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteExternalCallFilterBlackListItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteExternalCallFilterBlackListItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteExternalCallFilterBlackListItemAsync
     *
     * Removes the ExternalCallFilterBlackList resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteExternalCallFilterBlackListItemAsync($id)
    {
        return $this->deleteExternalCallFilterBlackListItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteExternalCallFilterBlackListItemAsyncWithHttpInfo
     *
     * Removes the ExternalCallFilterBlackList resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteExternalCallFilterBlackListItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteExternalCallFilterBlackListItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteExternalCallFilterBlackListItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteExternalCallFilterBlackListItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteExternalCallFilterBlackListItem'
            );
        }

        $resourcePath = '/external_call_filter_black_lists/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteExternalCallFilterItem
     *
     * Removes the ExternalCallFilter resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteExternalCallFilterItem($id)
    {
        $this->deleteExternalCallFilterItemWithHttpInfo($id);
    }

    /**
     * Operation deleteExternalCallFilterItemWithHttpInfo
     *
     * Removes the ExternalCallFilter resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteExternalCallFilterItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteExternalCallFilterItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteExternalCallFilterItemAsync
     *
     * Removes the ExternalCallFilter resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteExternalCallFilterItemAsync($id)
    {
        return $this->deleteExternalCallFilterItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteExternalCallFilterItemAsyncWithHttpInfo
     *
     * Removes the ExternalCallFilter resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteExternalCallFilterItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteExternalCallFilterItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteExternalCallFilterItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteExternalCallFilterItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteExternalCallFilterItem'
            );
        }

        $resourcePath = '/external_call_filters/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteExternalCallFilterRelCalendarItem
     *
     * Removes the ExternalCallFilterRelCalendar resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteExternalCallFilterRelCalendarItem($id)
    {
        $this->deleteExternalCallFilterRelCalendarItemWithHttpInfo($id);
    }

    /**
     * Operation deleteExternalCallFilterRelCalendarItemWithHttpInfo
     *
     * Removes the ExternalCallFilterRelCalendar resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteExternalCallFilterRelCalendarItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteExternalCallFilterRelCalendarItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteExternalCallFilterRelCalendarItemAsync
     *
     * Removes the ExternalCallFilterRelCalendar resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteExternalCallFilterRelCalendarItemAsync($id)
    {
        return $this->deleteExternalCallFilterRelCalendarItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteExternalCallFilterRelCalendarItemAsyncWithHttpInfo
     *
     * Removes the ExternalCallFilterRelCalendar resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteExternalCallFilterRelCalendarItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteExternalCallFilterRelCalendarItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteExternalCallFilterRelCalendarItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteExternalCallFilterRelCalendarItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteExternalCallFilterRelCalendarItem'
            );
        }

        $resourcePath = '/external_call_filter_rel_calendars/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteExternalCallFilterRelScheduleItem
     *
     * Removes the ExternalCallFilterRelSchedule resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteExternalCallFilterRelScheduleItem($id)
    {
        $this->deleteExternalCallFilterRelScheduleItemWithHttpInfo($id);
    }

    /**
     * Operation deleteExternalCallFilterRelScheduleItemWithHttpInfo
     *
     * Removes the ExternalCallFilterRelSchedule resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteExternalCallFilterRelScheduleItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteExternalCallFilterRelScheduleItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteExternalCallFilterRelScheduleItemAsync
     *
     * Removes the ExternalCallFilterRelSchedule resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteExternalCallFilterRelScheduleItemAsync($id)
    {
        return $this->deleteExternalCallFilterRelScheduleItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteExternalCallFilterRelScheduleItemAsyncWithHttpInfo
     *
     * Removes the ExternalCallFilterRelSchedule resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteExternalCallFilterRelScheduleItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteExternalCallFilterRelScheduleItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteExternalCallFilterRelScheduleItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteExternalCallFilterRelScheduleItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteExternalCallFilterRelScheduleItem'
            );
        }

        $resourcePath = '/external_call_filter_rel_schedules/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteExternalCallFilterWhiteListItem
     *
     * Removes the ExternalCallFilterWhiteList resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteExternalCallFilterWhiteListItem($id)
    {
        $this->deleteExternalCallFilterWhiteListItemWithHttpInfo($id);
    }

    /**
     * Operation deleteExternalCallFilterWhiteListItemWithHttpInfo
     *
     * Removes the ExternalCallFilterWhiteList resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteExternalCallFilterWhiteListItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteExternalCallFilterWhiteListItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteExternalCallFilterWhiteListItemAsync
     *
     * Removes the ExternalCallFilterWhiteList resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteExternalCallFilterWhiteListItemAsync($id)
    {
        return $this->deleteExternalCallFilterWhiteListItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteExternalCallFilterWhiteListItemAsyncWithHttpInfo
     *
     * Removes the ExternalCallFilterWhiteList resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteExternalCallFilterWhiteListItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteExternalCallFilterWhiteListItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteExternalCallFilterWhiteListItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteExternalCallFilterWhiteListItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteExternalCallFilterWhiteListItem'
            );
        }

        $resourcePath = '/external_call_filter_white_lists/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteFaxItem
     *
     * Removes the Fax resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteFaxItem($id)
    {
        $this->deleteFaxItemWithHttpInfo($id);
    }

    /**
     * Operation deleteFaxItemWithHttpInfo
     *
     * Removes the Fax resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFaxItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteFaxItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteFaxItemAsync
     *
     * Removes the Fax resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFaxItemAsync($id)
    {
        return $this->deleteFaxItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFaxItemAsyncWithHttpInfo
     *
     * Removes the Fax resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFaxItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteFaxItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFaxItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteFaxItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteFaxItem'
            );
        }

        $resourcePath = '/faxes/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteFriendItem
     *
     * Removes the Friend resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteFriendItem($id)
    {
        $this->deleteFriendItemWithHttpInfo($id);
    }

    /**
     * Operation deleteFriendItemWithHttpInfo
     *
     * Removes the Friend resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFriendItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteFriendItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteFriendItemAsync
     *
     * Removes the Friend resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFriendItemAsync($id)
    {
        return $this->deleteFriendItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFriendItemAsyncWithHttpInfo
     *
     * Removes the Friend resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFriendItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteFriendItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFriendItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteFriendItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteFriendItem'
            );
        }

        $resourcePath = '/friends/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteFriendsPatternItem
     *
     * Removes the FriendsPattern resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteFriendsPatternItem($id)
    {
        $this->deleteFriendsPatternItemWithHttpInfo($id);
    }

    /**
     * Operation deleteFriendsPatternItemWithHttpInfo
     *
     * Removes the FriendsPattern resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFriendsPatternItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteFriendsPatternItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteFriendsPatternItemAsync
     *
     * Removes the FriendsPattern resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFriendsPatternItemAsync($id)
    {
        return $this->deleteFriendsPatternItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFriendsPatternItemAsyncWithHttpInfo
     *
     * Removes the FriendsPattern resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFriendsPatternItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteFriendsPatternItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFriendsPatternItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteFriendsPatternItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteFriendsPatternItem'
            );
        }

        $resourcePath = '/friends_patterns/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteHolidayDateItem
     *
     * Removes the HolidayDate resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteHolidayDateItem($id)
    {
        $this->deleteHolidayDateItemWithHttpInfo($id);
    }

    /**
     * Operation deleteHolidayDateItemWithHttpInfo
     *
     * Removes the HolidayDate resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteHolidayDateItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteHolidayDateItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteHolidayDateItemAsync
     *
     * Removes the HolidayDate resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteHolidayDateItemAsync($id)
    {
        return $this->deleteHolidayDateItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteHolidayDateItemAsyncWithHttpInfo
     *
     * Removes the HolidayDate resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteHolidayDateItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteHolidayDateItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteHolidayDateItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteHolidayDateItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteHolidayDateItem'
            );
        }

        $resourcePath = '/holiday_dates/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteHuntGroupItem
     *
     * Removes the HuntGroup resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteHuntGroupItem($id)
    {
        $this->deleteHuntGroupItemWithHttpInfo($id);
    }

    /**
     * Operation deleteHuntGroupItemWithHttpInfo
     *
     * Removes the HuntGroup resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteHuntGroupItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteHuntGroupItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteHuntGroupItemAsync
     *
     * Removes the HuntGroup resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteHuntGroupItemAsync($id)
    {
        return $this->deleteHuntGroupItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteHuntGroupItemAsyncWithHttpInfo
     *
     * Removes the HuntGroup resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteHuntGroupItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteHuntGroupItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteHuntGroupItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteHuntGroupItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteHuntGroupItem'
            );
        }

        $resourcePath = '/hunt_groups/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteHuntGroupsRelUserItem
     *
     * Removes the HuntGroupsRelUser resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteHuntGroupsRelUserItem($id)
    {
        $this->deleteHuntGroupsRelUserItemWithHttpInfo($id);
    }

    /**
     * Operation deleteHuntGroupsRelUserItemWithHttpInfo
     *
     * Removes the HuntGroupsRelUser resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteHuntGroupsRelUserItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteHuntGroupsRelUserItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteHuntGroupsRelUserItemAsync
     *
     * Removes the HuntGroupsRelUser resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteHuntGroupsRelUserItemAsync($id)
    {
        return $this->deleteHuntGroupsRelUserItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteHuntGroupsRelUserItemAsyncWithHttpInfo
     *
     * Removes the HuntGroupsRelUser resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteHuntGroupsRelUserItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteHuntGroupsRelUserItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteHuntGroupsRelUserItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteHuntGroupsRelUserItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteHuntGroupsRelUserItem'
            );
        }

        $resourcePath = '/hunt_groups_rel_users/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteIvrEntryItem
     *
     * Removes the IvrEntry resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteIvrEntryItem($id)
    {
        $this->deleteIvrEntryItemWithHttpInfo($id);
    }

    /**
     * Operation deleteIvrEntryItemWithHttpInfo
     *
     * Removes the IvrEntry resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteIvrEntryItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteIvrEntryItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteIvrEntryItemAsync
     *
     * Removes the IvrEntry resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteIvrEntryItemAsync($id)
    {
        return $this->deleteIvrEntryItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteIvrEntryItemAsyncWithHttpInfo
     *
     * Removes the IvrEntry resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteIvrEntryItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteIvrEntryItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteIvrEntryItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteIvrEntryItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteIvrEntryItem'
            );
        }

        $resourcePath = '/ivr_entries/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteIvrExcludedExtensionItem
     *
     * Removes the IvrExcludedExtension resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteIvrExcludedExtensionItem($id)
    {
        $this->deleteIvrExcludedExtensionItemWithHttpInfo($id);
    }

    /**
     * Operation deleteIvrExcludedExtensionItemWithHttpInfo
     *
     * Removes the IvrExcludedExtension resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteIvrExcludedExtensionItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteIvrExcludedExtensionItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteIvrExcludedExtensionItemAsync
     *
     * Removes the IvrExcludedExtension resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteIvrExcludedExtensionItemAsync($id)
    {
        return $this->deleteIvrExcludedExtensionItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteIvrExcludedExtensionItemAsyncWithHttpInfo
     *
     * Removes the IvrExcludedExtension resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteIvrExcludedExtensionItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteIvrExcludedExtensionItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteIvrExcludedExtensionItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteIvrExcludedExtensionItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteIvrExcludedExtensionItem'
            );
        }

        $resourcePath = '/ivr_excluded_extensions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteIvrItem
     *
     * Removes the Ivr resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteIvrItem($id)
    {
        $this->deleteIvrItemWithHttpInfo($id);
    }

    /**
     * Operation deleteIvrItemWithHttpInfo
     *
     * Removes the Ivr resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteIvrItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteIvrItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteIvrItemAsync
     *
     * Removes the Ivr resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteIvrItemAsync($id)
    {
        return $this->deleteIvrItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteIvrItemAsyncWithHttpInfo
     *
     * Removes the Ivr resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteIvrItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteIvrItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteIvrItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteIvrItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteIvrItem'
            );
        }

        $resourcePath = '/ivrs/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLocationItem
     *
     * Removes the Location resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteLocationItem($id)
    {
        $this->deleteLocationItemWithHttpInfo($id);
    }

    /**
     * Operation deleteLocationItemWithHttpInfo
     *
     * Removes the Location resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLocationItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteLocationItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLocationItemAsync
     *
     * Removes the Location resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLocationItemAsync($id)
    {
        return $this->deleteLocationItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteLocationItemAsyncWithHttpInfo
     *
     * Removes the Location resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLocationItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteLocationItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteLocationItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLocationItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteLocationItem'
            );
        }

        $resourcePath = '/locations/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLocutionItem
     *
     * Removes the Locution resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteLocutionItem($id)
    {
        $this->deleteLocutionItemWithHttpInfo($id);
    }

    /**
     * Operation deleteLocutionItemWithHttpInfo
     *
     * Removes the Locution resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLocutionItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteLocutionItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLocutionItemAsync
     *
     * Removes the Locution resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLocutionItemAsync($id)
    {
        return $this->deleteLocutionItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteLocutionItemAsyncWithHttpInfo
     *
     * Removes the Locution resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLocutionItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteLocutionItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteLocutionItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLocutionItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteLocutionItem'
            );
        }

        $resourcePath = '/locutions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteMatchListItem
     *
     * Removes the MatchList resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteMatchListItem($id)
    {
        $this->deleteMatchListItemWithHttpInfo($id);
    }

    /**
     * Operation deleteMatchListItemWithHttpInfo
     *
     * Removes the MatchList resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteMatchListItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteMatchListItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteMatchListItemAsync
     *
     * Removes the MatchList resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMatchListItemAsync($id)
    {
        return $this->deleteMatchListItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteMatchListItemAsyncWithHttpInfo
     *
     * Removes the MatchList resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMatchListItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteMatchListItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteMatchListItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteMatchListItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteMatchListItem'
            );
        }

        $resourcePath = '/match_lists/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteMatchListPatternItem
     *
     * Removes the MatchListPattern resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteMatchListPatternItem($id)
    {
        $this->deleteMatchListPatternItemWithHttpInfo($id);
    }

    /**
     * Operation deleteMatchListPatternItemWithHttpInfo
     *
     * Removes the MatchListPattern resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteMatchListPatternItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteMatchListPatternItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteMatchListPatternItemAsync
     *
     * Removes the MatchListPattern resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMatchListPatternItemAsync($id)
    {
        return $this->deleteMatchListPatternItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteMatchListPatternItemAsyncWithHttpInfo
     *
     * Removes the MatchListPattern resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMatchListPatternItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteMatchListPatternItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteMatchListPatternItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteMatchListPatternItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteMatchListPatternItem'
            );
        }

        $resourcePath = '/match_list_patterns/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteMusicOnHoldItem
     *
     * Removes the MusicOnHold resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteMusicOnHoldItem($id)
    {
        $this->deleteMusicOnHoldItemWithHttpInfo($id);
    }

    /**
     * Operation deleteMusicOnHoldItemWithHttpInfo
     *
     * Removes the MusicOnHold resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteMusicOnHoldItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteMusicOnHoldItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteMusicOnHoldItemAsync
     *
     * Removes the MusicOnHold resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMusicOnHoldItemAsync($id)
    {
        return $this->deleteMusicOnHoldItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteMusicOnHoldItemAsyncWithHttpInfo
     *
     * Removes the MusicOnHold resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMusicOnHoldItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteMusicOnHoldItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteMusicOnHoldItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteMusicOnHoldItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteMusicOnHoldItem'
            );
        }

        $resourcePath = '/music_on_holds/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOutgoingDdiRuleItem
     *
     * Removes the OutgoingDdiRule resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteOutgoingDdiRuleItem($id)
    {
        $this->deleteOutgoingDdiRuleItemWithHttpInfo($id);
    }

    /**
     * Operation deleteOutgoingDdiRuleItemWithHttpInfo
     *
     * Removes the OutgoingDdiRule resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOutgoingDdiRuleItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteOutgoingDdiRuleItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOutgoingDdiRuleItemAsync
     *
     * Removes the OutgoingDdiRule resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOutgoingDdiRuleItemAsync($id)
    {
        return $this->deleteOutgoingDdiRuleItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOutgoingDdiRuleItemAsyncWithHttpInfo
     *
     * Removes the OutgoingDdiRule resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOutgoingDdiRuleItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteOutgoingDdiRuleItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOutgoingDdiRuleItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteOutgoingDdiRuleItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteOutgoingDdiRuleItem'
            );
        }

        $resourcePath = '/outgoing_ddi_rules/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOutgoingDdiRulesPatternItem
     *
     * Removes the OutgoingDdiRulesPattern resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteOutgoingDdiRulesPatternItem($id)
    {
        $this->deleteOutgoingDdiRulesPatternItemWithHttpInfo($id);
    }

    /**
     * Operation deleteOutgoingDdiRulesPatternItemWithHttpInfo
     *
     * Removes the OutgoingDdiRulesPattern resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOutgoingDdiRulesPatternItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteOutgoingDdiRulesPatternItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOutgoingDdiRulesPatternItemAsync
     *
     * Removes the OutgoingDdiRulesPattern resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOutgoingDdiRulesPatternItemAsync($id)
    {
        return $this->deleteOutgoingDdiRulesPatternItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOutgoingDdiRulesPatternItemAsyncWithHttpInfo
     *
     * Removes the OutgoingDdiRulesPattern resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOutgoingDdiRulesPatternItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteOutgoingDdiRulesPatternItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOutgoingDdiRulesPatternItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteOutgoingDdiRulesPatternItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteOutgoingDdiRulesPatternItem'
            );
        }

        $resourcePath = '/outgoing_ddi_rules_patterns/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePickUpGroupItem
     *
     * Removes the PickUpGroup resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deletePickUpGroupItem($id)
    {
        $this->deletePickUpGroupItemWithHttpInfo($id);
    }

    /**
     * Operation deletePickUpGroupItemWithHttpInfo
     *
     * Removes the PickUpGroup resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePickUpGroupItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deletePickUpGroupItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deletePickUpGroupItemAsync
     *
     * Removes the PickUpGroup resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePickUpGroupItemAsync($id)
    {
        return $this->deletePickUpGroupItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePickUpGroupItemAsyncWithHttpInfo
     *
     * Removes the PickUpGroup resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePickUpGroupItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deletePickUpGroupItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePickUpGroupItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deletePickUpGroupItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deletePickUpGroupItem'
            );
        }

        $resourcePath = '/pick_up_groups/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePickUpRelUserItem
     *
     * Removes the PickUpRelUser resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deletePickUpRelUserItem($id)
    {
        $this->deletePickUpRelUserItemWithHttpInfo($id);
    }

    /**
     * Operation deletePickUpRelUserItemWithHttpInfo
     *
     * Removes the PickUpRelUser resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePickUpRelUserItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deletePickUpRelUserItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deletePickUpRelUserItemAsync
     *
     * Removes the PickUpRelUser resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePickUpRelUserItemAsync($id)
    {
        return $this->deletePickUpRelUserItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePickUpRelUserItemAsyncWithHttpInfo
     *
     * Removes the PickUpRelUser resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePickUpRelUserItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deletePickUpRelUserItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePickUpRelUserItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deletePickUpRelUserItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deletePickUpRelUserItem'
            );
        }

        $resourcePath = '/pick_up_rel_users/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteQueueItem
     *
     * Removes the Queue resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteQueueItem($id)
    {
        $this->deleteQueueItemWithHttpInfo($id);
    }

    /**
     * Operation deleteQueueItemWithHttpInfo
     *
     * Removes the Queue resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteQueueItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteQueueItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteQueueItemAsync
     *
     * Removes the Queue resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteQueueItemAsync($id)
    {
        return $this->deleteQueueItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteQueueItemAsyncWithHttpInfo
     *
     * Removes the Queue resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteQueueItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteQueueItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteQueueItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteQueueItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteQueueItem'
            );
        }

        $resourcePath = '/queues/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteQueueMemberItem
     *
     * Removes the QueueMember resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteQueueMemberItem($id)
    {
        $this->deleteQueueMemberItemWithHttpInfo($id);
    }

    /**
     * Operation deleteQueueMemberItemWithHttpInfo
     *
     * Removes the QueueMember resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteQueueMemberItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteQueueMemberItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteQueueMemberItemAsync
     *
     * Removes the QueueMember resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteQueueMemberItemAsync($id)
    {
        return $this->deleteQueueMemberItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteQueueMemberItemAsyncWithHttpInfo
     *
     * Removes the QueueMember resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteQueueMemberItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteQueueMemberItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteQueueMemberItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteQueueMemberItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteQueueMemberItem'
            );
        }

        $resourcePath = '/queue_members/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteRecordingItem
     *
     * Removes the Recording resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteRecordingItem($id)
    {
        $this->deleteRecordingItemWithHttpInfo($id);
    }

    /**
     * Operation deleteRecordingItemWithHttpInfo
     *
     * Removes the Recording resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRecordingItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteRecordingItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteRecordingItemAsync
     *
     * Removes the Recording resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRecordingItemAsync($id)
    {
        return $this->deleteRecordingItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteRecordingItemAsyncWithHttpInfo
     *
     * Removes the Recording resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRecordingItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteRecordingItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRecordingItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteRecordingItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteRecordingItem'
            );
        }

        $resourcePath = '/recordings/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteRouteLockItem
     *
     * Removes the RouteLock resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteRouteLockItem($id)
    {
        $this->deleteRouteLockItemWithHttpInfo($id);
    }

    /**
     * Operation deleteRouteLockItemWithHttpInfo
     *
     * Removes the RouteLock resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRouteLockItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteRouteLockItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteRouteLockItemAsync
     *
     * Removes the RouteLock resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRouteLockItemAsync($id)
    {
        return $this->deleteRouteLockItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteRouteLockItemAsyncWithHttpInfo
     *
     * Removes the RouteLock resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRouteLockItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteRouteLockItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRouteLockItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteRouteLockItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteRouteLockItem'
            );
        }

        $resourcePath = '/route_locks/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteScheduleItem
     *
     * Removes the Schedule resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteScheduleItem($id)
    {
        $this->deleteScheduleItemWithHttpInfo($id);
    }

    /**
     * Operation deleteScheduleItemWithHttpInfo
     *
     * Removes the Schedule resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteScheduleItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteScheduleItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteScheduleItemAsync
     *
     * Removes the Schedule resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteScheduleItemAsync($id)
    {
        return $this->deleteScheduleItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteScheduleItemAsyncWithHttpInfo
     *
     * Removes the Schedule resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteScheduleItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteScheduleItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteScheduleItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteScheduleItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteScheduleItem'
            );
        }

        $resourcePath = '/schedules/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTerminalItem
     *
     * Removes the Terminal resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteTerminalItem($id)
    {
        $this->deleteTerminalItemWithHttpInfo($id);
    }

    /**
     * Operation deleteTerminalItemWithHttpInfo
     *
     * Removes the Terminal resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTerminalItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteTerminalItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteTerminalItemAsync
     *
     * Removes the Terminal resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTerminalItemAsync($id)
    {
        return $this->deleteTerminalItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteTerminalItemAsyncWithHttpInfo
     *
     * Removes the Terminal resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTerminalItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteTerminalItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteTerminalItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteTerminalItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteTerminalItem'
            );
        }

        $resourcePath = '/terminals/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteUserItem
     *
     * Removes the User resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteUserItem($id)
    {
        $this->deleteUserItemWithHttpInfo($id);
    }

    /**
     * Operation deleteUserItemWithHttpInfo
     *
     * Removes the User resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteUserItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteUserItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteUserItemAsync
     *
     * Removes the User resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteUserItemAsync($id)
    {
        return $this->deleteUserItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteUserItemAsyncWithHttpInfo
     *
     * Removes the User resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteUserItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteUserItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteUserItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteUserItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteUserItem'
            );
        }

        $resourcePath = '/users/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation faxesinoutFileFaxesInOutItem
     *
     * Retrieves a FaxesInOut resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function faxesinoutFileFaxesInOutItem($id)
    {
        $this->faxesinoutFileFaxesInOutItemWithHttpInfo($id);
    }

    /**
     * Operation faxesinoutFileFaxesInOutItemWithHttpInfo
     *
     * Retrieves a FaxesInOut resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function faxesinoutFileFaxesInOutItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->faxesinoutFileFaxesInOutItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation faxesinoutFileFaxesInOutItemAsync
     *
     * Retrieves a FaxesInOut resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function faxesinoutFileFaxesInOutItemAsync($id)
    {
        return $this->faxesinoutFileFaxesInOutItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation faxesinoutFileFaxesInOutItemAsyncWithHttpInfo
     *
     * Retrieves a FaxesInOut resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function faxesinoutFileFaxesInOutItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->faxesinoutFileFaxesInOutItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'faxesinoutFileFaxesInOutItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function faxesinoutFileFaxesInOutItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling faxesinoutFileFaxesInOutItem'
            );
        }

        $resourcePath = '/faxes_in_outs/{id}/file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBillableCallCollection
     *
     * Retrieves the collection of BillableCall resources.
     *
     * @param  string $callee callee (optional)
     * @param  string $callee_end callee_end (optional)
     * @param  string $callee_exact callee_exact (optional)
     * @param  bool $callee_exists callee_exists (optional)
     * @param  string $callee_partial callee_partial (optional)
     * @param  string $callee_start callee_start (optional)
     * @param  string $caller caller (optional)
     * @param  string $caller_end caller_end (optional)
     * @param  string $caller_exact caller_exact (optional)
     * @param  bool $caller_exists caller_exists (optional)
     * @param  string $caller_partial caller_partial (optional)
     * @param  string $caller_start caller_start (optional)
     * @param  string $callid callid (optional)
     * @param  string $callid_end callid_end (optional)
     * @param  string $callid_exact callid_exact (optional)
     * @param  bool $callid_exists callid_exists (optional)
     * @param  string $callid_partial callid_partial (optional)
     * @param  string $callid_start callid_start (optional)
     * @param  string $ddi ddi (optional)
     * @param  string $ddi2 ddi2 (optional)
     * @param  bool $ddi_exists ddi_exists (optional)
     * @param  string $direction direction (optional)
     * @param  string $direction_end direction_end (optional)
     * @param  string $direction_exact direction_exact (optional)
     * @param  bool $direction_exists direction_exists (optional)
     * @param  string $direction_partial direction_partial (optional)
     * @param  string $direction_start direction_start (optional)
     * @param  float $duration duration (optional)
     * @param  string $duration_between duration_between (optional)
     * @param  string $duration_gt duration_gt (optional)
     * @param  string $duration_gte duration_gte (optional)
     * @param  string $duration_lt duration_lt (optional)
     * @param  string $duration_lte duration_lte (optional)
     * @param  int $endpoint_id endpoint_id (optional)
     * @param  string $endpoint_id_between endpoint_id_between (optional)
     * @param  bool $endpoint_id_exists endpoint_id_exists (optional)
     * @param  string $endpoint_id_gt endpoint_id_gt (optional)
     * @param  string $endpoint_id_gte endpoint_id_gte (optional)
     * @param  string $endpoint_id_lt endpoint_id_lt (optional)
     * @param  string $endpoint_id_lte endpoint_id_lte (optional)
     * @param  string $endpoint_name endpoint_name (optional)
     * @param  string $endpoint_name_end endpoint_name_end (optional)
     * @param  string $endpoint_name_exact endpoint_name_exact (optional)
     * @param  bool $endpoint_name_exists endpoint_name_exists (optional)
     * @param  string $endpoint_name_partial endpoint_name_partial (optional)
     * @param  string $endpoint_name_start endpoint_name_start (optional)
     * @param  string $endpoint_type endpoint_type (optional)
     * @param  string $endpoint_type_end endpoint_type_end (optional)
     * @param  string $endpoint_type_exact endpoint_type_exact (optional)
     * @param  bool $endpoint_type_exists endpoint_type_exists (optional)
     * @param  string $endpoint_type_partial endpoint_type_partial (optional)
     * @param  string $endpoint_type_start endpoint_type_start (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $price price (optional)
     * @param  string $price_between price_between (optional)
     * @param  bool $price_exists price_exists (optional)
     * @param  string $price_gt price_gt (optional)
     * @param  string $price_gte price_gte (optional)
     * @param  string $price_lt price_lt (optional)
     * @param  string $price_lte price_lte (optional)
     * @param  string $start_time start_time (optional)
     * @param  string $start_time_after start_time_after (optional)
     * @param  string $start_time_before start_time_before (optional)
     * @param  bool $start_time_exists start_time_exists (optional)
     * @param  string $start_time_start start_time_start (optional)
     * @param  string $start_time_strictly_after start_time_strictly_after (optional)
     * @param  string $start_time_strictly_before start_time_strictly_before (optional)
     * @param  string $_order_callee _order_callee (optional)
     * @param  string $_order_caller _order_caller (optional)
     * @param  string $_order_callid _order_callid (optional)
     * @param  string $_order_direction _order_direction (optional)
     * @param  string $_order_duration _order_duration (optional)
     * @param  string $_order_endpoint_id _order_endpoint_id (optional)
     * @param  string $_order_endpoint_name _order_endpoint_name (optional)
     * @param  string $_order_endpoint_type _order_endpoint_type (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_price _order_price (optional)
     * @param  string $_order_start_time _order_start_time (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     * @param  bool $_pagination _pagination (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\BillableCallCollection[]
     */
    public function getBillableCallCollection($callee = null, $callee_end = null, $callee_exact = null, $callee_exists = null, $callee_partial = null, $callee_start = null, $caller = null, $caller_end = null, $caller_exact = null, $caller_exists = null, $caller_partial = null, $caller_start = null, $callid = null, $callid_end = null, $callid_exact = null, $callid_exists = null, $callid_partial = null, $callid_start = null, $ddi = null, $ddi2 = null, $ddi_exists = null, $direction = null, $direction_end = null, $direction_exact = null, $direction_exists = null, $direction_partial = null, $direction_start = null, $duration = null, $duration_between = null, $duration_gt = null, $duration_gte = null, $duration_lt = null, $duration_lte = null, $endpoint_id = null, $endpoint_id_between = null, $endpoint_id_exists = null, $endpoint_id_gt = null, $endpoint_id_gte = null, $endpoint_id_lt = null, $endpoint_id_lte = null, $endpoint_name = null, $endpoint_name_end = null, $endpoint_name_exact = null, $endpoint_name_exists = null, $endpoint_name_partial = null, $endpoint_name_start = null, $endpoint_type = null, $endpoint_type_end = null, $endpoint_type_exact = null, $endpoint_type_exists = null, $endpoint_type_partial = null, $endpoint_type_start = null, $id_exact = null, $price = null, $price_between = null, $price_exists = null, $price_gt = null, $price_gte = null, $price_lt = null, $price_lte = null, $start_time = null, $start_time_after = null, $start_time_before = null, $start_time_exists = null, $start_time_start = null, $start_time_strictly_after = null, $start_time_strictly_before = null, $_order_callee = null, $_order_caller = null, $_order_callid = null, $_order_direction = null, $_order_duration = null, $_order_endpoint_id = null, $_order_endpoint_name = null, $_order_endpoint_type = null, $_order_id = null, $_order_price = null, $_order_start_time = null, $_items_per_page = null, $_page = null, $_properties = null, $_pagination = null, $_timezone = null)
    {
        list($response) = $this->getBillableCallCollectionWithHttpInfo($callee, $callee_end, $callee_exact, $callee_exists, $callee_partial, $callee_start, $caller, $caller_end, $caller_exact, $caller_exists, $caller_partial, $caller_start, $callid, $callid_end, $callid_exact, $callid_exists, $callid_partial, $callid_start, $ddi, $ddi2, $ddi_exists, $direction, $direction_end, $direction_exact, $direction_exists, $direction_partial, $direction_start, $duration, $duration_between, $duration_gt, $duration_gte, $duration_lt, $duration_lte, $endpoint_id, $endpoint_id_between, $endpoint_id_exists, $endpoint_id_gt, $endpoint_id_gte, $endpoint_id_lt, $endpoint_id_lte, $endpoint_name, $endpoint_name_end, $endpoint_name_exact, $endpoint_name_exists, $endpoint_name_partial, $endpoint_name_start, $endpoint_type, $endpoint_type_end, $endpoint_type_exact, $endpoint_type_exists, $endpoint_type_partial, $endpoint_type_start, $id_exact, $price, $price_between, $price_exists, $price_gt, $price_gte, $price_lt, $price_lte, $start_time, $start_time_after, $start_time_before, $start_time_exists, $start_time_start, $start_time_strictly_after, $start_time_strictly_before, $_order_callee, $_order_caller, $_order_callid, $_order_direction, $_order_duration, $_order_endpoint_id, $_order_endpoint_name, $_order_endpoint_type, $_order_id, $_order_price, $_order_start_time, $_items_per_page, $_page, $_properties, $_pagination, $_timezone);
        return $response;
    }

    /**
     * Operation getBillableCallCollectionWithHttpInfo
     *
     * Retrieves the collection of BillableCall resources.
     *
     * @param  string $callee (optional)
     * @param  string $callee_end (optional)
     * @param  string $callee_exact (optional)
     * @param  bool $callee_exists (optional)
     * @param  string $callee_partial (optional)
     * @param  string $callee_start (optional)
     * @param  string $caller (optional)
     * @param  string $caller_end (optional)
     * @param  string $caller_exact (optional)
     * @param  bool $caller_exists (optional)
     * @param  string $caller_partial (optional)
     * @param  string $caller_start (optional)
     * @param  string $callid (optional)
     * @param  string $callid_end (optional)
     * @param  string $callid_exact (optional)
     * @param  bool $callid_exists (optional)
     * @param  string $callid_partial (optional)
     * @param  string $callid_start (optional)
     * @param  string $ddi (optional)
     * @param  string $ddi2 (optional)
     * @param  bool $ddi_exists (optional)
     * @param  string $direction (optional)
     * @param  string $direction_end (optional)
     * @param  string $direction_exact (optional)
     * @param  bool $direction_exists (optional)
     * @param  string $direction_partial (optional)
     * @param  string $direction_start (optional)
     * @param  float $duration (optional)
     * @param  string $duration_between (optional)
     * @param  string $duration_gt (optional)
     * @param  string $duration_gte (optional)
     * @param  string $duration_lt (optional)
     * @param  string $duration_lte (optional)
     * @param  int $endpoint_id (optional)
     * @param  string $endpoint_id_between (optional)
     * @param  bool $endpoint_id_exists (optional)
     * @param  string $endpoint_id_gt (optional)
     * @param  string $endpoint_id_gte (optional)
     * @param  string $endpoint_id_lt (optional)
     * @param  string $endpoint_id_lte (optional)
     * @param  string $endpoint_name (optional)
     * @param  string $endpoint_name_end (optional)
     * @param  string $endpoint_name_exact (optional)
     * @param  bool $endpoint_name_exists (optional)
     * @param  string $endpoint_name_partial (optional)
     * @param  string $endpoint_name_start (optional)
     * @param  string $endpoint_type (optional)
     * @param  string $endpoint_type_end (optional)
     * @param  string $endpoint_type_exact (optional)
     * @param  bool $endpoint_type_exists (optional)
     * @param  string $endpoint_type_partial (optional)
     * @param  string $endpoint_type_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $price (optional)
     * @param  string $price_between (optional)
     * @param  bool $price_exists (optional)
     * @param  string $price_gt (optional)
     * @param  string $price_gte (optional)
     * @param  string $price_lt (optional)
     * @param  string $price_lte (optional)
     * @param  string $start_time (optional)
     * @param  string $start_time_after (optional)
     * @param  string $start_time_before (optional)
     * @param  bool $start_time_exists (optional)
     * @param  string $start_time_start (optional)
     * @param  string $start_time_strictly_after (optional)
     * @param  string $start_time_strictly_before (optional)
     * @param  string $_order_callee (optional)
     * @param  string $_order_caller (optional)
     * @param  string $_order_callid (optional)
     * @param  string $_order_direction (optional)
     * @param  string $_order_duration (optional)
     * @param  string $_order_endpoint_id (optional)
     * @param  string $_order_endpoint_name (optional)
     * @param  string $_order_endpoint_type (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_price (optional)
     * @param  string $_order_start_time (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  bool $_pagination (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\BillableCallCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getBillableCallCollectionWithHttpInfo($callee = null, $callee_end = null, $callee_exact = null, $callee_exists = null, $callee_partial = null, $callee_start = null, $caller = null, $caller_end = null, $caller_exact = null, $caller_exists = null, $caller_partial = null, $caller_start = null, $callid = null, $callid_end = null, $callid_exact = null, $callid_exists = null, $callid_partial = null, $callid_start = null, $ddi = null, $ddi2 = null, $ddi_exists = null, $direction = null, $direction_end = null, $direction_exact = null, $direction_exists = null, $direction_partial = null, $direction_start = null, $duration = null, $duration_between = null, $duration_gt = null, $duration_gte = null, $duration_lt = null, $duration_lte = null, $endpoint_id = null, $endpoint_id_between = null, $endpoint_id_exists = null, $endpoint_id_gt = null, $endpoint_id_gte = null, $endpoint_id_lt = null, $endpoint_id_lte = null, $endpoint_name = null, $endpoint_name_end = null, $endpoint_name_exact = null, $endpoint_name_exists = null, $endpoint_name_partial = null, $endpoint_name_start = null, $endpoint_type = null, $endpoint_type_end = null, $endpoint_type_exact = null, $endpoint_type_exists = null, $endpoint_type_partial = null, $endpoint_type_start = null, $id_exact = null, $price = null, $price_between = null, $price_exists = null, $price_gt = null, $price_gte = null, $price_lt = null, $price_lte = null, $start_time = null, $start_time_after = null, $start_time_before = null, $start_time_exists = null, $start_time_start = null, $start_time_strictly_after = null, $start_time_strictly_before = null, $_order_callee = null, $_order_caller = null, $_order_callid = null, $_order_direction = null, $_order_duration = null, $_order_endpoint_id = null, $_order_endpoint_name = null, $_order_endpoint_type = null, $_order_id = null, $_order_price = null, $_order_start_time = null, $_items_per_page = null, $_page = null, $_properties = null, $_pagination = null, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\BillableCallCollection[]';
        $request = $this->getBillableCallCollectionRequest($callee, $callee_end, $callee_exact, $callee_exists, $callee_partial, $callee_start, $caller, $caller_end, $caller_exact, $caller_exists, $caller_partial, $caller_start, $callid, $callid_end, $callid_exact, $callid_exists, $callid_partial, $callid_start, $ddi, $ddi2, $ddi_exists, $direction, $direction_end, $direction_exact, $direction_exists, $direction_partial, $direction_start, $duration, $duration_between, $duration_gt, $duration_gte, $duration_lt, $duration_lte, $endpoint_id, $endpoint_id_between, $endpoint_id_exists, $endpoint_id_gt, $endpoint_id_gte, $endpoint_id_lt, $endpoint_id_lte, $endpoint_name, $endpoint_name_end, $endpoint_name_exact, $endpoint_name_exists, $endpoint_name_partial, $endpoint_name_start, $endpoint_type, $endpoint_type_end, $endpoint_type_exact, $endpoint_type_exists, $endpoint_type_partial, $endpoint_type_start, $id_exact, $price, $price_between, $price_exists, $price_gt, $price_gte, $price_lt, $price_lte, $start_time, $start_time_after, $start_time_before, $start_time_exists, $start_time_start, $start_time_strictly_after, $start_time_strictly_before, $_order_callee, $_order_caller, $_order_callid, $_order_direction, $_order_duration, $_order_endpoint_id, $_order_endpoint_name, $_order_endpoint_type, $_order_id, $_order_price, $_order_start_time, $_items_per_page, $_page, $_properties, $_pagination, $_timezone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\BillableCallCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBillableCallCollectionAsync
     *
     * Retrieves the collection of BillableCall resources.
     *
     * @param  string $callee (optional)
     * @param  string $callee_end (optional)
     * @param  string $callee_exact (optional)
     * @param  bool $callee_exists (optional)
     * @param  string $callee_partial (optional)
     * @param  string $callee_start (optional)
     * @param  string $caller (optional)
     * @param  string $caller_end (optional)
     * @param  string $caller_exact (optional)
     * @param  bool $caller_exists (optional)
     * @param  string $caller_partial (optional)
     * @param  string $caller_start (optional)
     * @param  string $callid (optional)
     * @param  string $callid_end (optional)
     * @param  string $callid_exact (optional)
     * @param  bool $callid_exists (optional)
     * @param  string $callid_partial (optional)
     * @param  string $callid_start (optional)
     * @param  string $ddi (optional)
     * @param  string $ddi2 (optional)
     * @param  bool $ddi_exists (optional)
     * @param  string $direction (optional)
     * @param  string $direction_end (optional)
     * @param  string $direction_exact (optional)
     * @param  bool $direction_exists (optional)
     * @param  string $direction_partial (optional)
     * @param  string $direction_start (optional)
     * @param  float $duration (optional)
     * @param  string $duration_between (optional)
     * @param  string $duration_gt (optional)
     * @param  string $duration_gte (optional)
     * @param  string $duration_lt (optional)
     * @param  string $duration_lte (optional)
     * @param  int $endpoint_id (optional)
     * @param  string $endpoint_id_between (optional)
     * @param  bool $endpoint_id_exists (optional)
     * @param  string $endpoint_id_gt (optional)
     * @param  string $endpoint_id_gte (optional)
     * @param  string $endpoint_id_lt (optional)
     * @param  string $endpoint_id_lte (optional)
     * @param  string $endpoint_name (optional)
     * @param  string $endpoint_name_end (optional)
     * @param  string $endpoint_name_exact (optional)
     * @param  bool $endpoint_name_exists (optional)
     * @param  string $endpoint_name_partial (optional)
     * @param  string $endpoint_name_start (optional)
     * @param  string $endpoint_type (optional)
     * @param  string $endpoint_type_end (optional)
     * @param  string $endpoint_type_exact (optional)
     * @param  bool $endpoint_type_exists (optional)
     * @param  string $endpoint_type_partial (optional)
     * @param  string $endpoint_type_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $price (optional)
     * @param  string $price_between (optional)
     * @param  bool $price_exists (optional)
     * @param  string $price_gt (optional)
     * @param  string $price_gte (optional)
     * @param  string $price_lt (optional)
     * @param  string $price_lte (optional)
     * @param  string $start_time (optional)
     * @param  string $start_time_after (optional)
     * @param  string $start_time_before (optional)
     * @param  bool $start_time_exists (optional)
     * @param  string $start_time_start (optional)
     * @param  string $start_time_strictly_after (optional)
     * @param  string $start_time_strictly_before (optional)
     * @param  string $_order_callee (optional)
     * @param  string $_order_caller (optional)
     * @param  string $_order_callid (optional)
     * @param  string $_order_direction (optional)
     * @param  string $_order_duration (optional)
     * @param  string $_order_endpoint_id (optional)
     * @param  string $_order_endpoint_name (optional)
     * @param  string $_order_endpoint_type (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_price (optional)
     * @param  string $_order_start_time (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  bool $_pagination (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBillableCallCollectionAsync($callee = null, $callee_end = null, $callee_exact = null, $callee_exists = null, $callee_partial = null, $callee_start = null, $caller = null, $caller_end = null, $caller_exact = null, $caller_exists = null, $caller_partial = null, $caller_start = null, $callid = null, $callid_end = null, $callid_exact = null, $callid_exists = null, $callid_partial = null, $callid_start = null, $ddi = null, $ddi2 = null, $ddi_exists = null, $direction = null, $direction_end = null, $direction_exact = null, $direction_exists = null, $direction_partial = null, $direction_start = null, $duration = null, $duration_between = null, $duration_gt = null, $duration_gte = null, $duration_lt = null, $duration_lte = null, $endpoint_id = null, $endpoint_id_between = null, $endpoint_id_exists = null, $endpoint_id_gt = null, $endpoint_id_gte = null, $endpoint_id_lt = null, $endpoint_id_lte = null, $endpoint_name = null, $endpoint_name_end = null, $endpoint_name_exact = null, $endpoint_name_exists = null, $endpoint_name_partial = null, $endpoint_name_start = null, $endpoint_type = null, $endpoint_type_end = null, $endpoint_type_exact = null, $endpoint_type_exists = null, $endpoint_type_partial = null, $endpoint_type_start = null, $id_exact = null, $price = null, $price_between = null, $price_exists = null, $price_gt = null, $price_gte = null, $price_lt = null, $price_lte = null, $start_time = null, $start_time_after = null, $start_time_before = null, $start_time_exists = null, $start_time_start = null, $start_time_strictly_after = null, $start_time_strictly_before = null, $_order_callee = null, $_order_caller = null, $_order_callid = null, $_order_direction = null, $_order_duration = null, $_order_endpoint_id = null, $_order_endpoint_name = null, $_order_endpoint_type = null, $_order_id = null, $_order_price = null, $_order_start_time = null, $_items_per_page = null, $_page = null, $_properties = null, $_pagination = null, $_timezone = null)
    {
        return $this->getBillableCallCollectionAsyncWithHttpInfo($callee, $callee_end, $callee_exact, $callee_exists, $callee_partial, $callee_start, $caller, $caller_end, $caller_exact, $caller_exists, $caller_partial, $caller_start, $callid, $callid_end, $callid_exact, $callid_exists, $callid_partial, $callid_start, $ddi, $ddi2, $ddi_exists, $direction, $direction_end, $direction_exact, $direction_exists, $direction_partial, $direction_start, $duration, $duration_between, $duration_gt, $duration_gte, $duration_lt, $duration_lte, $endpoint_id, $endpoint_id_between, $endpoint_id_exists, $endpoint_id_gt, $endpoint_id_gte, $endpoint_id_lt, $endpoint_id_lte, $endpoint_name, $endpoint_name_end, $endpoint_name_exact, $endpoint_name_exists, $endpoint_name_partial, $endpoint_name_start, $endpoint_type, $endpoint_type_end, $endpoint_type_exact, $endpoint_type_exists, $endpoint_type_partial, $endpoint_type_start, $id_exact, $price, $price_between, $price_exists, $price_gt, $price_gte, $price_lt, $price_lte, $start_time, $start_time_after, $start_time_before, $start_time_exists, $start_time_start, $start_time_strictly_after, $start_time_strictly_before, $_order_callee, $_order_caller, $_order_callid, $_order_direction, $_order_duration, $_order_endpoint_id, $_order_endpoint_name, $_order_endpoint_type, $_order_id, $_order_price, $_order_start_time, $_items_per_page, $_page, $_properties, $_pagination, $_timezone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBillableCallCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of BillableCall resources.
     *
     * @param  string $callee (optional)
     * @param  string $callee_end (optional)
     * @param  string $callee_exact (optional)
     * @param  bool $callee_exists (optional)
     * @param  string $callee_partial (optional)
     * @param  string $callee_start (optional)
     * @param  string $caller (optional)
     * @param  string $caller_end (optional)
     * @param  string $caller_exact (optional)
     * @param  bool $caller_exists (optional)
     * @param  string $caller_partial (optional)
     * @param  string $caller_start (optional)
     * @param  string $callid (optional)
     * @param  string $callid_end (optional)
     * @param  string $callid_exact (optional)
     * @param  bool $callid_exists (optional)
     * @param  string $callid_partial (optional)
     * @param  string $callid_start (optional)
     * @param  string $ddi (optional)
     * @param  string $ddi2 (optional)
     * @param  bool $ddi_exists (optional)
     * @param  string $direction (optional)
     * @param  string $direction_end (optional)
     * @param  string $direction_exact (optional)
     * @param  bool $direction_exists (optional)
     * @param  string $direction_partial (optional)
     * @param  string $direction_start (optional)
     * @param  float $duration (optional)
     * @param  string $duration_between (optional)
     * @param  string $duration_gt (optional)
     * @param  string $duration_gte (optional)
     * @param  string $duration_lt (optional)
     * @param  string $duration_lte (optional)
     * @param  int $endpoint_id (optional)
     * @param  string $endpoint_id_between (optional)
     * @param  bool $endpoint_id_exists (optional)
     * @param  string $endpoint_id_gt (optional)
     * @param  string $endpoint_id_gte (optional)
     * @param  string $endpoint_id_lt (optional)
     * @param  string $endpoint_id_lte (optional)
     * @param  string $endpoint_name (optional)
     * @param  string $endpoint_name_end (optional)
     * @param  string $endpoint_name_exact (optional)
     * @param  bool $endpoint_name_exists (optional)
     * @param  string $endpoint_name_partial (optional)
     * @param  string $endpoint_name_start (optional)
     * @param  string $endpoint_type (optional)
     * @param  string $endpoint_type_end (optional)
     * @param  string $endpoint_type_exact (optional)
     * @param  bool $endpoint_type_exists (optional)
     * @param  string $endpoint_type_partial (optional)
     * @param  string $endpoint_type_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $price (optional)
     * @param  string $price_between (optional)
     * @param  bool $price_exists (optional)
     * @param  string $price_gt (optional)
     * @param  string $price_gte (optional)
     * @param  string $price_lt (optional)
     * @param  string $price_lte (optional)
     * @param  string $start_time (optional)
     * @param  string $start_time_after (optional)
     * @param  string $start_time_before (optional)
     * @param  bool $start_time_exists (optional)
     * @param  string $start_time_start (optional)
     * @param  string $start_time_strictly_after (optional)
     * @param  string $start_time_strictly_before (optional)
     * @param  string $_order_callee (optional)
     * @param  string $_order_caller (optional)
     * @param  string $_order_callid (optional)
     * @param  string $_order_direction (optional)
     * @param  string $_order_duration (optional)
     * @param  string $_order_endpoint_id (optional)
     * @param  string $_order_endpoint_name (optional)
     * @param  string $_order_endpoint_type (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_price (optional)
     * @param  string $_order_start_time (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  bool $_pagination (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBillableCallCollectionAsyncWithHttpInfo($callee = null, $callee_end = null, $callee_exact = null, $callee_exists = null, $callee_partial = null, $callee_start = null, $caller = null, $caller_end = null, $caller_exact = null, $caller_exists = null, $caller_partial = null, $caller_start = null, $callid = null, $callid_end = null, $callid_exact = null, $callid_exists = null, $callid_partial = null, $callid_start = null, $ddi = null, $ddi2 = null, $ddi_exists = null, $direction = null, $direction_end = null, $direction_exact = null, $direction_exists = null, $direction_partial = null, $direction_start = null, $duration = null, $duration_between = null, $duration_gt = null, $duration_gte = null, $duration_lt = null, $duration_lte = null, $endpoint_id = null, $endpoint_id_between = null, $endpoint_id_exists = null, $endpoint_id_gt = null, $endpoint_id_gte = null, $endpoint_id_lt = null, $endpoint_id_lte = null, $endpoint_name = null, $endpoint_name_end = null, $endpoint_name_exact = null, $endpoint_name_exists = null, $endpoint_name_partial = null, $endpoint_name_start = null, $endpoint_type = null, $endpoint_type_end = null, $endpoint_type_exact = null, $endpoint_type_exists = null, $endpoint_type_partial = null, $endpoint_type_start = null, $id_exact = null, $price = null, $price_between = null, $price_exists = null, $price_gt = null, $price_gte = null, $price_lt = null, $price_lte = null, $start_time = null, $start_time_after = null, $start_time_before = null, $start_time_exists = null, $start_time_start = null, $start_time_strictly_after = null, $start_time_strictly_before = null, $_order_callee = null, $_order_caller = null, $_order_callid = null, $_order_direction = null, $_order_duration = null, $_order_endpoint_id = null, $_order_endpoint_name = null, $_order_endpoint_type = null, $_order_id = null, $_order_price = null, $_order_start_time = null, $_items_per_page = null, $_page = null, $_properties = null, $_pagination = null, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\BillableCallCollection[]';
        $request = $this->getBillableCallCollectionRequest($callee, $callee_end, $callee_exact, $callee_exists, $callee_partial, $callee_start, $caller, $caller_end, $caller_exact, $caller_exists, $caller_partial, $caller_start, $callid, $callid_end, $callid_exact, $callid_exists, $callid_partial, $callid_start, $ddi, $ddi2, $ddi_exists, $direction, $direction_end, $direction_exact, $direction_exists, $direction_partial, $direction_start, $duration, $duration_between, $duration_gt, $duration_gte, $duration_lt, $duration_lte, $endpoint_id, $endpoint_id_between, $endpoint_id_exists, $endpoint_id_gt, $endpoint_id_gte, $endpoint_id_lt, $endpoint_id_lte, $endpoint_name, $endpoint_name_end, $endpoint_name_exact, $endpoint_name_exists, $endpoint_name_partial, $endpoint_name_start, $endpoint_type, $endpoint_type_end, $endpoint_type_exact, $endpoint_type_exists, $endpoint_type_partial, $endpoint_type_start, $id_exact, $price, $price_between, $price_exists, $price_gt, $price_gte, $price_lt, $price_lte, $start_time, $start_time_after, $start_time_before, $start_time_exists, $start_time_start, $start_time_strictly_after, $start_time_strictly_before, $_order_callee, $_order_caller, $_order_callid, $_order_direction, $_order_duration, $_order_endpoint_id, $_order_endpoint_name, $_order_endpoint_type, $_order_id, $_order_price, $_order_start_time, $_items_per_page, $_page, $_properties, $_pagination, $_timezone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBillableCallCollection'
     *
     * @param  string $callee (optional)
     * @param  string $callee_end (optional)
     * @param  string $callee_exact (optional)
     * @param  bool $callee_exists (optional)
     * @param  string $callee_partial (optional)
     * @param  string $callee_start (optional)
     * @param  string $caller (optional)
     * @param  string $caller_end (optional)
     * @param  string $caller_exact (optional)
     * @param  bool $caller_exists (optional)
     * @param  string $caller_partial (optional)
     * @param  string $caller_start (optional)
     * @param  string $callid (optional)
     * @param  string $callid_end (optional)
     * @param  string $callid_exact (optional)
     * @param  bool $callid_exists (optional)
     * @param  string $callid_partial (optional)
     * @param  string $callid_start (optional)
     * @param  string $ddi (optional)
     * @param  string $ddi2 (optional)
     * @param  bool $ddi_exists (optional)
     * @param  string $direction (optional)
     * @param  string $direction_end (optional)
     * @param  string $direction_exact (optional)
     * @param  bool $direction_exists (optional)
     * @param  string $direction_partial (optional)
     * @param  string $direction_start (optional)
     * @param  float $duration (optional)
     * @param  string $duration_between (optional)
     * @param  string $duration_gt (optional)
     * @param  string $duration_gte (optional)
     * @param  string $duration_lt (optional)
     * @param  string $duration_lte (optional)
     * @param  int $endpoint_id (optional)
     * @param  string $endpoint_id_between (optional)
     * @param  bool $endpoint_id_exists (optional)
     * @param  string $endpoint_id_gt (optional)
     * @param  string $endpoint_id_gte (optional)
     * @param  string $endpoint_id_lt (optional)
     * @param  string $endpoint_id_lte (optional)
     * @param  string $endpoint_name (optional)
     * @param  string $endpoint_name_end (optional)
     * @param  string $endpoint_name_exact (optional)
     * @param  bool $endpoint_name_exists (optional)
     * @param  string $endpoint_name_partial (optional)
     * @param  string $endpoint_name_start (optional)
     * @param  string $endpoint_type (optional)
     * @param  string $endpoint_type_end (optional)
     * @param  string $endpoint_type_exact (optional)
     * @param  bool $endpoint_type_exists (optional)
     * @param  string $endpoint_type_partial (optional)
     * @param  string $endpoint_type_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $price (optional)
     * @param  string $price_between (optional)
     * @param  bool $price_exists (optional)
     * @param  string $price_gt (optional)
     * @param  string $price_gte (optional)
     * @param  string $price_lt (optional)
     * @param  string $price_lte (optional)
     * @param  string $start_time (optional)
     * @param  string $start_time_after (optional)
     * @param  string $start_time_before (optional)
     * @param  bool $start_time_exists (optional)
     * @param  string $start_time_start (optional)
     * @param  string $start_time_strictly_after (optional)
     * @param  string $start_time_strictly_before (optional)
     * @param  string $_order_callee (optional)
     * @param  string $_order_caller (optional)
     * @param  string $_order_callid (optional)
     * @param  string $_order_direction (optional)
     * @param  string $_order_duration (optional)
     * @param  string $_order_endpoint_id (optional)
     * @param  string $_order_endpoint_name (optional)
     * @param  string $_order_endpoint_type (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_price (optional)
     * @param  string $_order_start_time (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  bool $_pagination (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBillableCallCollectionRequest($callee = null, $callee_end = null, $callee_exact = null, $callee_exists = null, $callee_partial = null, $callee_start = null, $caller = null, $caller_end = null, $caller_exact = null, $caller_exists = null, $caller_partial = null, $caller_start = null, $callid = null, $callid_end = null, $callid_exact = null, $callid_exists = null, $callid_partial = null, $callid_start = null, $ddi = null, $ddi2 = null, $ddi_exists = null, $direction = null, $direction_end = null, $direction_exact = null, $direction_exists = null, $direction_partial = null, $direction_start = null, $duration = null, $duration_between = null, $duration_gt = null, $duration_gte = null, $duration_lt = null, $duration_lte = null, $endpoint_id = null, $endpoint_id_between = null, $endpoint_id_exists = null, $endpoint_id_gt = null, $endpoint_id_gte = null, $endpoint_id_lt = null, $endpoint_id_lte = null, $endpoint_name = null, $endpoint_name_end = null, $endpoint_name_exact = null, $endpoint_name_exists = null, $endpoint_name_partial = null, $endpoint_name_start = null, $endpoint_type = null, $endpoint_type_end = null, $endpoint_type_exact = null, $endpoint_type_exists = null, $endpoint_type_partial = null, $endpoint_type_start = null, $id_exact = null, $price = null, $price_between = null, $price_exists = null, $price_gt = null, $price_gte = null, $price_lt = null, $price_lte = null, $start_time = null, $start_time_after = null, $start_time_before = null, $start_time_exists = null, $start_time_start = null, $start_time_strictly_after = null, $start_time_strictly_before = null, $_order_callee = null, $_order_caller = null, $_order_callid = null, $_order_direction = null, $_order_duration = null, $_order_endpoint_id = null, $_order_endpoint_name = null, $_order_endpoint_type = null, $_order_id = null, $_order_price = null, $_order_start_time = null, $_items_per_page = null, $_page = null, $_properties = null, $_pagination = null, $_timezone = null)
    {

        $resourcePath = '/billable_calls';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($callee !== null) {
            $queryParams['callee'] = ObjectSerializer::toQueryValue($callee);
        }
        // query params
        if ($callee_end !== null) {
            $queryParams['callee[end]'] = ObjectSerializer::toQueryValue($callee_end);
        }
        // query params
        if ($callee_exact !== null) {
            $queryParams['callee[exact]'] = ObjectSerializer::toQueryValue($callee_exact);
        }
        // query params
        if ($callee_exists !== null) {
            $queryParams['callee[exists]'] = ObjectSerializer::toQueryValue($callee_exists);
        }
        // query params
        if ($callee_partial !== null) {
            $queryParams['callee[partial]'] = ObjectSerializer::toQueryValue($callee_partial);
        }
        // query params
        if ($callee_start !== null) {
            $queryParams['callee[start]'] = ObjectSerializer::toQueryValue($callee_start);
        }
        // query params
        if ($caller !== null) {
            $queryParams['caller'] = ObjectSerializer::toQueryValue($caller);
        }
        // query params
        if ($caller_end !== null) {
            $queryParams['caller[end]'] = ObjectSerializer::toQueryValue($caller_end);
        }
        // query params
        if ($caller_exact !== null) {
            $queryParams['caller[exact]'] = ObjectSerializer::toQueryValue($caller_exact);
        }
        // query params
        if ($caller_exists !== null) {
            $queryParams['caller[exists]'] = ObjectSerializer::toQueryValue($caller_exists);
        }
        // query params
        if ($caller_partial !== null) {
            $queryParams['caller[partial]'] = ObjectSerializer::toQueryValue($caller_partial);
        }
        // query params
        if ($caller_start !== null) {
            $queryParams['caller[start]'] = ObjectSerializer::toQueryValue($caller_start);
        }
        // query params
        if ($callid !== null) {
            $queryParams['callid'] = ObjectSerializer::toQueryValue($callid);
        }
        // query params
        if ($callid_end !== null) {
            $queryParams['callid[end]'] = ObjectSerializer::toQueryValue($callid_end);
        }
        // query params
        if ($callid_exact !== null) {
            $queryParams['callid[exact]'] = ObjectSerializer::toQueryValue($callid_exact);
        }
        // query params
        if ($callid_exists !== null) {
            $queryParams['callid[exists]'] = ObjectSerializer::toQueryValue($callid_exists);
        }
        // query params
        if ($callid_partial !== null) {
            $queryParams['callid[partial]'] = ObjectSerializer::toQueryValue($callid_partial);
        }
        // query params
        if ($callid_start !== null) {
            $queryParams['callid[start]'] = ObjectSerializer::toQueryValue($callid_start);
        }
        // query params
        if ($ddi !== null) {
            $queryParams['ddi'] = ObjectSerializer::toQueryValue($ddi);
        }
        // query params
        if ($ddi2 !== null) {
            $queryParams['ddi[]'] = ObjectSerializer::toQueryValue($ddi2);
        }
        // query params
        if ($ddi_exists !== null) {
            $queryParams['ddi[exists]'] = ObjectSerializer::toQueryValue($ddi_exists);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($direction_end !== null) {
            $queryParams['direction[end]'] = ObjectSerializer::toQueryValue($direction_end);
        }
        // query params
        if ($direction_exact !== null) {
            $queryParams['direction[exact]'] = ObjectSerializer::toQueryValue($direction_exact);
        }
        // query params
        if ($direction_exists !== null) {
            $queryParams['direction[exists]'] = ObjectSerializer::toQueryValue($direction_exists);
        }
        // query params
        if ($direction_partial !== null) {
            $queryParams['direction[partial]'] = ObjectSerializer::toQueryValue($direction_partial);
        }
        // query params
        if ($direction_start !== null) {
            $queryParams['direction[start]'] = ObjectSerializer::toQueryValue($direction_start);
        }
        // query params
        if ($duration !== null) {
            $queryParams['duration'] = ObjectSerializer::toQueryValue($duration);
        }
        // query params
        if ($duration_between !== null) {
            $queryParams['duration[between]'] = ObjectSerializer::toQueryValue($duration_between);
        }
        // query params
        if ($duration_gt !== null) {
            $queryParams['duration[gt]'] = ObjectSerializer::toQueryValue($duration_gt);
        }
        // query params
        if ($duration_gte !== null) {
            $queryParams['duration[gte]'] = ObjectSerializer::toQueryValue($duration_gte);
        }
        // query params
        if ($duration_lt !== null) {
            $queryParams['duration[lt]'] = ObjectSerializer::toQueryValue($duration_lt);
        }
        // query params
        if ($duration_lte !== null) {
            $queryParams['duration[lte]'] = ObjectSerializer::toQueryValue($duration_lte);
        }
        // query params
        if ($endpoint_id !== null) {
            $queryParams['endpointId'] = ObjectSerializer::toQueryValue($endpoint_id);
        }
        // query params
        if ($endpoint_id_between !== null) {
            $queryParams['endpointId[between]'] = ObjectSerializer::toQueryValue($endpoint_id_between);
        }
        // query params
        if ($endpoint_id_exists !== null) {
            $queryParams['endpointId[exists]'] = ObjectSerializer::toQueryValue($endpoint_id_exists);
        }
        // query params
        if ($endpoint_id_gt !== null) {
            $queryParams['endpointId[gt]'] = ObjectSerializer::toQueryValue($endpoint_id_gt);
        }
        // query params
        if ($endpoint_id_gte !== null) {
            $queryParams['endpointId[gte]'] = ObjectSerializer::toQueryValue($endpoint_id_gte);
        }
        // query params
        if ($endpoint_id_lt !== null) {
            $queryParams['endpointId[lt]'] = ObjectSerializer::toQueryValue($endpoint_id_lt);
        }
        // query params
        if ($endpoint_id_lte !== null) {
            $queryParams['endpointId[lte]'] = ObjectSerializer::toQueryValue($endpoint_id_lte);
        }
        // query params
        if ($endpoint_name !== null) {
            $queryParams['endpointName'] = ObjectSerializer::toQueryValue($endpoint_name);
        }
        // query params
        if ($endpoint_name_end !== null) {
            $queryParams['endpointName[end]'] = ObjectSerializer::toQueryValue($endpoint_name_end);
        }
        // query params
        if ($endpoint_name_exact !== null) {
            $queryParams['endpointName[exact]'] = ObjectSerializer::toQueryValue($endpoint_name_exact);
        }
        // query params
        if ($endpoint_name_exists !== null) {
            $queryParams['endpointName[exists]'] = ObjectSerializer::toQueryValue($endpoint_name_exists);
        }
        // query params
        if ($endpoint_name_partial !== null) {
            $queryParams['endpointName[partial]'] = ObjectSerializer::toQueryValue($endpoint_name_partial);
        }
        // query params
        if ($endpoint_name_start !== null) {
            $queryParams['endpointName[start]'] = ObjectSerializer::toQueryValue($endpoint_name_start);
        }
        // query params
        if ($endpoint_type !== null) {
            $queryParams['endpointType'] = ObjectSerializer::toQueryValue($endpoint_type);
        }
        // query params
        if ($endpoint_type_end !== null) {
            $queryParams['endpointType[end]'] = ObjectSerializer::toQueryValue($endpoint_type_end);
        }
        // query params
        if ($endpoint_type_exact !== null) {
            $queryParams['endpointType[exact]'] = ObjectSerializer::toQueryValue($endpoint_type_exact);
        }
        // query params
        if ($endpoint_type_exists !== null) {
            $queryParams['endpointType[exists]'] = ObjectSerializer::toQueryValue($endpoint_type_exists);
        }
        // query params
        if ($endpoint_type_partial !== null) {
            $queryParams['endpointType[partial]'] = ObjectSerializer::toQueryValue($endpoint_type_partial);
        }
        // query params
        if ($endpoint_type_start !== null) {
            $queryParams['endpointType[start]'] = ObjectSerializer::toQueryValue($endpoint_type_start);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($price !== null) {
            $queryParams['price'] = ObjectSerializer::toQueryValue($price);
        }
        // query params
        if ($price_between !== null) {
            $queryParams['price[between]'] = ObjectSerializer::toQueryValue($price_between);
        }
        // query params
        if ($price_exists !== null) {
            $queryParams['price[exists]'] = ObjectSerializer::toQueryValue($price_exists);
        }
        // query params
        if ($price_gt !== null) {
            $queryParams['price[gt]'] = ObjectSerializer::toQueryValue($price_gt);
        }
        // query params
        if ($price_gte !== null) {
            $queryParams['price[gte]'] = ObjectSerializer::toQueryValue($price_gte);
        }
        // query params
        if ($price_lt !== null) {
            $queryParams['price[lt]'] = ObjectSerializer::toQueryValue($price_lt);
        }
        // query params
        if ($price_lte !== null) {
            $queryParams['price[lte]'] = ObjectSerializer::toQueryValue($price_lte);
        }
        // query params
        if ($start_time !== null) {
            $queryParams['startTime'] = ObjectSerializer::toQueryValue($start_time);
        }
        // query params
        if ($start_time_after !== null) {
            $queryParams['startTime[after]'] = ObjectSerializer::toQueryValue($start_time_after);
        }
        // query params
        if ($start_time_before !== null) {
            $queryParams['startTime[before]'] = ObjectSerializer::toQueryValue($start_time_before);
        }
        // query params
        if ($start_time_exists !== null) {
            $queryParams['startTime[exists]'] = ObjectSerializer::toQueryValue($start_time_exists);
        }
        // query params
        if ($start_time_start !== null) {
            $queryParams['startTime[start]'] = ObjectSerializer::toQueryValue($start_time_start);
        }
        // query params
        if ($start_time_strictly_after !== null) {
            $queryParams['startTime[strictly_after]'] = ObjectSerializer::toQueryValue($start_time_strictly_after);
        }
        // query params
        if ($start_time_strictly_before !== null) {
            $queryParams['startTime[strictly_before]'] = ObjectSerializer::toQueryValue($start_time_strictly_before);
        }
        // query params
        if ($_order_callee !== null) {
            $queryParams['_order[callee]'] = ObjectSerializer::toQueryValue($_order_callee);
        }
        // query params
        if ($_order_caller !== null) {
            $queryParams['_order[caller]'] = ObjectSerializer::toQueryValue($_order_caller);
        }
        // query params
        if ($_order_callid !== null) {
            $queryParams['_order[callid]'] = ObjectSerializer::toQueryValue($_order_callid);
        }
        // query params
        if ($_order_direction !== null) {
            $queryParams['_order[direction]'] = ObjectSerializer::toQueryValue($_order_direction);
        }
        // query params
        if ($_order_duration !== null) {
            $queryParams['_order[duration]'] = ObjectSerializer::toQueryValue($_order_duration);
        }
        // query params
        if ($_order_endpoint_id !== null) {
            $queryParams['_order[endpointId]'] = ObjectSerializer::toQueryValue($_order_endpoint_id);
        }
        // query params
        if ($_order_endpoint_name !== null) {
            $queryParams['_order[endpointName]'] = ObjectSerializer::toQueryValue($_order_endpoint_name);
        }
        // query params
        if ($_order_endpoint_type !== null) {
            $queryParams['_order[endpointType]'] = ObjectSerializer::toQueryValue($_order_endpoint_type);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_price !== null) {
            $queryParams['_order[price]'] = ObjectSerializer::toQueryValue($_order_price);
        }
        // query params
        if ($_order_start_time !== null) {
            $queryParams['_order[startTime]'] = ObjectSerializer::toQueryValue($_order_start_time);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }
        // query params
        if ($_pagination !== null) {
            $queryParams['_pagination'] = ObjectSerializer::toQueryValue($_pagination);
        }
        // query params
        if ($_timezone !== null) {
            $queryParams['_timezone'] = ObjectSerializer::toQueryValue($_timezone);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json', 'text/csv']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json', 'text/csv'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBillableCallItem
     *
     * Retrieves a BillableCall resource.
     *
     * @param  string $id id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\BillableCallDetailed
     */
    public function getBillableCallItem($id, $_timezone = null)
    {
        list($response) = $this->getBillableCallItemWithHttpInfo($id, $_timezone);
        return $response;
    }

    /**
     * Operation getBillableCallItemWithHttpInfo
     *
     * Retrieves a BillableCall resource.
     *
     * @param  string $id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\BillableCallDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBillableCallItemWithHttpInfo($id, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\BillableCallDetailed';
        $request = $this->getBillableCallItemRequest($id, $_timezone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\BillableCallDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBillableCallItemAsync
     *
     * Retrieves a BillableCall resource.
     *
     * @param  string $id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBillableCallItemAsync($id, $_timezone = null)
    {
        return $this->getBillableCallItemAsyncWithHttpInfo($id, $_timezone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBillableCallItemAsyncWithHttpInfo
     *
     * Retrieves a BillableCall resource.
     *
     * @param  string $id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBillableCallItemAsyncWithHttpInfo($id, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\BillableCallDetailed';
        $request = $this->getBillableCallItemRequest($id, $_timezone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBillableCallItem'
     *
     * @param  string $id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBillableCallItemRequest($id, $_timezone = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getBillableCallItem'
            );
        }

        $resourcePath = '/billable_calls/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_timezone !== null) {
            $queryParams['_timezone'] = ObjectSerializer::toQueryValue($_timezone);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCalendarCollection
     *
     * Retrieves the collection of Calendar resources.
     *
     * @param  int $id_exact id_exact (optional)
     * @param  string $name name (optional)
     * @param  string $name_end name_end (optional)
     * @param  string $name_exact name_exact (optional)
     * @param  string $name_partial name_partial (optional)
     * @param  string $name_start name_start (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_name _order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CalendarCollection[]
     */
    public function getCalendarCollection($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getCalendarCollectionWithHttpInfo($id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $_order_id, $_order_name, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getCalendarCollectionWithHttpInfo
     *
     * Retrieves the collection of Calendar resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CalendarCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCalendarCollectionWithHttpInfo($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\CalendarCollection[]';
        $request = $this->getCalendarCollectionRequest($id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $_order_id, $_order_name, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CalendarCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCalendarCollectionAsync
     *
     * Retrieves the collection of Calendar resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCalendarCollectionAsync($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getCalendarCollectionAsyncWithHttpInfo($id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $_order_id, $_order_name, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCalendarCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of Calendar resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCalendarCollectionAsyncWithHttpInfo($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\CalendarCollection[]';
        $request = $this->getCalendarCollectionRequest($id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $_order_id, $_order_name, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCalendarCollection'
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCalendarCollectionRequest($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/calendars';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_end !== null) {
            $queryParams['name[end]'] = ObjectSerializer::toQueryValue($name_end);
        }
        // query params
        if ($name_exact !== null) {
            $queryParams['name[exact]'] = ObjectSerializer::toQueryValue($name_exact);
        }
        // query params
        if ($name_partial !== null) {
            $queryParams['name[partial]'] = ObjectSerializer::toQueryValue($name_partial);
        }
        // query params
        if ($name_start !== null) {
            $queryParams['name[start]'] = ObjectSerializer::toQueryValue($name_start);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_name !== null) {
            $queryParams['_order[name]'] = ObjectSerializer::toQueryValue($_order_name);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCalendarItem
     *
     * Retrieves a Calendar resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CalendarDetailed
     */
    public function getCalendarItem($id)
    {
        list($response) = $this->getCalendarItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getCalendarItemWithHttpInfo
     *
     * Retrieves a Calendar resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CalendarDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCalendarItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\CalendarDetailed';
        $request = $this->getCalendarItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CalendarDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCalendarItemAsync
     *
     * Retrieves a Calendar resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCalendarItemAsync($id)
    {
        return $this->getCalendarItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCalendarItemAsyncWithHttpInfo
     *
     * Retrieves a Calendar resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCalendarItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\CalendarDetailed';
        $request = $this->getCalendarItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCalendarItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCalendarItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCalendarItem'
            );
        }

        $resourcePath = '/calendars/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCalendarPeriodCollection
     *
     * Retrieves the collection of CalendarPeriod resources.
     *
     * @param  string $calendar calendar (optional)
     * @param  string $calendar2 calendar2 (optional)
     * @param  string $end_date end_date (optional)
     * @param  string $end_date_after end_date_after (optional)
     * @param  string $end_date_before end_date_before (optional)
     * @param  string $end_date_start end_date_start (optional)
     * @param  string $end_date_strictly_after end_date_strictly_after (optional)
     * @param  string $end_date_strictly_before end_date_strictly_before (optional)
     * @param  string $extension extension (optional)
     * @param  string $extension2 extension2 (optional)
     * @param  bool $extension_exists extension_exists (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $locution locution (optional)
     * @param  string $locution2 locution2 (optional)
     * @param  bool $locution_exists locution_exists (optional)
     * @param  string $number_country number_country (optional)
     * @param  string $number_country2 number_country2 (optional)
     * @param  bool $number_country_exists number_country_exists (optional)
     * @param  string $route_type route_type (optional)
     * @param  string $route_type_end route_type_end (optional)
     * @param  string $route_type_exact route_type_exact (optional)
     * @param  bool $route_type_exists route_type_exists (optional)
     * @param  string $route_type_partial route_type_partial (optional)
     * @param  string $route_type_start route_type_start (optional)
     * @param  string $start_date start_date (optional)
     * @param  string $start_date_after start_date_after (optional)
     * @param  string $start_date_before start_date_before (optional)
     * @param  string $start_date_start start_date_start (optional)
     * @param  string $start_date_strictly_after start_date_strictly_after (optional)
     * @param  string $start_date_strictly_before start_date_strictly_before (optional)
     * @param  string $voice_mail_user voice_mail_user (optional)
     * @param  string $voice_mail_user2 voice_mail_user2 (optional)
     * @param  bool $voice_mail_user_exists voice_mail_user_exists (optional)
     * @param  string $_order_end_date _order_end_date (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_route_type _order_route_type (optional)
     * @param  string $_order_start_date _order_start_date (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CalendarPeriodCollection[]
     */
    public function getCalendarPeriodCollection($calendar = null, $calendar2 = null, $end_date = null, $end_date_after = null, $end_date_before = null, $end_date_start = null, $end_date_strictly_after = null, $end_date_strictly_before = null, $extension = null, $extension2 = null, $extension_exists = null, $id_exact = null, $locution = null, $locution2 = null, $locution_exists = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $route_type = null, $route_type_end = null, $route_type_exact = null, $route_type_exists = null, $route_type_partial = null, $route_type_start = null, $start_date = null, $start_date_after = null, $start_date_before = null, $start_date_start = null, $start_date_strictly_after = null, $start_date_strictly_before = null, $voice_mail_user = null, $voice_mail_user2 = null, $voice_mail_user_exists = null, $_order_end_date = null, $_order_id = null, $_order_route_type = null, $_order_start_date = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getCalendarPeriodCollectionWithHttpInfo($calendar, $calendar2, $end_date, $end_date_after, $end_date_before, $end_date_start, $end_date_strictly_after, $end_date_strictly_before, $extension, $extension2, $extension_exists, $id_exact, $locution, $locution2, $locution_exists, $number_country, $number_country2, $number_country_exists, $route_type, $route_type_end, $route_type_exact, $route_type_exists, $route_type_partial, $route_type_start, $start_date, $start_date_after, $start_date_before, $start_date_start, $start_date_strictly_after, $start_date_strictly_before, $voice_mail_user, $voice_mail_user2, $voice_mail_user_exists, $_order_end_date, $_order_id, $_order_route_type, $_order_start_date, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getCalendarPeriodCollectionWithHttpInfo
     *
     * Retrieves the collection of CalendarPeriod resources.
     *
     * @param  string $calendar (optional)
     * @param  string $calendar2 (optional)
     * @param  string $end_date (optional)
     * @param  string $end_date_after (optional)
     * @param  string $end_date_before (optional)
     * @param  string $end_date_start (optional)
     * @param  string $end_date_strictly_after (optional)
     * @param  string $end_date_strictly_before (optional)
     * @param  string $extension (optional)
     * @param  string $extension2 (optional)
     * @param  bool $extension_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $locution (optional)
     * @param  string $locution2 (optional)
     * @param  bool $locution_exists (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $route_type (optional)
     * @param  string $route_type_end (optional)
     * @param  string $route_type_exact (optional)
     * @param  bool $route_type_exists (optional)
     * @param  string $route_type_partial (optional)
     * @param  string $route_type_start (optional)
     * @param  string $start_date (optional)
     * @param  string $start_date_after (optional)
     * @param  string $start_date_before (optional)
     * @param  string $start_date_start (optional)
     * @param  string $start_date_strictly_after (optional)
     * @param  string $start_date_strictly_before (optional)
     * @param  string $voice_mail_user (optional)
     * @param  string $voice_mail_user2 (optional)
     * @param  bool $voice_mail_user_exists (optional)
     * @param  string $_order_end_date (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_route_type (optional)
     * @param  string $_order_start_date (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CalendarPeriodCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCalendarPeriodCollectionWithHttpInfo($calendar = null, $calendar2 = null, $end_date = null, $end_date_after = null, $end_date_before = null, $end_date_start = null, $end_date_strictly_after = null, $end_date_strictly_before = null, $extension = null, $extension2 = null, $extension_exists = null, $id_exact = null, $locution = null, $locution2 = null, $locution_exists = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $route_type = null, $route_type_end = null, $route_type_exact = null, $route_type_exists = null, $route_type_partial = null, $route_type_start = null, $start_date = null, $start_date_after = null, $start_date_before = null, $start_date_start = null, $start_date_strictly_after = null, $start_date_strictly_before = null, $voice_mail_user = null, $voice_mail_user2 = null, $voice_mail_user_exists = null, $_order_end_date = null, $_order_id = null, $_order_route_type = null, $_order_start_date = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\CalendarPeriodCollection[]';
        $request = $this->getCalendarPeriodCollectionRequest($calendar, $calendar2, $end_date, $end_date_after, $end_date_before, $end_date_start, $end_date_strictly_after, $end_date_strictly_before, $extension, $extension2, $extension_exists, $id_exact, $locution, $locution2, $locution_exists, $number_country, $number_country2, $number_country_exists, $route_type, $route_type_end, $route_type_exact, $route_type_exists, $route_type_partial, $route_type_start, $start_date, $start_date_after, $start_date_before, $start_date_start, $start_date_strictly_after, $start_date_strictly_before, $voice_mail_user, $voice_mail_user2, $voice_mail_user_exists, $_order_end_date, $_order_id, $_order_route_type, $_order_start_date, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CalendarPeriodCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCalendarPeriodCollectionAsync
     *
     * Retrieves the collection of CalendarPeriod resources.
     *
     * @param  string $calendar (optional)
     * @param  string $calendar2 (optional)
     * @param  string $end_date (optional)
     * @param  string $end_date_after (optional)
     * @param  string $end_date_before (optional)
     * @param  string $end_date_start (optional)
     * @param  string $end_date_strictly_after (optional)
     * @param  string $end_date_strictly_before (optional)
     * @param  string $extension (optional)
     * @param  string $extension2 (optional)
     * @param  bool $extension_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $locution (optional)
     * @param  string $locution2 (optional)
     * @param  bool $locution_exists (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $route_type (optional)
     * @param  string $route_type_end (optional)
     * @param  string $route_type_exact (optional)
     * @param  bool $route_type_exists (optional)
     * @param  string $route_type_partial (optional)
     * @param  string $route_type_start (optional)
     * @param  string $start_date (optional)
     * @param  string $start_date_after (optional)
     * @param  string $start_date_before (optional)
     * @param  string $start_date_start (optional)
     * @param  string $start_date_strictly_after (optional)
     * @param  string $start_date_strictly_before (optional)
     * @param  string $voice_mail_user (optional)
     * @param  string $voice_mail_user2 (optional)
     * @param  bool $voice_mail_user_exists (optional)
     * @param  string $_order_end_date (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_route_type (optional)
     * @param  string $_order_start_date (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCalendarPeriodCollectionAsync($calendar = null, $calendar2 = null, $end_date = null, $end_date_after = null, $end_date_before = null, $end_date_start = null, $end_date_strictly_after = null, $end_date_strictly_before = null, $extension = null, $extension2 = null, $extension_exists = null, $id_exact = null, $locution = null, $locution2 = null, $locution_exists = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $route_type = null, $route_type_end = null, $route_type_exact = null, $route_type_exists = null, $route_type_partial = null, $route_type_start = null, $start_date = null, $start_date_after = null, $start_date_before = null, $start_date_start = null, $start_date_strictly_after = null, $start_date_strictly_before = null, $voice_mail_user = null, $voice_mail_user2 = null, $voice_mail_user_exists = null, $_order_end_date = null, $_order_id = null, $_order_route_type = null, $_order_start_date = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getCalendarPeriodCollectionAsyncWithHttpInfo($calendar, $calendar2, $end_date, $end_date_after, $end_date_before, $end_date_start, $end_date_strictly_after, $end_date_strictly_before, $extension, $extension2, $extension_exists, $id_exact, $locution, $locution2, $locution_exists, $number_country, $number_country2, $number_country_exists, $route_type, $route_type_end, $route_type_exact, $route_type_exists, $route_type_partial, $route_type_start, $start_date, $start_date_after, $start_date_before, $start_date_start, $start_date_strictly_after, $start_date_strictly_before, $voice_mail_user, $voice_mail_user2, $voice_mail_user_exists, $_order_end_date, $_order_id, $_order_route_type, $_order_start_date, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCalendarPeriodCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of CalendarPeriod resources.
     *
     * @param  string $calendar (optional)
     * @param  string $calendar2 (optional)
     * @param  string $end_date (optional)
     * @param  string $end_date_after (optional)
     * @param  string $end_date_before (optional)
     * @param  string $end_date_start (optional)
     * @param  string $end_date_strictly_after (optional)
     * @param  string $end_date_strictly_before (optional)
     * @param  string $extension (optional)
     * @param  string $extension2 (optional)
     * @param  bool $extension_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $locution (optional)
     * @param  string $locution2 (optional)
     * @param  bool $locution_exists (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $route_type (optional)
     * @param  string $route_type_end (optional)
     * @param  string $route_type_exact (optional)
     * @param  bool $route_type_exists (optional)
     * @param  string $route_type_partial (optional)
     * @param  string $route_type_start (optional)
     * @param  string $start_date (optional)
     * @param  string $start_date_after (optional)
     * @param  string $start_date_before (optional)
     * @param  string $start_date_start (optional)
     * @param  string $start_date_strictly_after (optional)
     * @param  string $start_date_strictly_before (optional)
     * @param  string $voice_mail_user (optional)
     * @param  string $voice_mail_user2 (optional)
     * @param  bool $voice_mail_user_exists (optional)
     * @param  string $_order_end_date (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_route_type (optional)
     * @param  string $_order_start_date (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCalendarPeriodCollectionAsyncWithHttpInfo($calendar = null, $calendar2 = null, $end_date = null, $end_date_after = null, $end_date_before = null, $end_date_start = null, $end_date_strictly_after = null, $end_date_strictly_before = null, $extension = null, $extension2 = null, $extension_exists = null, $id_exact = null, $locution = null, $locution2 = null, $locution_exists = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $route_type = null, $route_type_end = null, $route_type_exact = null, $route_type_exists = null, $route_type_partial = null, $route_type_start = null, $start_date = null, $start_date_after = null, $start_date_before = null, $start_date_start = null, $start_date_strictly_after = null, $start_date_strictly_before = null, $voice_mail_user = null, $voice_mail_user2 = null, $voice_mail_user_exists = null, $_order_end_date = null, $_order_id = null, $_order_route_type = null, $_order_start_date = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\CalendarPeriodCollection[]';
        $request = $this->getCalendarPeriodCollectionRequest($calendar, $calendar2, $end_date, $end_date_after, $end_date_before, $end_date_start, $end_date_strictly_after, $end_date_strictly_before, $extension, $extension2, $extension_exists, $id_exact, $locution, $locution2, $locution_exists, $number_country, $number_country2, $number_country_exists, $route_type, $route_type_end, $route_type_exact, $route_type_exists, $route_type_partial, $route_type_start, $start_date, $start_date_after, $start_date_before, $start_date_start, $start_date_strictly_after, $start_date_strictly_before, $voice_mail_user, $voice_mail_user2, $voice_mail_user_exists, $_order_end_date, $_order_id, $_order_route_type, $_order_start_date, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCalendarPeriodCollection'
     *
     * @param  string $calendar (optional)
     * @param  string $calendar2 (optional)
     * @param  string $end_date (optional)
     * @param  string $end_date_after (optional)
     * @param  string $end_date_before (optional)
     * @param  string $end_date_start (optional)
     * @param  string $end_date_strictly_after (optional)
     * @param  string $end_date_strictly_before (optional)
     * @param  string $extension (optional)
     * @param  string $extension2 (optional)
     * @param  bool $extension_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $locution (optional)
     * @param  string $locution2 (optional)
     * @param  bool $locution_exists (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $route_type (optional)
     * @param  string $route_type_end (optional)
     * @param  string $route_type_exact (optional)
     * @param  bool $route_type_exists (optional)
     * @param  string $route_type_partial (optional)
     * @param  string $route_type_start (optional)
     * @param  string $start_date (optional)
     * @param  string $start_date_after (optional)
     * @param  string $start_date_before (optional)
     * @param  string $start_date_start (optional)
     * @param  string $start_date_strictly_after (optional)
     * @param  string $start_date_strictly_before (optional)
     * @param  string $voice_mail_user (optional)
     * @param  string $voice_mail_user2 (optional)
     * @param  bool $voice_mail_user_exists (optional)
     * @param  string $_order_end_date (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_route_type (optional)
     * @param  string $_order_start_date (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCalendarPeriodCollectionRequest($calendar = null, $calendar2 = null, $end_date = null, $end_date_after = null, $end_date_before = null, $end_date_start = null, $end_date_strictly_after = null, $end_date_strictly_before = null, $extension = null, $extension2 = null, $extension_exists = null, $id_exact = null, $locution = null, $locution2 = null, $locution_exists = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $route_type = null, $route_type_end = null, $route_type_exact = null, $route_type_exists = null, $route_type_partial = null, $route_type_start = null, $start_date = null, $start_date_after = null, $start_date_before = null, $start_date_start = null, $start_date_strictly_after = null, $start_date_strictly_before = null, $voice_mail_user = null, $voice_mail_user2 = null, $voice_mail_user_exists = null, $_order_end_date = null, $_order_id = null, $_order_route_type = null, $_order_start_date = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/calendar_periods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($calendar !== null) {
            $queryParams['calendar'] = ObjectSerializer::toQueryValue($calendar);
        }
        // query params
        if ($calendar2 !== null) {
            $queryParams['calendar[]'] = ObjectSerializer::toQueryValue($calendar2);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($end_date_after !== null) {
            $queryParams['endDate[after]'] = ObjectSerializer::toQueryValue($end_date_after);
        }
        // query params
        if ($end_date_before !== null) {
            $queryParams['endDate[before]'] = ObjectSerializer::toQueryValue($end_date_before);
        }
        // query params
        if ($end_date_start !== null) {
            $queryParams['endDate[start]'] = ObjectSerializer::toQueryValue($end_date_start);
        }
        // query params
        if ($end_date_strictly_after !== null) {
            $queryParams['endDate[strictly_after]'] = ObjectSerializer::toQueryValue($end_date_strictly_after);
        }
        // query params
        if ($end_date_strictly_before !== null) {
            $queryParams['endDate[strictly_before]'] = ObjectSerializer::toQueryValue($end_date_strictly_before);
        }
        // query params
        if ($extension !== null) {
            $queryParams['extension'] = ObjectSerializer::toQueryValue($extension);
        }
        // query params
        if ($extension2 !== null) {
            $queryParams['extension[]'] = ObjectSerializer::toQueryValue($extension2);
        }
        // query params
        if ($extension_exists !== null) {
            $queryParams['extension[exists]'] = ObjectSerializer::toQueryValue($extension_exists);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($locution !== null) {
            $queryParams['locution'] = ObjectSerializer::toQueryValue($locution);
        }
        // query params
        if ($locution2 !== null) {
            $queryParams['locution[]'] = ObjectSerializer::toQueryValue($locution2);
        }
        // query params
        if ($locution_exists !== null) {
            $queryParams['locution[exists]'] = ObjectSerializer::toQueryValue($locution_exists);
        }
        // query params
        if ($number_country !== null) {
            $queryParams['numberCountry'] = ObjectSerializer::toQueryValue($number_country);
        }
        // query params
        if ($number_country2 !== null) {
            $queryParams['numberCountry[]'] = ObjectSerializer::toQueryValue($number_country2);
        }
        // query params
        if ($number_country_exists !== null) {
            $queryParams['numberCountry[exists]'] = ObjectSerializer::toQueryValue($number_country_exists);
        }
        // query params
        if ($route_type !== null) {
            $queryParams['routeType'] = ObjectSerializer::toQueryValue($route_type);
        }
        // query params
        if ($route_type_end !== null) {
            $queryParams['routeType[end]'] = ObjectSerializer::toQueryValue($route_type_end);
        }
        // query params
        if ($route_type_exact !== null) {
            $queryParams['routeType[exact]'] = ObjectSerializer::toQueryValue($route_type_exact);
        }
        // query params
        if ($route_type_exists !== null) {
            $queryParams['routeType[exists]'] = ObjectSerializer::toQueryValue($route_type_exists);
        }
        // query params
        if ($route_type_partial !== null) {
            $queryParams['routeType[partial]'] = ObjectSerializer::toQueryValue($route_type_partial);
        }
        // query params
        if ($route_type_start !== null) {
            $queryParams['routeType[start]'] = ObjectSerializer::toQueryValue($route_type_start);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['startDate'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($start_date_after !== null) {
            $queryParams['startDate[after]'] = ObjectSerializer::toQueryValue($start_date_after);
        }
        // query params
        if ($start_date_before !== null) {
            $queryParams['startDate[before]'] = ObjectSerializer::toQueryValue($start_date_before);
        }
        // query params
        if ($start_date_start !== null) {
            $queryParams['startDate[start]'] = ObjectSerializer::toQueryValue($start_date_start);
        }
        // query params
        if ($start_date_strictly_after !== null) {
            $queryParams['startDate[strictly_after]'] = ObjectSerializer::toQueryValue($start_date_strictly_after);
        }
        // query params
        if ($start_date_strictly_before !== null) {
            $queryParams['startDate[strictly_before]'] = ObjectSerializer::toQueryValue($start_date_strictly_before);
        }
        // query params
        if ($voice_mail_user !== null) {
            $queryParams['voiceMailUser'] = ObjectSerializer::toQueryValue($voice_mail_user);
        }
        // query params
        if ($voice_mail_user2 !== null) {
            $queryParams['voiceMailUser[]'] = ObjectSerializer::toQueryValue($voice_mail_user2);
        }
        // query params
        if ($voice_mail_user_exists !== null) {
            $queryParams['voiceMailUser[exists]'] = ObjectSerializer::toQueryValue($voice_mail_user_exists);
        }
        // query params
        if ($_order_end_date !== null) {
            $queryParams['_order[endDate]'] = ObjectSerializer::toQueryValue($_order_end_date);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_route_type !== null) {
            $queryParams['_order[routeType]'] = ObjectSerializer::toQueryValue($_order_route_type);
        }
        // query params
        if ($_order_start_date !== null) {
            $queryParams['_order[startDate]'] = ObjectSerializer::toQueryValue($_order_start_date);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCalendarPeriodItem
     *
     * Retrieves a CalendarPeriod resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CalendarPeriodDetailed
     */
    public function getCalendarPeriodItem($id)
    {
        list($response) = $this->getCalendarPeriodItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getCalendarPeriodItemWithHttpInfo
     *
     * Retrieves a CalendarPeriod resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CalendarPeriodDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCalendarPeriodItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\CalendarPeriodDetailed';
        $request = $this->getCalendarPeriodItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CalendarPeriodDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCalendarPeriodItemAsync
     *
     * Retrieves a CalendarPeriod resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCalendarPeriodItemAsync($id)
    {
        return $this->getCalendarPeriodItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCalendarPeriodItemAsyncWithHttpInfo
     *
     * Retrieves a CalendarPeriod resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCalendarPeriodItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\CalendarPeriodDetailed';
        $request = $this->getCalendarPeriodItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCalendarPeriodItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCalendarPeriodItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCalendarPeriodItem'
            );
        }

        $resourcePath = '/calendar_periods/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCalendarPeriodsRelScheduleCollection
     *
     * Retrieves the collection of CalendarPeriodsRelSchedule resources.
     *
     * @param  string $calendar_period calendar_period (optional)
     * @param  int $calendar_period_calendar calendar_period_calendar (optional)
     * @param  string $calendar_period_end_date calendar_period_end_date (optional)
     * @param  int $calendar_period_extension calendar_period_extension (optional)
     * @param  int $calendar_period_locution calendar_period_locution (optional)
     * @param  int $calendar_period_number_country calendar_period_number_country (optional)
     * @param  string $calendar_period_number_value calendar_period_number_value (optional)
     * @param  string $calendar_period_route_type calendar_period_route_type (optional)
     * @param  string $calendar_period_start_date calendar_period_start_date (optional)
     * @param  int $calendar_period_voice_mail_user calendar_period_voice_mail_user (optional)
     * @param  string $calendar_period2 calendar_period2 (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $schedule schedule (optional)
     * @param  bool $schedule_friday schedule_friday (optional)
     * @param  bool $schedule_monday schedule_monday (optional)
     * @param  string $schedule_name schedule_name (optional)
     * @param  bool $schedule_saturday schedule_saturday (optional)
     * @param  bool $schedule_sunday schedule_sunday (optional)
     * @param  bool $schedule_thursday schedule_thursday (optional)
     * @param  string $schedule_time_in schedule_time_in (optional)
     * @param  string $schedule_timeout schedule_timeout (optional)
     * @param  bool $schedule_tuesday schedule_tuesday (optional)
     * @param  bool $schedule_wednesday schedule_wednesday (optional)
     * @param  string $schedule2 schedule2 (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CalendarPeriodsRelScheduleDetailedCollection[]
     */
    public function getCalendarPeriodsRelScheduleCollection($calendar_period = null, $calendar_period_calendar = null, $calendar_period_end_date = null, $calendar_period_extension = null, $calendar_period_locution = null, $calendar_period_number_country = null, $calendar_period_number_value = null, $calendar_period_route_type = null, $calendar_period_start_date = null, $calendar_period_voice_mail_user = null, $calendar_period2 = null, $id_exact = null, $schedule = null, $schedule_friday = null, $schedule_monday = null, $schedule_name = null, $schedule_saturday = null, $schedule_sunday = null, $schedule_thursday = null, $schedule_time_in = null, $schedule_timeout = null, $schedule_tuesday = null, $schedule_wednesday = null, $schedule2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getCalendarPeriodsRelScheduleCollectionWithHttpInfo($calendar_period, $calendar_period_calendar, $calendar_period_end_date, $calendar_period_extension, $calendar_period_locution, $calendar_period_number_country, $calendar_period_number_value, $calendar_period_route_type, $calendar_period_start_date, $calendar_period_voice_mail_user, $calendar_period2, $id_exact, $schedule, $schedule_friday, $schedule_monday, $schedule_name, $schedule_saturday, $schedule_sunday, $schedule_thursday, $schedule_time_in, $schedule_timeout, $schedule_tuesday, $schedule_wednesday, $schedule2, $_order_id, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getCalendarPeriodsRelScheduleCollectionWithHttpInfo
     *
     * Retrieves the collection of CalendarPeriodsRelSchedule resources.
     *
     * @param  string $calendar_period (optional)
     * @param  int $calendar_period_calendar (optional)
     * @param  string $calendar_period_end_date (optional)
     * @param  int $calendar_period_extension (optional)
     * @param  int $calendar_period_locution (optional)
     * @param  int $calendar_period_number_country (optional)
     * @param  string $calendar_period_number_value (optional)
     * @param  string $calendar_period_route_type (optional)
     * @param  string $calendar_period_start_date (optional)
     * @param  int $calendar_period_voice_mail_user (optional)
     * @param  string $calendar_period2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $schedule (optional)
     * @param  bool $schedule_friday (optional)
     * @param  bool $schedule_monday (optional)
     * @param  string $schedule_name (optional)
     * @param  bool $schedule_saturday (optional)
     * @param  bool $schedule_sunday (optional)
     * @param  bool $schedule_thursday (optional)
     * @param  string $schedule_time_in (optional)
     * @param  string $schedule_timeout (optional)
     * @param  bool $schedule_tuesday (optional)
     * @param  bool $schedule_wednesday (optional)
     * @param  string $schedule2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CalendarPeriodsRelScheduleDetailedCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCalendarPeriodsRelScheduleCollectionWithHttpInfo($calendar_period = null, $calendar_period_calendar = null, $calendar_period_end_date = null, $calendar_period_extension = null, $calendar_period_locution = null, $calendar_period_number_country = null, $calendar_period_number_value = null, $calendar_period_route_type = null, $calendar_period_start_date = null, $calendar_period_voice_mail_user = null, $calendar_period2 = null, $id_exact = null, $schedule = null, $schedule_friday = null, $schedule_monday = null, $schedule_name = null, $schedule_saturday = null, $schedule_sunday = null, $schedule_thursday = null, $schedule_time_in = null, $schedule_timeout = null, $schedule_tuesday = null, $schedule_wednesday = null, $schedule2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\CalendarPeriodsRelScheduleDetailedCollection[]';
        $request = $this->getCalendarPeriodsRelScheduleCollectionRequest($calendar_period, $calendar_period_calendar, $calendar_period_end_date, $calendar_period_extension, $calendar_period_locution, $calendar_period_number_country, $calendar_period_number_value, $calendar_period_route_type, $calendar_period_start_date, $calendar_period_voice_mail_user, $calendar_period2, $id_exact, $schedule, $schedule_friday, $schedule_monday, $schedule_name, $schedule_saturday, $schedule_sunday, $schedule_thursday, $schedule_time_in, $schedule_timeout, $schedule_tuesday, $schedule_wednesday, $schedule2, $_order_id, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CalendarPeriodsRelScheduleDetailedCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCalendarPeriodsRelScheduleCollectionAsync
     *
     * Retrieves the collection of CalendarPeriodsRelSchedule resources.
     *
     * @param  string $calendar_period (optional)
     * @param  int $calendar_period_calendar (optional)
     * @param  string $calendar_period_end_date (optional)
     * @param  int $calendar_period_extension (optional)
     * @param  int $calendar_period_locution (optional)
     * @param  int $calendar_period_number_country (optional)
     * @param  string $calendar_period_number_value (optional)
     * @param  string $calendar_period_route_type (optional)
     * @param  string $calendar_period_start_date (optional)
     * @param  int $calendar_period_voice_mail_user (optional)
     * @param  string $calendar_period2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $schedule (optional)
     * @param  bool $schedule_friday (optional)
     * @param  bool $schedule_monday (optional)
     * @param  string $schedule_name (optional)
     * @param  bool $schedule_saturday (optional)
     * @param  bool $schedule_sunday (optional)
     * @param  bool $schedule_thursday (optional)
     * @param  string $schedule_time_in (optional)
     * @param  string $schedule_timeout (optional)
     * @param  bool $schedule_tuesday (optional)
     * @param  bool $schedule_wednesday (optional)
     * @param  string $schedule2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCalendarPeriodsRelScheduleCollectionAsync($calendar_period = null, $calendar_period_calendar = null, $calendar_period_end_date = null, $calendar_period_extension = null, $calendar_period_locution = null, $calendar_period_number_country = null, $calendar_period_number_value = null, $calendar_period_route_type = null, $calendar_period_start_date = null, $calendar_period_voice_mail_user = null, $calendar_period2 = null, $id_exact = null, $schedule = null, $schedule_friday = null, $schedule_monday = null, $schedule_name = null, $schedule_saturday = null, $schedule_sunday = null, $schedule_thursday = null, $schedule_time_in = null, $schedule_timeout = null, $schedule_tuesday = null, $schedule_wednesday = null, $schedule2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getCalendarPeriodsRelScheduleCollectionAsyncWithHttpInfo($calendar_period, $calendar_period_calendar, $calendar_period_end_date, $calendar_period_extension, $calendar_period_locution, $calendar_period_number_country, $calendar_period_number_value, $calendar_period_route_type, $calendar_period_start_date, $calendar_period_voice_mail_user, $calendar_period2, $id_exact, $schedule, $schedule_friday, $schedule_monday, $schedule_name, $schedule_saturday, $schedule_sunday, $schedule_thursday, $schedule_time_in, $schedule_timeout, $schedule_tuesday, $schedule_wednesday, $schedule2, $_order_id, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCalendarPeriodsRelScheduleCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of CalendarPeriodsRelSchedule resources.
     *
     * @param  string $calendar_period (optional)
     * @param  int $calendar_period_calendar (optional)
     * @param  string $calendar_period_end_date (optional)
     * @param  int $calendar_period_extension (optional)
     * @param  int $calendar_period_locution (optional)
     * @param  int $calendar_period_number_country (optional)
     * @param  string $calendar_period_number_value (optional)
     * @param  string $calendar_period_route_type (optional)
     * @param  string $calendar_period_start_date (optional)
     * @param  int $calendar_period_voice_mail_user (optional)
     * @param  string $calendar_period2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $schedule (optional)
     * @param  bool $schedule_friday (optional)
     * @param  bool $schedule_monday (optional)
     * @param  string $schedule_name (optional)
     * @param  bool $schedule_saturday (optional)
     * @param  bool $schedule_sunday (optional)
     * @param  bool $schedule_thursday (optional)
     * @param  string $schedule_time_in (optional)
     * @param  string $schedule_timeout (optional)
     * @param  bool $schedule_tuesday (optional)
     * @param  bool $schedule_wednesday (optional)
     * @param  string $schedule2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCalendarPeriodsRelScheduleCollectionAsyncWithHttpInfo($calendar_period = null, $calendar_period_calendar = null, $calendar_period_end_date = null, $calendar_period_extension = null, $calendar_period_locution = null, $calendar_period_number_country = null, $calendar_period_number_value = null, $calendar_period_route_type = null, $calendar_period_start_date = null, $calendar_period_voice_mail_user = null, $calendar_period2 = null, $id_exact = null, $schedule = null, $schedule_friday = null, $schedule_monday = null, $schedule_name = null, $schedule_saturday = null, $schedule_sunday = null, $schedule_thursday = null, $schedule_time_in = null, $schedule_timeout = null, $schedule_tuesday = null, $schedule_wednesday = null, $schedule2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\CalendarPeriodsRelScheduleDetailedCollection[]';
        $request = $this->getCalendarPeriodsRelScheduleCollectionRequest($calendar_period, $calendar_period_calendar, $calendar_period_end_date, $calendar_period_extension, $calendar_period_locution, $calendar_period_number_country, $calendar_period_number_value, $calendar_period_route_type, $calendar_period_start_date, $calendar_period_voice_mail_user, $calendar_period2, $id_exact, $schedule, $schedule_friday, $schedule_monday, $schedule_name, $schedule_saturday, $schedule_sunday, $schedule_thursday, $schedule_time_in, $schedule_timeout, $schedule_tuesday, $schedule_wednesday, $schedule2, $_order_id, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCalendarPeriodsRelScheduleCollection'
     *
     * @param  string $calendar_period (optional)
     * @param  int $calendar_period_calendar (optional)
     * @param  string $calendar_period_end_date (optional)
     * @param  int $calendar_period_extension (optional)
     * @param  int $calendar_period_locution (optional)
     * @param  int $calendar_period_number_country (optional)
     * @param  string $calendar_period_number_value (optional)
     * @param  string $calendar_period_route_type (optional)
     * @param  string $calendar_period_start_date (optional)
     * @param  int $calendar_period_voice_mail_user (optional)
     * @param  string $calendar_period2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $schedule (optional)
     * @param  bool $schedule_friday (optional)
     * @param  bool $schedule_monday (optional)
     * @param  string $schedule_name (optional)
     * @param  bool $schedule_saturday (optional)
     * @param  bool $schedule_sunday (optional)
     * @param  bool $schedule_thursday (optional)
     * @param  string $schedule_time_in (optional)
     * @param  string $schedule_timeout (optional)
     * @param  bool $schedule_tuesday (optional)
     * @param  bool $schedule_wednesday (optional)
     * @param  string $schedule2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCalendarPeriodsRelScheduleCollectionRequest($calendar_period = null, $calendar_period_calendar = null, $calendar_period_end_date = null, $calendar_period_extension = null, $calendar_period_locution = null, $calendar_period_number_country = null, $calendar_period_number_value = null, $calendar_period_route_type = null, $calendar_period_start_date = null, $calendar_period_voice_mail_user = null, $calendar_period2 = null, $id_exact = null, $schedule = null, $schedule_friday = null, $schedule_monday = null, $schedule_name = null, $schedule_saturday = null, $schedule_sunday = null, $schedule_thursday = null, $schedule_time_in = null, $schedule_timeout = null, $schedule_tuesday = null, $schedule_wednesday = null, $schedule2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/calendar_periods_rel_schedules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($calendar_period !== null) {
            $queryParams['calendarPeriod'] = ObjectSerializer::toQueryValue($calendar_period);
        }
        // query params
        if ($calendar_period_calendar !== null) {
            $queryParams['calendarPeriod.calendar'] = ObjectSerializer::toQueryValue($calendar_period_calendar);
        }
        // query params
        if ($calendar_period_end_date !== null) {
            $queryParams['calendarPeriod.endDate'] = ObjectSerializer::toQueryValue($calendar_period_end_date);
        }
        // query params
        if ($calendar_period_extension !== null) {
            $queryParams['calendarPeriod.extension'] = ObjectSerializer::toQueryValue($calendar_period_extension);
        }
        // query params
        if ($calendar_period_locution !== null) {
            $queryParams['calendarPeriod.locution'] = ObjectSerializer::toQueryValue($calendar_period_locution);
        }
        // query params
        if ($calendar_period_number_country !== null) {
            $queryParams['calendarPeriod.numberCountry'] = ObjectSerializer::toQueryValue($calendar_period_number_country);
        }
        // query params
        if ($calendar_period_number_value !== null) {
            $queryParams['calendarPeriod.numberValue'] = ObjectSerializer::toQueryValue($calendar_period_number_value);
        }
        // query params
        if ($calendar_period_route_type !== null) {
            $queryParams['calendarPeriod.routeType'] = ObjectSerializer::toQueryValue($calendar_period_route_type);
        }
        // query params
        if ($calendar_period_start_date !== null) {
            $queryParams['calendarPeriod.startDate'] = ObjectSerializer::toQueryValue($calendar_period_start_date);
        }
        // query params
        if ($calendar_period_voice_mail_user !== null) {
            $queryParams['calendarPeriod.voiceMailUser'] = ObjectSerializer::toQueryValue($calendar_period_voice_mail_user);
        }
        // query params
        if ($calendar_period2 !== null) {
            $queryParams['calendarPeriod[]'] = ObjectSerializer::toQueryValue($calendar_period2);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($schedule !== null) {
            $queryParams['schedule'] = ObjectSerializer::toQueryValue($schedule);
        }
        // query params
        if ($schedule_friday !== null) {
            $queryParams['schedule.friday'] = ObjectSerializer::toQueryValue($schedule_friday);
        }
        // query params
        if ($schedule_monday !== null) {
            $queryParams['schedule.monday'] = ObjectSerializer::toQueryValue($schedule_monday);
        }
        // query params
        if ($schedule_name !== null) {
            $queryParams['schedule.name'] = ObjectSerializer::toQueryValue($schedule_name);
        }
        // query params
        if ($schedule_saturday !== null) {
            $queryParams['schedule.saturday'] = ObjectSerializer::toQueryValue($schedule_saturday);
        }
        // query params
        if ($schedule_sunday !== null) {
            $queryParams['schedule.sunday'] = ObjectSerializer::toQueryValue($schedule_sunday);
        }
        // query params
        if ($schedule_thursday !== null) {
            $queryParams['schedule.thursday'] = ObjectSerializer::toQueryValue($schedule_thursday);
        }
        // query params
        if ($schedule_time_in !== null) {
            $queryParams['schedule.timeIn'] = ObjectSerializer::toQueryValue($schedule_time_in);
        }
        // query params
        if ($schedule_timeout !== null) {
            $queryParams['schedule.timeout'] = ObjectSerializer::toQueryValue($schedule_timeout);
        }
        // query params
        if ($schedule_tuesday !== null) {
            $queryParams['schedule.tuesday'] = ObjectSerializer::toQueryValue($schedule_tuesday);
        }
        // query params
        if ($schedule_wednesday !== null) {
            $queryParams['schedule.wednesday'] = ObjectSerializer::toQueryValue($schedule_wednesday);
        }
        // query params
        if ($schedule2 !== null) {
            $queryParams['schedule[]'] = ObjectSerializer::toQueryValue($schedule2);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCalendarPeriodsRelScheduleItem
     *
     * Retrieves a CalendarPeriodsRelSchedule resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CalendarPeriodsRelScheduleDetailed
     */
    public function getCalendarPeriodsRelScheduleItem($id)
    {
        list($response) = $this->getCalendarPeriodsRelScheduleItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getCalendarPeriodsRelScheduleItemWithHttpInfo
     *
     * Retrieves a CalendarPeriodsRelSchedule resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CalendarPeriodsRelScheduleDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCalendarPeriodsRelScheduleItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\CalendarPeriodsRelScheduleDetailed';
        $request = $this->getCalendarPeriodsRelScheduleItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CalendarPeriodsRelScheduleDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCalendarPeriodsRelScheduleItemAsync
     *
     * Retrieves a CalendarPeriodsRelSchedule resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCalendarPeriodsRelScheduleItemAsync($id)
    {
        return $this->getCalendarPeriodsRelScheduleItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCalendarPeriodsRelScheduleItemAsyncWithHttpInfo
     *
     * Retrieves a CalendarPeriodsRelSchedule resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCalendarPeriodsRelScheduleItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\CalendarPeriodsRelScheduleDetailed';
        $request = $this->getCalendarPeriodsRelScheduleItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCalendarPeriodsRelScheduleItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCalendarPeriodsRelScheduleItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCalendarPeriodsRelScheduleItem'
            );
        }

        $resourcePath = '/calendar_periods_rel_schedules/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCallAclCollection
     *
     * Retrieves the collection of CallAcl resources.
     *
     * @param  string $default_policy default_policy (optional)
     * @param  string $default_policy_end default_policy_end (optional)
     * @param  string $default_policy_exact default_policy_exact (optional)
     * @param  string $default_policy_partial default_policy_partial (optional)
     * @param  string $default_policy_start default_policy_start (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $name name (optional)
     * @param  string $name_end name_end (optional)
     * @param  string $name_exact name_exact (optional)
     * @param  string $name_partial name_partial (optional)
     * @param  string $name_start name_start (optional)
     * @param  string $_order_default_policy _order_default_policy (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_name _order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CallAclCollection[]
     */
    public function getCallAclCollection($default_policy = null, $default_policy_end = null, $default_policy_exact = null, $default_policy_partial = null, $default_policy_start = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_default_policy = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getCallAclCollectionWithHttpInfo($default_policy, $default_policy_end, $default_policy_exact, $default_policy_partial, $default_policy_start, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $_order_default_policy, $_order_id, $_order_name, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getCallAclCollectionWithHttpInfo
     *
     * Retrieves the collection of CallAcl resources.
     *
     * @param  string $default_policy (optional)
     * @param  string $default_policy_end (optional)
     * @param  string $default_policy_exact (optional)
     * @param  string $default_policy_partial (optional)
     * @param  string $default_policy_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $_order_default_policy (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CallAclCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCallAclCollectionWithHttpInfo($default_policy = null, $default_policy_end = null, $default_policy_exact = null, $default_policy_partial = null, $default_policy_start = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_default_policy = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\CallAclCollection[]';
        $request = $this->getCallAclCollectionRequest($default_policy, $default_policy_end, $default_policy_exact, $default_policy_partial, $default_policy_start, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $_order_default_policy, $_order_id, $_order_name, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CallAclCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCallAclCollectionAsync
     *
     * Retrieves the collection of CallAcl resources.
     *
     * @param  string $default_policy (optional)
     * @param  string $default_policy_end (optional)
     * @param  string $default_policy_exact (optional)
     * @param  string $default_policy_partial (optional)
     * @param  string $default_policy_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $_order_default_policy (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallAclCollectionAsync($default_policy = null, $default_policy_end = null, $default_policy_exact = null, $default_policy_partial = null, $default_policy_start = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_default_policy = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getCallAclCollectionAsyncWithHttpInfo($default_policy, $default_policy_end, $default_policy_exact, $default_policy_partial, $default_policy_start, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $_order_default_policy, $_order_id, $_order_name, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCallAclCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of CallAcl resources.
     *
     * @param  string $default_policy (optional)
     * @param  string $default_policy_end (optional)
     * @param  string $default_policy_exact (optional)
     * @param  string $default_policy_partial (optional)
     * @param  string $default_policy_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $_order_default_policy (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallAclCollectionAsyncWithHttpInfo($default_policy = null, $default_policy_end = null, $default_policy_exact = null, $default_policy_partial = null, $default_policy_start = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_default_policy = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\CallAclCollection[]';
        $request = $this->getCallAclCollectionRequest($default_policy, $default_policy_end, $default_policy_exact, $default_policy_partial, $default_policy_start, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $_order_default_policy, $_order_id, $_order_name, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCallAclCollection'
     *
     * @param  string $default_policy (optional)
     * @param  string $default_policy_end (optional)
     * @param  string $default_policy_exact (optional)
     * @param  string $default_policy_partial (optional)
     * @param  string $default_policy_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $_order_default_policy (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCallAclCollectionRequest($default_policy = null, $default_policy_end = null, $default_policy_exact = null, $default_policy_partial = null, $default_policy_start = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_default_policy = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/call_acls';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($default_policy !== null) {
            $queryParams['defaultPolicy'] = ObjectSerializer::toQueryValue($default_policy);
        }
        // query params
        if ($default_policy_end !== null) {
            $queryParams['defaultPolicy[end]'] = ObjectSerializer::toQueryValue($default_policy_end);
        }
        // query params
        if ($default_policy_exact !== null) {
            $queryParams['defaultPolicy[exact]'] = ObjectSerializer::toQueryValue($default_policy_exact);
        }
        // query params
        if ($default_policy_partial !== null) {
            $queryParams['defaultPolicy[partial]'] = ObjectSerializer::toQueryValue($default_policy_partial);
        }
        // query params
        if ($default_policy_start !== null) {
            $queryParams['defaultPolicy[start]'] = ObjectSerializer::toQueryValue($default_policy_start);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_end !== null) {
            $queryParams['name[end]'] = ObjectSerializer::toQueryValue($name_end);
        }
        // query params
        if ($name_exact !== null) {
            $queryParams['name[exact]'] = ObjectSerializer::toQueryValue($name_exact);
        }
        // query params
        if ($name_partial !== null) {
            $queryParams['name[partial]'] = ObjectSerializer::toQueryValue($name_partial);
        }
        // query params
        if ($name_start !== null) {
            $queryParams['name[start]'] = ObjectSerializer::toQueryValue($name_start);
        }
        // query params
        if ($_order_default_policy !== null) {
            $queryParams['_order[defaultPolicy]'] = ObjectSerializer::toQueryValue($_order_default_policy);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_name !== null) {
            $queryParams['_order[name]'] = ObjectSerializer::toQueryValue($_order_name);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCallAclItem
     *
     * Retrieves a CallAcl resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CallAclDetailed
     */
    public function getCallAclItem($id)
    {
        list($response) = $this->getCallAclItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getCallAclItemWithHttpInfo
     *
     * Retrieves a CallAcl resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CallAclDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCallAclItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\CallAclDetailed';
        $request = $this->getCallAclItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CallAclDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCallAclItemAsync
     *
     * Retrieves a CallAcl resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallAclItemAsync($id)
    {
        return $this->getCallAclItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCallAclItemAsyncWithHttpInfo
     *
     * Retrieves a CallAcl resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallAclItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\CallAclDetailed';
        $request = $this->getCallAclItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCallAclItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCallAclItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCallAclItem'
            );
        }

        $resourcePath = '/call_acls/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCallAclRelMatchListCollection
     *
     * Retrieves the collection of CallAclRelMatchList resources.
     *
     * @param  string $call_acl call_acl (optional)
     * @param  string $call_acl_default_policy call_acl_default_policy (optional)
     * @param  string $call_acl_name call_acl_name (optional)
     * @param  string $call_acl2 call_acl2 (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $match_list match_list (optional)
     * @param  string $match_list_name match_list_name (optional)
     * @param  string $match_list2 match_list2 (optional)
     * @param  string $policy policy (optional)
     * @param  string $policy_end policy_end (optional)
     * @param  string $policy_exact policy_exact (optional)
     * @param  string $policy_partial policy_partial (optional)
     * @param  string $policy_start policy_start (optional)
     * @param  int $priority priority (optional)
     * @param  string $priority_between priority_between (optional)
     * @param  string $priority_gt priority_gt (optional)
     * @param  string $priority_gte priority_gte (optional)
     * @param  string $priority_lt priority_lt (optional)
     * @param  string $priority_lte priority_lte (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_policy _order_policy (optional)
     * @param  string $_order_priority _order_priority (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CallAclRelMatchListDetailedCollection[]
     */
    public function getCallAclRelMatchListCollection($call_acl = null, $call_acl_default_policy = null, $call_acl_name = null, $call_acl2 = null, $id_exact = null, $match_list = null, $match_list_name = null, $match_list2 = null, $policy = null, $policy_end = null, $policy_exact = null, $policy_partial = null, $policy_start = null, $priority = null, $priority_between = null, $priority_gt = null, $priority_gte = null, $priority_lt = null, $priority_lte = null, $_order_id = null, $_order_policy = null, $_order_priority = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getCallAclRelMatchListCollectionWithHttpInfo($call_acl, $call_acl_default_policy, $call_acl_name, $call_acl2, $id_exact, $match_list, $match_list_name, $match_list2, $policy, $policy_end, $policy_exact, $policy_partial, $policy_start, $priority, $priority_between, $priority_gt, $priority_gte, $priority_lt, $priority_lte, $_order_id, $_order_policy, $_order_priority, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getCallAclRelMatchListCollectionWithHttpInfo
     *
     * Retrieves the collection of CallAclRelMatchList resources.
     *
     * @param  string $call_acl (optional)
     * @param  string $call_acl_default_policy (optional)
     * @param  string $call_acl_name (optional)
     * @param  string $call_acl2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $match_list (optional)
     * @param  string $match_list_name (optional)
     * @param  string $match_list2 (optional)
     * @param  string $policy (optional)
     * @param  string $policy_end (optional)
     * @param  string $policy_exact (optional)
     * @param  string $policy_partial (optional)
     * @param  string $policy_start (optional)
     * @param  int $priority (optional)
     * @param  string $priority_between (optional)
     * @param  string $priority_gt (optional)
     * @param  string $priority_gte (optional)
     * @param  string $priority_lt (optional)
     * @param  string $priority_lte (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_policy (optional)
     * @param  string $_order_priority (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CallAclRelMatchListDetailedCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCallAclRelMatchListCollectionWithHttpInfo($call_acl = null, $call_acl_default_policy = null, $call_acl_name = null, $call_acl2 = null, $id_exact = null, $match_list = null, $match_list_name = null, $match_list2 = null, $policy = null, $policy_end = null, $policy_exact = null, $policy_partial = null, $policy_start = null, $priority = null, $priority_between = null, $priority_gt = null, $priority_gte = null, $priority_lt = null, $priority_lte = null, $_order_id = null, $_order_policy = null, $_order_priority = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\CallAclRelMatchListDetailedCollection[]';
        $request = $this->getCallAclRelMatchListCollectionRequest($call_acl, $call_acl_default_policy, $call_acl_name, $call_acl2, $id_exact, $match_list, $match_list_name, $match_list2, $policy, $policy_end, $policy_exact, $policy_partial, $policy_start, $priority, $priority_between, $priority_gt, $priority_gte, $priority_lt, $priority_lte, $_order_id, $_order_policy, $_order_priority, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CallAclRelMatchListDetailedCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCallAclRelMatchListCollectionAsync
     *
     * Retrieves the collection of CallAclRelMatchList resources.
     *
     * @param  string $call_acl (optional)
     * @param  string $call_acl_default_policy (optional)
     * @param  string $call_acl_name (optional)
     * @param  string $call_acl2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $match_list (optional)
     * @param  string $match_list_name (optional)
     * @param  string $match_list2 (optional)
     * @param  string $policy (optional)
     * @param  string $policy_end (optional)
     * @param  string $policy_exact (optional)
     * @param  string $policy_partial (optional)
     * @param  string $policy_start (optional)
     * @param  int $priority (optional)
     * @param  string $priority_between (optional)
     * @param  string $priority_gt (optional)
     * @param  string $priority_gte (optional)
     * @param  string $priority_lt (optional)
     * @param  string $priority_lte (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_policy (optional)
     * @param  string $_order_priority (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallAclRelMatchListCollectionAsync($call_acl = null, $call_acl_default_policy = null, $call_acl_name = null, $call_acl2 = null, $id_exact = null, $match_list = null, $match_list_name = null, $match_list2 = null, $policy = null, $policy_end = null, $policy_exact = null, $policy_partial = null, $policy_start = null, $priority = null, $priority_between = null, $priority_gt = null, $priority_gte = null, $priority_lt = null, $priority_lte = null, $_order_id = null, $_order_policy = null, $_order_priority = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getCallAclRelMatchListCollectionAsyncWithHttpInfo($call_acl, $call_acl_default_policy, $call_acl_name, $call_acl2, $id_exact, $match_list, $match_list_name, $match_list2, $policy, $policy_end, $policy_exact, $policy_partial, $policy_start, $priority, $priority_between, $priority_gt, $priority_gte, $priority_lt, $priority_lte, $_order_id, $_order_policy, $_order_priority, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCallAclRelMatchListCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of CallAclRelMatchList resources.
     *
     * @param  string $call_acl (optional)
     * @param  string $call_acl_default_policy (optional)
     * @param  string $call_acl_name (optional)
     * @param  string $call_acl2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $match_list (optional)
     * @param  string $match_list_name (optional)
     * @param  string $match_list2 (optional)
     * @param  string $policy (optional)
     * @param  string $policy_end (optional)
     * @param  string $policy_exact (optional)
     * @param  string $policy_partial (optional)
     * @param  string $policy_start (optional)
     * @param  int $priority (optional)
     * @param  string $priority_between (optional)
     * @param  string $priority_gt (optional)
     * @param  string $priority_gte (optional)
     * @param  string $priority_lt (optional)
     * @param  string $priority_lte (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_policy (optional)
     * @param  string $_order_priority (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallAclRelMatchListCollectionAsyncWithHttpInfo($call_acl = null, $call_acl_default_policy = null, $call_acl_name = null, $call_acl2 = null, $id_exact = null, $match_list = null, $match_list_name = null, $match_list2 = null, $policy = null, $policy_end = null, $policy_exact = null, $policy_partial = null, $policy_start = null, $priority = null, $priority_between = null, $priority_gt = null, $priority_gte = null, $priority_lt = null, $priority_lte = null, $_order_id = null, $_order_policy = null, $_order_priority = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\CallAclRelMatchListDetailedCollection[]';
        $request = $this->getCallAclRelMatchListCollectionRequest($call_acl, $call_acl_default_policy, $call_acl_name, $call_acl2, $id_exact, $match_list, $match_list_name, $match_list2, $policy, $policy_end, $policy_exact, $policy_partial, $policy_start, $priority, $priority_between, $priority_gt, $priority_gte, $priority_lt, $priority_lte, $_order_id, $_order_policy, $_order_priority, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCallAclRelMatchListCollection'
     *
     * @param  string $call_acl (optional)
     * @param  string $call_acl_default_policy (optional)
     * @param  string $call_acl_name (optional)
     * @param  string $call_acl2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $match_list (optional)
     * @param  string $match_list_name (optional)
     * @param  string $match_list2 (optional)
     * @param  string $policy (optional)
     * @param  string $policy_end (optional)
     * @param  string $policy_exact (optional)
     * @param  string $policy_partial (optional)
     * @param  string $policy_start (optional)
     * @param  int $priority (optional)
     * @param  string $priority_between (optional)
     * @param  string $priority_gt (optional)
     * @param  string $priority_gte (optional)
     * @param  string $priority_lt (optional)
     * @param  string $priority_lte (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_policy (optional)
     * @param  string $_order_priority (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCallAclRelMatchListCollectionRequest($call_acl = null, $call_acl_default_policy = null, $call_acl_name = null, $call_acl2 = null, $id_exact = null, $match_list = null, $match_list_name = null, $match_list2 = null, $policy = null, $policy_end = null, $policy_exact = null, $policy_partial = null, $policy_start = null, $priority = null, $priority_between = null, $priority_gt = null, $priority_gte = null, $priority_lt = null, $priority_lte = null, $_order_id = null, $_order_policy = null, $_order_priority = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/call_acl_rel_match_lists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($call_acl !== null) {
            $queryParams['callAcl'] = ObjectSerializer::toQueryValue($call_acl);
        }
        // query params
        if ($call_acl_default_policy !== null) {
            $queryParams['callAcl.defaultPolicy'] = ObjectSerializer::toQueryValue($call_acl_default_policy);
        }
        // query params
        if ($call_acl_name !== null) {
            $queryParams['callAcl.name'] = ObjectSerializer::toQueryValue($call_acl_name);
        }
        // query params
        if ($call_acl2 !== null) {
            $queryParams['callAcl[]'] = ObjectSerializer::toQueryValue($call_acl2);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($match_list !== null) {
            $queryParams['matchList'] = ObjectSerializer::toQueryValue($match_list);
        }
        // query params
        if ($match_list_name !== null) {
            $queryParams['matchList.name'] = ObjectSerializer::toQueryValue($match_list_name);
        }
        // query params
        if ($match_list2 !== null) {
            $queryParams['matchList[]'] = ObjectSerializer::toQueryValue($match_list2);
        }
        // query params
        if ($policy !== null) {
            $queryParams['policy'] = ObjectSerializer::toQueryValue($policy);
        }
        // query params
        if ($policy_end !== null) {
            $queryParams['policy[end]'] = ObjectSerializer::toQueryValue($policy_end);
        }
        // query params
        if ($policy_exact !== null) {
            $queryParams['policy[exact]'] = ObjectSerializer::toQueryValue($policy_exact);
        }
        // query params
        if ($policy_partial !== null) {
            $queryParams['policy[partial]'] = ObjectSerializer::toQueryValue($policy_partial);
        }
        // query params
        if ($policy_start !== null) {
            $queryParams['policy[start]'] = ObjectSerializer::toQueryValue($policy_start);
        }
        // query params
        if ($priority !== null) {
            $queryParams['priority'] = ObjectSerializer::toQueryValue($priority);
        }
        // query params
        if ($priority_between !== null) {
            $queryParams['priority[between]'] = ObjectSerializer::toQueryValue($priority_between);
        }
        // query params
        if ($priority_gt !== null) {
            $queryParams['priority[gt]'] = ObjectSerializer::toQueryValue($priority_gt);
        }
        // query params
        if ($priority_gte !== null) {
            $queryParams['priority[gte]'] = ObjectSerializer::toQueryValue($priority_gte);
        }
        // query params
        if ($priority_lt !== null) {
            $queryParams['priority[lt]'] = ObjectSerializer::toQueryValue($priority_lt);
        }
        // query params
        if ($priority_lte !== null) {
            $queryParams['priority[lte]'] = ObjectSerializer::toQueryValue($priority_lte);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_policy !== null) {
            $queryParams['_order[policy]'] = ObjectSerializer::toQueryValue($_order_policy);
        }
        // query params
        if ($_order_priority !== null) {
            $queryParams['_order[priority]'] = ObjectSerializer::toQueryValue($_order_priority);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCallAclRelMatchListItem
     *
     * Retrieves a CallAclRelMatchList resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CallAclRelMatchListDetailed
     */
    public function getCallAclRelMatchListItem($id)
    {
        list($response) = $this->getCallAclRelMatchListItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getCallAclRelMatchListItemWithHttpInfo
     *
     * Retrieves a CallAclRelMatchList resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CallAclRelMatchListDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCallAclRelMatchListItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\CallAclRelMatchListDetailed';
        $request = $this->getCallAclRelMatchListItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CallAclRelMatchListDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCallAclRelMatchListItemAsync
     *
     * Retrieves a CallAclRelMatchList resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallAclRelMatchListItemAsync($id)
    {
        return $this->getCallAclRelMatchListItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCallAclRelMatchListItemAsyncWithHttpInfo
     *
     * Retrieves a CallAclRelMatchList resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallAclRelMatchListItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\CallAclRelMatchListDetailed';
        $request = $this->getCallAclRelMatchListItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCallAclRelMatchListItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCallAclRelMatchListItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCallAclRelMatchListItem'
            );
        }

        $resourcePath = '/call_acl_rel_match_lists/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCallCsvReportCollection
     *
     * Retrieves the collection of CallCsvReport resources.
     *
     * @param  string $call_csv_scheduler call_csv_scheduler (optional)
     * @param  string $call_csv_scheduler2 call_csv_scheduler2 (optional)
     * @param  bool $call_csv_scheduler_exists call_csv_scheduler_exists (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $in_date in_date (optional)
     * @param  string $in_date_after in_date_after (optional)
     * @param  string $in_date_before in_date_before (optional)
     * @param  string $in_date_start in_date_start (optional)
     * @param  string $in_date_strictly_after in_date_strictly_after (optional)
     * @param  string $in_date_strictly_before in_date_strictly_before (optional)
     * @param  string $out_date out_date (optional)
     * @param  string $out_date_after out_date_after (optional)
     * @param  string $out_date_before out_date_before (optional)
     * @param  string $out_date_start out_date_start (optional)
     * @param  string $out_date_strictly_after out_date_strictly_after (optional)
     * @param  string $out_date_strictly_before out_date_strictly_before (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_in_date _order_in_date (optional)
     * @param  string $_order_out_date _order_out_date (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CallCsvReportCollection[]
     */
    public function getCallCsvReportCollection($call_csv_scheduler = null, $call_csv_scheduler2 = null, $call_csv_scheduler_exists = null, $id_exact = null, $in_date = null, $in_date_after = null, $in_date_before = null, $in_date_start = null, $in_date_strictly_after = null, $in_date_strictly_before = null, $out_date = null, $out_date_after = null, $out_date_before = null, $out_date_start = null, $out_date_strictly_after = null, $out_date_strictly_before = null, $_order_id = null, $_order_in_date = null, $_order_out_date = null, $_items_per_page = null, $_page = null, $_properties = null, $_timezone = null)
    {
        list($response) = $this->getCallCsvReportCollectionWithHttpInfo($call_csv_scheduler, $call_csv_scheduler2, $call_csv_scheduler_exists, $id_exact, $in_date, $in_date_after, $in_date_before, $in_date_start, $in_date_strictly_after, $in_date_strictly_before, $out_date, $out_date_after, $out_date_before, $out_date_start, $out_date_strictly_after, $out_date_strictly_before, $_order_id, $_order_in_date, $_order_out_date, $_items_per_page, $_page, $_properties, $_timezone);
        return $response;
    }

    /**
     * Operation getCallCsvReportCollectionWithHttpInfo
     *
     * Retrieves the collection of CallCsvReport resources.
     *
     * @param  string $call_csv_scheduler (optional)
     * @param  string $call_csv_scheduler2 (optional)
     * @param  bool $call_csv_scheduler_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $in_date (optional)
     * @param  string $in_date_after (optional)
     * @param  string $in_date_before (optional)
     * @param  string $in_date_start (optional)
     * @param  string $in_date_strictly_after (optional)
     * @param  string $in_date_strictly_before (optional)
     * @param  string $out_date (optional)
     * @param  string $out_date_after (optional)
     * @param  string $out_date_before (optional)
     * @param  string $out_date_start (optional)
     * @param  string $out_date_strictly_after (optional)
     * @param  string $out_date_strictly_before (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_in_date (optional)
     * @param  string $_order_out_date (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CallCsvReportCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCallCsvReportCollectionWithHttpInfo($call_csv_scheduler = null, $call_csv_scheduler2 = null, $call_csv_scheduler_exists = null, $id_exact = null, $in_date = null, $in_date_after = null, $in_date_before = null, $in_date_start = null, $in_date_strictly_after = null, $in_date_strictly_before = null, $out_date = null, $out_date_after = null, $out_date_before = null, $out_date_start = null, $out_date_strictly_after = null, $out_date_strictly_before = null, $_order_id = null, $_order_in_date = null, $_order_out_date = null, $_items_per_page = null, $_page = null, $_properties = null, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\CallCsvReportCollection[]';
        $request = $this->getCallCsvReportCollectionRequest($call_csv_scheduler, $call_csv_scheduler2, $call_csv_scheduler_exists, $id_exact, $in_date, $in_date_after, $in_date_before, $in_date_start, $in_date_strictly_after, $in_date_strictly_before, $out_date, $out_date_after, $out_date_before, $out_date_start, $out_date_strictly_after, $out_date_strictly_before, $_order_id, $_order_in_date, $_order_out_date, $_items_per_page, $_page, $_properties, $_timezone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CallCsvReportCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCallCsvReportCollectionAsync
     *
     * Retrieves the collection of CallCsvReport resources.
     *
     * @param  string $call_csv_scheduler (optional)
     * @param  string $call_csv_scheduler2 (optional)
     * @param  bool $call_csv_scheduler_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $in_date (optional)
     * @param  string $in_date_after (optional)
     * @param  string $in_date_before (optional)
     * @param  string $in_date_start (optional)
     * @param  string $in_date_strictly_after (optional)
     * @param  string $in_date_strictly_before (optional)
     * @param  string $out_date (optional)
     * @param  string $out_date_after (optional)
     * @param  string $out_date_before (optional)
     * @param  string $out_date_start (optional)
     * @param  string $out_date_strictly_after (optional)
     * @param  string $out_date_strictly_before (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_in_date (optional)
     * @param  string $_order_out_date (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallCsvReportCollectionAsync($call_csv_scheduler = null, $call_csv_scheduler2 = null, $call_csv_scheduler_exists = null, $id_exact = null, $in_date = null, $in_date_after = null, $in_date_before = null, $in_date_start = null, $in_date_strictly_after = null, $in_date_strictly_before = null, $out_date = null, $out_date_after = null, $out_date_before = null, $out_date_start = null, $out_date_strictly_after = null, $out_date_strictly_before = null, $_order_id = null, $_order_in_date = null, $_order_out_date = null, $_items_per_page = null, $_page = null, $_properties = null, $_timezone = null)
    {
        return $this->getCallCsvReportCollectionAsyncWithHttpInfo($call_csv_scheduler, $call_csv_scheduler2, $call_csv_scheduler_exists, $id_exact, $in_date, $in_date_after, $in_date_before, $in_date_start, $in_date_strictly_after, $in_date_strictly_before, $out_date, $out_date_after, $out_date_before, $out_date_start, $out_date_strictly_after, $out_date_strictly_before, $_order_id, $_order_in_date, $_order_out_date, $_items_per_page, $_page, $_properties, $_timezone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCallCsvReportCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of CallCsvReport resources.
     *
     * @param  string $call_csv_scheduler (optional)
     * @param  string $call_csv_scheduler2 (optional)
     * @param  bool $call_csv_scheduler_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $in_date (optional)
     * @param  string $in_date_after (optional)
     * @param  string $in_date_before (optional)
     * @param  string $in_date_start (optional)
     * @param  string $in_date_strictly_after (optional)
     * @param  string $in_date_strictly_before (optional)
     * @param  string $out_date (optional)
     * @param  string $out_date_after (optional)
     * @param  string $out_date_before (optional)
     * @param  string $out_date_start (optional)
     * @param  string $out_date_strictly_after (optional)
     * @param  string $out_date_strictly_before (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_in_date (optional)
     * @param  string $_order_out_date (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallCsvReportCollectionAsyncWithHttpInfo($call_csv_scheduler = null, $call_csv_scheduler2 = null, $call_csv_scheduler_exists = null, $id_exact = null, $in_date = null, $in_date_after = null, $in_date_before = null, $in_date_start = null, $in_date_strictly_after = null, $in_date_strictly_before = null, $out_date = null, $out_date_after = null, $out_date_before = null, $out_date_start = null, $out_date_strictly_after = null, $out_date_strictly_before = null, $_order_id = null, $_order_in_date = null, $_order_out_date = null, $_items_per_page = null, $_page = null, $_properties = null, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\CallCsvReportCollection[]';
        $request = $this->getCallCsvReportCollectionRequest($call_csv_scheduler, $call_csv_scheduler2, $call_csv_scheduler_exists, $id_exact, $in_date, $in_date_after, $in_date_before, $in_date_start, $in_date_strictly_after, $in_date_strictly_before, $out_date, $out_date_after, $out_date_before, $out_date_start, $out_date_strictly_after, $out_date_strictly_before, $_order_id, $_order_in_date, $_order_out_date, $_items_per_page, $_page, $_properties, $_timezone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCallCsvReportCollection'
     *
     * @param  string $call_csv_scheduler (optional)
     * @param  string $call_csv_scheduler2 (optional)
     * @param  bool $call_csv_scheduler_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $in_date (optional)
     * @param  string $in_date_after (optional)
     * @param  string $in_date_before (optional)
     * @param  string $in_date_start (optional)
     * @param  string $in_date_strictly_after (optional)
     * @param  string $in_date_strictly_before (optional)
     * @param  string $out_date (optional)
     * @param  string $out_date_after (optional)
     * @param  string $out_date_before (optional)
     * @param  string $out_date_start (optional)
     * @param  string $out_date_strictly_after (optional)
     * @param  string $out_date_strictly_before (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_in_date (optional)
     * @param  string $_order_out_date (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCallCsvReportCollectionRequest($call_csv_scheduler = null, $call_csv_scheduler2 = null, $call_csv_scheduler_exists = null, $id_exact = null, $in_date = null, $in_date_after = null, $in_date_before = null, $in_date_start = null, $in_date_strictly_after = null, $in_date_strictly_before = null, $out_date = null, $out_date_after = null, $out_date_before = null, $out_date_start = null, $out_date_strictly_after = null, $out_date_strictly_before = null, $_order_id = null, $_order_in_date = null, $_order_out_date = null, $_items_per_page = null, $_page = null, $_properties = null, $_timezone = null)
    {

        $resourcePath = '/call_csv_reports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($call_csv_scheduler !== null) {
            $queryParams['callCsvScheduler'] = ObjectSerializer::toQueryValue($call_csv_scheduler);
        }
        // query params
        if ($call_csv_scheduler2 !== null) {
            $queryParams['callCsvScheduler[]'] = ObjectSerializer::toQueryValue($call_csv_scheduler2);
        }
        // query params
        if ($call_csv_scheduler_exists !== null) {
            $queryParams['callCsvScheduler[exists]'] = ObjectSerializer::toQueryValue($call_csv_scheduler_exists);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($in_date !== null) {
            $queryParams['inDate'] = ObjectSerializer::toQueryValue($in_date);
        }
        // query params
        if ($in_date_after !== null) {
            $queryParams['inDate[after]'] = ObjectSerializer::toQueryValue($in_date_after);
        }
        // query params
        if ($in_date_before !== null) {
            $queryParams['inDate[before]'] = ObjectSerializer::toQueryValue($in_date_before);
        }
        // query params
        if ($in_date_start !== null) {
            $queryParams['inDate[start]'] = ObjectSerializer::toQueryValue($in_date_start);
        }
        // query params
        if ($in_date_strictly_after !== null) {
            $queryParams['inDate[strictly_after]'] = ObjectSerializer::toQueryValue($in_date_strictly_after);
        }
        // query params
        if ($in_date_strictly_before !== null) {
            $queryParams['inDate[strictly_before]'] = ObjectSerializer::toQueryValue($in_date_strictly_before);
        }
        // query params
        if ($out_date !== null) {
            $queryParams['outDate'] = ObjectSerializer::toQueryValue($out_date);
        }
        // query params
        if ($out_date_after !== null) {
            $queryParams['outDate[after]'] = ObjectSerializer::toQueryValue($out_date_after);
        }
        // query params
        if ($out_date_before !== null) {
            $queryParams['outDate[before]'] = ObjectSerializer::toQueryValue($out_date_before);
        }
        // query params
        if ($out_date_start !== null) {
            $queryParams['outDate[start]'] = ObjectSerializer::toQueryValue($out_date_start);
        }
        // query params
        if ($out_date_strictly_after !== null) {
            $queryParams['outDate[strictly_after]'] = ObjectSerializer::toQueryValue($out_date_strictly_after);
        }
        // query params
        if ($out_date_strictly_before !== null) {
            $queryParams['outDate[strictly_before]'] = ObjectSerializer::toQueryValue($out_date_strictly_before);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_in_date !== null) {
            $queryParams['_order[inDate]'] = ObjectSerializer::toQueryValue($_order_in_date);
        }
        // query params
        if ($_order_out_date !== null) {
            $queryParams['_order[outDate]'] = ObjectSerializer::toQueryValue($_order_out_date);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }
        // query params
        if ($_timezone !== null) {
            $queryParams['_timezone'] = ObjectSerializer::toQueryValue($_timezone);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCallCsvReportItem
     *
     * Retrieves a CallCsvReport resource.
     *
     * @param  string $id id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CallCsvReportDetailed
     */
    public function getCallCsvReportItem($id, $_timezone = null)
    {
        list($response) = $this->getCallCsvReportItemWithHttpInfo($id, $_timezone);
        return $response;
    }

    /**
     * Operation getCallCsvReportItemWithHttpInfo
     *
     * Retrieves a CallCsvReport resource.
     *
     * @param  string $id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CallCsvReportDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCallCsvReportItemWithHttpInfo($id, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\CallCsvReportDetailed';
        $request = $this->getCallCsvReportItemRequest($id, $_timezone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CallCsvReportDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCallCsvReportItemAsync
     *
     * Retrieves a CallCsvReport resource.
     *
     * @param  string $id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallCsvReportItemAsync($id, $_timezone = null)
    {
        return $this->getCallCsvReportItemAsyncWithHttpInfo($id, $_timezone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCallCsvReportItemAsyncWithHttpInfo
     *
     * Retrieves a CallCsvReport resource.
     *
     * @param  string $id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallCsvReportItemAsyncWithHttpInfo($id, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\CallCsvReportDetailed';
        $request = $this->getCallCsvReportItemRequest($id, $_timezone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCallCsvReportItem'
     *
     * @param  string $id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCallCsvReportItemRequest($id, $_timezone = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCallCsvReportItem'
            );
        }

        $resourcePath = '/call_csv_reports/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_timezone !== null) {
            $queryParams['_timezone'] = ObjectSerializer::toQueryValue($_timezone);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCallCsvSchedulerCollection
     *
     * Retrieves the collection of CallCsvScheduler resources.
     *
     * @param  string $call_csv_notification_template call_csv_notification_template (optional)
     * @param  string $call_csv_notification_template2 call_csv_notification_template2 (optional)
     * @param  bool $call_csv_notification_template_exists call_csv_notification_template_exists (optional)
     * @param  string $call_direction call_direction (optional)
     * @param  string $call_direction_end call_direction_end (optional)
     * @param  string $call_direction_exact call_direction_exact (optional)
     * @param  bool $call_direction_exists call_direction_exists (optional)
     * @param  string $call_direction_partial call_direction_partial (optional)
     * @param  string $call_direction_start call_direction_start (optional)
     * @param  string $ddi ddi (optional)
     * @param  string $ddi2 ddi2 (optional)
     * @param  bool $ddi_exists ddi_exists (optional)
     * @param  string $email email (optional)
     * @param  string $email_end email_end (optional)
     * @param  string $email_exact email_exact (optional)
     * @param  string $email_partial email_partial (optional)
     * @param  string $email_start email_start (optional)
     * @param  string $fax fax (optional)
     * @param  string $fax2 fax2 (optional)
     * @param  bool $fax_exists fax_exists (optional)
     * @param  int $frequency frequency (optional)
     * @param  string $frequency_between frequency_between (optional)
     * @param  string $frequency_gt frequency_gt (optional)
     * @param  string $frequency_gte frequency_gte (optional)
     * @param  string $frequency_lt frequency_lt (optional)
     * @param  string $frequency_lte frequency_lte (optional)
     * @param  string $friend friend (optional)
     * @param  string $friend2 friend2 (optional)
     * @param  bool $friend_exists friend_exists (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $last_execution last_execution (optional)
     * @param  string $last_execution_error last_execution_error (optional)
     * @param  string $last_execution_error_end last_execution_error_end (optional)
     * @param  string $last_execution_error_exact last_execution_error_exact (optional)
     * @param  bool $last_execution_error_exists last_execution_error_exists (optional)
     * @param  string $last_execution_error_partial last_execution_error_partial (optional)
     * @param  string $last_execution_error_start last_execution_error_start (optional)
     * @param  string $last_execution_after last_execution_after (optional)
     * @param  string $last_execution_before last_execution_before (optional)
     * @param  bool $last_execution_exists last_execution_exists (optional)
     * @param  string $last_execution_start last_execution_start (optional)
     * @param  string $last_execution_strictly_after last_execution_strictly_after (optional)
     * @param  string $last_execution_strictly_before last_execution_strictly_before (optional)
     * @param  string $name name (optional)
     * @param  string $name_end name_end (optional)
     * @param  string $name_exact name_exact (optional)
     * @param  string $name_partial name_partial (optional)
     * @param  string $name_start name_start (optional)
     * @param  string $next_execution next_execution (optional)
     * @param  string $next_execution_after next_execution_after (optional)
     * @param  string $next_execution_before next_execution_before (optional)
     * @param  bool $next_execution_exists next_execution_exists (optional)
     * @param  string $next_execution_start next_execution_start (optional)
     * @param  string $next_execution_strictly_after next_execution_strictly_after (optional)
     * @param  string $next_execution_strictly_before next_execution_strictly_before (optional)
     * @param  string $residential_device residential_device (optional)
     * @param  string $residential_device2 residential_device2 (optional)
     * @param  bool $residential_device_exists residential_device_exists (optional)
     * @param  string $retail_account retail_account (optional)
     * @param  string $retail_account2 retail_account2 (optional)
     * @param  bool $retail_account_exists retail_account_exists (optional)
     * @param  string $unit unit (optional)
     * @param  string $unit_end unit_end (optional)
     * @param  string $unit_exact unit_exact (optional)
     * @param  string $unit_partial unit_partial (optional)
     * @param  string $unit_start unit_start (optional)
     * @param  string $user user (optional)
     * @param  string $user2 user2 (optional)
     * @param  bool $user_exists user_exists (optional)
     * @param  string $_order_call_direction _order_call_direction (optional)
     * @param  string $_order_email _order_email (optional)
     * @param  string $_order_frequency _order_frequency (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_last_execution_error _order_last_execution_error (optional)
     * @param  string $_order_last_execution _order_last_execution (optional)
     * @param  string $_order_name _order_name (optional)
     * @param  string $_order_next_execution _order_next_execution (optional)
     * @param  string $_order_unit _order_unit (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CallCsvSchedulerCollection[]
     */
    public function getCallCsvSchedulerCollection($call_csv_notification_template = null, $call_csv_notification_template2 = null, $call_csv_notification_template_exists = null, $call_direction = null, $call_direction_end = null, $call_direction_exact = null, $call_direction_exists = null, $call_direction_partial = null, $call_direction_start = null, $ddi = null, $ddi2 = null, $ddi_exists = null, $email = null, $email_end = null, $email_exact = null, $email_partial = null, $email_start = null, $fax = null, $fax2 = null, $fax_exists = null, $frequency = null, $frequency_between = null, $frequency_gt = null, $frequency_gte = null, $frequency_lt = null, $frequency_lte = null, $friend = null, $friend2 = null, $friend_exists = null, $id_exact = null, $last_execution = null, $last_execution_error = null, $last_execution_error_end = null, $last_execution_error_exact = null, $last_execution_error_exists = null, $last_execution_error_partial = null, $last_execution_error_start = null, $last_execution_after = null, $last_execution_before = null, $last_execution_exists = null, $last_execution_start = null, $last_execution_strictly_after = null, $last_execution_strictly_before = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $next_execution = null, $next_execution_after = null, $next_execution_before = null, $next_execution_exists = null, $next_execution_start = null, $next_execution_strictly_after = null, $next_execution_strictly_before = null, $residential_device = null, $residential_device2 = null, $residential_device_exists = null, $retail_account = null, $retail_account2 = null, $retail_account_exists = null, $unit = null, $unit_end = null, $unit_exact = null, $unit_partial = null, $unit_start = null, $user = null, $user2 = null, $user_exists = null, $_order_call_direction = null, $_order_email = null, $_order_frequency = null, $_order_id = null, $_order_last_execution_error = null, $_order_last_execution = null, $_order_name = null, $_order_next_execution = null, $_order_unit = null, $_items_per_page = null, $_page = null, $_properties = null, $_timezone = null)
    {
        list($response) = $this->getCallCsvSchedulerCollectionWithHttpInfo($call_csv_notification_template, $call_csv_notification_template2, $call_csv_notification_template_exists, $call_direction, $call_direction_end, $call_direction_exact, $call_direction_exists, $call_direction_partial, $call_direction_start, $ddi, $ddi2, $ddi_exists, $email, $email_end, $email_exact, $email_partial, $email_start, $fax, $fax2, $fax_exists, $frequency, $frequency_between, $frequency_gt, $frequency_gte, $frequency_lt, $frequency_lte, $friend, $friend2, $friend_exists, $id_exact, $last_execution, $last_execution_error, $last_execution_error_end, $last_execution_error_exact, $last_execution_error_exists, $last_execution_error_partial, $last_execution_error_start, $last_execution_after, $last_execution_before, $last_execution_exists, $last_execution_start, $last_execution_strictly_after, $last_execution_strictly_before, $name, $name_end, $name_exact, $name_partial, $name_start, $next_execution, $next_execution_after, $next_execution_before, $next_execution_exists, $next_execution_start, $next_execution_strictly_after, $next_execution_strictly_before, $residential_device, $residential_device2, $residential_device_exists, $retail_account, $retail_account2, $retail_account_exists, $unit, $unit_end, $unit_exact, $unit_partial, $unit_start, $user, $user2, $user_exists, $_order_call_direction, $_order_email, $_order_frequency, $_order_id, $_order_last_execution_error, $_order_last_execution, $_order_name, $_order_next_execution, $_order_unit, $_items_per_page, $_page, $_properties, $_timezone);
        return $response;
    }

    /**
     * Operation getCallCsvSchedulerCollectionWithHttpInfo
     *
     * Retrieves the collection of CallCsvScheduler resources.
     *
     * @param  string $call_csv_notification_template (optional)
     * @param  string $call_csv_notification_template2 (optional)
     * @param  bool $call_csv_notification_template_exists (optional)
     * @param  string $call_direction (optional)
     * @param  string $call_direction_end (optional)
     * @param  string $call_direction_exact (optional)
     * @param  bool $call_direction_exists (optional)
     * @param  string $call_direction_partial (optional)
     * @param  string $call_direction_start (optional)
     * @param  string $ddi (optional)
     * @param  string $ddi2 (optional)
     * @param  bool $ddi_exists (optional)
     * @param  string $email (optional)
     * @param  string $email_end (optional)
     * @param  string $email_exact (optional)
     * @param  string $email_partial (optional)
     * @param  string $email_start (optional)
     * @param  string $fax (optional)
     * @param  string $fax2 (optional)
     * @param  bool $fax_exists (optional)
     * @param  int $frequency (optional)
     * @param  string $frequency_between (optional)
     * @param  string $frequency_gt (optional)
     * @param  string $frequency_gte (optional)
     * @param  string $frequency_lt (optional)
     * @param  string $frequency_lte (optional)
     * @param  string $friend (optional)
     * @param  string $friend2 (optional)
     * @param  bool $friend_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $last_execution (optional)
     * @param  string $last_execution_error (optional)
     * @param  string $last_execution_error_end (optional)
     * @param  string $last_execution_error_exact (optional)
     * @param  bool $last_execution_error_exists (optional)
     * @param  string $last_execution_error_partial (optional)
     * @param  string $last_execution_error_start (optional)
     * @param  string $last_execution_after (optional)
     * @param  string $last_execution_before (optional)
     * @param  bool $last_execution_exists (optional)
     * @param  string $last_execution_start (optional)
     * @param  string $last_execution_strictly_after (optional)
     * @param  string $last_execution_strictly_before (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $next_execution (optional)
     * @param  string $next_execution_after (optional)
     * @param  string $next_execution_before (optional)
     * @param  bool $next_execution_exists (optional)
     * @param  string $next_execution_start (optional)
     * @param  string $next_execution_strictly_after (optional)
     * @param  string $next_execution_strictly_before (optional)
     * @param  string $residential_device (optional)
     * @param  string $residential_device2 (optional)
     * @param  bool $residential_device_exists (optional)
     * @param  string $retail_account (optional)
     * @param  string $retail_account2 (optional)
     * @param  bool $retail_account_exists (optional)
     * @param  string $unit (optional)
     * @param  string $unit_end (optional)
     * @param  string $unit_exact (optional)
     * @param  string $unit_partial (optional)
     * @param  string $unit_start (optional)
     * @param  string $user (optional)
     * @param  string $user2 (optional)
     * @param  bool $user_exists (optional)
     * @param  string $_order_call_direction (optional)
     * @param  string $_order_email (optional)
     * @param  string $_order_frequency (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_last_execution_error (optional)
     * @param  string $_order_last_execution (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_next_execution (optional)
     * @param  string $_order_unit (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CallCsvSchedulerCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCallCsvSchedulerCollectionWithHttpInfo($call_csv_notification_template = null, $call_csv_notification_template2 = null, $call_csv_notification_template_exists = null, $call_direction = null, $call_direction_end = null, $call_direction_exact = null, $call_direction_exists = null, $call_direction_partial = null, $call_direction_start = null, $ddi = null, $ddi2 = null, $ddi_exists = null, $email = null, $email_end = null, $email_exact = null, $email_partial = null, $email_start = null, $fax = null, $fax2 = null, $fax_exists = null, $frequency = null, $frequency_between = null, $frequency_gt = null, $frequency_gte = null, $frequency_lt = null, $frequency_lte = null, $friend = null, $friend2 = null, $friend_exists = null, $id_exact = null, $last_execution = null, $last_execution_error = null, $last_execution_error_end = null, $last_execution_error_exact = null, $last_execution_error_exists = null, $last_execution_error_partial = null, $last_execution_error_start = null, $last_execution_after = null, $last_execution_before = null, $last_execution_exists = null, $last_execution_start = null, $last_execution_strictly_after = null, $last_execution_strictly_before = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $next_execution = null, $next_execution_after = null, $next_execution_before = null, $next_execution_exists = null, $next_execution_start = null, $next_execution_strictly_after = null, $next_execution_strictly_before = null, $residential_device = null, $residential_device2 = null, $residential_device_exists = null, $retail_account = null, $retail_account2 = null, $retail_account_exists = null, $unit = null, $unit_end = null, $unit_exact = null, $unit_partial = null, $unit_start = null, $user = null, $user2 = null, $user_exists = null, $_order_call_direction = null, $_order_email = null, $_order_frequency = null, $_order_id = null, $_order_last_execution_error = null, $_order_last_execution = null, $_order_name = null, $_order_next_execution = null, $_order_unit = null, $_items_per_page = null, $_page = null, $_properties = null, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\CallCsvSchedulerCollection[]';
        $request = $this->getCallCsvSchedulerCollectionRequest($call_csv_notification_template, $call_csv_notification_template2, $call_csv_notification_template_exists, $call_direction, $call_direction_end, $call_direction_exact, $call_direction_exists, $call_direction_partial, $call_direction_start, $ddi, $ddi2, $ddi_exists, $email, $email_end, $email_exact, $email_partial, $email_start, $fax, $fax2, $fax_exists, $frequency, $frequency_between, $frequency_gt, $frequency_gte, $frequency_lt, $frequency_lte, $friend, $friend2, $friend_exists, $id_exact, $last_execution, $last_execution_error, $last_execution_error_end, $last_execution_error_exact, $last_execution_error_exists, $last_execution_error_partial, $last_execution_error_start, $last_execution_after, $last_execution_before, $last_execution_exists, $last_execution_start, $last_execution_strictly_after, $last_execution_strictly_before, $name, $name_end, $name_exact, $name_partial, $name_start, $next_execution, $next_execution_after, $next_execution_before, $next_execution_exists, $next_execution_start, $next_execution_strictly_after, $next_execution_strictly_before, $residential_device, $residential_device2, $residential_device_exists, $retail_account, $retail_account2, $retail_account_exists, $unit, $unit_end, $unit_exact, $unit_partial, $unit_start, $user, $user2, $user_exists, $_order_call_direction, $_order_email, $_order_frequency, $_order_id, $_order_last_execution_error, $_order_last_execution, $_order_name, $_order_next_execution, $_order_unit, $_items_per_page, $_page, $_properties, $_timezone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CallCsvSchedulerCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCallCsvSchedulerCollectionAsync
     *
     * Retrieves the collection of CallCsvScheduler resources.
     *
     * @param  string $call_csv_notification_template (optional)
     * @param  string $call_csv_notification_template2 (optional)
     * @param  bool $call_csv_notification_template_exists (optional)
     * @param  string $call_direction (optional)
     * @param  string $call_direction_end (optional)
     * @param  string $call_direction_exact (optional)
     * @param  bool $call_direction_exists (optional)
     * @param  string $call_direction_partial (optional)
     * @param  string $call_direction_start (optional)
     * @param  string $ddi (optional)
     * @param  string $ddi2 (optional)
     * @param  bool $ddi_exists (optional)
     * @param  string $email (optional)
     * @param  string $email_end (optional)
     * @param  string $email_exact (optional)
     * @param  string $email_partial (optional)
     * @param  string $email_start (optional)
     * @param  string $fax (optional)
     * @param  string $fax2 (optional)
     * @param  bool $fax_exists (optional)
     * @param  int $frequency (optional)
     * @param  string $frequency_between (optional)
     * @param  string $frequency_gt (optional)
     * @param  string $frequency_gte (optional)
     * @param  string $frequency_lt (optional)
     * @param  string $frequency_lte (optional)
     * @param  string $friend (optional)
     * @param  string $friend2 (optional)
     * @param  bool $friend_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $last_execution (optional)
     * @param  string $last_execution_error (optional)
     * @param  string $last_execution_error_end (optional)
     * @param  string $last_execution_error_exact (optional)
     * @param  bool $last_execution_error_exists (optional)
     * @param  string $last_execution_error_partial (optional)
     * @param  string $last_execution_error_start (optional)
     * @param  string $last_execution_after (optional)
     * @param  string $last_execution_before (optional)
     * @param  bool $last_execution_exists (optional)
     * @param  string $last_execution_start (optional)
     * @param  string $last_execution_strictly_after (optional)
     * @param  string $last_execution_strictly_before (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $next_execution (optional)
     * @param  string $next_execution_after (optional)
     * @param  string $next_execution_before (optional)
     * @param  bool $next_execution_exists (optional)
     * @param  string $next_execution_start (optional)
     * @param  string $next_execution_strictly_after (optional)
     * @param  string $next_execution_strictly_before (optional)
     * @param  string $residential_device (optional)
     * @param  string $residential_device2 (optional)
     * @param  bool $residential_device_exists (optional)
     * @param  string $retail_account (optional)
     * @param  string $retail_account2 (optional)
     * @param  bool $retail_account_exists (optional)
     * @param  string $unit (optional)
     * @param  string $unit_end (optional)
     * @param  string $unit_exact (optional)
     * @param  string $unit_partial (optional)
     * @param  string $unit_start (optional)
     * @param  string $user (optional)
     * @param  string $user2 (optional)
     * @param  bool $user_exists (optional)
     * @param  string $_order_call_direction (optional)
     * @param  string $_order_email (optional)
     * @param  string $_order_frequency (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_last_execution_error (optional)
     * @param  string $_order_last_execution (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_next_execution (optional)
     * @param  string $_order_unit (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallCsvSchedulerCollectionAsync($call_csv_notification_template = null, $call_csv_notification_template2 = null, $call_csv_notification_template_exists = null, $call_direction = null, $call_direction_end = null, $call_direction_exact = null, $call_direction_exists = null, $call_direction_partial = null, $call_direction_start = null, $ddi = null, $ddi2 = null, $ddi_exists = null, $email = null, $email_end = null, $email_exact = null, $email_partial = null, $email_start = null, $fax = null, $fax2 = null, $fax_exists = null, $frequency = null, $frequency_between = null, $frequency_gt = null, $frequency_gte = null, $frequency_lt = null, $frequency_lte = null, $friend = null, $friend2 = null, $friend_exists = null, $id_exact = null, $last_execution = null, $last_execution_error = null, $last_execution_error_end = null, $last_execution_error_exact = null, $last_execution_error_exists = null, $last_execution_error_partial = null, $last_execution_error_start = null, $last_execution_after = null, $last_execution_before = null, $last_execution_exists = null, $last_execution_start = null, $last_execution_strictly_after = null, $last_execution_strictly_before = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $next_execution = null, $next_execution_after = null, $next_execution_before = null, $next_execution_exists = null, $next_execution_start = null, $next_execution_strictly_after = null, $next_execution_strictly_before = null, $residential_device = null, $residential_device2 = null, $residential_device_exists = null, $retail_account = null, $retail_account2 = null, $retail_account_exists = null, $unit = null, $unit_end = null, $unit_exact = null, $unit_partial = null, $unit_start = null, $user = null, $user2 = null, $user_exists = null, $_order_call_direction = null, $_order_email = null, $_order_frequency = null, $_order_id = null, $_order_last_execution_error = null, $_order_last_execution = null, $_order_name = null, $_order_next_execution = null, $_order_unit = null, $_items_per_page = null, $_page = null, $_properties = null, $_timezone = null)
    {
        return $this->getCallCsvSchedulerCollectionAsyncWithHttpInfo($call_csv_notification_template, $call_csv_notification_template2, $call_csv_notification_template_exists, $call_direction, $call_direction_end, $call_direction_exact, $call_direction_exists, $call_direction_partial, $call_direction_start, $ddi, $ddi2, $ddi_exists, $email, $email_end, $email_exact, $email_partial, $email_start, $fax, $fax2, $fax_exists, $frequency, $frequency_between, $frequency_gt, $frequency_gte, $frequency_lt, $frequency_lte, $friend, $friend2, $friend_exists, $id_exact, $last_execution, $last_execution_error, $last_execution_error_end, $last_execution_error_exact, $last_execution_error_exists, $last_execution_error_partial, $last_execution_error_start, $last_execution_after, $last_execution_before, $last_execution_exists, $last_execution_start, $last_execution_strictly_after, $last_execution_strictly_before, $name, $name_end, $name_exact, $name_partial, $name_start, $next_execution, $next_execution_after, $next_execution_before, $next_execution_exists, $next_execution_start, $next_execution_strictly_after, $next_execution_strictly_before, $residential_device, $residential_device2, $residential_device_exists, $retail_account, $retail_account2, $retail_account_exists, $unit, $unit_end, $unit_exact, $unit_partial, $unit_start, $user, $user2, $user_exists, $_order_call_direction, $_order_email, $_order_frequency, $_order_id, $_order_last_execution_error, $_order_last_execution, $_order_name, $_order_next_execution, $_order_unit, $_items_per_page, $_page, $_properties, $_timezone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCallCsvSchedulerCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of CallCsvScheduler resources.
     *
     * @param  string $call_csv_notification_template (optional)
     * @param  string $call_csv_notification_template2 (optional)
     * @param  bool $call_csv_notification_template_exists (optional)
     * @param  string $call_direction (optional)
     * @param  string $call_direction_end (optional)
     * @param  string $call_direction_exact (optional)
     * @param  bool $call_direction_exists (optional)
     * @param  string $call_direction_partial (optional)
     * @param  string $call_direction_start (optional)
     * @param  string $ddi (optional)
     * @param  string $ddi2 (optional)
     * @param  bool $ddi_exists (optional)
     * @param  string $email (optional)
     * @param  string $email_end (optional)
     * @param  string $email_exact (optional)
     * @param  string $email_partial (optional)
     * @param  string $email_start (optional)
     * @param  string $fax (optional)
     * @param  string $fax2 (optional)
     * @param  bool $fax_exists (optional)
     * @param  int $frequency (optional)
     * @param  string $frequency_between (optional)
     * @param  string $frequency_gt (optional)
     * @param  string $frequency_gte (optional)
     * @param  string $frequency_lt (optional)
     * @param  string $frequency_lte (optional)
     * @param  string $friend (optional)
     * @param  string $friend2 (optional)
     * @param  bool $friend_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $last_execution (optional)
     * @param  string $last_execution_error (optional)
     * @param  string $last_execution_error_end (optional)
     * @param  string $last_execution_error_exact (optional)
     * @param  bool $last_execution_error_exists (optional)
     * @param  string $last_execution_error_partial (optional)
     * @param  string $last_execution_error_start (optional)
     * @param  string $last_execution_after (optional)
     * @param  string $last_execution_before (optional)
     * @param  bool $last_execution_exists (optional)
     * @param  string $last_execution_start (optional)
     * @param  string $last_execution_strictly_after (optional)
     * @param  string $last_execution_strictly_before (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $next_execution (optional)
     * @param  string $next_execution_after (optional)
     * @param  string $next_execution_before (optional)
     * @param  bool $next_execution_exists (optional)
     * @param  string $next_execution_start (optional)
     * @param  string $next_execution_strictly_after (optional)
     * @param  string $next_execution_strictly_before (optional)
     * @param  string $residential_device (optional)
     * @param  string $residential_device2 (optional)
     * @param  bool $residential_device_exists (optional)
     * @param  string $retail_account (optional)
     * @param  string $retail_account2 (optional)
     * @param  bool $retail_account_exists (optional)
     * @param  string $unit (optional)
     * @param  string $unit_end (optional)
     * @param  string $unit_exact (optional)
     * @param  string $unit_partial (optional)
     * @param  string $unit_start (optional)
     * @param  string $user (optional)
     * @param  string $user2 (optional)
     * @param  bool $user_exists (optional)
     * @param  string $_order_call_direction (optional)
     * @param  string $_order_email (optional)
     * @param  string $_order_frequency (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_last_execution_error (optional)
     * @param  string $_order_last_execution (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_next_execution (optional)
     * @param  string $_order_unit (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallCsvSchedulerCollectionAsyncWithHttpInfo($call_csv_notification_template = null, $call_csv_notification_template2 = null, $call_csv_notification_template_exists = null, $call_direction = null, $call_direction_end = null, $call_direction_exact = null, $call_direction_exists = null, $call_direction_partial = null, $call_direction_start = null, $ddi = null, $ddi2 = null, $ddi_exists = null, $email = null, $email_end = null, $email_exact = null, $email_partial = null, $email_start = null, $fax = null, $fax2 = null, $fax_exists = null, $frequency = null, $frequency_between = null, $frequency_gt = null, $frequency_gte = null, $frequency_lt = null, $frequency_lte = null, $friend = null, $friend2 = null, $friend_exists = null, $id_exact = null, $last_execution = null, $last_execution_error = null, $last_execution_error_end = null, $last_execution_error_exact = null, $last_execution_error_exists = null, $last_execution_error_partial = null, $last_execution_error_start = null, $last_execution_after = null, $last_execution_before = null, $last_execution_exists = null, $last_execution_start = null, $last_execution_strictly_after = null, $last_execution_strictly_before = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $next_execution = null, $next_execution_after = null, $next_execution_before = null, $next_execution_exists = null, $next_execution_start = null, $next_execution_strictly_after = null, $next_execution_strictly_before = null, $residential_device = null, $residential_device2 = null, $residential_device_exists = null, $retail_account = null, $retail_account2 = null, $retail_account_exists = null, $unit = null, $unit_end = null, $unit_exact = null, $unit_partial = null, $unit_start = null, $user = null, $user2 = null, $user_exists = null, $_order_call_direction = null, $_order_email = null, $_order_frequency = null, $_order_id = null, $_order_last_execution_error = null, $_order_last_execution = null, $_order_name = null, $_order_next_execution = null, $_order_unit = null, $_items_per_page = null, $_page = null, $_properties = null, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\CallCsvSchedulerCollection[]';
        $request = $this->getCallCsvSchedulerCollectionRequest($call_csv_notification_template, $call_csv_notification_template2, $call_csv_notification_template_exists, $call_direction, $call_direction_end, $call_direction_exact, $call_direction_exists, $call_direction_partial, $call_direction_start, $ddi, $ddi2, $ddi_exists, $email, $email_end, $email_exact, $email_partial, $email_start, $fax, $fax2, $fax_exists, $frequency, $frequency_between, $frequency_gt, $frequency_gte, $frequency_lt, $frequency_lte, $friend, $friend2, $friend_exists, $id_exact, $last_execution, $last_execution_error, $last_execution_error_end, $last_execution_error_exact, $last_execution_error_exists, $last_execution_error_partial, $last_execution_error_start, $last_execution_after, $last_execution_before, $last_execution_exists, $last_execution_start, $last_execution_strictly_after, $last_execution_strictly_before, $name, $name_end, $name_exact, $name_partial, $name_start, $next_execution, $next_execution_after, $next_execution_before, $next_execution_exists, $next_execution_start, $next_execution_strictly_after, $next_execution_strictly_before, $residential_device, $residential_device2, $residential_device_exists, $retail_account, $retail_account2, $retail_account_exists, $unit, $unit_end, $unit_exact, $unit_partial, $unit_start, $user, $user2, $user_exists, $_order_call_direction, $_order_email, $_order_frequency, $_order_id, $_order_last_execution_error, $_order_last_execution, $_order_name, $_order_next_execution, $_order_unit, $_items_per_page, $_page, $_properties, $_timezone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCallCsvSchedulerCollection'
     *
     * @param  string $call_csv_notification_template (optional)
     * @param  string $call_csv_notification_template2 (optional)
     * @param  bool $call_csv_notification_template_exists (optional)
     * @param  string $call_direction (optional)
     * @param  string $call_direction_end (optional)
     * @param  string $call_direction_exact (optional)
     * @param  bool $call_direction_exists (optional)
     * @param  string $call_direction_partial (optional)
     * @param  string $call_direction_start (optional)
     * @param  string $ddi (optional)
     * @param  string $ddi2 (optional)
     * @param  bool $ddi_exists (optional)
     * @param  string $email (optional)
     * @param  string $email_end (optional)
     * @param  string $email_exact (optional)
     * @param  string $email_partial (optional)
     * @param  string $email_start (optional)
     * @param  string $fax (optional)
     * @param  string $fax2 (optional)
     * @param  bool $fax_exists (optional)
     * @param  int $frequency (optional)
     * @param  string $frequency_between (optional)
     * @param  string $frequency_gt (optional)
     * @param  string $frequency_gte (optional)
     * @param  string $frequency_lt (optional)
     * @param  string $frequency_lte (optional)
     * @param  string $friend (optional)
     * @param  string $friend2 (optional)
     * @param  bool $friend_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $last_execution (optional)
     * @param  string $last_execution_error (optional)
     * @param  string $last_execution_error_end (optional)
     * @param  string $last_execution_error_exact (optional)
     * @param  bool $last_execution_error_exists (optional)
     * @param  string $last_execution_error_partial (optional)
     * @param  string $last_execution_error_start (optional)
     * @param  string $last_execution_after (optional)
     * @param  string $last_execution_before (optional)
     * @param  bool $last_execution_exists (optional)
     * @param  string $last_execution_start (optional)
     * @param  string $last_execution_strictly_after (optional)
     * @param  string $last_execution_strictly_before (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $next_execution (optional)
     * @param  string $next_execution_after (optional)
     * @param  string $next_execution_before (optional)
     * @param  bool $next_execution_exists (optional)
     * @param  string $next_execution_start (optional)
     * @param  string $next_execution_strictly_after (optional)
     * @param  string $next_execution_strictly_before (optional)
     * @param  string $residential_device (optional)
     * @param  string $residential_device2 (optional)
     * @param  bool $residential_device_exists (optional)
     * @param  string $retail_account (optional)
     * @param  string $retail_account2 (optional)
     * @param  bool $retail_account_exists (optional)
     * @param  string $unit (optional)
     * @param  string $unit_end (optional)
     * @param  string $unit_exact (optional)
     * @param  string $unit_partial (optional)
     * @param  string $unit_start (optional)
     * @param  string $user (optional)
     * @param  string $user2 (optional)
     * @param  bool $user_exists (optional)
     * @param  string $_order_call_direction (optional)
     * @param  string $_order_email (optional)
     * @param  string $_order_frequency (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_last_execution_error (optional)
     * @param  string $_order_last_execution (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_next_execution (optional)
     * @param  string $_order_unit (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCallCsvSchedulerCollectionRequest($call_csv_notification_template = null, $call_csv_notification_template2 = null, $call_csv_notification_template_exists = null, $call_direction = null, $call_direction_end = null, $call_direction_exact = null, $call_direction_exists = null, $call_direction_partial = null, $call_direction_start = null, $ddi = null, $ddi2 = null, $ddi_exists = null, $email = null, $email_end = null, $email_exact = null, $email_partial = null, $email_start = null, $fax = null, $fax2 = null, $fax_exists = null, $frequency = null, $frequency_between = null, $frequency_gt = null, $frequency_gte = null, $frequency_lt = null, $frequency_lte = null, $friend = null, $friend2 = null, $friend_exists = null, $id_exact = null, $last_execution = null, $last_execution_error = null, $last_execution_error_end = null, $last_execution_error_exact = null, $last_execution_error_exists = null, $last_execution_error_partial = null, $last_execution_error_start = null, $last_execution_after = null, $last_execution_before = null, $last_execution_exists = null, $last_execution_start = null, $last_execution_strictly_after = null, $last_execution_strictly_before = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $next_execution = null, $next_execution_after = null, $next_execution_before = null, $next_execution_exists = null, $next_execution_start = null, $next_execution_strictly_after = null, $next_execution_strictly_before = null, $residential_device = null, $residential_device2 = null, $residential_device_exists = null, $retail_account = null, $retail_account2 = null, $retail_account_exists = null, $unit = null, $unit_end = null, $unit_exact = null, $unit_partial = null, $unit_start = null, $user = null, $user2 = null, $user_exists = null, $_order_call_direction = null, $_order_email = null, $_order_frequency = null, $_order_id = null, $_order_last_execution_error = null, $_order_last_execution = null, $_order_name = null, $_order_next_execution = null, $_order_unit = null, $_items_per_page = null, $_page = null, $_properties = null, $_timezone = null)
    {

        $resourcePath = '/call_csv_schedulers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($call_csv_notification_template !== null) {
            $queryParams['callCsvNotificationTemplate'] = ObjectSerializer::toQueryValue($call_csv_notification_template);
        }
        // query params
        if ($call_csv_notification_template2 !== null) {
            $queryParams['callCsvNotificationTemplate[]'] = ObjectSerializer::toQueryValue($call_csv_notification_template2);
        }
        // query params
        if ($call_csv_notification_template_exists !== null) {
            $queryParams['callCsvNotificationTemplate[exists]'] = ObjectSerializer::toQueryValue($call_csv_notification_template_exists);
        }
        // query params
        if ($call_direction !== null) {
            $queryParams['callDirection'] = ObjectSerializer::toQueryValue($call_direction);
        }
        // query params
        if ($call_direction_end !== null) {
            $queryParams['callDirection[end]'] = ObjectSerializer::toQueryValue($call_direction_end);
        }
        // query params
        if ($call_direction_exact !== null) {
            $queryParams['callDirection[exact]'] = ObjectSerializer::toQueryValue($call_direction_exact);
        }
        // query params
        if ($call_direction_exists !== null) {
            $queryParams['callDirection[exists]'] = ObjectSerializer::toQueryValue($call_direction_exists);
        }
        // query params
        if ($call_direction_partial !== null) {
            $queryParams['callDirection[partial]'] = ObjectSerializer::toQueryValue($call_direction_partial);
        }
        // query params
        if ($call_direction_start !== null) {
            $queryParams['callDirection[start]'] = ObjectSerializer::toQueryValue($call_direction_start);
        }
        // query params
        if ($ddi !== null) {
            $queryParams['ddi'] = ObjectSerializer::toQueryValue($ddi);
        }
        // query params
        if ($ddi2 !== null) {
            $queryParams['ddi[]'] = ObjectSerializer::toQueryValue($ddi2);
        }
        // query params
        if ($ddi_exists !== null) {
            $queryParams['ddi[exists]'] = ObjectSerializer::toQueryValue($ddi_exists);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email);
        }
        // query params
        if ($email_end !== null) {
            $queryParams['email[end]'] = ObjectSerializer::toQueryValue($email_end);
        }
        // query params
        if ($email_exact !== null) {
            $queryParams['email[exact]'] = ObjectSerializer::toQueryValue($email_exact);
        }
        // query params
        if ($email_partial !== null) {
            $queryParams['email[partial]'] = ObjectSerializer::toQueryValue($email_partial);
        }
        // query params
        if ($email_start !== null) {
            $queryParams['email[start]'] = ObjectSerializer::toQueryValue($email_start);
        }
        // query params
        if ($fax !== null) {
            $queryParams['fax'] = ObjectSerializer::toQueryValue($fax);
        }
        // query params
        if ($fax2 !== null) {
            $queryParams['fax[]'] = ObjectSerializer::toQueryValue($fax2);
        }
        // query params
        if ($fax_exists !== null) {
            $queryParams['fax[exists]'] = ObjectSerializer::toQueryValue($fax_exists);
        }
        // query params
        if ($frequency !== null) {
            $queryParams['frequency'] = ObjectSerializer::toQueryValue($frequency);
        }
        // query params
        if ($frequency_between !== null) {
            $queryParams['frequency[between]'] = ObjectSerializer::toQueryValue($frequency_between);
        }
        // query params
        if ($frequency_gt !== null) {
            $queryParams['frequency[gt]'] = ObjectSerializer::toQueryValue($frequency_gt);
        }
        // query params
        if ($frequency_gte !== null) {
            $queryParams['frequency[gte]'] = ObjectSerializer::toQueryValue($frequency_gte);
        }
        // query params
        if ($frequency_lt !== null) {
            $queryParams['frequency[lt]'] = ObjectSerializer::toQueryValue($frequency_lt);
        }
        // query params
        if ($frequency_lte !== null) {
            $queryParams['frequency[lte]'] = ObjectSerializer::toQueryValue($frequency_lte);
        }
        // query params
        if ($friend !== null) {
            $queryParams['friend'] = ObjectSerializer::toQueryValue($friend);
        }
        // query params
        if ($friend2 !== null) {
            $queryParams['friend[]'] = ObjectSerializer::toQueryValue($friend2);
        }
        // query params
        if ($friend_exists !== null) {
            $queryParams['friend[exists]'] = ObjectSerializer::toQueryValue($friend_exists);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($last_execution !== null) {
            $queryParams['lastExecution'] = ObjectSerializer::toQueryValue($last_execution);
        }
        // query params
        if ($last_execution_error !== null) {
            $queryParams['lastExecutionError'] = ObjectSerializer::toQueryValue($last_execution_error);
        }
        // query params
        if ($last_execution_error_end !== null) {
            $queryParams['lastExecutionError[end]'] = ObjectSerializer::toQueryValue($last_execution_error_end);
        }
        // query params
        if ($last_execution_error_exact !== null) {
            $queryParams['lastExecutionError[exact]'] = ObjectSerializer::toQueryValue($last_execution_error_exact);
        }
        // query params
        if ($last_execution_error_exists !== null) {
            $queryParams['lastExecutionError[exists]'] = ObjectSerializer::toQueryValue($last_execution_error_exists);
        }
        // query params
        if ($last_execution_error_partial !== null) {
            $queryParams['lastExecutionError[partial]'] = ObjectSerializer::toQueryValue($last_execution_error_partial);
        }
        // query params
        if ($last_execution_error_start !== null) {
            $queryParams['lastExecutionError[start]'] = ObjectSerializer::toQueryValue($last_execution_error_start);
        }
        // query params
        if ($last_execution_after !== null) {
            $queryParams['lastExecution[after]'] = ObjectSerializer::toQueryValue($last_execution_after);
        }
        // query params
        if ($last_execution_before !== null) {
            $queryParams['lastExecution[before]'] = ObjectSerializer::toQueryValue($last_execution_before);
        }
        // query params
        if ($last_execution_exists !== null) {
            $queryParams['lastExecution[exists]'] = ObjectSerializer::toQueryValue($last_execution_exists);
        }
        // query params
        if ($last_execution_start !== null) {
            $queryParams['lastExecution[start]'] = ObjectSerializer::toQueryValue($last_execution_start);
        }
        // query params
        if ($last_execution_strictly_after !== null) {
            $queryParams['lastExecution[strictly_after]'] = ObjectSerializer::toQueryValue($last_execution_strictly_after);
        }
        // query params
        if ($last_execution_strictly_before !== null) {
            $queryParams['lastExecution[strictly_before]'] = ObjectSerializer::toQueryValue($last_execution_strictly_before);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_end !== null) {
            $queryParams['name[end]'] = ObjectSerializer::toQueryValue($name_end);
        }
        // query params
        if ($name_exact !== null) {
            $queryParams['name[exact]'] = ObjectSerializer::toQueryValue($name_exact);
        }
        // query params
        if ($name_partial !== null) {
            $queryParams['name[partial]'] = ObjectSerializer::toQueryValue($name_partial);
        }
        // query params
        if ($name_start !== null) {
            $queryParams['name[start]'] = ObjectSerializer::toQueryValue($name_start);
        }
        // query params
        if ($next_execution !== null) {
            $queryParams['nextExecution'] = ObjectSerializer::toQueryValue($next_execution);
        }
        // query params
        if ($next_execution_after !== null) {
            $queryParams['nextExecution[after]'] = ObjectSerializer::toQueryValue($next_execution_after);
        }
        // query params
        if ($next_execution_before !== null) {
            $queryParams['nextExecution[before]'] = ObjectSerializer::toQueryValue($next_execution_before);
        }
        // query params
        if ($next_execution_exists !== null) {
            $queryParams['nextExecution[exists]'] = ObjectSerializer::toQueryValue($next_execution_exists);
        }
        // query params
        if ($next_execution_start !== null) {
            $queryParams['nextExecution[start]'] = ObjectSerializer::toQueryValue($next_execution_start);
        }
        // query params
        if ($next_execution_strictly_after !== null) {
            $queryParams['nextExecution[strictly_after]'] = ObjectSerializer::toQueryValue($next_execution_strictly_after);
        }
        // query params
        if ($next_execution_strictly_before !== null) {
            $queryParams['nextExecution[strictly_before]'] = ObjectSerializer::toQueryValue($next_execution_strictly_before);
        }
        // query params
        if ($residential_device !== null) {
            $queryParams['residentialDevice'] = ObjectSerializer::toQueryValue($residential_device);
        }
        // query params
        if ($residential_device2 !== null) {
            $queryParams['residentialDevice[]'] = ObjectSerializer::toQueryValue($residential_device2);
        }
        // query params
        if ($residential_device_exists !== null) {
            $queryParams['residentialDevice[exists]'] = ObjectSerializer::toQueryValue($residential_device_exists);
        }
        // query params
        if ($retail_account !== null) {
            $queryParams['retailAccount'] = ObjectSerializer::toQueryValue($retail_account);
        }
        // query params
        if ($retail_account2 !== null) {
            $queryParams['retailAccount[]'] = ObjectSerializer::toQueryValue($retail_account2);
        }
        // query params
        if ($retail_account_exists !== null) {
            $queryParams['retailAccount[exists]'] = ObjectSerializer::toQueryValue($retail_account_exists);
        }
        // query params
        if ($unit !== null) {
            $queryParams['unit'] = ObjectSerializer::toQueryValue($unit);
        }
        // query params
        if ($unit_end !== null) {
            $queryParams['unit[end]'] = ObjectSerializer::toQueryValue($unit_end);
        }
        // query params
        if ($unit_exact !== null) {
            $queryParams['unit[exact]'] = ObjectSerializer::toQueryValue($unit_exact);
        }
        // query params
        if ($unit_partial !== null) {
            $queryParams['unit[partial]'] = ObjectSerializer::toQueryValue($unit_partial);
        }
        // query params
        if ($unit_start !== null) {
            $queryParams['unit[start]'] = ObjectSerializer::toQueryValue($unit_start);
        }
        // query params
        if ($user !== null) {
            $queryParams['user'] = ObjectSerializer::toQueryValue($user);
        }
        // query params
        if ($user2 !== null) {
            $queryParams['user[]'] = ObjectSerializer::toQueryValue($user2);
        }
        // query params
        if ($user_exists !== null) {
            $queryParams['user[exists]'] = ObjectSerializer::toQueryValue($user_exists);
        }
        // query params
        if ($_order_call_direction !== null) {
            $queryParams['_order[callDirection]'] = ObjectSerializer::toQueryValue($_order_call_direction);
        }
        // query params
        if ($_order_email !== null) {
            $queryParams['_order[email]'] = ObjectSerializer::toQueryValue($_order_email);
        }
        // query params
        if ($_order_frequency !== null) {
            $queryParams['_order[frequency]'] = ObjectSerializer::toQueryValue($_order_frequency);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_last_execution_error !== null) {
            $queryParams['_order[lastExecutionError]'] = ObjectSerializer::toQueryValue($_order_last_execution_error);
        }
        // query params
        if ($_order_last_execution !== null) {
            $queryParams['_order[lastExecution]'] = ObjectSerializer::toQueryValue($_order_last_execution);
        }
        // query params
        if ($_order_name !== null) {
            $queryParams['_order[name]'] = ObjectSerializer::toQueryValue($_order_name);
        }
        // query params
        if ($_order_next_execution !== null) {
            $queryParams['_order[nextExecution]'] = ObjectSerializer::toQueryValue($_order_next_execution);
        }
        // query params
        if ($_order_unit !== null) {
            $queryParams['_order[unit]'] = ObjectSerializer::toQueryValue($_order_unit);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }
        // query params
        if ($_timezone !== null) {
            $queryParams['_timezone'] = ObjectSerializer::toQueryValue($_timezone);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCallCsvSchedulerItem
     *
     * Retrieves a CallCsvScheduler resource.
     *
     * @param  string $id id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CallCsvSchedulerDetailed
     */
    public function getCallCsvSchedulerItem($id, $_timezone = null)
    {
        list($response) = $this->getCallCsvSchedulerItemWithHttpInfo($id, $_timezone);
        return $response;
    }

    /**
     * Operation getCallCsvSchedulerItemWithHttpInfo
     *
     * Retrieves a CallCsvScheduler resource.
     *
     * @param  string $id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CallCsvSchedulerDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCallCsvSchedulerItemWithHttpInfo($id, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\CallCsvSchedulerDetailed';
        $request = $this->getCallCsvSchedulerItemRequest($id, $_timezone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CallCsvSchedulerDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCallCsvSchedulerItemAsync
     *
     * Retrieves a CallCsvScheduler resource.
     *
     * @param  string $id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallCsvSchedulerItemAsync($id, $_timezone = null)
    {
        return $this->getCallCsvSchedulerItemAsyncWithHttpInfo($id, $_timezone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCallCsvSchedulerItemAsyncWithHttpInfo
     *
     * Retrieves a CallCsvScheduler resource.
     *
     * @param  string $id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallCsvSchedulerItemAsyncWithHttpInfo($id, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\CallCsvSchedulerDetailed';
        $request = $this->getCallCsvSchedulerItemRequest($id, $_timezone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCallCsvSchedulerItem'
     *
     * @param  string $id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCallCsvSchedulerItemRequest($id, $_timezone = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCallCsvSchedulerItem'
            );
        }

        $resourcePath = '/call_csv_schedulers/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_timezone !== null) {
            $queryParams['_timezone'] = ObjectSerializer::toQueryValue($_timezone);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCallForwardSettingCollection
     *
     * Retrieves the collection of CallForwardSetting resources.
     *
     * @param  string $call_forward_type call_forward_type (optional)
     * @param  string $call_forward_type_end call_forward_type_end (optional)
     * @param  string $call_forward_type_exact call_forward_type_exact (optional)
     * @param  string $call_forward_type_partial call_forward_type_partial (optional)
     * @param  string $call_forward_type_start call_forward_type_start (optional)
     * @param  string $call_type_filter call_type_filter (optional)
     * @param  string $call_type_filter_end call_type_filter_end (optional)
     * @param  string $call_type_filter_exact call_type_filter_exact (optional)
     * @param  string $call_type_filter_partial call_type_filter_partial (optional)
     * @param  string $call_type_filter_start call_type_filter_start (optional)
     * @param  string $cfw_to_retail_account cfw_to_retail_account (optional)
     * @param  string $cfw_to_retail_account2 cfw_to_retail_account2 (optional)
     * @param  bool $cfw_to_retail_account_exists cfw_to_retail_account_exists (optional)
     * @param  string $ddi ddi (optional)
     * @param  string $ddi2 ddi2 (optional)
     * @param  bool $ddi_exists ddi_exists (optional)
     * @param  bool $enabled enabled (optional)
     * @param  string $extension extension (optional)
     * @param  string $extension2 extension2 (optional)
     * @param  bool $extension_exists extension_exists (optional)
     * @param  string $friend friend (optional)
     * @param  string $friend2 friend2 (optional)
     * @param  bool $friend_exists friend_exists (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $number_country number_country (optional)
     * @param  string $number_country2 number_country2 (optional)
     * @param  bool $number_country_exists number_country_exists (optional)
     * @param  string $number_value number_value (optional)
     * @param  string $number_value_end number_value_end (optional)
     * @param  string $number_value_exact number_value_exact (optional)
     * @param  bool $number_value_exists number_value_exists (optional)
     * @param  string $number_value_partial number_value_partial (optional)
     * @param  string $number_value_start number_value_start (optional)
     * @param  string $residential_device residential_device (optional)
     * @param  string $residential_device2 residential_device2 (optional)
     * @param  bool $residential_device_exists residential_device_exists (optional)
     * @param  string $retail_account retail_account (optional)
     * @param  string $retail_account2 retail_account2 (optional)
     * @param  bool $retail_account_exists retail_account_exists (optional)
     * @param  string $target_type target_type (optional)
     * @param  string $target_type_end target_type_end (optional)
     * @param  string $target_type_exact target_type_exact (optional)
     * @param  bool $target_type_exists target_type_exists (optional)
     * @param  string $target_type_partial target_type_partial (optional)
     * @param  string $target_type_start target_type_start (optional)
     * @param  string $user user (optional)
     * @param  string $user2 user2 (optional)
     * @param  bool $user_exists user_exists (optional)
     * @param  string $voice_mail_user voice_mail_user (optional)
     * @param  string $voice_mail_user2 voice_mail_user2 (optional)
     * @param  bool $voice_mail_user_exists voice_mail_user_exists (optional)
     * @param  string $_order_call_forward_type _order_call_forward_type (optional)
     * @param  string $_order_call_type_filter _order_call_type_filter (optional)
     * @param  string $_order_enabled _order_enabled (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_number_value _order_number_value (optional)
     * @param  string $_order_target_type _order_target_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CallForwardSettingCollection[]
     */
    public function getCallForwardSettingCollection($call_forward_type = null, $call_forward_type_end = null, $call_forward_type_exact = null, $call_forward_type_partial = null, $call_forward_type_start = null, $call_type_filter = null, $call_type_filter_end = null, $call_type_filter_exact = null, $call_type_filter_partial = null, $call_type_filter_start = null, $cfw_to_retail_account = null, $cfw_to_retail_account2 = null, $cfw_to_retail_account_exists = null, $ddi = null, $ddi2 = null, $ddi_exists = null, $enabled = null, $extension = null, $extension2 = null, $extension_exists = null, $friend = null, $friend2 = null, $friend_exists = null, $id_exact = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $number_value = null, $number_value_end = null, $number_value_exact = null, $number_value_exists = null, $number_value_partial = null, $number_value_start = null, $residential_device = null, $residential_device2 = null, $residential_device_exists = null, $retail_account = null, $retail_account2 = null, $retail_account_exists = null, $target_type = null, $target_type_end = null, $target_type_exact = null, $target_type_exists = null, $target_type_partial = null, $target_type_start = null, $user = null, $user2 = null, $user_exists = null, $voice_mail_user = null, $voice_mail_user2 = null, $voice_mail_user_exists = null, $_order_call_forward_type = null, $_order_call_type_filter = null, $_order_enabled = null, $_order_id = null, $_order_number_value = null, $_order_target_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getCallForwardSettingCollectionWithHttpInfo($call_forward_type, $call_forward_type_end, $call_forward_type_exact, $call_forward_type_partial, $call_forward_type_start, $call_type_filter, $call_type_filter_end, $call_type_filter_exact, $call_type_filter_partial, $call_type_filter_start, $cfw_to_retail_account, $cfw_to_retail_account2, $cfw_to_retail_account_exists, $ddi, $ddi2, $ddi_exists, $enabled, $extension, $extension2, $extension_exists, $friend, $friend2, $friend_exists, $id_exact, $number_country, $number_country2, $number_country_exists, $number_value, $number_value_end, $number_value_exact, $number_value_exists, $number_value_partial, $number_value_start, $residential_device, $residential_device2, $residential_device_exists, $retail_account, $retail_account2, $retail_account_exists, $target_type, $target_type_end, $target_type_exact, $target_type_exists, $target_type_partial, $target_type_start, $user, $user2, $user_exists, $voice_mail_user, $voice_mail_user2, $voice_mail_user_exists, $_order_call_forward_type, $_order_call_type_filter, $_order_enabled, $_order_id, $_order_number_value, $_order_target_type, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getCallForwardSettingCollectionWithHttpInfo
     *
     * Retrieves the collection of CallForwardSetting resources.
     *
     * @param  string $call_forward_type (optional)
     * @param  string $call_forward_type_end (optional)
     * @param  string $call_forward_type_exact (optional)
     * @param  string $call_forward_type_partial (optional)
     * @param  string $call_forward_type_start (optional)
     * @param  string $call_type_filter (optional)
     * @param  string $call_type_filter_end (optional)
     * @param  string $call_type_filter_exact (optional)
     * @param  string $call_type_filter_partial (optional)
     * @param  string $call_type_filter_start (optional)
     * @param  string $cfw_to_retail_account (optional)
     * @param  string $cfw_to_retail_account2 (optional)
     * @param  bool $cfw_to_retail_account_exists (optional)
     * @param  string $ddi (optional)
     * @param  string $ddi2 (optional)
     * @param  bool $ddi_exists (optional)
     * @param  bool $enabled (optional)
     * @param  string $extension (optional)
     * @param  string $extension2 (optional)
     * @param  bool $extension_exists (optional)
     * @param  string $friend (optional)
     * @param  string $friend2 (optional)
     * @param  bool $friend_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $number_value (optional)
     * @param  string $number_value_end (optional)
     * @param  string $number_value_exact (optional)
     * @param  bool $number_value_exists (optional)
     * @param  string $number_value_partial (optional)
     * @param  string $number_value_start (optional)
     * @param  string $residential_device (optional)
     * @param  string $residential_device2 (optional)
     * @param  bool $residential_device_exists (optional)
     * @param  string $retail_account (optional)
     * @param  string $retail_account2 (optional)
     * @param  bool $retail_account_exists (optional)
     * @param  string $target_type (optional)
     * @param  string $target_type_end (optional)
     * @param  string $target_type_exact (optional)
     * @param  bool $target_type_exists (optional)
     * @param  string $target_type_partial (optional)
     * @param  string $target_type_start (optional)
     * @param  string $user (optional)
     * @param  string $user2 (optional)
     * @param  bool $user_exists (optional)
     * @param  string $voice_mail_user (optional)
     * @param  string $voice_mail_user2 (optional)
     * @param  bool $voice_mail_user_exists (optional)
     * @param  string $_order_call_forward_type (optional)
     * @param  string $_order_call_type_filter (optional)
     * @param  string $_order_enabled (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_number_value (optional)
     * @param  string $_order_target_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CallForwardSettingCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCallForwardSettingCollectionWithHttpInfo($call_forward_type = null, $call_forward_type_end = null, $call_forward_type_exact = null, $call_forward_type_partial = null, $call_forward_type_start = null, $call_type_filter = null, $call_type_filter_end = null, $call_type_filter_exact = null, $call_type_filter_partial = null, $call_type_filter_start = null, $cfw_to_retail_account = null, $cfw_to_retail_account2 = null, $cfw_to_retail_account_exists = null, $ddi = null, $ddi2 = null, $ddi_exists = null, $enabled = null, $extension = null, $extension2 = null, $extension_exists = null, $friend = null, $friend2 = null, $friend_exists = null, $id_exact = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $number_value = null, $number_value_end = null, $number_value_exact = null, $number_value_exists = null, $number_value_partial = null, $number_value_start = null, $residential_device = null, $residential_device2 = null, $residential_device_exists = null, $retail_account = null, $retail_account2 = null, $retail_account_exists = null, $target_type = null, $target_type_end = null, $target_type_exact = null, $target_type_exists = null, $target_type_partial = null, $target_type_start = null, $user = null, $user2 = null, $user_exists = null, $voice_mail_user = null, $voice_mail_user2 = null, $voice_mail_user_exists = null, $_order_call_forward_type = null, $_order_call_type_filter = null, $_order_enabled = null, $_order_id = null, $_order_number_value = null, $_order_target_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\CallForwardSettingCollection[]';
        $request = $this->getCallForwardSettingCollectionRequest($call_forward_type, $call_forward_type_end, $call_forward_type_exact, $call_forward_type_partial, $call_forward_type_start, $call_type_filter, $call_type_filter_end, $call_type_filter_exact, $call_type_filter_partial, $call_type_filter_start, $cfw_to_retail_account, $cfw_to_retail_account2, $cfw_to_retail_account_exists, $ddi, $ddi2, $ddi_exists, $enabled, $extension, $extension2, $extension_exists, $friend, $friend2, $friend_exists, $id_exact, $number_country, $number_country2, $number_country_exists, $number_value, $number_value_end, $number_value_exact, $number_value_exists, $number_value_partial, $number_value_start, $residential_device, $residential_device2, $residential_device_exists, $retail_account, $retail_account2, $retail_account_exists, $target_type, $target_type_end, $target_type_exact, $target_type_exists, $target_type_partial, $target_type_start, $user, $user2, $user_exists, $voice_mail_user, $voice_mail_user2, $voice_mail_user_exists, $_order_call_forward_type, $_order_call_type_filter, $_order_enabled, $_order_id, $_order_number_value, $_order_target_type, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CallForwardSettingCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCallForwardSettingCollectionAsync
     *
     * Retrieves the collection of CallForwardSetting resources.
     *
     * @param  string $call_forward_type (optional)
     * @param  string $call_forward_type_end (optional)
     * @param  string $call_forward_type_exact (optional)
     * @param  string $call_forward_type_partial (optional)
     * @param  string $call_forward_type_start (optional)
     * @param  string $call_type_filter (optional)
     * @param  string $call_type_filter_end (optional)
     * @param  string $call_type_filter_exact (optional)
     * @param  string $call_type_filter_partial (optional)
     * @param  string $call_type_filter_start (optional)
     * @param  string $cfw_to_retail_account (optional)
     * @param  string $cfw_to_retail_account2 (optional)
     * @param  bool $cfw_to_retail_account_exists (optional)
     * @param  string $ddi (optional)
     * @param  string $ddi2 (optional)
     * @param  bool $ddi_exists (optional)
     * @param  bool $enabled (optional)
     * @param  string $extension (optional)
     * @param  string $extension2 (optional)
     * @param  bool $extension_exists (optional)
     * @param  string $friend (optional)
     * @param  string $friend2 (optional)
     * @param  bool $friend_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $number_value (optional)
     * @param  string $number_value_end (optional)
     * @param  string $number_value_exact (optional)
     * @param  bool $number_value_exists (optional)
     * @param  string $number_value_partial (optional)
     * @param  string $number_value_start (optional)
     * @param  string $residential_device (optional)
     * @param  string $residential_device2 (optional)
     * @param  bool $residential_device_exists (optional)
     * @param  string $retail_account (optional)
     * @param  string $retail_account2 (optional)
     * @param  bool $retail_account_exists (optional)
     * @param  string $target_type (optional)
     * @param  string $target_type_end (optional)
     * @param  string $target_type_exact (optional)
     * @param  bool $target_type_exists (optional)
     * @param  string $target_type_partial (optional)
     * @param  string $target_type_start (optional)
     * @param  string $user (optional)
     * @param  string $user2 (optional)
     * @param  bool $user_exists (optional)
     * @param  string $voice_mail_user (optional)
     * @param  string $voice_mail_user2 (optional)
     * @param  bool $voice_mail_user_exists (optional)
     * @param  string $_order_call_forward_type (optional)
     * @param  string $_order_call_type_filter (optional)
     * @param  string $_order_enabled (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_number_value (optional)
     * @param  string $_order_target_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallForwardSettingCollectionAsync($call_forward_type = null, $call_forward_type_end = null, $call_forward_type_exact = null, $call_forward_type_partial = null, $call_forward_type_start = null, $call_type_filter = null, $call_type_filter_end = null, $call_type_filter_exact = null, $call_type_filter_partial = null, $call_type_filter_start = null, $cfw_to_retail_account = null, $cfw_to_retail_account2 = null, $cfw_to_retail_account_exists = null, $ddi = null, $ddi2 = null, $ddi_exists = null, $enabled = null, $extension = null, $extension2 = null, $extension_exists = null, $friend = null, $friend2 = null, $friend_exists = null, $id_exact = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $number_value = null, $number_value_end = null, $number_value_exact = null, $number_value_exists = null, $number_value_partial = null, $number_value_start = null, $residential_device = null, $residential_device2 = null, $residential_device_exists = null, $retail_account = null, $retail_account2 = null, $retail_account_exists = null, $target_type = null, $target_type_end = null, $target_type_exact = null, $target_type_exists = null, $target_type_partial = null, $target_type_start = null, $user = null, $user2 = null, $user_exists = null, $voice_mail_user = null, $voice_mail_user2 = null, $voice_mail_user_exists = null, $_order_call_forward_type = null, $_order_call_type_filter = null, $_order_enabled = null, $_order_id = null, $_order_number_value = null, $_order_target_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getCallForwardSettingCollectionAsyncWithHttpInfo($call_forward_type, $call_forward_type_end, $call_forward_type_exact, $call_forward_type_partial, $call_forward_type_start, $call_type_filter, $call_type_filter_end, $call_type_filter_exact, $call_type_filter_partial, $call_type_filter_start, $cfw_to_retail_account, $cfw_to_retail_account2, $cfw_to_retail_account_exists, $ddi, $ddi2, $ddi_exists, $enabled, $extension, $extension2, $extension_exists, $friend, $friend2, $friend_exists, $id_exact, $number_country, $number_country2, $number_country_exists, $number_value, $number_value_end, $number_value_exact, $number_value_exists, $number_value_partial, $number_value_start, $residential_device, $residential_device2, $residential_device_exists, $retail_account, $retail_account2, $retail_account_exists, $target_type, $target_type_end, $target_type_exact, $target_type_exists, $target_type_partial, $target_type_start, $user, $user2, $user_exists, $voice_mail_user, $voice_mail_user2, $voice_mail_user_exists, $_order_call_forward_type, $_order_call_type_filter, $_order_enabled, $_order_id, $_order_number_value, $_order_target_type, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCallForwardSettingCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of CallForwardSetting resources.
     *
     * @param  string $call_forward_type (optional)
     * @param  string $call_forward_type_end (optional)
     * @param  string $call_forward_type_exact (optional)
     * @param  string $call_forward_type_partial (optional)
     * @param  string $call_forward_type_start (optional)
     * @param  string $call_type_filter (optional)
     * @param  string $call_type_filter_end (optional)
     * @param  string $call_type_filter_exact (optional)
     * @param  string $call_type_filter_partial (optional)
     * @param  string $call_type_filter_start (optional)
     * @param  string $cfw_to_retail_account (optional)
     * @param  string $cfw_to_retail_account2 (optional)
     * @param  bool $cfw_to_retail_account_exists (optional)
     * @param  string $ddi (optional)
     * @param  string $ddi2 (optional)
     * @param  bool $ddi_exists (optional)
     * @param  bool $enabled (optional)
     * @param  string $extension (optional)
     * @param  string $extension2 (optional)
     * @param  bool $extension_exists (optional)
     * @param  string $friend (optional)
     * @param  string $friend2 (optional)
     * @param  bool $friend_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $number_value (optional)
     * @param  string $number_value_end (optional)
     * @param  string $number_value_exact (optional)
     * @param  bool $number_value_exists (optional)
     * @param  string $number_value_partial (optional)
     * @param  string $number_value_start (optional)
     * @param  string $residential_device (optional)
     * @param  string $residential_device2 (optional)
     * @param  bool $residential_device_exists (optional)
     * @param  string $retail_account (optional)
     * @param  string $retail_account2 (optional)
     * @param  bool $retail_account_exists (optional)
     * @param  string $target_type (optional)
     * @param  string $target_type_end (optional)
     * @param  string $target_type_exact (optional)
     * @param  bool $target_type_exists (optional)
     * @param  string $target_type_partial (optional)
     * @param  string $target_type_start (optional)
     * @param  string $user (optional)
     * @param  string $user2 (optional)
     * @param  bool $user_exists (optional)
     * @param  string $voice_mail_user (optional)
     * @param  string $voice_mail_user2 (optional)
     * @param  bool $voice_mail_user_exists (optional)
     * @param  string $_order_call_forward_type (optional)
     * @param  string $_order_call_type_filter (optional)
     * @param  string $_order_enabled (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_number_value (optional)
     * @param  string $_order_target_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallForwardSettingCollectionAsyncWithHttpInfo($call_forward_type = null, $call_forward_type_end = null, $call_forward_type_exact = null, $call_forward_type_partial = null, $call_forward_type_start = null, $call_type_filter = null, $call_type_filter_end = null, $call_type_filter_exact = null, $call_type_filter_partial = null, $call_type_filter_start = null, $cfw_to_retail_account = null, $cfw_to_retail_account2 = null, $cfw_to_retail_account_exists = null, $ddi = null, $ddi2 = null, $ddi_exists = null, $enabled = null, $extension = null, $extension2 = null, $extension_exists = null, $friend = null, $friend2 = null, $friend_exists = null, $id_exact = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $number_value = null, $number_value_end = null, $number_value_exact = null, $number_value_exists = null, $number_value_partial = null, $number_value_start = null, $residential_device = null, $residential_device2 = null, $residential_device_exists = null, $retail_account = null, $retail_account2 = null, $retail_account_exists = null, $target_type = null, $target_type_end = null, $target_type_exact = null, $target_type_exists = null, $target_type_partial = null, $target_type_start = null, $user = null, $user2 = null, $user_exists = null, $voice_mail_user = null, $voice_mail_user2 = null, $voice_mail_user_exists = null, $_order_call_forward_type = null, $_order_call_type_filter = null, $_order_enabled = null, $_order_id = null, $_order_number_value = null, $_order_target_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\CallForwardSettingCollection[]';
        $request = $this->getCallForwardSettingCollectionRequest($call_forward_type, $call_forward_type_end, $call_forward_type_exact, $call_forward_type_partial, $call_forward_type_start, $call_type_filter, $call_type_filter_end, $call_type_filter_exact, $call_type_filter_partial, $call_type_filter_start, $cfw_to_retail_account, $cfw_to_retail_account2, $cfw_to_retail_account_exists, $ddi, $ddi2, $ddi_exists, $enabled, $extension, $extension2, $extension_exists, $friend, $friend2, $friend_exists, $id_exact, $number_country, $number_country2, $number_country_exists, $number_value, $number_value_end, $number_value_exact, $number_value_exists, $number_value_partial, $number_value_start, $residential_device, $residential_device2, $residential_device_exists, $retail_account, $retail_account2, $retail_account_exists, $target_type, $target_type_end, $target_type_exact, $target_type_exists, $target_type_partial, $target_type_start, $user, $user2, $user_exists, $voice_mail_user, $voice_mail_user2, $voice_mail_user_exists, $_order_call_forward_type, $_order_call_type_filter, $_order_enabled, $_order_id, $_order_number_value, $_order_target_type, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCallForwardSettingCollection'
     *
     * @param  string $call_forward_type (optional)
     * @param  string $call_forward_type_end (optional)
     * @param  string $call_forward_type_exact (optional)
     * @param  string $call_forward_type_partial (optional)
     * @param  string $call_forward_type_start (optional)
     * @param  string $call_type_filter (optional)
     * @param  string $call_type_filter_end (optional)
     * @param  string $call_type_filter_exact (optional)
     * @param  string $call_type_filter_partial (optional)
     * @param  string $call_type_filter_start (optional)
     * @param  string $cfw_to_retail_account (optional)
     * @param  string $cfw_to_retail_account2 (optional)
     * @param  bool $cfw_to_retail_account_exists (optional)
     * @param  string $ddi (optional)
     * @param  string $ddi2 (optional)
     * @param  bool $ddi_exists (optional)
     * @param  bool $enabled (optional)
     * @param  string $extension (optional)
     * @param  string $extension2 (optional)
     * @param  bool $extension_exists (optional)
     * @param  string $friend (optional)
     * @param  string $friend2 (optional)
     * @param  bool $friend_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $number_value (optional)
     * @param  string $number_value_end (optional)
     * @param  string $number_value_exact (optional)
     * @param  bool $number_value_exists (optional)
     * @param  string $number_value_partial (optional)
     * @param  string $number_value_start (optional)
     * @param  string $residential_device (optional)
     * @param  string $residential_device2 (optional)
     * @param  bool $residential_device_exists (optional)
     * @param  string $retail_account (optional)
     * @param  string $retail_account2 (optional)
     * @param  bool $retail_account_exists (optional)
     * @param  string $target_type (optional)
     * @param  string $target_type_end (optional)
     * @param  string $target_type_exact (optional)
     * @param  bool $target_type_exists (optional)
     * @param  string $target_type_partial (optional)
     * @param  string $target_type_start (optional)
     * @param  string $user (optional)
     * @param  string $user2 (optional)
     * @param  bool $user_exists (optional)
     * @param  string $voice_mail_user (optional)
     * @param  string $voice_mail_user2 (optional)
     * @param  bool $voice_mail_user_exists (optional)
     * @param  string $_order_call_forward_type (optional)
     * @param  string $_order_call_type_filter (optional)
     * @param  string $_order_enabled (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_number_value (optional)
     * @param  string $_order_target_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCallForwardSettingCollectionRequest($call_forward_type = null, $call_forward_type_end = null, $call_forward_type_exact = null, $call_forward_type_partial = null, $call_forward_type_start = null, $call_type_filter = null, $call_type_filter_end = null, $call_type_filter_exact = null, $call_type_filter_partial = null, $call_type_filter_start = null, $cfw_to_retail_account = null, $cfw_to_retail_account2 = null, $cfw_to_retail_account_exists = null, $ddi = null, $ddi2 = null, $ddi_exists = null, $enabled = null, $extension = null, $extension2 = null, $extension_exists = null, $friend = null, $friend2 = null, $friend_exists = null, $id_exact = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $number_value = null, $number_value_end = null, $number_value_exact = null, $number_value_exists = null, $number_value_partial = null, $number_value_start = null, $residential_device = null, $residential_device2 = null, $residential_device_exists = null, $retail_account = null, $retail_account2 = null, $retail_account_exists = null, $target_type = null, $target_type_end = null, $target_type_exact = null, $target_type_exists = null, $target_type_partial = null, $target_type_start = null, $user = null, $user2 = null, $user_exists = null, $voice_mail_user = null, $voice_mail_user2 = null, $voice_mail_user_exists = null, $_order_call_forward_type = null, $_order_call_type_filter = null, $_order_enabled = null, $_order_id = null, $_order_number_value = null, $_order_target_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/call_forward_settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($call_forward_type !== null) {
            $queryParams['callForwardType'] = ObjectSerializer::toQueryValue($call_forward_type);
        }
        // query params
        if ($call_forward_type_end !== null) {
            $queryParams['callForwardType[end]'] = ObjectSerializer::toQueryValue($call_forward_type_end);
        }
        // query params
        if ($call_forward_type_exact !== null) {
            $queryParams['callForwardType[exact]'] = ObjectSerializer::toQueryValue($call_forward_type_exact);
        }
        // query params
        if ($call_forward_type_partial !== null) {
            $queryParams['callForwardType[partial]'] = ObjectSerializer::toQueryValue($call_forward_type_partial);
        }
        // query params
        if ($call_forward_type_start !== null) {
            $queryParams['callForwardType[start]'] = ObjectSerializer::toQueryValue($call_forward_type_start);
        }
        // query params
        if ($call_type_filter !== null) {
            $queryParams['callTypeFilter'] = ObjectSerializer::toQueryValue($call_type_filter);
        }
        // query params
        if ($call_type_filter_end !== null) {
            $queryParams['callTypeFilter[end]'] = ObjectSerializer::toQueryValue($call_type_filter_end);
        }
        // query params
        if ($call_type_filter_exact !== null) {
            $queryParams['callTypeFilter[exact]'] = ObjectSerializer::toQueryValue($call_type_filter_exact);
        }
        // query params
        if ($call_type_filter_partial !== null) {
            $queryParams['callTypeFilter[partial]'] = ObjectSerializer::toQueryValue($call_type_filter_partial);
        }
        // query params
        if ($call_type_filter_start !== null) {
            $queryParams['callTypeFilter[start]'] = ObjectSerializer::toQueryValue($call_type_filter_start);
        }
        // query params
        if ($cfw_to_retail_account !== null) {
            $queryParams['cfwToRetailAccount'] = ObjectSerializer::toQueryValue($cfw_to_retail_account);
        }
        // query params
        if ($cfw_to_retail_account2 !== null) {
            $queryParams['cfwToRetailAccount[]'] = ObjectSerializer::toQueryValue($cfw_to_retail_account2);
        }
        // query params
        if ($cfw_to_retail_account_exists !== null) {
            $queryParams['cfwToRetailAccount[exists]'] = ObjectSerializer::toQueryValue($cfw_to_retail_account_exists);
        }
        // query params
        if ($ddi !== null) {
            $queryParams['ddi'] = ObjectSerializer::toQueryValue($ddi);
        }
        // query params
        if ($ddi2 !== null) {
            $queryParams['ddi[]'] = ObjectSerializer::toQueryValue($ddi2);
        }
        // query params
        if ($ddi_exists !== null) {
            $queryParams['ddi[exists]'] = ObjectSerializer::toQueryValue($ddi_exists);
        }
        // query params
        if ($enabled !== null) {
            $queryParams['enabled'] = ObjectSerializer::toQueryValue($enabled);
        }
        // query params
        if ($extension !== null) {
            $queryParams['extension'] = ObjectSerializer::toQueryValue($extension);
        }
        // query params
        if ($extension2 !== null) {
            $queryParams['extension[]'] = ObjectSerializer::toQueryValue($extension2);
        }
        // query params
        if ($extension_exists !== null) {
            $queryParams['extension[exists]'] = ObjectSerializer::toQueryValue($extension_exists);
        }
        // query params
        if ($friend !== null) {
            $queryParams['friend'] = ObjectSerializer::toQueryValue($friend);
        }
        // query params
        if ($friend2 !== null) {
            $queryParams['friend[]'] = ObjectSerializer::toQueryValue($friend2);
        }
        // query params
        if ($friend_exists !== null) {
            $queryParams['friend[exists]'] = ObjectSerializer::toQueryValue($friend_exists);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($number_country !== null) {
            $queryParams['numberCountry'] = ObjectSerializer::toQueryValue($number_country);
        }
        // query params
        if ($number_country2 !== null) {
            $queryParams['numberCountry[]'] = ObjectSerializer::toQueryValue($number_country2);
        }
        // query params
        if ($number_country_exists !== null) {
            $queryParams['numberCountry[exists]'] = ObjectSerializer::toQueryValue($number_country_exists);
        }
        // query params
        if ($number_value !== null) {
            $queryParams['numberValue'] = ObjectSerializer::toQueryValue($number_value);
        }
        // query params
        if ($number_value_end !== null) {
            $queryParams['numberValue[end]'] = ObjectSerializer::toQueryValue($number_value_end);
        }
        // query params
        if ($number_value_exact !== null) {
            $queryParams['numberValue[exact]'] = ObjectSerializer::toQueryValue($number_value_exact);
        }
        // query params
        if ($number_value_exists !== null) {
            $queryParams['numberValue[exists]'] = ObjectSerializer::toQueryValue($number_value_exists);
        }
        // query params
        if ($number_value_partial !== null) {
            $queryParams['numberValue[partial]'] = ObjectSerializer::toQueryValue($number_value_partial);
        }
        // query params
        if ($number_value_start !== null) {
            $queryParams['numberValue[start]'] = ObjectSerializer::toQueryValue($number_value_start);
        }
        // query params
        if ($residential_device !== null) {
            $queryParams['residentialDevice'] = ObjectSerializer::toQueryValue($residential_device);
        }
        // query params
        if ($residential_device2 !== null) {
            $queryParams['residentialDevice[]'] = ObjectSerializer::toQueryValue($residential_device2);
        }
        // query params
        if ($residential_device_exists !== null) {
            $queryParams['residentialDevice[exists]'] = ObjectSerializer::toQueryValue($residential_device_exists);
        }
        // query params
        if ($retail_account !== null) {
            $queryParams['retailAccount'] = ObjectSerializer::toQueryValue($retail_account);
        }
        // query params
        if ($retail_account2 !== null) {
            $queryParams['retailAccount[]'] = ObjectSerializer::toQueryValue($retail_account2);
        }
        // query params
        if ($retail_account_exists !== null) {
            $queryParams['retailAccount[exists]'] = ObjectSerializer::toQueryValue($retail_account_exists);
        }
        // query params
        if ($target_type !== null) {
            $queryParams['targetType'] = ObjectSerializer::toQueryValue($target_type);
        }
        // query params
        if ($target_type_end !== null) {
            $queryParams['targetType[end]'] = ObjectSerializer::toQueryValue($target_type_end);
        }
        // query params
        if ($target_type_exact !== null) {
            $queryParams['targetType[exact]'] = ObjectSerializer::toQueryValue($target_type_exact);
        }
        // query params
        if ($target_type_exists !== null) {
            $queryParams['targetType[exists]'] = ObjectSerializer::toQueryValue($target_type_exists);
        }
        // query params
        if ($target_type_partial !== null) {
            $queryParams['targetType[partial]'] = ObjectSerializer::toQueryValue($target_type_partial);
        }
        // query params
        if ($target_type_start !== null) {
            $queryParams['targetType[start]'] = ObjectSerializer::toQueryValue($target_type_start);
        }
        // query params
        if ($user !== null) {
            $queryParams['user'] = ObjectSerializer::toQueryValue($user);
        }
        // query params
        if ($user2 !== null) {
            $queryParams['user[]'] = ObjectSerializer::toQueryValue($user2);
        }
        // query params
        if ($user_exists !== null) {
            $queryParams['user[exists]'] = ObjectSerializer::toQueryValue($user_exists);
        }
        // query params
        if ($voice_mail_user !== null) {
            $queryParams['voiceMailUser'] = ObjectSerializer::toQueryValue($voice_mail_user);
        }
        // query params
        if ($voice_mail_user2 !== null) {
            $queryParams['voiceMailUser[]'] = ObjectSerializer::toQueryValue($voice_mail_user2);
        }
        // query params
        if ($voice_mail_user_exists !== null) {
            $queryParams['voiceMailUser[exists]'] = ObjectSerializer::toQueryValue($voice_mail_user_exists);
        }
        // query params
        if ($_order_call_forward_type !== null) {
            $queryParams['_order[callForwardType]'] = ObjectSerializer::toQueryValue($_order_call_forward_type);
        }
        // query params
        if ($_order_call_type_filter !== null) {
            $queryParams['_order[callTypeFilter]'] = ObjectSerializer::toQueryValue($_order_call_type_filter);
        }
        // query params
        if ($_order_enabled !== null) {
            $queryParams['_order[enabled]'] = ObjectSerializer::toQueryValue($_order_enabled);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_number_value !== null) {
            $queryParams['_order[numberValue]'] = ObjectSerializer::toQueryValue($_order_number_value);
        }
        // query params
        if ($_order_target_type !== null) {
            $queryParams['_order[targetType]'] = ObjectSerializer::toQueryValue($_order_target_type);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCallForwardSettingItem
     *
     * Retrieves a CallForwardSetting resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CallForwardSettingDetailed
     */
    public function getCallForwardSettingItem($id)
    {
        list($response) = $this->getCallForwardSettingItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getCallForwardSettingItemWithHttpInfo
     *
     * Retrieves a CallForwardSetting resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CallForwardSettingDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCallForwardSettingItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\CallForwardSettingDetailed';
        $request = $this->getCallForwardSettingItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CallForwardSettingDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCallForwardSettingItemAsync
     *
     * Retrieves a CallForwardSetting resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallForwardSettingItemAsync($id)
    {
        return $this->getCallForwardSettingItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCallForwardSettingItemAsyncWithHttpInfo
     *
     * Retrieves a CallForwardSetting resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallForwardSettingItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\CallForwardSettingDetailed';
        $request = $this->getCallForwardSettingItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCallForwardSettingItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCallForwardSettingItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCallForwardSettingItem'
            );
        }

        $resourcePath = '/call_forward_settings/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCompanyCollection
     *
     * Retrieves the collection of Company resources.
     *
     * @param  string $country country (optional)
     * @param  string $country2 country2 (optional)
     * @param  string $default_timezone default_timezone (optional)
     * @param  string $default_timezone2 default_timezone2 (optional)
     * @param  bool $default_timezone_exists default_timezone_exists (optional)
     * @param  string $domain_name domain_name (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $language language (optional)
     * @param  string $language2 language2 (optional)
     * @param  bool $language_exists language_exists (optional)
     * @param  string $name name (optional)
     * @param  string $name_end name_end (optional)
     * @param  string $name_exact name_exact (optional)
     * @param  string $name_partial name_partial (optional)
     * @param  string $name_start name_start (optional)
     * @param  string $nif nif (optional)
     * @param  string $nif_end nif_end (optional)
     * @param  string $nif_exact nif_exact (optional)
     * @param  string $nif_partial nif_partial (optional)
     * @param  string $nif_start nif_start (optional)
     * @param  string $outgoing_ddi outgoing_ddi (optional)
     * @param  string $outgoing_ddi_rule outgoing_ddi_rule (optional)
     * @param  string $outgoing_ddi_rule2 outgoing_ddi_rule2 (optional)
     * @param  bool $outgoing_ddi_rule_exists outgoing_ddi_rule_exists (optional)
     * @param  string $outgoing_ddi2 outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists outgoing_ddi_exists (optional)
     * @param  string $transformation_rule_set transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists transformation_rule_set_exists (optional)
     * @param  string $type type (optional)
     * @param  string $type_end type_end (optional)
     * @param  string $type_exact type_exact (optional)
     * @param  string $type_partial type_partial (optional)
     * @param  string $type_start type_start (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_name _order_name (optional)
     * @param  string $_order_nif _order_nif (optional)
     * @param  string $_order_type _order_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CompanyCollection[]
     */
    public function getCompanyCollection($country = null, $country2 = null, $default_timezone = null, $default_timezone2 = null, $default_timezone_exists = null, $domain_name = null, $id_exact = null, $language = null, $language2 = null, $language_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $nif = null, $nif_end = null, $nif_exact = null, $nif_partial = null, $nif_start = null, $outgoing_ddi = null, $outgoing_ddi_rule = null, $outgoing_ddi_rule2 = null, $outgoing_ddi_rule_exists = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $type = null, $type_end = null, $type_exact = null, $type_partial = null, $type_start = null, $_order_id = null, $_order_name = null, $_order_nif = null, $_order_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getCompanyCollectionWithHttpInfo($country, $country2, $default_timezone, $default_timezone2, $default_timezone_exists, $domain_name, $id_exact, $language, $language2, $language_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $nif, $nif_end, $nif_exact, $nif_partial, $nif_start, $outgoing_ddi, $outgoing_ddi_rule, $outgoing_ddi_rule2, $outgoing_ddi_rule_exists, $outgoing_ddi2, $outgoing_ddi_exists, $transformation_rule_set, $transformation_rule_set2, $transformation_rule_set_exists, $type, $type_end, $type_exact, $type_partial, $type_start, $_order_id, $_order_name, $_order_nif, $_order_type, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getCompanyCollectionWithHttpInfo
     *
     * Retrieves the collection of Company resources.
     *
     * @param  string $country (optional)
     * @param  string $country2 (optional)
     * @param  string $default_timezone (optional)
     * @param  string $default_timezone2 (optional)
     * @param  bool $default_timezone_exists (optional)
     * @param  string $domain_name (optional)
     * @param  int $id_exact (optional)
     * @param  string $language (optional)
     * @param  string $language2 (optional)
     * @param  bool $language_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $nif (optional)
     * @param  string $nif_end (optional)
     * @param  string $nif_exact (optional)
     * @param  string $nif_partial (optional)
     * @param  string $nif_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi_rule (optional)
     * @param  string $outgoing_ddi_rule2 (optional)
     * @param  bool $outgoing_ddi_rule_exists (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  string $transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists (optional)
     * @param  string $type (optional)
     * @param  string $type_end (optional)
     * @param  string $type_exact (optional)
     * @param  string $type_partial (optional)
     * @param  string $type_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_nif (optional)
     * @param  string $_order_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CompanyCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompanyCollectionWithHttpInfo($country = null, $country2 = null, $default_timezone = null, $default_timezone2 = null, $default_timezone_exists = null, $domain_name = null, $id_exact = null, $language = null, $language2 = null, $language_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $nif = null, $nif_end = null, $nif_exact = null, $nif_partial = null, $nif_start = null, $outgoing_ddi = null, $outgoing_ddi_rule = null, $outgoing_ddi_rule2 = null, $outgoing_ddi_rule_exists = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $type = null, $type_end = null, $type_exact = null, $type_partial = null, $type_start = null, $_order_id = null, $_order_name = null, $_order_nif = null, $_order_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\CompanyCollection[]';
        $request = $this->getCompanyCollectionRequest($country, $country2, $default_timezone, $default_timezone2, $default_timezone_exists, $domain_name, $id_exact, $language, $language2, $language_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $nif, $nif_end, $nif_exact, $nif_partial, $nif_start, $outgoing_ddi, $outgoing_ddi_rule, $outgoing_ddi_rule2, $outgoing_ddi_rule_exists, $outgoing_ddi2, $outgoing_ddi_exists, $transformation_rule_set, $transformation_rule_set2, $transformation_rule_set_exists, $type, $type_end, $type_exact, $type_partial, $type_start, $_order_id, $_order_name, $_order_nif, $_order_type, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CompanyCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCompanyCollectionAsync
     *
     * Retrieves the collection of Company resources.
     *
     * @param  string $country (optional)
     * @param  string $country2 (optional)
     * @param  string $default_timezone (optional)
     * @param  string $default_timezone2 (optional)
     * @param  bool $default_timezone_exists (optional)
     * @param  string $domain_name (optional)
     * @param  int $id_exact (optional)
     * @param  string $language (optional)
     * @param  string $language2 (optional)
     * @param  bool $language_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $nif (optional)
     * @param  string $nif_end (optional)
     * @param  string $nif_exact (optional)
     * @param  string $nif_partial (optional)
     * @param  string $nif_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi_rule (optional)
     * @param  string $outgoing_ddi_rule2 (optional)
     * @param  bool $outgoing_ddi_rule_exists (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  string $transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists (optional)
     * @param  string $type (optional)
     * @param  string $type_end (optional)
     * @param  string $type_exact (optional)
     * @param  string $type_partial (optional)
     * @param  string $type_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_nif (optional)
     * @param  string $_order_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyCollectionAsync($country = null, $country2 = null, $default_timezone = null, $default_timezone2 = null, $default_timezone_exists = null, $domain_name = null, $id_exact = null, $language = null, $language2 = null, $language_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $nif = null, $nif_end = null, $nif_exact = null, $nif_partial = null, $nif_start = null, $outgoing_ddi = null, $outgoing_ddi_rule = null, $outgoing_ddi_rule2 = null, $outgoing_ddi_rule_exists = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $type = null, $type_end = null, $type_exact = null, $type_partial = null, $type_start = null, $_order_id = null, $_order_name = null, $_order_nif = null, $_order_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getCompanyCollectionAsyncWithHttpInfo($country, $country2, $default_timezone, $default_timezone2, $default_timezone_exists, $domain_name, $id_exact, $language, $language2, $language_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $nif, $nif_end, $nif_exact, $nif_partial, $nif_start, $outgoing_ddi, $outgoing_ddi_rule, $outgoing_ddi_rule2, $outgoing_ddi_rule_exists, $outgoing_ddi2, $outgoing_ddi_exists, $transformation_rule_set, $transformation_rule_set2, $transformation_rule_set_exists, $type, $type_end, $type_exact, $type_partial, $type_start, $_order_id, $_order_name, $_order_nif, $_order_type, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCompanyCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of Company resources.
     *
     * @param  string $country (optional)
     * @param  string $country2 (optional)
     * @param  string $default_timezone (optional)
     * @param  string $default_timezone2 (optional)
     * @param  bool $default_timezone_exists (optional)
     * @param  string $domain_name (optional)
     * @param  int $id_exact (optional)
     * @param  string $language (optional)
     * @param  string $language2 (optional)
     * @param  bool $language_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $nif (optional)
     * @param  string $nif_end (optional)
     * @param  string $nif_exact (optional)
     * @param  string $nif_partial (optional)
     * @param  string $nif_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi_rule (optional)
     * @param  string $outgoing_ddi_rule2 (optional)
     * @param  bool $outgoing_ddi_rule_exists (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  string $transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists (optional)
     * @param  string $type (optional)
     * @param  string $type_end (optional)
     * @param  string $type_exact (optional)
     * @param  string $type_partial (optional)
     * @param  string $type_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_nif (optional)
     * @param  string $_order_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyCollectionAsyncWithHttpInfo($country = null, $country2 = null, $default_timezone = null, $default_timezone2 = null, $default_timezone_exists = null, $domain_name = null, $id_exact = null, $language = null, $language2 = null, $language_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $nif = null, $nif_end = null, $nif_exact = null, $nif_partial = null, $nif_start = null, $outgoing_ddi = null, $outgoing_ddi_rule = null, $outgoing_ddi_rule2 = null, $outgoing_ddi_rule_exists = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $type = null, $type_end = null, $type_exact = null, $type_partial = null, $type_start = null, $_order_id = null, $_order_name = null, $_order_nif = null, $_order_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\CompanyCollection[]';
        $request = $this->getCompanyCollectionRequest($country, $country2, $default_timezone, $default_timezone2, $default_timezone_exists, $domain_name, $id_exact, $language, $language2, $language_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $nif, $nif_end, $nif_exact, $nif_partial, $nif_start, $outgoing_ddi, $outgoing_ddi_rule, $outgoing_ddi_rule2, $outgoing_ddi_rule_exists, $outgoing_ddi2, $outgoing_ddi_exists, $transformation_rule_set, $transformation_rule_set2, $transformation_rule_set_exists, $type, $type_end, $type_exact, $type_partial, $type_start, $_order_id, $_order_name, $_order_nif, $_order_type, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCompanyCollection'
     *
     * @param  string $country (optional)
     * @param  string $country2 (optional)
     * @param  string $default_timezone (optional)
     * @param  string $default_timezone2 (optional)
     * @param  bool $default_timezone_exists (optional)
     * @param  string $domain_name (optional)
     * @param  int $id_exact (optional)
     * @param  string $language (optional)
     * @param  string $language2 (optional)
     * @param  bool $language_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $nif (optional)
     * @param  string $nif_end (optional)
     * @param  string $nif_exact (optional)
     * @param  string $nif_partial (optional)
     * @param  string $nif_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi_rule (optional)
     * @param  string $outgoing_ddi_rule2 (optional)
     * @param  bool $outgoing_ddi_rule_exists (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  string $transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists (optional)
     * @param  string $type (optional)
     * @param  string $type_end (optional)
     * @param  string $type_exact (optional)
     * @param  string $type_partial (optional)
     * @param  string $type_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_nif (optional)
     * @param  string $_order_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCompanyCollectionRequest($country = null, $country2 = null, $default_timezone = null, $default_timezone2 = null, $default_timezone_exists = null, $domain_name = null, $id_exact = null, $language = null, $language2 = null, $language_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $nif = null, $nif_end = null, $nif_exact = null, $nif_partial = null, $nif_start = null, $outgoing_ddi = null, $outgoing_ddi_rule = null, $outgoing_ddi_rule2 = null, $outgoing_ddi_rule_exists = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $type = null, $type_end = null, $type_exact = null, $type_partial = null, $type_start = null, $_order_id = null, $_order_name = null, $_order_nif = null, $_order_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/companies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($country !== null) {
            $queryParams['country'] = ObjectSerializer::toQueryValue($country);
        }
        // query params
        if ($country2 !== null) {
            $queryParams['country[]'] = ObjectSerializer::toQueryValue($country2);
        }
        // query params
        if ($default_timezone !== null) {
            $queryParams['defaultTimezone'] = ObjectSerializer::toQueryValue($default_timezone);
        }
        // query params
        if ($default_timezone2 !== null) {
            $queryParams['defaultTimezone[]'] = ObjectSerializer::toQueryValue($default_timezone2);
        }
        // query params
        if ($default_timezone_exists !== null) {
            $queryParams['defaultTimezone[exists]'] = ObjectSerializer::toQueryValue($default_timezone_exists);
        }
        // query params
        if ($domain_name !== null) {
            $queryParams['domainName'] = ObjectSerializer::toQueryValue($domain_name);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($language2 !== null) {
            $queryParams['language[]'] = ObjectSerializer::toQueryValue($language2);
        }
        // query params
        if ($language_exists !== null) {
            $queryParams['language[exists]'] = ObjectSerializer::toQueryValue($language_exists);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_end !== null) {
            $queryParams['name[end]'] = ObjectSerializer::toQueryValue($name_end);
        }
        // query params
        if ($name_exact !== null) {
            $queryParams['name[exact]'] = ObjectSerializer::toQueryValue($name_exact);
        }
        // query params
        if ($name_partial !== null) {
            $queryParams['name[partial]'] = ObjectSerializer::toQueryValue($name_partial);
        }
        // query params
        if ($name_start !== null) {
            $queryParams['name[start]'] = ObjectSerializer::toQueryValue($name_start);
        }
        // query params
        if ($nif !== null) {
            $queryParams['nif'] = ObjectSerializer::toQueryValue($nif);
        }
        // query params
        if ($nif_end !== null) {
            $queryParams['nif[end]'] = ObjectSerializer::toQueryValue($nif_end);
        }
        // query params
        if ($nif_exact !== null) {
            $queryParams['nif[exact]'] = ObjectSerializer::toQueryValue($nif_exact);
        }
        // query params
        if ($nif_partial !== null) {
            $queryParams['nif[partial]'] = ObjectSerializer::toQueryValue($nif_partial);
        }
        // query params
        if ($nif_start !== null) {
            $queryParams['nif[start]'] = ObjectSerializer::toQueryValue($nif_start);
        }
        // query params
        if ($outgoing_ddi !== null) {
            $queryParams['outgoingDdi'] = ObjectSerializer::toQueryValue($outgoing_ddi);
        }
        // query params
        if ($outgoing_ddi_rule !== null) {
            $queryParams['outgoingDdiRule'] = ObjectSerializer::toQueryValue($outgoing_ddi_rule);
        }
        // query params
        if ($outgoing_ddi_rule2 !== null) {
            $queryParams['outgoingDdiRule[]'] = ObjectSerializer::toQueryValue($outgoing_ddi_rule2);
        }
        // query params
        if ($outgoing_ddi_rule_exists !== null) {
            $queryParams['outgoingDdiRule[exists]'] = ObjectSerializer::toQueryValue($outgoing_ddi_rule_exists);
        }
        // query params
        if ($outgoing_ddi2 !== null) {
            $queryParams['outgoingDdi[]'] = ObjectSerializer::toQueryValue($outgoing_ddi2);
        }
        // query params
        if ($outgoing_ddi_exists !== null) {
            $queryParams['outgoingDdi[exists]'] = ObjectSerializer::toQueryValue($outgoing_ddi_exists);
        }
        // query params
        if ($transformation_rule_set !== null) {
            $queryParams['transformationRuleSet'] = ObjectSerializer::toQueryValue($transformation_rule_set);
        }
        // query params
        if ($transformation_rule_set2 !== null) {
            $queryParams['transformationRuleSet[]'] = ObjectSerializer::toQueryValue($transformation_rule_set2);
        }
        // query params
        if ($transformation_rule_set_exists !== null) {
            $queryParams['transformationRuleSet[exists]'] = ObjectSerializer::toQueryValue($transformation_rule_set_exists);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($type_end !== null) {
            $queryParams['type[end]'] = ObjectSerializer::toQueryValue($type_end);
        }
        // query params
        if ($type_exact !== null) {
            $queryParams['type[exact]'] = ObjectSerializer::toQueryValue($type_exact);
        }
        // query params
        if ($type_partial !== null) {
            $queryParams['type[partial]'] = ObjectSerializer::toQueryValue($type_partial);
        }
        // query params
        if ($type_start !== null) {
            $queryParams['type[start]'] = ObjectSerializer::toQueryValue($type_start);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_name !== null) {
            $queryParams['_order[name]'] = ObjectSerializer::toQueryValue($_order_name);
        }
        // query params
        if ($_order_nif !== null) {
            $queryParams['_order[nif]'] = ObjectSerializer::toQueryValue($_order_nif);
        }
        // query params
        if ($_order_type !== null) {
            $queryParams['_order[type]'] = ObjectSerializer::toQueryValue($_order_type);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCompanyItem
     *
     * Retrieves a Company resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CompanyDetailed
     */
    public function getCompanyItem($id)
    {
        list($response) = $this->getCompanyItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getCompanyItemWithHttpInfo
     *
     * Retrieves a Company resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CompanyDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompanyItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\CompanyDetailed';
        $request = $this->getCompanyItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CompanyDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCompanyItemAsync
     *
     * Retrieves a Company resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyItemAsync($id)
    {
        return $this->getCompanyItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCompanyItemAsyncWithHttpInfo
     *
     * Retrieves a Company resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\CompanyDetailed';
        $request = $this->getCompanyItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCompanyItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCompanyItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCompanyItem'
            );
        }

        $resourcePath = '/companies/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCompanyServiceCollection
     *
     * Retrieves the collection of CompanyService resources.
     *
     * @param  string $code code (optional)
     * @param  string $code_end code_end (optional)
     * @param  string $code_exact code_exact (optional)
     * @param  string $code_partial code_partial (optional)
     * @param  string $code_start code_start (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $service service (optional)
     * @param  string $service2 service2 (optional)
     * @param  string $_order_code _order_code (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CompanyServiceCollection[]
     */
    public function getCompanyServiceCollection($code = null, $code_end = null, $code_exact = null, $code_partial = null, $code_start = null, $id_exact = null, $service = null, $service2 = null, $_order_code = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getCompanyServiceCollectionWithHttpInfo($code, $code_end, $code_exact, $code_partial, $code_start, $id_exact, $service, $service2, $_order_code, $_order_id, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getCompanyServiceCollectionWithHttpInfo
     *
     * Retrieves the collection of CompanyService resources.
     *
     * @param  string $code (optional)
     * @param  string $code_end (optional)
     * @param  string $code_exact (optional)
     * @param  string $code_partial (optional)
     * @param  string $code_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $service (optional)
     * @param  string $service2 (optional)
     * @param  string $_order_code (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CompanyServiceCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompanyServiceCollectionWithHttpInfo($code = null, $code_end = null, $code_exact = null, $code_partial = null, $code_start = null, $id_exact = null, $service = null, $service2 = null, $_order_code = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\CompanyServiceCollection[]';
        $request = $this->getCompanyServiceCollectionRequest($code, $code_end, $code_exact, $code_partial, $code_start, $id_exact, $service, $service2, $_order_code, $_order_id, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CompanyServiceCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCompanyServiceCollectionAsync
     *
     * Retrieves the collection of CompanyService resources.
     *
     * @param  string $code (optional)
     * @param  string $code_end (optional)
     * @param  string $code_exact (optional)
     * @param  string $code_partial (optional)
     * @param  string $code_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $service (optional)
     * @param  string $service2 (optional)
     * @param  string $_order_code (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyServiceCollectionAsync($code = null, $code_end = null, $code_exact = null, $code_partial = null, $code_start = null, $id_exact = null, $service = null, $service2 = null, $_order_code = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getCompanyServiceCollectionAsyncWithHttpInfo($code, $code_end, $code_exact, $code_partial, $code_start, $id_exact, $service, $service2, $_order_code, $_order_id, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCompanyServiceCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of CompanyService resources.
     *
     * @param  string $code (optional)
     * @param  string $code_end (optional)
     * @param  string $code_exact (optional)
     * @param  string $code_partial (optional)
     * @param  string $code_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $service (optional)
     * @param  string $service2 (optional)
     * @param  string $_order_code (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyServiceCollectionAsyncWithHttpInfo($code = null, $code_end = null, $code_exact = null, $code_partial = null, $code_start = null, $id_exact = null, $service = null, $service2 = null, $_order_code = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\CompanyServiceCollection[]';
        $request = $this->getCompanyServiceCollectionRequest($code, $code_end, $code_exact, $code_partial, $code_start, $id_exact, $service, $service2, $_order_code, $_order_id, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCompanyServiceCollection'
     *
     * @param  string $code (optional)
     * @param  string $code_end (optional)
     * @param  string $code_exact (optional)
     * @param  string $code_partial (optional)
     * @param  string $code_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $service (optional)
     * @param  string $service2 (optional)
     * @param  string $_order_code (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCompanyServiceCollectionRequest($code = null, $code_end = null, $code_exact = null, $code_partial = null, $code_start = null, $id_exact = null, $service = null, $service2 = null, $_order_code = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/company_services';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($code !== null) {
            $queryParams['code'] = ObjectSerializer::toQueryValue($code);
        }
        // query params
        if ($code_end !== null) {
            $queryParams['code[end]'] = ObjectSerializer::toQueryValue($code_end);
        }
        // query params
        if ($code_exact !== null) {
            $queryParams['code[exact]'] = ObjectSerializer::toQueryValue($code_exact);
        }
        // query params
        if ($code_partial !== null) {
            $queryParams['code[partial]'] = ObjectSerializer::toQueryValue($code_partial);
        }
        // query params
        if ($code_start !== null) {
            $queryParams['code[start]'] = ObjectSerializer::toQueryValue($code_start);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($service !== null) {
            $queryParams['service'] = ObjectSerializer::toQueryValue($service);
        }
        // query params
        if ($service2 !== null) {
            $queryParams['service[]'] = ObjectSerializer::toQueryValue($service2);
        }
        // query params
        if ($_order_code !== null) {
            $queryParams['_order[code]'] = ObjectSerializer::toQueryValue($_order_code);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCompanyServiceItem
     *
     * Retrieves a CompanyService resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CompanyServiceDetailed
     */
    public function getCompanyServiceItem($id)
    {
        list($response) = $this->getCompanyServiceItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getCompanyServiceItemWithHttpInfo
     *
     * Retrieves a CompanyService resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CompanyServiceDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompanyServiceItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\CompanyServiceDetailed';
        $request = $this->getCompanyServiceItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CompanyServiceDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCompanyServiceItemAsync
     *
     * Retrieves a CompanyService resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyServiceItemAsync($id)
    {
        return $this->getCompanyServiceItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCompanyServiceItemAsyncWithHttpInfo
     *
     * Retrieves a CompanyService resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyServiceItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\CompanyServiceDetailed';
        $request = $this->getCompanyServiceItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCompanyServiceItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCompanyServiceItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCompanyServiceItem'
            );
        }

        $resourcePath = '/company_services/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConditionalRouteCollection
     *
     * Retrieves the collection of ConditionalRoute resources.
     *
     * @param  string $conference_room conference_room (optional)
     * @param  string $conference_room2 conference_room2 (optional)
     * @param  bool $conference_room_exists conference_room_exists (optional)
     * @param  string $extension extension (optional)
     * @param  string $extension2 extension2 (optional)
     * @param  bool $extension_exists extension_exists (optional)
     * @param  string $friendvalue friendvalue (optional)
     * @param  string $friendvalue_end friendvalue_end (optional)
     * @param  string $friendvalue_exact friendvalue_exact (optional)
     * @param  bool $friendvalue_exists friendvalue_exists (optional)
     * @param  string $friendvalue_partial friendvalue_partial (optional)
     * @param  string $friendvalue_start friendvalue_start (optional)
     * @param  string $hunt_group hunt_group (optional)
     * @param  string $hunt_group2 hunt_group2 (optional)
     * @param  bool $hunt_group_exists hunt_group_exists (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $ivr ivr (optional)
     * @param  string $ivr2 ivr2 (optional)
     * @param  bool $ivr_exists ivr_exists (optional)
     * @param  string $locution locution (optional)
     * @param  string $locution2 locution2 (optional)
     * @param  bool $locution_exists locution_exists (optional)
     * @param  string $name name (optional)
     * @param  string $name_end name_end (optional)
     * @param  string $name_exact name_exact (optional)
     * @param  string $name_partial name_partial (optional)
     * @param  string $name_start name_start (optional)
     * @param  string $number_country number_country (optional)
     * @param  string $number_country2 number_country2 (optional)
     * @param  bool $number_country_exists number_country_exists (optional)
     * @param  string $numbervalue numbervalue (optional)
     * @param  string $numbervalue_end numbervalue_end (optional)
     * @param  string $numbervalue_exact numbervalue_exact (optional)
     * @param  bool $numbervalue_exists numbervalue_exists (optional)
     * @param  string $numbervalue_partial numbervalue_partial (optional)
     * @param  string $numbervalue_start numbervalue_start (optional)
     * @param  string $queue queue (optional)
     * @param  string $queue2 queue2 (optional)
     * @param  bool $queue_exists queue_exists (optional)
     * @param  string $routetype routetype (optional)
     * @param  string $routetype_end routetype_end (optional)
     * @param  string $routetype_exact routetype_exact (optional)
     * @param  bool $routetype_exists routetype_exists (optional)
     * @param  string $routetype_partial routetype_partial (optional)
     * @param  string $routetype_start routetype_start (optional)
     * @param  string $user user (optional)
     * @param  string $user2 user2 (optional)
     * @param  bool $user_exists user_exists (optional)
     * @param  string $voicemail_user voicemail_user (optional)
     * @param  string $voicemail_user2 voicemail_user2 (optional)
     * @param  bool $voicemail_user_exists voicemail_user_exists (optional)
     * @param  string $_order_friendvalue _order_friendvalue (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_name _order_name (optional)
     * @param  string $_order_numbervalue _order_numbervalue (optional)
     * @param  string $_order_routetype _order_routetype (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ConditionalRouteCollection[]
     */
    public function getConditionalRouteCollection($conference_room = null, $conference_room2 = null, $conference_room_exists = null, $extension = null, $extension2 = null, $extension_exists = null, $friendvalue = null, $friendvalue_end = null, $friendvalue_exact = null, $friendvalue_exists = null, $friendvalue_partial = null, $friendvalue_start = null, $hunt_group = null, $hunt_group2 = null, $hunt_group_exists = null, $id_exact = null, $ivr = null, $ivr2 = null, $ivr_exists = null, $locution = null, $locution2 = null, $locution_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $numbervalue = null, $numbervalue_end = null, $numbervalue_exact = null, $numbervalue_exists = null, $numbervalue_partial = null, $numbervalue_start = null, $queue = null, $queue2 = null, $queue_exists = null, $routetype = null, $routetype_end = null, $routetype_exact = null, $routetype_exists = null, $routetype_partial = null, $routetype_start = null, $user = null, $user2 = null, $user_exists = null, $voicemail_user = null, $voicemail_user2 = null, $voicemail_user_exists = null, $_order_friendvalue = null, $_order_id = null, $_order_name = null, $_order_numbervalue = null, $_order_routetype = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getConditionalRouteCollectionWithHttpInfo($conference_room, $conference_room2, $conference_room_exists, $extension, $extension2, $extension_exists, $friendvalue, $friendvalue_end, $friendvalue_exact, $friendvalue_exists, $friendvalue_partial, $friendvalue_start, $hunt_group, $hunt_group2, $hunt_group_exists, $id_exact, $ivr, $ivr2, $ivr_exists, $locution, $locution2, $locution_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $number_country, $number_country2, $number_country_exists, $numbervalue, $numbervalue_end, $numbervalue_exact, $numbervalue_exists, $numbervalue_partial, $numbervalue_start, $queue, $queue2, $queue_exists, $routetype, $routetype_end, $routetype_exact, $routetype_exists, $routetype_partial, $routetype_start, $user, $user2, $user_exists, $voicemail_user, $voicemail_user2, $voicemail_user_exists, $_order_friendvalue, $_order_id, $_order_name, $_order_numbervalue, $_order_routetype, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getConditionalRouteCollectionWithHttpInfo
     *
     * Retrieves the collection of ConditionalRoute resources.
     *
     * @param  string $conference_room (optional)
     * @param  string $conference_room2 (optional)
     * @param  bool $conference_room_exists (optional)
     * @param  string $extension (optional)
     * @param  string $extension2 (optional)
     * @param  bool $extension_exists (optional)
     * @param  string $friendvalue (optional)
     * @param  string $friendvalue_end (optional)
     * @param  string $friendvalue_exact (optional)
     * @param  bool $friendvalue_exists (optional)
     * @param  string $friendvalue_partial (optional)
     * @param  string $friendvalue_start (optional)
     * @param  string $hunt_group (optional)
     * @param  string $hunt_group2 (optional)
     * @param  bool $hunt_group_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $ivr (optional)
     * @param  string $ivr2 (optional)
     * @param  bool $ivr_exists (optional)
     * @param  string $locution (optional)
     * @param  string $locution2 (optional)
     * @param  bool $locution_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $numbervalue (optional)
     * @param  string $numbervalue_end (optional)
     * @param  string $numbervalue_exact (optional)
     * @param  bool $numbervalue_exists (optional)
     * @param  string $numbervalue_partial (optional)
     * @param  string $numbervalue_start (optional)
     * @param  string $queue (optional)
     * @param  string $queue2 (optional)
     * @param  bool $queue_exists (optional)
     * @param  string $routetype (optional)
     * @param  string $routetype_end (optional)
     * @param  string $routetype_exact (optional)
     * @param  bool $routetype_exists (optional)
     * @param  string $routetype_partial (optional)
     * @param  string $routetype_start (optional)
     * @param  string $user (optional)
     * @param  string $user2 (optional)
     * @param  bool $user_exists (optional)
     * @param  string $voicemail_user (optional)
     * @param  string $voicemail_user2 (optional)
     * @param  bool $voicemail_user_exists (optional)
     * @param  string $_order_friendvalue (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_numbervalue (optional)
     * @param  string $_order_routetype (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ConditionalRouteCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getConditionalRouteCollectionWithHttpInfo($conference_room = null, $conference_room2 = null, $conference_room_exists = null, $extension = null, $extension2 = null, $extension_exists = null, $friendvalue = null, $friendvalue_end = null, $friendvalue_exact = null, $friendvalue_exists = null, $friendvalue_partial = null, $friendvalue_start = null, $hunt_group = null, $hunt_group2 = null, $hunt_group_exists = null, $id_exact = null, $ivr = null, $ivr2 = null, $ivr_exists = null, $locution = null, $locution2 = null, $locution_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $numbervalue = null, $numbervalue_end = null, $numbervalue_exact = null, $numbervalue_exists = null, $numbervalue_partial = null, $numbervalue_start = null, $queue = null, $queue2 = null, $queue_exists = null, $routetype = null, $routetype_end = null, $routetype_exact = null, $routetype_exists = null, $routetype_partial = null, $routetype_start = null, $user = null, $user2 = null, $user_exists = null, $voicemail_user = null, $voicemail_user2 = null, $voicemail_user_exists = null, $_order_friendvalue = null, $_order_id = null, $_order_name = null, $_order_numbervalue = null, $_order_routetype = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRouteCollection[]';
        $request = $this->getConditionalRouteCollectionRequest($conference_room, $conference_room2, $conference_room_exists, $extension, $extension2, $extension_exists, $friendvalue, $friendvalue_end, $friendvalue_exact, $friendvalue_exists, $friendvalue_partial, $friendvalue_start, $hunt_group, $hunt_group2, $hunt_group_exists, $id_exact, $ivr, $ivr2, $ivr_exists, $locution, $locution2, $locution_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $number_country, $number_country2, $number_country_exists, $numbervalue, $numbervalue_end, $numbervalue_exact, $numbervalue_exists, $numbervalue_partial, $numbervalue_start, $queue, $queue2, $queue_exists, $routetype, $routetype_end, $routetype_exact, $routetype_exists, $routetype_partial, $routetype_start, $user, $user2, $user_exists, $voicemail_user, $voicemail_user2, $voicemail_user_exists, $_order_friendvalue, $_order_id, $_order_name, $_order_numbervalue, $_order_routetype, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ConditionalRouteCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConditionalRouteCollectionAsync
     *
     * Retrieves the collection of ConditionalRoute resources.
     *
     * @param  string $conference_room (optional)
     * @param  string $conference_room2 (optional)
     * @param  bool $conference_room_exists (optional)
     * @param  string $extension (optional)
     * @param  string $extension2 (optional)
     * @param  bool $extension_exists (optional)
     * @param  string $friendvalue (optional)
     * @param  string $friendvalue_end (optional)
     * @param  string $friendvalue_exact (optional)
     * @param  bool $friendvalue_exists (optional)
     * @param  string $friendvalue_partial (optional)
     * @param  string $friendvalue_start (optional)
     * @param  string $hunt_group (optional)
     * @param  string $hunt_group2 (optional)
     * @param  bool $hunt_group_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $ivr (optional)
     * @param  string $ivr2 (optional)
     * @param  bool $ivr_exists (optional)
     * @param  string $locution (optional)
     * @param  string $locution2 (optional)
     * @param  bool $locution_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $numbervalue (optional)
     * @param  string $numbervalue_end (optional)
     * @param  string $numbervalue_exact (optional)
     * @param  bool $numbervalue_exists (optional)
     * @param  string $numbervalue_partial (optional)
     * @param  string $numbervalue_start (optional)
     * @param  string $queue (optional)
     * @param  string $queue2 (optional)
     * @param  bool $queue_exists (optional)
     * @param  string $routetype (optional)
     * @param  string $routetype_end (optional)
     * @param  string $routetype_exact (optional)
     * @param  bool $routetype_exists (optional)
     * @param  string $routetype_partial (optional)
     * @param  string $routetype_start (optional)
     * @param  string $user (optional)
     * @param  string $user2 (optional)
     * @param  bool $user_exists (optional)
     * @param  string $voicemail_user (optional)
     * @param  string $voicemail_user2 (optional)
     * @param  bool $voicemail_user_exists (optional)
     * @param  string $_order_friendvalue (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_numbervalue (optional)
     * @param  string $_order_routetype (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConditionalRouteCollectionAsync($conference_room = null, $conference_room2 = null, $conference_room_exists = null, $extension = null, $extension2 = null, $extension_exists = null, $friendvalue = null, $friendvalue_end = null, $friendvalue_exact = null, $friendvalue_exists = null, $friendvalue_partial = null, $friendvalue_start = null, $hunt_group = null, $hunt_group2 = null, $hunt_group_exists = null, $id_exact = null, $ivr = null, $ivr2 = null, $ivr_exists = null, $locution = null, $locution2 = null, $locution_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $numbervalue = null, $numbervalue_end = null, $numbervalue_exact = null, $numbervalue_exists = null, $numbervalue_partial = null, $numbervalue_start = null, $queue = null, $queue2 = null, $queue_exists = null, $routetype = null, $routetype_end = null, $routetype_exact = null, $routetype_exists = null, $routetype_partial = null, $routetype_start = null, $user = null, $user2 = null, $user_exists = null, $voicemail_user = null, $voicemail_user2 = null, $voicemail_user_exists = null, $_order_friendvalue = null, $_order_id = null, $_order_name = null, $_order_numbervalue = null, $_order_routetype = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getConditionalRouteCollectionAsyncWithHttpInfo($conference_room, $conference_room2, $conference_room_exists, $extension, $extension2, $extension_exists, $friendvalue, $friendvalue_end, $friendvalue_exact, $friendvalue_exists, $friendvalue_partial, $friendvalue_start, $hunt_group, $hunt_group2, $hunt_group_exists, $id_exact, $ivr, $ivr2, $ivr_exists, $locution, $locution2, $locution_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $number_country, $number_country2, $number_country_exists, $numbervalue, $numbervalue_end, $numbervalue_exact, $numbervalue_exists, $numbervalue_partial, $numbervalue_start, $queue, $queue2, $queue_exists, $routetype, $routetype_end, $routetype_exact, $routetype_exists, $routetype_partial, $routetype_start, $user, $user2, $user_exists, $voicemail_user, $voicemail_user2, $voicemail_user_exists, $_order_friendvalue, $_order_id, $_order_name, $_order_numbervalue, $_order_routetype, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConditionalRouteCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of ConditionalRoute resources.
     *
     * @param  string $conference_room (optional)
     * @param  string $conference_room2 (optional)
     * @param  bool $conference_room_exists (optional)
     * @param  string $extension (optional)
     * @param  string $extension2 (optional)
     * @param  bool $extension_exists (optional)
     * @param  string $friendvalue (optional)
     * @param  string $friendvalue_end (optional)
     * @param  string $friendvalue_exact (optional)
     * @param  bool $friendvalue_exists (optional)
     * @param  string $friendvalue_partial (optional)
     * @param  string $friendvalue_start (optional)
     * @param  string $hunt_group (optional)
     * @param  string $hunt_group2 (optional)
     * @param  bool $hunt_group_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $ivr (optional)
     * @param  string $ivr2 (optional)
     * @param  bool $ivr_exists (optional)
     * @param  string $locution (optional)
     * @param  string $locution2 (optional)
     * @param  bool $locution_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $numbervalue (optional)
     * @param  string $numbervalue_end (optional)
     * @param  string $numbervalue_exact (optional)
     * @param  bool $numbervalue_exists (optional)
     * @param  string $numbervalue_partial (optional)
     * @param  string $numbervalue_start (optional)
     * @param  string $queue (optional)
     * @param  string $queue2 (optional)
     * @param  bool $queue_exists (optional)
     * @param  string $routetype (optional)
     * @param  string $routetype_end (optional)
     * @param  string $routetype_exact (optional)
     * @param  bool $routetype_exists (optional)
     * @param  string $routetype_partial (optional)
     * @param  string $routetype_start (optional)
     * @param  string $user (optional)
     * @param  string $user2 (optional)
     * @param  bool $user_exists (optional)
     * @param  string $voicemail_user (optional)
     * @param  string $voicemail_user2 (optional)
     * @param  bool $voicemail_user_exists (optional)
     * @param  string $_order_friendvalue (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_numbervalue (optional)
     * @param  string $_order_routetype (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConditionalRouteCollectionAsyncWithHttpInfo($conference_room = null, $conference_room2 = null, $conference_room_exists = null, $extension = null, $extension2 = null, $extension_exists = null, $friendvalue = null, $friendvalue_end = null, $friendvalue_exact = null, $friendvalue_exists = null, $friendvalue_partial = null, $friendvalue_start = null, $hunt_group = null, $hunt_group2 = null, $hunt_group_exists = null, $id_exact = null, $ivr = null, $ivr2 = null, $ivr_exists = null, $locution = null, $locution2 = null, $locution_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $numbervalue = null, $numbervalue_end = null, $numbervalue_exact = null, $numbervalue_exists = null, $numbervalue_partial = null, $numbervalue_start = null, $queue = null, $queue2 = null, $queue_exists = null, $routetype = null, $routetype_end = null, $routetype_exact = null, $routetype_exists = null, $routetype_partial = null, $routetype_start = null, $user = null, $user2 = null, $user_exists = null, $voicemail_user = null, $voicemail_user2 = null, $voicemail_user_exists = null, $_order_friendvalue = null, $_order_id = null, $_order_name = null, $_order_numbervalue = null, $_order_routetype = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRouteCollection[]';
        $request = $this->getConditionalRouteCollectionRequest($conference_room, $conference_room2, $conference_room_exists, $extension, $extension2, $extension_exists, $friendvalue, $friendvalue_end, $friendvalue_exact, $friendvalue_exists, $friendvalue_partial, $friendvalue_start, $hunt_group, $hunt_group2, $hunt_group_exists, $id_exact, $ivr, $ivr2, $ivr_exists, $locution, $locution2, $locution_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $number_country, $number_country2, $number_country_exists, $numbervalue, $numbervalue_end, $numbervalue_exact, $numbervalue_exists, $numbervalue_partial, $numbervalue_start, $queue, $queue2, $queue_exists, $routetype, $routetype_end, $routetype_exact, $routetype_exists, $routetype_partial, $routetype_start, $user, $user2, $user_exists, $voicemail_user, $voicemail_user2, $voicemail_user_exists, $_order_friendvalue, $_order_id, $_order_name, $_order_numbervalue, $_order_routetype, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConditionalRouteCollection'
     *
     * @param  string $conference_room (optional)
     * @param  string $conference_room2 (optional)
     * @param  bool $conference_room_exists (optional)
     * @param  string $extension (optional)
     * @param  string $extension2 (optional)
     * @param  bool $extension_exists (optional)
     * @param  string $friendvalue (optional)
     * @param  string $friendvalue_end (optional)
     * @param  string $friendvalue_exact (optional)
     * @param  bool $friendvalue_exists (optional)
     * @param  string $friendvalue_partial (optional)
     * @param  string $friendvalue_start (optional)
     * @param  string $hunt_group (optional)
     * @param  string $hunt_group2 (optional)
     * @param  bool $hunt_group_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $ivr (optional)
     * @param  string $ivr2 (optional)
     * @param  bool $ivr_exists (optional)
     * @param  string $locution (optional)
     * @param  string $locution2 (optional)
     * @param  bool $locution_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $numbervalue (optional)
     * @param  string $numbervalue_end (optional)
     * @param  string $numbervalue_exact (optional)
     * @param  bool $numbervalue_exists (optional)
     * @param  string $numbervalue_partial (optional)
     * @param  string $numbervalue_start (optional)
     * @param  string $queue (optional)
     * @param  string $queue2 (optional)
     * @param  bool $queue_exists (optional)
     * @param  string $routetype (optional)
     * @param  string $routetype_end (optional)
     * @param  string $routetype_exact (optional)
     * @param  bool $routetype_exists (optional)
     * @param  string $routetype_partial (optional)
     * @param  string $routetype_start (optional)
     * @param  string $user (optional)
     * @param  string $user2 (optional)
     * @param  bool $user_exists (optional)
     * @param  string $voicemail_user (optional)
     * @param  string $voicemail_user2 (optional)
     * @param  bool $voicemail_user_exists (optional)
     * @param  string $_order_friendvalue (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_numbervalue (optional)
     * @param  string $_order_routetype (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getConditionalRouteCollectionRequest($conference_room = null, $conference_room2 = null, $conference_room_exists = null, $extension = null, $extension2 = null, $extension_exists = null, $friendvalue = null, $friendvalue_end = null, $friendvalue_exact = null, $friendvalue_exists = null, $friendvalue_partial = null, $friendvalue_start = null, $hunt_group = null, $hunt_group2 = null, $hunt_group_exists = null, $id_exact = null, $ivr = null, $ivr2 = null, $ivr_exists = null, $locution = null, $locution2 = null, $locution_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $numbervalue = null, $numbervalue_end = null, $numbervalue_exact = null, $numbervalue_exists = null, $numbervalue_partial = null, $numbervalue_start = null, $queue = null, $queue2 = null, $queue_exists = null, $routetype = null, $routetype_end = null, $routetype_exact = null, $routetype_exists = null, $routetype_partial = null, $routetype_start = null, $user = null, $user2 = null, $user_exists = null, $voicemail_user = null, $voicemail_user2 = null, $voicemail_user_exists = null, $_order_friendvalue = null, $_order_id = null, $_order_name = null, $_order_numbervalue = null, $_order_routetype = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/conditional_routes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($conference_room !== null) {
            $queryParams['conferenceRoom'] = ObjectSerializer::toQueryValue($conference_room);
        }
        // query params
        if ($conference_room2 !== null) {
            $queryParams['conferenceRoom[]'] = ObjectSerializer::toQueryValue($conference_room2);
        }
        // query params
        if ($conference_room_exists !== null) {
            $queryParams['conferenceRoom[exists]'] = ObjectSerializer::toQueryValue($conference_room_exists);
        }
        // query params
        if ($extension !== null) {
            $queryParams['extension'] = ObjectSerializer::toQueryValue($extension);
        }
        // query params
        if ($extension2 !== null) {
            $queryParams['extension[]'] = ObjectSerializer::toQueryValue($extension2);
        }
        // query params
        if ($extension_exists !== null) {
            $queryParams['extension[exists]'] = ObjectSerializer::toQueryValue($extension_exists);
        }
        // query params
        if ($friendvalue !== null) {
            $queryParams['friendvalue'] = ObjectSerializer::toQueryValue($friendvalue);
        }
        // query params
        if ($friendvalue_end !== null) {
            $queryParams['friendvalue[end]'] = ObjectSerializer::toQueryValue($friendvalue_end);
        }
        // query params
        if ($friendvalue_exact !== null) {
            $queryParams['friendvalue[exact]'] = ObjectSerializer::toQueryValue($friendvalue_exact);
        }
        // query params
        if ($friendvalue_exists !== null) {
            $queryParams['friendvalue[exists]'] = ObjectSerializer::toQueryValue($friendvalue_exists);
        }
        // query params
        if ($friendvalue_partial !== null) {
            $queryParams['friendvalue[partial]'] = ObjectSerializer::toQueryValue($friendvalue_partial);
        }
        // query params
        if ($friendvalue_start !== null) {
            $queryParams['friendvalue[start]'] = ObjectSerializer::toQueryValue($friendvalue_start);
        }
        // query params
        if ($hunt_group !== null) {
            $queryParams['huntGroup'] = ObjectSerializer::toQueryValue($hunt_group);
        }
        // query params
        if ($hunt_group2 !== null) {
            $queryParams['huntGroup[]'] = ObjectSerializer::toQueryValue($hunt_group2);
        }
        // query params
        if ($hunt_group_exists !== null) {
            $queryParams['huntGroup[exists]'] = ObjectSerializer::toQueryValue($hunt_group_exists);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($ivr !== null) {
            $queryParams['ivr'] = ObjectSerializer::toQueryValue($ivr);
        }
        // query params
        if ($ivr2 !== null) {
            $queryParams['ivr[]'] = ObjectSerializer::toQueryValue($ivr2);
        }
        // query params
        if ($ivr_exists !== null) {
            $queryParams['ivr[exists]'] = ObjectSerializer::toQueryValue($ivr_exists);
        }
        // query params
        if ($locution !== null) {
            $queryParams['locution'] = ObjectSerializer::toQueryValue($locution);
        }
        // query params
        if ($locution2 !== null) {
            $queryParams['locution[]'] = ObjectSerializer::toQueryValue($locution2);
        }
        // query params
        if ($locution_exists !== null) {
            $queryParams['locution[exists]'] = ObjectSerializer::toQueryValue($locution_exists);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_end !== null) {
            $queryParams['name[end]'] = ObjectSerializer::toQueryValue($name_end);
        }
        // query params
        if ($name_exact !== null) {
            $queryParams['name[exact]'] = ObjectSerializer::toQueryValue($name_exact);
        }
        // query params
        if ($name_partial !== null) {
            $queryParams['name[partial]'] = ObjectSerializer::toQueryValue($name_partial);
        }
        // query params
        if ($name_start !== null) {
            $queryParams['name[start]'] = ObjectSerializer::toQueryValue($name_start);
        }
        // query params
        if ($number_country !== null) {
            $queryParams['numberCountry'] = ObjectSerializer::toQueryValue($number_country);
        }
        // query params
        if ($number_country2 !== null) {
            $queryParams['numberCountry[]'] = ObjectSerializer::toQueryValue($number_country2);
        }
        // query params
        if ($number_country_exists !== null) {
            $queryParams['numberCountry[exists]'] = ObjectSerializer::toQueryValue($number_country_exists);
        }
        // query params
        if ($numbervalue !== null) {
            $queryParams['numbervalue'] = ObjectSerializer::toQueryValue($numbervalue);
        }
        // query params
        if ($numbervalue_end !== null) {
            $queryParams['numbervalue[end]'] = ObjectSerializer::toQueryValue($numbervalue_end);
        }
        // query params
        if ($numbervalue_exact !== null) {
            $queryParams['numbervalue[exact]'] = ObjectSerializer::toQueryValue($numbervalue_exact);
        }
        // query params
        if ($numbervalue_exists !== null) {
            $queryParams['numbervalue[exists]'] = ObjectSerializer::toQueryValue($numbervalue_exists);
        }
        // query params
        if ($numbervalue_partial !== null) {
            $queryParams['numbervalue[partial]'] = ObjectSerializer::toQueryValue($numbervalue_partial);
        }
        // query params
        if ($numbervalue_start !== null) {
            $queryParams['numbervalue[start]'] = ObjectSerializer::toQueryValue($numbervalue_start);
        }
        // query params
        if ($queue !== null) {
            $queryParams['queue'] = ObjectSerializer::toQueryValue($queue);
        }
        // query params
        if ($queue2 !== null) {
            $queryParams['queue[]'] = ObjectSerializer::toQueryValue($queue2);
        }
        // query params
        if ($queue_exists !== null) {
            $queryParams['queue[exists]'] = ObjectSerializer::toQueryValue($queue_exists);
        }
        // query params
        if ($routetype !== null) {
            $queryParams['routetype'] = ObjectSerializer::toQueryValue($routetype);
        }
        // query params
        if ($routetype_end !== null) {
            $queryParams['routetype[end]'] = ObjectSerializer::toQueryValue($routetype_end);
        }
        // query params
        if ($routetype_exact !== null) {
            $queryParams['routetype[exact]'] = ObjectSerializer::toQueryValue($routetype_exact);
        }
        // query params
        if ($routetype_exists !== null) {
            $queryParams['routetype[exists]'] = ObjectSerializer::toQueryValue($routetype_exists);
        }
        // query params
        if ($routetype_partial !== null) {
            $queryParams['routetype[partial]'] = ObjectSerializer::toQueryValue($routetype_partial);
        }
        // query params
        if ($routetype_start !== null) {
            $queryParams['routetype[start]'] = ObjectSerializer::toQueryValue($routetype_start);
        }
        // query params
        if ($user !== null) {
            $queryParams['user'] = ObjectSerializer::toQueryValue($user);
        }
        // query params
        if ($user2 !== null) {
            $queryParams['user[]'] = ObjectSerializer::toQueryValue($user2);
        }
        // query params
        if ($user_exists !== null) {
            $queryParams['user[exists]'] = ObjectSerializer::toQueryValue($user_exists);
        }
        // query params
        if ($voicemail_user !== null) {
            $queryParams['voicemailUser'] = ObjectSerializer::toQueryValue($voicemail_user);
        }
        // query params
        if ($voicemail_user2 !== null) {
            $queryParams['voicemailUser[]'] = ObjectSerializer::toQueryValue($voicemail_user2);
        }
        // query params
        if ($voicemail_user_exists !== null) {
            $queryParams['voicemailUser[exists]'] = ObjectSerializer::toQueryValue($voicemail_user_exists);
        }
        // query params
        if ($_order_friendvalue !== null) {
            $queryParams['_order[friendvalue]'] = ObjectSerializer::toQueryValue($_order_friendvalue);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_name !== null) {
            $queryParams['_order[name]'] = ObjectSerializer::toQueryValue($_order_name);
        }
        // query params
        if ($_order_numbervalue !== null) {
            $queryParams['_order[numbervalue]'] = ObjectSerializer::toQueryValue($_order_numbervalue);
        }
        // query params
        if ($_order_routetype !== null) {
            $queryParams['_order[routetype]'] = ObjectSerializer::toQueryValue($_order_routetype);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConditionalRouteItem
     *
     * Retrieves a ConditionalRoute resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ConditionalRouteDetailed
     */
    public function getConditionalRouteItem($id)
    {
        list($response) = $this->getConditionalRouteItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getConditionalRouteItemWithHttpInfo
     *
     * Retrieves a ConditionalRoute resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ConditionalRouteDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConditionalRouteItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRouteDetailed';
        $request = $this->getConditionalRouteItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ConditionalRouteDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConditionalRouteItemAsync
     *
     * Retrieves a ConditionalRoute resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConditionalRouteItemAsync($id)
    {
        return $this->getConditionalRouteItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConditionalRouteItemAsyncWithHttpInfo
     *
     * Retrieves a ConditionalRoute resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConditionalRouteItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRouteDetailed';
        $request = $this->getConditionalRouteItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConditionalRouteItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getConditionalRouteItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getConditionalRouteItem'
            );
        }

        $resourcePath = '/conditional_routes/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConditionalRoutesConditionCollection
     *
     * Retrieves the collection of ConditionalRoutesCondition resources.
     *
     * @param  string $conditional_route conditional_route (optional)
     * @param  string $conditional_route2 conditional_route2 (optional)
     * @param  string $conference_room conference_room (optional)
     * @param  string $conference_room2 conference_room2 (optional)
     * @param  bool $conference_room_exists conference_room_exists (optional)
     * @param  string $extension extension (optional)
     * @param  string $extension2 extension2 (optional)
     * @param  bool $extension_exists extension_exists (optional)
     * @param  string $friend_value friend_value (optional)
     * @param  string $friend_value_end friend_value_end (optional)
     * @param  string $friend_value_exact friend_value_exact (optional)
     * @param  bool $friend_value_exists friend_value_exists (optional)
     * @param  string $friend_value_partial friend_value_partial (optional)
     * @param  string $friend_value_start friend_value_start (optional)
     * @param  string $hunt_group hunt_group (optional)
     * @param  string $hunt_group2 hunt_group2 (optional)
     * @param  bool $hunt_group_exists hunt_group_exists (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $ivr ivr (optional)
     * @param  string $ivr2 ivr2 (optional)
     * @param  bool $ivr_exists ivr_exists (optional)
     * @param  string $locution locution (optional)
     * @param  string $locution2 locution2 (optional)
     * @param  bool $locution_exists locution_exists (optional)
     * @param  string $number_country number_country (optional)
     * @param  string $number_country2 number_country2 (optional)
     * @param  bool $number_country_exists number_country_exists (optional)
     * @param  string $number_value number_value (optional)
     * @param  string $number_value_end number_value_end (optional)
     * @param  string $number_value_exact number_value_exact (optional)
     * @param  bool $number_value_exists number_value_exists (optional)
     * @param  string $number_value_partial number_value_partial (optional)
     * @param  string $number_value_start number_value_start (optional)
     * @param  int $priority priority (optional)
     * @param  string $priority_between priority_between (optional)
     * @param  string $priority_gt priority_gt (optional)
     * @param  string $priority_gte priority_gte (optional)
     * @param  string $priority_lt priority_lt (optional)
     * @param  string $priority_lte priority_lte (optional)
     * @param  string $queue queue (optional)
     * @param  string $queue2 queue2 (optional)
     * @param  bool $queue_exists queue_exists (optional)
     * @param  string $route_type route_type (optional)
     * @param  string $route_type_end route_type_end (optional)
     * @param  string $route_type_exact route_type_exact (optional)
     * @param  bool $route_type_exists route_type_exists (optional)
     * @param  string $route_type_partial route_type_partial (optional)
     * @param  string $route_type_start route_type_start (optional)
     * @param  string $user user (optional)
     * @param  string $user2 user2 (optional)
     * @param  bool $user_exists user_exists (optional)
     * @param  string $voicemail_user voicemail_user (optional)
     * @param  string $voicemail_user2 voicemail_user2 (optional)
     * @param  bool $voicemail_user_exists voicemail_user_exists (optional)
     * @param  string $_order_friend_value _order_friend_value (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_number_value _order_number_value (optional)
     * @param  string $_order_priority _order_priority (optional)
     * @param  string $_order_route_type _order_route_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ConditionalRoutesConditionCollection[]
     */
    public function getConditionalRoutesConditionCollection($conditional_route = null, $conditional_route2 = null, $conference_room = null, $conference_room2 = null, $conference_room_exists = null, $extension = null, $extension2 = null, $extension_exists = null, $friend_value = null, $friend_value_end = null, $friend_value_exact = null, $friend_value_exists = null, $friend_value_partial = null, $friend_value_start = null, $hunt_group = null, $hunt_group2 = null, $hunt_group_exists = null, $id_exact = null, $ivr = null, $ivr2 = null, $ivr_exists = null, $locution = null, $locution2 = null, $locution_exists = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $number_value = null, $number_value_end = null, $number_value_exact = null, $number_value_exists = null, $number_value_partial = null, $number_value_start = null, $priority = null, $priority_between = null, $priority_gt = null, $priority_gte = null, $priority_lt = null, $priority_lte = null, $queue = null, $queue2 = null, $queue_exists = null, $route_type = null, $route_type_end = null, $route_type_exact = null, $route_type_exists = null, $route_type_partial = null, $route_type_start = null, $user = null, $user2 = null, $user_exists = null, $voicemail_user = null, $voicemail_user2 = null, $voicemail_user_exists = null, $_order_friend_value = null, $_order_id = null, $_order_number_value = null, $_order_priority = null, $_order_route_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getConditionalRoutesConditionCollectionWithHttpInfo($conditional_route, $conditional_route2, $conference_room, $conference_room2, $conference_room_exists, $extension, $extension2, $extension_exists, $friend_value, $friend_value_end, $friend_value_exact, $friend_value_exists, $friend_value_partial, $friend_value_start, $hunt_group, $hunt_group2, $hunt_group_exists, $id_exact, $ivr, $ivr2, $ivr_exists, $locution, $locution2, $locution_exists, $number_country, $number_country2, $number_country_exists, $number_value, $number_value_end, $number_value_exact, $number_value_exists, $number_value_partial, $number_value_start, $priority, $priority_between, $priority_gt, $priority_gte, $priority_lt, $priority_lte, $queue, $queue2, $queue_exists, $route_type, $route_type_end, $route_type_exact, $route_type_exists, $route_type_partial, $route_type_start, $user, $user2, $user_exists, $voicemail_user, $voicemail_user2, $voicemail_user_exists, $_order_friend_value, $_order_id, $_order_number_value, $_order_priority, $_order_route_type, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getConditionalRoutesConditionCollectionWithHttpInfo
     *
     * Retrieves the collection of ConditionalRoutesCondition resources.
     *
     * @param  string $conditional_route (optional)
     * @param  string $conditional_route2 (optional)
     * @param  string $conference_room (optional)
     * @param  string $conference_room2 (optional)
     * @param  bool $conference_room_exists (optional)
     * @param  string $extension (optional)
     * @param  string $extension2 (optional)
     * @param  bool $extension_exists (optional)
     * @param  string $friend_value (optional)
     * @param  string $friend_value_end (optional)
     * @param  string $friend_value_exact (optional)
     * @param  bool $friend_value_exists (optional)
     * @param  string $friend_value_partial (optional)
     * @param  string $friend_value_start (optional)
     * @param  string $hunt_group (optional)
     * @param  string $hunt_group2 (optional)
     * @param  bool $hunt_group_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $ivr (optional)
     * @param  string $ivr2 (optional)
     * @param  bool $ivr_exists (optional)
     * @param  string $locution (optional)
     * @param  string $locution2 (optional)
     * @param  bool $locution_exists (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $number_value (optional)
     * @param  string $number_value_end (optional)
     * @param  string $number_value_exact (optional)
     * @param  bool $number_value_exists (optional)
     * @param  string $number_value_partial (optional)
     * @param  string $number_value_start (optional)
     * @param  int $priority (optional)
     * @param  string $priority_between (optional)
     * @param  string $priority_gt (optional)
     * @param  string $priority_gte (optional)
     * @param  string $priority_lt (optional)
     * @param  string $priority_lte (optional)
     * @param  string $queue (optional)
     * @param  string $queue2 (optional)
     * @param  bool $queue_exists (optional)
     * @param  string $route_type (optional)
     * @param  string $route_type_end (optional)
     * @param  string $route_type_exact (optional)
     * @param  bool $route_type_exists (optional)
     * @param  string $route_type_partial (optional)
     * @param  string $route_type_start (optional)
     * @param  string $user (optional)
     * @param  string $user2 (optional)
     * @param  bool $user_exists (optional)
     * @param  string $voicemail_user (optional)
     * @param  string $voicemail_user2 (optional)
     * @param  bool $voicemail_user_exists (optional)
     * @param  string $_order_friend_value (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_number_value (optional)
     * @param  string $_order_priority (optional)
     * @param  string $_order_route_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ConditionalRoutesConditionCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getConditionalRoutesConditionCollectionWithHttpInfo($conditional_route = null, $conditional_route2 = null, $conference_room = null, $conference_room2 = null, $conference_room_exists = null, $extension = null, $extension2 = null, $extension_exists = null, $friend_value = null, $friend_value_end = null, $friend_value_exact = null, $friend_value_exists = null, $friend_value_partial = null, $friend_value_start = null, $hunt_group = null, $hunt_group2 = null, $hunt_group_exists = null, $id_exact = null, $ivr = null, $ivr2 = null, $ivr_exists = null, $locution = null, $locution2 = null, $locution_exists = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $number_value = null, $number_value_end = null, $number_value_exact = null, $number_value_exists = null, $number_value_partial = null, $number_value_start = null, $priority = null, $priority_between = null, $priority_gt = null, $priority_gte = null, $priority_lt = null, $priority_lte = null, $queue = null, $queue2 = null, $queue_exists = null, $route_type = null, $route_type_end = null, $route_type_exact = null, $route_type_exists = null, $route_type_partial = null, $route_type_start = null, $user = null, $user2 = null, $user_exists = null, $voicemail_user = null, $voicemail_user2 = null, $voicemail_user_exists = null, $_order_friend_value = null, $_order_id = null, $_order_number_value = null, $_order_priority = null, $_order_route_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoutesConditionCollection[]';
        $request = $this->getConditionalRoutesConditionCollectionRequest($conditional_route, $conditional_route2, $conference_room, $conference_room2, $conference_room_exists, $extension, $extension2, $extension_exists, $friend_value, $friend_value_end, $friend_value_exact, $friend_value_exists, $friend_value_partial, $friend_value_start, $hunt_group, $hunt_group2, $hunt_group_exists, $id_exact, $ivr, $ivr2, $ivr_exists, $locution, $locution2, $locution_exists, $number_country, $number_country2, $number_country_exists, $number_value, $number_value_end, $number_value_exact, $number_value_exists, $number_value_partial, $number_value_start, $priority, $priority_between, $priority_gt, $priority_gte, $priority_lt, $priority_lte, $queue, $queue2, $queue_exists, $route_type, $route_type_end, $route_type_exact, $route_type_exists, $route_type_partial, $route_type_start, $user, $user2, $user_exists, $voicemail_user, $voicemail_user2, $voicemail_user_exists, $_order_friend_value, $_order_id, $_order_number_value, $_order_priority, $_order_route_type, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ConditionalRoutesConditionCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConditionalRoutesConditionCollectionAsync
     *
     * Retrieves the collection of ConditionalRoutesCondition resources.
     *
     * @param  string $conditional_route (optional)
     * @param  string $conditional_route2 (optional)
     * @param  string $conference_room (optional)
     * @param  string $conference_room2 (optional)
     * @param  bool $conference_room_exists (optional)
     * @param  string $extension (optional)
     * @param  string $extension2 (optional)
     * @param  bool $extension_exists (optional)
     * @param  string $friend_value (optional)
     * @param  string $friend_value_end (optional)
     * @param  string $friend_value_exact (optional)
     * @param  bool $friend_value_exists (optional)
     * @param  string $friend_value_partial (optional)
     * @param  string $friend_value_start (optional)
     * @param  string $hunt_group (optional)
     * @param  string $hunt_group2 (optional)
     * @param  bool $hunt_group_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $ivr (optional)
     * @param  string $ivr2 (optional)
     * @param  bool $ivr_exists (optional)
     * @param  string $locution (optional)
     * @param  string $locution2 (optional)
     * @param  bool $locution_exists (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $number_value (optional)
     * @param  string $number_value_end (optional)
     * @param  string $number_value_exact (optional)
     * @param  bool $number_value_exists (optional)
     * @param  string $number_value_partial (optional)
     * @param  string $number_value_start (optional)
     * @param  int $priority (optional)
     * @param  string $priority_between (optional)
     * @param  string $priority_gt (optional)
     * @param  string $priority_gte (optional)
     * @param  string $priority_lt (optional)
     * @param  string $priority_lte (optional)
     * @param  string $queue (optional)
     * @param  string $queue2 (optional)
     * @param  bool $queue_exists (optional)
     * @param  string $route_type (optional)
     * @param  string $route_type_end (optional)
     * @param  string $route_type_exact (optional)
     * @param  bool $route_type_exists (optional)
     * @param  string $route_type_partial (optional)
     * @param  string $route_type_start (optional)
     * @param  string $user (optional)
     * @param  string $user2 (optional)
     * @param  bool $user_exists (optional)
     * @param  string $voicemail_user (optional)
     * @param  string $voicemail_user2 (optional)
     * @param  bool $voicemail_user_exists (optional)
     * @param  string $_order_friend_value (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_number_value (optional)
     * @param  string $_order_priority (optional)
     * @param  string $_order_route_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConditionalRoutesConditionCollectionAsync($conditional_route = null, $conditional_route2 = null, $conference_room = null, $conference_room2 = null, $conference_room_exists = null, $extension = null, $extension2 = null, $extension_exists = null, $friend_value = null, $friend_value_end = null, $friend_value_exact = null, $friend_value_exists = null, $friend_value_partial = null, $friend_value_start = null, $hunt_group = null, $hunt_group2 = null, $hunt_group_exists = null, $id_exact = null, $ivr = null, $ivr2 = null, $ivr_exists = null, $locution = null, $locution2 = null, $locution_exists = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $number_value = null, $number_value_end = null, $number_value_exact = null, $number_value_exists = null, $number_value_partial = null, $number_value_start = null, $priority = null, $priority_between = null, $priority_gt = null, $priority_gte = null, $priority_lt = null, $priority_lte = null, $queue = null, $queue2 = null, $queue_exists = null, $route_type = null, $route_type_end = null, $route_type_exact = null, $route_type_exists = null, $route_type_partial = null, $route_type_start = null, $user = null, $user2 = null, $user_exists = null, $voicemail_user = null, $voicemail_user2 = null, $voicemail_user_exists = null, $_order_friend_value = null, $_order_id = null, $_order_number_value = null, $_order_priority = null, $_order_route_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getConditionalRoutesConditionCollectionAsyncWithHttpInfo($conditional_route, $conditional_route2, $conference_room, $conference_room2, $conference_room_exists, $extension, $extension2, $extension_exists, $friend_value, $friend_value_end, $friend_value_exact, $friend_value_exists, $friend_value_partial, $friend_value_start, $hunt_group, $hunt_group2, $hunt_group_exists, $id_exact, $ivr, $ivr2, $ivr_exists, $locution, $locution2, $locution_exists, $number_country, $number_country2, $number_country_exists, $number_value, $number_value_end, $number_value_exact, $number_value_exists, $number_value_partial, $number_value_start, $priority, $priority_between, $priority_gt, $priority_gte, $priority_lt, $priority_lte, $queue, $queue2, $queue_exists, $route_type, $route_type_end, $route_type_exact, $route_type_exists, $route_type_partial, $route_type_start, $user, $user2, $user_exists, $voicemail_user, $voicemail_user2, $voicemail_user_exists, $_order_friend_value, $_order_id, $_order_number_value, $_order_priority, $_order_route_type, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConditionalRoutesConditionCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of ConditionalRoutesCondition resources.
     *
     * @param  string $conditional_route (optional)
     * @param  string $conditional_route2 (optional)
     * @param  string $conference_room (optional)
     * @param  string $conference_room2 (optional)
     * @param  bool $conference_room_exists (optional)
     * @param  string $extension (optional)
     * @param  string $extension2 (optional)
     * @param  bool $extension_exists (optional)
     * @param  string $friend_value (optional)
     * @param  string $friend_value_end (optional)
     * @param  string $friend_value_exact (optional)
     * @param  bool $friend_value_exists (optional)
     * @param  string $friend_value_partial (optional)
     * @param  string $friend_value_start (optional)
     * @param  string $hunt_group (optional)
     * @param  string $hunt_group2 (optional)
     * @param  bool $hunt_group_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $ivr (optional)
     * @param  string $ivr2 (optional)
     * @param  bool $ivr_exists (optional)
     * @param  string $locution (optional)
     * @param  string $locution2 (optional)
     * @param  bool $locution_exists (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $number_value (optional)
     * @param  string $number_value_end (optional)
     * @param  string $number_value_exact (optional)
     * @param  bool $number_value_exists (optional)
     * @param  string $number_value_partial (optional)
     * @param  string $number_value_start (optional)
     * @param  int $priority (optional)
     * @param  string $priority_between (optional)
     * @param  string $priority_gt (optional)
     * @param  string $priority_gte (optional)
     * @param  string $priority_lt (optional)
     * @param  string $priority_lte (optional)
     * @param  string $queue (optional)
     * @param  string $queue2 (optional)
     * @param  bool $queue_exists (optional)
     * @param  string $route_type (optional)
     * @param  string $route_type_end (optional)
     * @param  string $route_type_exact (optional)
     * @param  bool $route_type_exists (optional)
     * @param  string $route_type_partial (optional)
     * @param  string $route_type_start (optional)
     * @param  string $user (optional)
     * @param  string $user2 (optional)
     * @param  bool $user_exists (optional)
     * @param  string $voicemail_user (optional)
     * @param  string $voicemail_user2 (optional)
     * @param  bool $voicemail_user_exists (optional)
     * @param  string $_order_friend_value (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_number_value (optional)
     * @param  string $_order_priority (optional)
     * @param  string $_order_route_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConditionalRoutesConditionCollectionAsyncWithHttpInfo($conditional_route = null, $conditional_route2 = null, $conference_room = null, $conference_room2 = null, $conference_room_exists = null, $extension = null, $extension2 = null, $extension_exists = null, $friend_value = null, $friend_value_end = null, $friend_value_exact = null, $friend_value_exists = null, $friend_value_partial = null, $friend_value_start = null, $hunt_group = null, $hunt_group2 = null, $hunt_group_exists = null, $id_exact = null, $ivr = null, $ivr2 = null, $ivr_exists = null, $locution = null, $locution2 = null, $locution_exists = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $number_value = null, $number_value_end = null, $number_value_exact = null, $number_value_exists = null, $number_value_partial = null, $number_value_start = null, $priority = null, $priority_between = null, $priority_gt = null, $priority_gte = null, $priority_lt = null, $priority_lte = null, $queue = null, $queue2 = null, $queue_exists = null, $route_type = null, $route_type_end = null, $route_type_exact = null, $route_type_exists = null, $route_type_partial = null, $route_type_start = null, $user = null, $user2 = null, $user_exists = null, $voicemail_user = null, $voicemail_user2 = null, $voicemail_user_exists = null, $_order_friend_value = null, $_order_id = null, $_order_number_value = null, $_order_priority = null, $_order_route_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoutesConditionCollection[]';
        $request = $this->getConditionalRoutesConditionCollectionRequest($conditional_route, $conditional_route2, $conference_room, $conference_room2, $conference_room_exists, $extension, $extension2, $extension_exists, $friend_value, $friend_value_end, $friend_value_exact, $friend_value_exists, $friend_value_partial, $friend_value_start, $hunt_group, $hunt_group2, $hunt_group_exists, $id_exact, $ivr, $ivr2, $ivr_exists, $locution, $locution2, $locution_exists, $number_country, $number_country2, $number_country_exists, $number_value, $number_value_end, $number_value_exact, $number_value_exists, $number_value_partial, $number_value_start, $priority, $priority_between, $priority_gt, $priority_gte, $priority_lt, $priority_lte, $queue, $queue2, $queue_exists, $route_type, $route_type_end, $route_type_exact, $route_type_exists, $route_type_partial, $route_type_start, $user, $user2, $user_exists, $voicemail_user, $voicemail_user2, $voicemail_user_exists, $_order_friend_value, $_order_id, $_order_number_value, $_order_priority, $_order_route_type, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConditionalRoutesConditionCollection'
     *
     * @param  string $conditional_route (optional)
     * @param  string $conditional_route2 (optional)
     * @param  string $conference_room (optional)
     * @param  string $conference_room2 (optional)
     * @param  bool $conference_room_exists (optional)
     * @param  string $extension (optional)
     * @param  string $extension2 (optional)
     * @param  bool $extension_exists (optional)
     * @param  string $friend_value (optional)
     * @param  string $friend_value_end (optional)
     * @param  string $friend_value_exact (optional)
     * @param  bool $friend_value_exists (optional)
     * @param  string $friend_value_partial (optional)
     * @param  string $friend_value_start (optional)
     * @param  string $hunt_group (optional)
     * @param  string $hunt_group2 (optional)
     * @param  bool $hunt_group_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $ivr (optional)
     * @param  string $ivr2 (optional)
     * @param  bool $ivr_exists (optional)
     * @param  string $locution (optional)
     * @param  string $locution2 (optional)
     * @param  bool $locution_exists (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $number_value (optional)
     * @param  string $number_value_end (optional)
     * @param  string $number_value_exact (optional)
     * @param  bool $number_value_exists (optional)
     * @param  string $number_value_partial (optional)
     * @param  string $number_value_start (optional)
     * @param  int $priority (optional)
     * @param  string $priority_between (optional)
     * @param  string $priority_gt (optional)
     * @param  string $priority_gte (optional)
     * @param  string $priority_lt (optional)
     * @param  string $priority_lte (optional)
     * @param  string $queue (optional)
     * @param  string $queue2 (optional)
     * @param  bool $queue_exists (optional)
     * @param  string $route_type (optional)
     * @param  string $route_type_end (optional)
     * @param  string $route_type_exact (optional)
     * @param  bool $route_type_exists (optional)
     * @param  string $route_type_partial (optional)
     * @param  string $route_type_start (optional)
     * @param  string $user (optional)
     * @param  string $user2 (optional)
     * @param  bool $user_exists (optional)
     * @param  string $voicemail_user (optional)
     * @param  string $voicemail_user2 (optional)
     * @param  bool $voicemail_user_exists (optional)
     * @param  string $_order_friend_value (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_number_value (optional)
     * @param  string $_order_priority (optional)
     * @param  string $_order_route_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getConditionalRoutesConditionCollectionRequest($conditional_route = null, $conditional_route2 = null, $conference_room = null, $conference_room2 = null, $conference_room_exists = null, $extension = null, $extension2 = null, $extension_exists = null, $friend_value = null, $friend_value_end = null, $friend_value_exact = null, $friend_value_exists = null, $friend_value_partial = null, $friend_value_start = null, $hunt_group = null, $hunt_group2 = null, $hunt_group_exists = null, $id_exact = null, $ivr = null, $ivr2 = null, $ivr_exists = null, $locution = null, $locution2 = null, $locution_exists = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $number_value = null, $number_value_end = null, $number_value_exact = null, $number_value_exists = null, $number_value_partial = null, $number_value_start = null, $priority = null, $priority_between = null, $priority_gt = null, $priority_gte = null, $priority_lt = null, $priority_lte = null, $queue = null, $queue2 = null, $queue_exists = null, $route_type = null, $route_type_end = null, $route_type_exact = null, $route_type_exists = null, $route_type_partial = null, $route_type_start = null, $user = null, $user2 = null, $user_exists = null, $voicemail_user = null, $voicemail_user2 = null, $voicemail_user_exists = null, $_order_friend_value = null, $_order_id = null, $_order_number_value = null, $_order_priority = null, $_order_route_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/conditional_routes_conditions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($conditional_route !== null) {
            $queryParams['conditionalRoute'] = ObjectSerializer::toQueryValue($conditional_route);
        }
        // query params
        if ($conditional_route2 !== null) {
            $queryParams['conditionalRoute[]'] = ObjectSerializer::toQueryValue($conditional_route2);
        }
        // query params
        if ($conference_room !== null) {
            $queryParams['conferenceRoom'] = ObjectSerializer::toQueryValue($conference_room);
        }
        // query params
        if ($conference_room2 !== null) {
            $queryParams['conferenceRoom[]'] = ObjectSerializer::toQueryValue($conference_room2);
        }
        // query params
        if ($conference_room_exists !== null) {
            $queryParams['conferenceRoom[exists]'] = ObjectSerializer::toQueryValue($conference_room_exists);
        }
        // query params
        if ($extension !== null) {
            $queryParams['extension'] = ObjectSerializer::toQueryValue($extension);
        }
        // query params
        if ($extension2 !== null) {
            $queryParams['extension[]'] = ObjectSerializer::toQueryValue($extension2);
        }
        // query params
        if ($extension_exists !== null) {
            $queryParams['extension[exists]'] = ObjectSerializer::toQueryValue($extension_exists);
        }
        // query params
        if ($friend_value !== null) {
            $queryParams['friendValue'] = ObjectSerializer::toQueryValue($friend_value);
        }
        // query params
        if ($friend_value_end !== null) {
            $queryParams['friendValue[end]'] = ObjectSerializer::toQueryValue($friend_value_end);
        }
        // query params
        if ($friend_value_exact !== null) {
            $queryParams['friendValue[exact]'] = ObjectSerializer::toQueryValue($friend_value_exact);
        }
        // query params
        if ($friend_value_exists !== null) {
            $queryParams['friendValue[exists]'] = ObjectSerializer::toQueryValue($friend_value_exists);
        }
        // query params
        if ($friend_value_partial !== null) {
            $queryParams['friendValue[partial]'] = ObjectSerializer::toQueryValue($friend_value_partial);
        }
        // query params
        if ($friend_value_start !== null) {
            $queryParams['friendValue[start]'] = ObjectSerializer::toQueryValue($friend_value_start);
        }
        // query params
        if ($hunt_group !== null) {
            $queryParams['huntGroup'] = ObjectSerializer::toQueryValue($hunt_group);
        }
        // query params
        if ($hunt_group2 !== null) {
            $queryParams['huntGroup[]'] = ObjectSerializer::toQueryValue($hunt_group2);
        }
        // query params
        if ($hunt_group_exists !== null) {
            $queryParams['huntGroup[exists]'] = ObjectSerializer::toQueryValue($hunt_group_exists);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($ivr !== null) {
            $queryParams['ivr'] = ObjectSerializer::toQueryValue($ivr);
        }
        // query params
        if ($ivr2 !== null) {
            $queryParams['ivr[]'] = ObjectSerializer::toQueryValue($ivr2);
        }
        // query params
        if ($ivr_exists !== null) {
            $queryParams['ivr[exists]'] = ObjectSerializer::toQueryValue($ivr_exists);
        }
        // query params
        if ($locution !== null) {
            $queryParams['locution'] = ObjectSerializer::toQueryValue($locution);
        }
        // query params
        if ($locution2 !== null) {
            $queryParams['locution[]'] = ObjectSerializer::toQueryValue($locution2);
        }
        // query params
        if ($locution_exists !== null) {
            $queryParams['locution[exists]'] = ObjectSerializer::toQueryValue($locution_exists);
        }
        // query params
        if ($number_country !== null) {
            $queryParams['numberCountry'] = ObjectSerializer::toQueryValue($number_country);
        }
        // query params
        if ($number_country2 !== null) {
            $queryParams['numberCountry[]'] = ObjectSerializer::toQueryValue($number_country2);
        }
        // query params
        if ($number_country_exists !== null) {
            $queryParams['numberCountry[exists]'] = ObjectSerializer::toQueryValue($number_country_exists);
        }
        // query params
        if ($number_value !== null) {
            $queryParams['numberValue'] = ObjectSerializer::toQueryValue($number_value);
        }
        // query params
        if ($number_value_end !== null) {
            $queryParams['numberValue[end]'] = ObjectSerializer::toQueryValue($number_value_end);
        }
        // query params
        if ($number_value_exact !== null) {
            $queryParams['numberValue[exact]'] = ObjectSerializer::toQueryValue($number_value_exact);
        }
        // query params
        if ($number_value_exists !== null) {
            $queryParams['numberValue[exists]'] = ObjectSerializer::toQueryValue($number_value_exists);
        }
        // query params
        if ($number_value_partial !== null) {
            $queryParams['numberValue[partial]'] = ObjectSerializer::toQueryValue($number_value_partial);
        }
        // query params
        if ($number_value_start !== null) {
            $queryParams['numberValue[start]'] = ObjectSerializer::toQueryValue($number_value_start);
        }
        // query params
        if ($priority !== null) {
            $queryParams['priority'] = ObjectSerializer::toQueryValue($priority);
        }
        // query params
        if ($priority_between !== null) {
            $queryParams['priority[between]'] = ObjectSerializer::toQueryValue($priority_between);
        }
        // query params
        if ($priority_gt !== null) {
            $queryParams['priority[gt]'] = ObjectSerializer::toQueryValue($priority_gt);
        }
        // query params
        if ($priority_gte !== null) {
            $queryParams['priority[gte]'] = ObjectSerializer::toQueryValue($priority_gte);
        }
        // query params
        if ($priority_lt !== null) {
            $queryParams['priority[lt]'] = ObjectSerializer::toQueryValue($priority_lt);
        }
        // query params
        if ($priority_lte !== null) {
            $queryParams['priority[lte]'] = ObjectSerializer::toQueryValue($priority_lte);
        }
        // query params
        if ($queue !== null) {
            $queryParams['queue'] = ObjectSerializer::toQueryValue($queue);
        }
        // query params
        if ($queue2 !== null) {
            $queryParams['queue[]'] = ObjectSerializer::toQueryValue($queue2);
        }
        // query params
        if ($queue_exists !== null) {
            $queryParams['queue[exists]'] = ObjectSerializer::toQueryValue($queue_exists);
        }
        // query params
        if ($route_type !== null) {
            $queryParams['routeType'] = ObjectSerializer::toQueryValue($route_type);
        }
        // query params
        if ($route_type_end !== null) {
            $queryParams['routeType[end]'] = ObjectSerializer::toQueryValue($route_type_end);
        }
        // query params
        if ($route_type_exact !== null) {
            $queryParams['routeType[exact]'] = ObjectSerializer::toQueryValue($route_type_exact);
        }
        // query params
        if ($route_type_exists !== null) {
            $queryParams['routeType[exists]'] = ObjectSerializer::toQueryValue($route_type_exists);
        }
        // query params
        if ($route_type_partial !== null) {
            $queryParams['routeType[partial]'] = ObjectSerializer::toQueryValue($route_type_partial);
        }
        // query params
        if ($route_type_start !== null) {
            $queryParams['routeType[start]'] = ObjectSerializer::toQueryValue($route_type_start);
        }
        // query params
        if ($user !== null) {
            $queryParams['user'] = ObjectSerializer::toQueryValue($user);
        }
        // query params
        if ($user2 !== null) {
            $queryParams['user[]'] = ObjectSerializer::toQueryValue($user2);
        }
        // query params
        if ($user_exists !== null) {
            $queryParams['user[exists]'] = ObjectSerializer::toQueryValue($user_exists);
        }
        // query params
        if ($voicemail_user !== null) {
            $queryParams['voicemailUser'] = ObjectSerializer::toQueryValue($voicemail_user);
        }
        // query params
        if ($voicemail_user2 !== null) {
            $queryParams['voicemailUser[]'] = ObjectSerializer::toQueryValue($voicemail_user2);
        }
        // query params
        if ($voicemail_user_exists !== null) {
            $queryParams['voicemailUser[exists]'] = ObjectSerializer::toQueryValue($voicemail_user_exists);
        }
        // query params
        if ($_order_friend_value !== null) {
            $queryParams['_order[friendValue]'] = ObjectSerializer::toQueryValue($_order_friend_value);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_number_value !== null) {
            $queryParams['_order[numberValue]'] = ObjectSerializer::toQueryValue($_order_number_value);
        }
        // query params
        if ($_order_priority !== null) {
            $queryParams['_order[priority]'] = ObjectSerializer::toQueryValue($_order_priority);
        }
        // query params
        if ($_order_route_type !== null) {
            $queryParams['_order[routeType]'] = ObjectSerializer::toQueryValue($_order_route_type);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConditionalRoutesConditionItem
     *
     * Retrieves a ConditionalRoutesCondition resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ConditionalRoutesConditionDetailed
     */
    public function getConditionalRoutesConditionItem($id)
    {
        list($response) = $this->getConditionalRoutesConditionItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getConditionalRoutesConditionItemWithHttpInfo
     *
     * Retrieves a ConditionalRoutesCondition resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ConditionalRoutesConditionDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConditionalRoutesConditionItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoutesConditionDetailed';
        $request = $this->getConditionalRoutesConditionItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ConditionalRoutesConditionDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConditionalRoutesConditionItemAsync
     *
     * Retrieves a ConditionalRoutesCondition resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConditionalRoutesConditionItemAsync($id)
    {
        return $this->getConditionalRoutesConditionItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConditionalRoutesConditionItemAsyncWithHttpInfo
     *
     * Retrieves a ConditionalRoutesCondition resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConditionalRoutesConditionItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoutesConditionDetailed';
        $request = $this->getConditionalRoutesConditionItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConditionalRoutesConditionItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getConditionalRoutesConditionItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getConditionalRoutesConditionItem'
            );
        }

        $resourcePath = '/conditional_routes_conditions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConditionalRoutesConditionsRelCalendarCollection
     *
     * Retrieves the collection of ConditionalRoutesConditionsRelCalendar resources.
     *
     * @param  string $calendar calendar (optional)
     * @param  string $calendar_name calendar_name (optional)
     * @param  string $calendar2 calendar2 (optional)
     * @param  string $condition condition (optional)
     * @param  int $condition_conditional_route condition_conditional_route (optional)
     * @param  int $condition_conference_room condition_conference_room (optional)
     * @param  int $condition_extension condition_extension (optional)
     * @param  string $condition_friend_value condition_friend_value (optional)
     * @param  int $condition_hunt_group condition_hunt_group (optional)
     * @param  int $condition_ivr condition_ivr (optional)
     * @param  int $condition_locution condition_locution (optional)
     * @param  int $condition_number_country condition_number_country (optional)
     * @param  string $condition_number_value condition_number_value (optional)
     * @param  int $condition_priority condition_priority (optional)
     * @param  int $condition_queue condition_queue (optional)
     * @param  string $condition_route_type condition_route_type (optional)
     * @param  int $condition_user condition_user (optional)
     * @param  int $condition_voicemail_user condition_voicemail_user (optional)
     * @param  string $condition2 condition2 (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ConditionalRoutesConditionsRelCalendarDetailedCollection[]
     */
    public function getConditionalRoutesConditionsRelCalendarCollection($calendar = null, $calendar_name = null, $calendar2 = null, $condition = null, $condition_conditional_route = null, $condition_conference_room = null, $condition_extension = null, $condition_friend_value = null, $condition_hunt_group = null, $condition_ivr = null, $condition_locution = null, $condition_number_country = null, $condition_number_value = null, $condition_priority = null, $condition_queue = null, $condition_route_type = null, $condition_user = null, $condition_voicemail_user = null, $condition2 = null, $id_exact = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getConditionalRoutesConditionsRelCalendarCollectionWithHttpInfo($calendar, $calendar_name, $calendar2, $condition, $condition_conditional_route, $condition_conference_room, $condition_extension, $condition_friend_value, $condition_hunt_group, $condition_ivr, $condition_locution, $condition_number_country, $condition_number_value, $condition_priority, $condition_queue, $condition_route_type, $condition_user, $condition_voicemail_user, $condition2, $id_exact, $_order_id, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getConditionalRoutesConditionsRelCalendarCollectionWithHttpInfo
     *
     * Retrieves the collection of ConditionalRoutesConditionsRelCalendar resources.
     *
     * @param  string $calendar (optional)
     * @param  string $calendar_name (optional)
     * @param  string $calendar2 (optional)
     * @param  string $condition (optional)
     * @param  int $condition_conditional_route (optional)
     * @param  int $condition_conference_room (optional)
     * @param  int $condition_extension (optional)
     * @param  string $condition_friend_value (optional)
     * @param  int $condition_hunt_group (optional)
     * @param  int $condition_ivr (optional)
     * @param  int $condition_locution (optional)
     * @param  int $condition_number_country (optional)
     * @param  string $condition_number_value (optional)
     * @param  int $condition_priority (optional)
     * @param  int $condition_queue (optional)
     * @param  string $condition_route_type (optional)
     * @param  int $condition_user (optional)
     * @param  int $condition_voicemail_user (optional)
     * @param  string $condition2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ConditionalRoutesConditionsRelCalendarDetailedCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getConditionalRoutesConditionsRelCalendarCollectionWithHttpInfo($calendar = null, $calendar_name = null, $calendar2 = null, $condition = null, $condition_conditional_route = null, $condition_conference_room = null, $condition_extension = null, $condition_friend_value = null, $condition_hunt_group = null, $condition_ivr = null, $condition_locution = null, $condition_number_country = null, $condition_number_value = null, $condition_priority = null, $condition_queue = null, $condition_route_type = null, $condition_user = null, $condition_voicemail_user = null, $condition2 = null, $id_exact = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoutesConditionsRelCalendarDetailedCollection[]';
        $request = $this->getConditionalRoutesConditionsRelCalendarCollectionRequest($calendar, $calendar_name, $calendar2, $condition, $condition_conditional_route, $condition_conference_room, $condition_extension, $condition_friend_value, $condition_hunt_group, $condition_ivr, $condition_locution, $condition_number_country, $condition_number_value, $condition_priority, $condition_queue, $condition_route_type, $condition_user, $condition_voicemail_user, $condition2, $id_exact, $_order_id, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ConditionalRoutesConditionsRelCalendarDetailedCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConditionalRoutesConditionsRelCalendarCollectionAsync
     *
     * Retrieves the collection of ConditionalRoutesConditionsRelCalendar resources.
     *
     * @param  string $calendar (optional)
     * @param  string $calendar_name (optional)
     * @param  string $calendar2 (optional)
     * @param  string $condition (optional)
     * @param  int $condition_conditional_route (optional)
     * @param  int $condition_conference_room (optional)
     * @param  int $condition_extension (optional)
     * @param  string $condition_friend_value (optional)
     * @param  int $condition_hunt_group (optional)
     * @param  int $condition_ivr (optional)
     * @param  int $condition_locution (optional)
     * @param  int $condition_number_country (optional)
     * @param  string $condition_number_value (optional)
     * @param  int $condition_priority (optional)
     * @param  int $condition_queue (optional)
     * @param  string $condition_route_type (optional)
     * @param  int $condition_user (optional)
     * @param  int $condition_voicemail_user (optional)
     * @param  string $condition2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConditionalRoutesConditionsRelCalendarCollectionAsync($calendar = null, $calendar_name = null, $calendar2 = null, $condition = null, $condition_conditional_route = null, $condition_conference_room = null, $condition_extension = null, $condition_friend_value = null, $condition_hunt_group = null, $condition_ivr = null, $condition_locution = null, $condition_number_country = null, $condition_number_value = null, $condition_priority = null, $condition_queue = null, $condition_route_type = null, $condition_user = null, $condition_voicemail_user = null, $condition2 = null, $id_exact = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getConditionalRoutesConditionsRelCalendarCollectionAsyncWithHttpInfo($calendar, $calendar_name, $calendar2, $condition, $condition_conditional_route, $condition_conference_room, $condition_extension, $condition_friend_value, $condition_hunt_group, $condition_ivr, $condition_locution, $condition_number_country, $condition_number_value, $condition_priority, $condition_queue, $condition_route_type, $condition_user, $condition_voicemail_user, $condition2, $id_exact, $_order_id, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConditionalRoutesConditionsRelCalendarCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of ConditionalRoutesConditionsRelCalendar resources.
     *
     * @param  string $calendar (optional)
     * @param  string $calendar_name (optional)
     * @param  string $calendar2 (optional)
     * @param  string $condition (optional)
     * @param  int $condition_conditional_route (optional)
     * @param  int $condition_conference_room (optional)
     * @param  int $condition_extension (optional)
     * @param  string $condition_friend_value (optional)
     * @param  int $condition_hunt_group (optional)
     * @param  int $condition_ivr (optional)
     * @param  int $condition_locution (optional)
     * @param  int $condition_number_country (optional)
     * @param  string $condition_number_value (optional)
     * @param  int $condition_priority (optional)
     * @param  int $condition_queue (optional)
     * @param  string $condition_route_type (optional)
     * @param  int $condition_user (optional)
     * @param  int $condition_voicemail_user (optional)
     * @param  string $condition2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConditionalRoutesConditionsRelCalendarCollectionAsyncWithHttpInfo($calendar = null, $calendar_name = null, $calendar2 = null, $condition = null, $condition_conditional_route = null, $condition_conference_room = null, $condition_extension = null, $condition_friend_value = null, $condition_hunt_group = null, $condition_ivr = null, $condition_locution = null, $condition_number_country = null, $condition_number_value = null, $condition_priority = null, $condition_queue = null, $condition_route_type = null, $condition_user = null, $condition_voicemail_user = null, $condition2 = null, $id_exact = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoutesConditionsRelCalendarDetailedCollection[]';
        $request = $this->getConditionalRoutesConditionsRelCalendarCollectionRequest($calendar, $calendar_name, $calendar2, $condition, $condition_conditional_route, $condition_conference_room, $condition_extension, $condition_friend_value, $condition_hunt_group, $condition_ivr, $condition_locution, $condition_number_country, $condition_number_value, $condition_priority, $condition_queue, $condition_route_type, $condition_user, $condition_voicemail_user, $condition2, $id_exact, $_order_id, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConditionalRoutesConditionsRelCalendarCollection'
     *
     * @param  string $calendar (optional)
     * @param  string $calendar_name (optional)
     * @param  string $calendar2 (optional)
     * @param  string $condition (optional)
     * @param  int $condition_conditional_route (optional)
     * @param  int $condition_conference_room (optional)
     * @param  int $condition_extension (optional)
     * @param  string $condition_friend_value (optional)
     * @param  int $condition_hunt_group (optional)
     * @param  int $condition_ivr (optional)
     * @param  int $condition_locution (optional)
     * @param  int $condition_number_country (optional)
     * @param  string $condition_number_value (optional)
     * @param  int $condition_priority (optional)
     * @param  int $condition_queue (optional)
     * @param  string $condition_route_type (optional)
     * @param  int $condition_user (optional)
     * @param  int $condition_voicemail_user (optional)
     * @param  string $condition2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getConditionalRoutesConditionsRelCalendarCollectionRequest($calendar = null, $calendar_name = null, $calendar2 = null, $condition = null, $condition_conditional_route = null, $condition_conference_room = null, $condition_extension = null, $condition_friend_value = null, $condition_hunt_group = null, $condition_ivr = null, $condition_locution = null, $condition_number_country = null, $condition_number_value = null, $condition_priority = null, $condition_queue = null, $condition_route_type = null, $condition_user = null, $condition_voicemail_user = null, $condition2 = null, $id_exact = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/conditional_routes_conditions_rel_calendars';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($calendar !== null) {
            $queryParams['calendar'] = ObjectSerializer::toQueryValue($calendar);
        }
        // query params
        if ($calendar_name !== null) {
            $queryParams['calendar.name'] = ObjectSerializer::toQueryValue($calendar_name);
        }
        // query params
        if ($calendar2 !== null) {
            $queryParams['calendar[]'] = ObjectSerializer::toQueryValue($calendar2);
        }
        // query params
        if ($condition !== null) {
            $queryParams['condition'] = ObjectSerializer::toQueryValue($condition);
        }
        // query params
        if ($condition_conditional_route !== null) {
            $queryParams['condition.conditionalRoute'] = ObjectSerializer::toQueryValue($condition_conditional_route);
        }
        // query params
        if ($condition_conference_room !== null) {
            $queryParams['condition.conferenceRoom'] = ObjectSerializer::toQueryValue($condition_conference_room);
        }
        // query params
        if ($condition_extension !== null) {
            $queryParams['condition.extension'] = ObjectSerializer::toQueryValue($condition_extension);
        }
        // query params
        if ($condition_friend_value !== null) {
            $queryParams['condition.friendValue'] = ObjectSerializer::toQueryValue($condition_friend_value);
        }
        // query params
        if ($condition_hunt_group !== null) {
            $queryParams['condition.huntGroup'] = ObjectSerializer::toQueryValue($condition_hunt_group);
        }
        // query params
        if ($condition_ivr !== null) {
            $queryParams['condition.ivr'] = ObjectSerializer::toQueryValue($condition_ivr);
        }
        // query params
        if ($condition_locution !== null) {
            $queryParams['condition.locution'] = ObjectSerializer::toQueryValue($condition_locution);
        }
        // query params
        if ($condition_number_country !== null) {
            $queryParams['condition.numberCountry'] = ObjectSerializer::toQueryValue($condition_number_country);
        }
        // query params
        if ($condition_number_value !== null) {
            $queryParams['condition.numberValue'] = ObjectSerializer::toQueryValue($condition_number_value);
        }
        // query params
        if ($condition_priority !== null) {
            $queryParams['condition.priority'] = ObjectSerializer::toQueryValue($condition_priority);
        }
        // query params
        if ($condition_queue !== null) {
            $queryParams['condition.queue'] = ObjectSerializer::toQueryValue($condition_queue);
        }
        // query params
        if ($condition_route_type !== null) {
            $queryParams['condition.routeType'] = ObjectSerializer::toQueryValue($condition_route_type);
        }
        // query params
        if ($condition_user !== null) {
            $queryParams['condition.user'] = ObjectSerializer::toQueryValue($condition_user);
        }
        // query params
        if ($condition_voicemail_user !== null) {
            $queryParams['condition.voicemailUser'] = ObjectSerializer::toQueryValue($condition_voicemail_user);
        }
        // query params
        if ($condition2 !== null) {
            $queryParams['condition[]'] = ObjectSerializer::toQueryValue($condition2);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConditionalRoutesConditionsRelCalendarItem
     *
     * Retrieves a ConditionalRoutesConditionsRelCalendar resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ConditionalRoutesConditionsRelCalendarDetailed
     */
    public function getConditionalRoutesConditionsRelCalendarItem($id)
    {
        list($response) = $this->getConditionalRoutesConditionsRelCalendarItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getConditionalRoutesConditionsRelCalendarItemWithHttpInfo
     *
     * Retrieves a ConditionalRoutesConditionsRelCalendar resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ConditionalRoutesConditionsRelCalendarDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConditionalRoutesConditionsRelCalendarItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoutesConditionsRelCalendarDetailed';
        $request = $this->getConditionalRoutesConditionsRelCalendarItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ConditionalRoutesConditionsRelCalendarDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConditionalRoutesConditionsRelCalendarItemAsync
     *
     * Retrieves a ConditionalRoutesConditionsRelCalendar resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConditionalRoutesConditionsRelCalendarItemAsync($id)
    {
        return $this->getConditionalRoutesConditionsRelCalendarItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConditionalRoutesConditionsRelCalendarItemAsyncWithHttpInfo
     *
     * Retrieves a ConditionalRoutesConditionsRelCalendar resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConditionalRoutesConditionsRelCalendarItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoutesConditionsRelCalendarDetailed';
        $request = $this->getConditionalRoutesConditionsRelCalendarItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConditionalRoutesConditionsRelCalendarItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getConditionalRoutesConditionsRelCalendarItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getConditionalRoutesConditionsRelCalendarItem'
            );
        }

        $resourcePath = '/conditional_routes_conditions_rel_calendars/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConditionalRoutesConditionsRelMatchlistCollection
     *
     * Retrieves the collection of ConditionalRoutesConditionsRelMatchlist resources.
     *
     * @param  string $condition condition (optional)
     * @param  int $condition_conditional_route condition_conditional_route (optional)
     * @param  int $condition_conference_room condition_conference_room (optional)
     * @param  int $condition_extension condition_extension (optional)
     * @param  string $condition_friend_value condition_friend_value (optional)
     * @param  int $condition_hunt_group condition_hunt_group (optional)
     * @param  int $condition_ivr condition_ivr (optional)
     * @param  int $condition_locution condition_locution (optional)
     * @param  int $condition_number_country condition_number_country (optional)
     * @param  string $condition_number_value condition_number_value (optional)
     * @param  int $condition_priority condition_priority (optional)
     * @param  int $condition_queue condition_queue (optional)
     * @param  string $condition_route_type condition_route_type (optional)
     * @param  int $condition_user condition_user (optional)
     * @param  int $condition_voicemail_user condition_voicemail_user (optional)
     * @param  string $condition2 condition2 (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $matchlist matchlist (optional)
     * @param  string $matchlist_name matchlist_name (optional)
     * @param  string $matchlist2 matchlist2 (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ConditionalRoutesConditionsRelMatchlistDetailedCollection[]
     */
    public function getConditionalRoutesConditionsRelMatchlistCollection($condition = null, $condition_conditional_route = null, $condition_conference_room = null, $condition_extension = null, $condition_friend_value = null, $condition_hunt_group = null, $condition_ivr = null, $condition_locution = null, $condition_number_country = null, $condition_number_value = null, $condition_priority = null, $condition_queue = null, $condition_route_type = null, $condition_user = null, $condition_voicemail_user = null, $condition2 = null, $id_exact = null, $matchlist = null, $matchlist_name = null, $matchlist2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getConditionalRoutesConditionsRelMatchlistCollectionWithHttpInfo($condition, $condition_conditional_route, $condition_conference_room, $condition_extension, $condition_friend_value, $condition_hunt_group, $condition_ivr, $condition_locution, $condition_number_country, $condition_number_value, $condition_priority, $condition_queue, $condition_route_type, $condition_user, $condition_voicemail_user, $condition2, $id_exact, $matchlist, $matchlist_name, $matchlist2, $_order_id, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getConditionalRoutesConditionsRelMatchlistCollectionWithHttpInfo
     *
     * Retrieves the collection of ConditionalRoutesConditionsRelMatchlist resources.
     *
     * @param  string $condition (optional)
     * @param  int $condition_conditional_route (optional)
     * @param  int $condition_conference_room (optional)
     * @param  int $condition_extension (optional)
     * @param  string $condition_friend_value (optional)
     * @param  int $condition_hunt_group (optional)
     * @param  int $condition_ivr (optional)
     * @param  int $condition_locution (optional)
     * @param  int $condition_number_country (optional)
     * @param  string $condition_number_value (optional)
     * @param  int $condition_priority (optional)
     * @param  int $condition_queue (optional)
     * @param  string $condition_route_type (optional)
     * @param  int $condition_user (optional)
     * @param  int $condition_voicemail_user (optional)
     * @param  string $condition2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $matchlist (optional)
     * @param  string $matchlist_name (optional)
     * @param  string $matchlist2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ConditionalRoutesConditionsRelMatchlistDetailedCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getConditionalRoutesConditionsRelMatchlistCollectionWithHttpInfo($condition = null, $condition_conditional_route = null, $condition_conference_room = null, $condition_extension = null, $condition_friend_value = null, $condition_hunt_group = null, $condition_ivr = null, $condition_locution = null, $condition_number_country = null, $condition_number_value = null, $condition_priority = null, $condition_queue = null, $condition_route_type = null, $condition_user = null, $condition_voicemail_user = null, $condition2 = null, $id_exact = null, $matchlist = null, $matchlist_name = null, $matchlist2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoutesConditionsRelMatchlistDetailedCollection[]';
        $request = $this->getConditionalRoutesConditionsRelMatchlistCollectionRequest($condition, $condition_conditional_route, $condition_conference_room, $condition_extension, $condition_friend_value, $condition_hunt_group, $condition_ivr, $condition_locution, $condition_number_country, $condition_number_value, $condition_priority, $condition_queue, $condition_route_type, $condition_user, $condition_voicemail_user, $condition2, $id_exact, $matchlist, $matchlist_name, $matchlist2, $_order_id, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ConditionalRoutesConditionsRelMatchlistDetailedCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConditionalRoutesConditionsRelMatchlistCollectionAsync
     *
     * Retrieves the collection of ConditionalRoutesConditionsRelMatchlist resources.
     *
     * @param  string $condition (optional)
     * @param  int $condition_conditional_route (optional)
     * @param  int $condition_conference_room (optional)
     * @param  int $condition_extension (optional)
     * @param  string $condition_friend_value (optional)
     * @param  int $condition_hunt_group (optional)
     * @param  int $condition_ivr (optional)
     * @param  int $condition_locution (optional)
     * @param  int $condition_number_country (optional)
     * @param  string $condition_number_value (optional)
     * @param  int $condition_priority (optional)
     * @param  int $condition_queue (optional)
     * @param  string $condition_route_type (optional)
     * @param  int $condition_user (optional)
     * @param  int $condition_voicemail_user (optional)
     * @param  string $condition2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $matchlist (optional)
     * @param  string $matchlist_name (optional)
     * @param  string $matchlist2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConditionalRoutesConditionsRelMatchlistCollectionAsync($condition = null, $condition_conditional_route = null, $condition_conference_room = null, $condition_extension = null, $condition_friend_value = null, $condition_hunt_group = null, $condition_ivr = null, $condition_locution = null, $condition_number_country = null, $condition_number_value = null, $condition_priority = null, $condition_queue = null, $condition_route_type = null, $condition_user = null, $condition_voicemail_user = null, $condition2 = null, $id_exact = null, $matchlist = null, $matchlist_name = null, $matchlist2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getConditionalRoutesConditionsRelMatchlistCollectionAsyncWithHttpInfo($condition, $condition_conditional_route, $condition_conference_room, $condition_extension, $condition_friend_value, $condition_hunt_group, $condition_ivr, $condition_locution, $condition_number_country, $condition_number_value, $condition_priority, $condition_queue, $condition_route_type, $condition_user, $condition_voicemail_user, $condition2, $id_exact, $matchlist, $matchlist_name, $matchlist2, $_order_id, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConditionalRoutesConditionsRelMatchlistCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of ConditionalRoutesConditionsRelMatchlist resources.
     *
     * @param  string $condition (optional)
     * @param  int $condition_conditional_route (optional)
     * @param  int $condition_conference_room (optional)
     * @param  int $condition_extension (optional)
     * @param  string $condition_friend_value (optional)
     * @param  int $condition_hunt_group (optional)
     * @param  int $condition_ivr (optional)
     * @param  int $condition_locution (optional)
     * @param  int $condition_number_country (optional)
     * @param  string $condition_number_value (optional)
     * @param  int $condition_priority (optional)
     * @param  int $condition_queue (optional)
     * @param  string $condition_route_type (optional)
     * @param  int $condition_user (optional)
     * @param  int $condition_voicemail_user (optional)
     * @param  string $condition2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $matchlist (optional)
     * @param  string $matchlist_name (optional)
     * @param  string $matchlist2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConditionalRoutesConditionsRelMatchlistCollectionAsyncWithHttpInfo($condition = null, $condition_conditional_route = null, $condition_conference_room = null, $condition_extension = null, $condition_friend_value = null, $condition_hunt_group = null, $condition_ivr = null, $condition_locution = null, $condition_number_country = null, $condition_number_value = null, $condition_priority = null, $condition_queue = null, $condition_route_type = null, $condition_user = null, $condition_voicemail_user = null, $condition2 = null, $id_exact = null, $matchlist = null, $matchlist_name = null, $matchlist2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoutesConditionsRelMatchlistDetailedCollection[]';
        $request = $this->getConditionalRoutesConditionsRelMatchlistCollectionRequest($condition, $condition_conditional_route, $condition_conference_room, $condition_extension, $condition_friend_value, $condition_hunt_group, $condition_ivr, $condition_locution, $condition_number_country, $condition_number_value, $condition_priority, $condition_queue, $condition_route_type, $condition_user, $condition_voicemail_user, $condition2, $id_exact, $matchlist, $matchlist_name, $matchlist2, $_order_id, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConditionalRoutesConditionsRelMatchlistCollection'
     *
     * @param  string $condition (optional)
     * @param  int $condition_conditional_route (optional)
     * @param  int $condition_conference_room (optional)
     * @param  int $condition_extension (optional)
     * @param  string $condition_friend_value (optional)
     * @param  int $condition_hunt_group (optional)
     * @param  int $condition_ivr (optional)
     * @param  int $condition_locution (optional)
     * @param  int $condition_number_country (optional)
     * @param  string $condition_number_value (optional)
     * @param  int $condition_priority (optional)
     * @param  int $condition_queue (optional)
     * @param  string $condition_route_type (optional)
     * @param  int $condition_user (optional)
     * @param  int $condition_voicemail_user (optional)
     * @param  string $condition2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $matchlist (optional)
     * @param  string $matchlist_name (optional)
     * @param  string $matchlist2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getConditionalRoutesConditionsRelMatchlistCollectionRequest($condition = null, $condition_conditional_route = null, $condition_conference_room = null, $condition_extension = null, $condition_friend_value = null, $condition_hunt_group = null, $condition_ivr = null, $condition_locution = null, $condition_number_country = null, $condition_number_value = null, $condition_priority = null, $condition_queue = null, $condition_route_type = null, $condition_user = null, $condition_voicemail_user = null, $condition2 = null, $id_exact = null, $matchlist = null, $matchlist_name = null, $matchlist2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/conditional_routes_conditions_rel_matchlists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($condition !== null) {
            $queryParams['condition'] = ObjectSerializer::toQueryValue($condition);
        }
        // query params
        if ($condition_conditional_route !== null) {
            $queryParams['condition.conditionalRoute'] = ObjectSerializer::toQueryValue($condition_conditional_route);
        }
        // query params
        if ($condition_conference_room !== null) {
            $queryParams['condition.conferenceRoom'] = ObjectSerializer::toQueryValue($condition_conference_room);
        }
        // query params
        if ($condition_extension !== null) {
            $queryParams['condition.extension'] = ObjectSerializer::toQueryValue($condition_extension);
        }
        // query params
        if ($condition_friend_value !== null) {
            $queryParams['condition.friendValue'] = ObjectSerializer::toQueryValue($condition_friend_value);
        }
        // query params
        if ($condition_hunt_group !== null) {
            $queryParams['condition.huntGroup'] = ObjectSerializer::toQueryValue($condition_hunt_group);
        }
        // query params
        if ($condition_ivr !== null) {
            $queryParams['condition.ivr'] = ObjectSerializer::toQueryValue($condition_ivr);
        }
        // query params
        if ($condition_locution !== null) {
            $queryParams['condition.locution'] = ObjectSerializer::toQueryValue($condition_locution);
        }
        // query params
        if ($condition_number_country !== null) {
            $queryParams['condition.numberCountry'] = ObjectSerializer::toQueryValue($condition_number_country);
        }
        // query params
        if ($condition_number_value !== null) {
            $queryParams['condition.numberValue'] = ObjectSerializer::toQueryValue($condition_number_value);
        }
        // query params
        if ($condition_priority !== null) {
            $queryParams['condition.priority'] = ObjectSerializer::toQueryValue($condition_priority);
        }
        // query params
        if ($condition_queue !== null) {
            $queryParams['condition.queue'] = ObjectSerializer::toQueryValue($condition_queue);
        }
        // query params
        if ($condition_route_type !== null) {
            $queryParams['condition.routeType'] = ObjectSerializer::toQueryValue($condition_route_type);
        }
        // query params
        if ($condition_user !== null) {
            $queryParams['condition.user'] = ObjectSerializer::toQueryValue($condition_user);
        }
        // query params
        if ($condition_voicemail_user !== null) {
            $queryParams['condition.voicemailUser'] = ObjectSerializer::toQueryValue($condition_voicemail_user);
        }
        // query params
        if ($condition2 !== null) {
            $queryParams['condition[]'] = ObjectSerializer::toQueryValue($condition2);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($matchlist !== null) {
            $queryParams['matchlist'] = ObjectSerializer::toQueryValue($matchlist);
        }
        // query params
        if ($matchlist_name !== null) {
            $queryParams['matchlist.name'] = ObjectSerializer::toQueryValue($matchlist_name);
        }
        // query params
        if ($matchlist2 !== null) {
            $queryParams['matchlist[]'] = ObjectSerializer::toQueryValue($matchlist2);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConditionalRoutesConditionsRelMatchlistItem
     *
     * Retrieves a ConditionalRoutesConditionsRelMatchlist resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ConditionalRoutesConditionsRelMatchlistDetailed
     */
    public function getConditionalRoutesConditionsRelMatchlistItem($id)
    {
        list($response) = $this->getConditionalRoutesConditionsRelMatchlistItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getConditionalRoutesConditionsRelMatchlistItemWithHttpInfo
     *
     * Retrieves a ConditionalRoutesConditionsRelMatchlist resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ConditionalRoutesConditionsRelMatchlistDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConditionalRoutesConditionsRelMatchlistItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoutesConditionsRelMatchlistDetailed';
        $request = $this->getConditionalRoutesConditionsRelMatchlistItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ConditionalRoutesConditionsRelMatchlistDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConditionalRoutesConditionsRelMatchlistItemAsync
     *
     * Retrieves a ConditionalRoutesConditionsRelMatchlist resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConditionalRoutesConditionsRelMatchlistItemAsync($id)
    {
        return $this->getConditionalRoutesConditionsRelMatchlistItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConditionalRoutesConditionsRelMatchlistItemAsyncWithHttpInfo
     *
     * Retrieves a ConditionalRoutesConditionsRelMatchlist resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConditionalRoutesConditionsRelMatchlistItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoutesConditionsRelMatchlistDetailed';
        $request = $this->getConditionalRoutesConditionsRelMatchlistItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConditionalRoutesConditionsRelMatchlistItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getConditionalRoutesConditionsRelMatchlistItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getConditionalRoutesConditionsRelMatchlistItem'
            );
        }

        $resourcePath = '/conditional_routes_conditions_rel_matchlists/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConditionalRoutesConditionsRelRouteLockCollection
     *
     * Retrieves the collection of ConditionalRoutesConditionsRelRouteLock resources.
     *
     * @param  string $condition condition (optional)
     * @param  int $condition_conditional_route condition_conditional_route (optional)
     * @param  int $condition_conference_room condition_conference_room (optional)
     * @param  int $condition_extension condition_extension (optional)
     * @param  string $condition_friend_value condition_friend_value (optional)
     * @param  int $condition_hunt_group condition_hunt_group (optional)
     * @param  int $condition_ivr condition_ivr (optional)
     * @param  int $condition_locution condition_locution (optional)
     * @param  int $condition_number_country condition_number_country (optional)
     * @param  string $condition_number_value condition_number_value (optional)
     * @param  int $condition_priority condition_priority (optional)
     * @param  int $condition_queue condition_queue (optional)
     * @param  string $condition_route_type condition_route_type (optional)
     * @param  int $condition_user condition_user (optional)
     * @param  int $condition_voicemail_user condition_voicemail_user (optional)
     * @param  string $condition2 condition2 (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $route_lock route_lock (optional)
     * @param  string $route_lock_close_extension route_lock_close_extension (optional)
     * @param  string $route_lock_description route_lock_description (optional)
     * @param  string $route_lock_name route_lock_name (optional)
     * @param  bool $route_lock_open route_lock_open (optional)
     * @param  string $route_lock_open_extension route_lock_open_extension (optional)
     * @param  string $route_lock_toggle_extension route_lock_toggle_extension (optional)
     * @param  string $route_lock2 route_lock2 (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ConditionalRoutesConditionsRelRouteLockDetailedCollection[]
     */
    public function getConditionalRoutesConditionsRelRouteLockCollection($condition = null, $condition_conditional_route = null, $condition_conference_room = null, $condition_extension = null, $condition_friend_value = null, $condition_hunt_group = null, $condition_ivr = null, $condition_locution = null, $condition_number_country = null, $condition_number_value = null, $condition_priority = null, $condition_queue = null, $condition_route_type = null, $condition_user = null, $condition_voicemail_user = null, $condition2 = null, $id_exact = null, $route_lock = null, $route_lock_close_extension = null, $route_lock_description = null, $route_lock_name = null, $route_lock_open = null, $route_lock_open_extension = null, $route_lock_toggle_extension = null, $route_lock2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getConditionalRoutesConditionsRelRouteLockCollectionWithHttpInfo($condition, $condition_conditional_route, $condition_conference_room, $condition_extension, $condition_friend_value, $condition_hunt_group, $condition_ivr, $condition_locution, $condition_number_country, $condition_number_value, $condition_priority, $condition_queue, $condition_route_type, $condition_user, $condition_voicemail_user, $condition2, $id_exact, $route_lock, $route_lock_close_extension, $route_lock_description, $route_lock_name, $route_lock_open, $route_lock_open_extension, $route_lock_toggle_extension, $route_lock2, $_order_id, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getConditionalRoutesConditionsRelRouteLockCollectionWithHttpInfo
     *
     * Retrieves the collection of ConditionalRoutesConditionsRelRouteLock resources.
     *
     * @param  string $condition (optional)
     * @param  int $condition_conditional_route (optional)
     * @param  int $condition_conference_room (optional)
     * @param  int $condition_extension (optional)
     * @param  string $condition_friend_value (optional)
     * @param  int $condition_hunt_group (optional)
     * @param  int $condition_ivr (optional)
     * @param  int $condition_locution (optional)
     * @param  int $condition_number_country (optional)
     * @param  string $condition_number_value (optional)
     * @param  int $condition_priority (optional)
     * @param  int $condition_queue (optional)
     * @param  string $condition_route_type (optional)
     * @param  int $condition_user (optional)
     * @param  int $condition_voicemail_user (optional)
     * @param  string $condition2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $route_lock (optional)
     * @param  string $route_lock_close_extension (optional)
     * @param  string $route_lock_description (optional)
     * @param  string $route_lock_name (optional)
     * @param  bool $route_lock_open (optional)
     * @param  string $route_lock_open_extension (optional)
     * @param  string $route_lock_toggle_extension (optional)
     * @param  string $route_lock2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ConditionalRoutesConditionsRelRouteLockDetailedCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getConditionalRoutesConditionsRelRouteLockCollectionWithHttpInfo($condition = null, $condition_conditional_route = null, $condition_conference_room = null, $condition_extension = null, $condition_friend_value = null, $condition_hunt_group = null, $condition_ivr = null, $condition_locution = null, $condition_number_country = null, $condition_number_value = null, $condition_priority = null, $condition_queue = null, $condition_route_type = null, $condition_user = null, $condition_voicemail_user = null, $condition2 = null, $id_exact = null, $route_lock = null, $route_lock_close_extension = null, $route_lock_description = null, $route_lock_name = null, $route_lock_open = null, $route_lock_open_extension = null, $route_lock_toggle_extension = null, $route_lock2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoutesConditionsRelRouteLockDetailedCollection[]';
        $request = $this->getConditionalRoutesConditionsRelRouteLockCollectionRequest($condition, $condition_conditional_route, $condition_conference_room, $condition_extension, $condition_friend_value, $condition_hunt_group, $condition_ivr, $condition_locution, $condition_number_country, $condition_number_value, $condition_priority, $condition_queue, $condition_route_type, $condition_user, $condition_voicemail_user, $condition2, $id_exact, $route_lock, $route_lock_close_extension, $route_lock_description, $route_lock_name, $route_lock_open, $route_lock_open_extension, $route_lock_toggle_extension, $route_lock2, $_order_id, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ConditionalRoutesConditionsRelRouteLockDetailedCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConditionalRoutesConditionsRelRouteLockCollectionAsync
     *
     * Retrieves the collection of ConditionalRoutesConditionsRelRouteLock resources.
     *
     * @param  string $condition (optional)
     * @param  int $condition_conditional_route (optional)
     * @param  int $condition_conference_room (optional)
     * @param  int $condition_extension (optional)
     * @param  string $condition_friend_value (optional)
     * @param  int $condition_hunt_group (optional)
     * @param  int $condition_ivr (optional)
     * @param  int $condition_locution (optional)
     * @param  int $condition_number_country (optional)
     * @param  string $condition_number_value (optional)
     * @param  int $condition_priority (optional)
     * @param  int $condition_queue (optional)
     * @param  string $condition_route_type (optional)
     * @param  int $condition_user (optional)
     * @param  int $condition_voicemail_user (optional)
     * @param  string $condition2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $route_lock (optional)
     * @param  string $route_lock_close_extension (optional)
     * @param  string $route_lock_description (optional)
     * @param  string $route_lock_name (optional)
     * @param  bool $route_lock_open (optional)
     * @param  string $route_lock_open_extension (optional)
     * @param  string $route_lock_toggle_extension (optional)
     * @param  string $route_lock2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConditionalRoutesConditionsRelRouteLockCollectionAsync($condition = null, $condition_conditional_route = null, $condition_conference_room = null, $condition_extension = null, $condition_friend_value = null, $condition_hunt_group = null, $condition_ivr = null, $condition_locution = null, $condition_number_country = null, $condition_number_value = null, $condition_priority = null, $condition_queue = null, $condition_route_type = null, $condition_user = null, $condition_voicemail_user = null, $condition2 = null, $id_exact = null, $route_lock = null, $route_lock_close_extension = null, $route_lock_description = null, $route_lock_name = null, $route_lock_open = null, $route_lock_open_extension = null, $route_lock_toggle_extension = null, $route_lock2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getConditionalRoutesConditionsRelRouteLockCollectionAsyncWithHttpInfo($condition, $condition_conditional_route, $condition_conference_room, $condition_extension, $condition_friend_value, $condition_hunt_group, $condition_ivr, $condition_locution, $condition_number_country, $condition_number_value, $condition_priority, $condition_queue, $condition_route_type, $condition_user, $condition_voicemail_user, $condition2, $id_exact, $route_lock, $route_lock_close_extension, $route_lock_description, $route_lock_name, $route_lock_open, $route_lock_open_extension, $route_lock_toggle_extension, $route_lock2, $_order_id, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConditionalRoutesConditionsRelRouteLockCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of ConditionalRoutesConditionsRelRouteLock resources.
     *
     * @param  string $condition (optional)
     * @param  int $condition_conditional_route (optional)
     * @param  int $condition_conference_room (optional)
     * @param  int $condition_extension (optional)
     * @param  string $condition_friend_value (optional)
     * @param  int $condition_hunt_group (optional)
     * @param  int $condition_ivr (optional)
     * @param  int $condition_locution (optional)
     * @param  int $condition_number_country (optional)
     * @param  string $condition_number_value (optional)
     * @param  int $condition_priority (optional)
     * @param  int $condition_queue (optional)
     * @param  string $condition_route_type (optional)
     * @param  int $condition_user (optional)
     * @param  int $condition_voicemail_user (optional)
     * @param  string $condition2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $route_lock (optional)
     * @param  string $route_lock_close_extension (optional)
     * @param  string $route_lock_description (optional)
     * @param  string $route_lock_name (optional)
     * @param  bool $route_lock_open (optional)
     * @param  string $route_lock_open_extension (optional)
     * @param  string $route_lock_toggle_extension (optional)
     * @param  string $route_lock2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConditionalRoutesConditionsRelRouteLockCollectionAsyncWithHttpInfo($condition = null, $condition_conditional_route = null, $condition_conference_room = null, $condition_extension = null, $condition_friend_value = null, $condition_hunt_group = null, $condition_ivr = null, $condition_locution = null, $condition_number_country = null, $condition_number_value = null, $condition_priority = null, $condition_queue = null, $condition_route_type = null, $condition_user = null, $condition_voicemail_user = null, $condition2 = null, $id_exact = null, $route_lock = null, $route_lock_close_extension = null, $route_lock_description = null, $route_lock_name = null, $route_lock_open = null, $route_lock_open_extension = null, $route_lock_toggle_extension = null, $route_lock2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoutesConditionsRelRouteLockDetailedCollection[]';
        $request = $this->getConditionalRoutesConditionsRelRouteLockCollectionRequest($condition, $condition_conditional_route, $condition_conference_room, $condition_extension, $condition_friend_value, $condition_hunt_group, $condition_ivr, $condition_locution, $condition_number_country, $condition_number_value, $condition_priority, $condition_queue, $condition_route_type, $condition_user, $condition_voicemail_user, $condition2, $id_exact, $route_lock, $route_lock_close_extension, $route_lock_description, $route_lock_name, $route_lock_open, $route_lock_open_extension, $route_lock_toggle_extension, $route_lock2, $_order_id, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConditionalRoutesConditionsRelRouteLockCollection'
     *
     * @param  string $condition (optional)
     * @param  int $condition_conditional_route (optional)
     * @param  int $condition_conference_room (optional)
     * @param  int $condition_extension (optional)
     * @param  string $condition_friend_value (optional)
     * @param  int $condition_hunt_group (optional)
     * @param  int $condition_ivr (optional)
     * @param  int $condition_locution (optional)
     * @param  int $condition_number_country (optional)
     * @param  string $condition_number_value (optional)
     * @param  int $condition_priority (optional)
     * @param  int $condition_queue (optional)
     * @param  string $condition_route_type (optional)
     * @param  int $condition_user (optional)
     * @param  int $condition_voicemail_user (optional)
     * @param  string $condition2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $route_lock (optional)
     * @param  string $route_lock_close_extension (optional)
     * @param  string $route_lock_description (optional)
     * @param  string $route_lock_name (optional)
     * @param  bool $route_lock_open (optional)
     * @param  string $route_lock_open_extension (optional)
     * @param  string $route_lock_toggle_extension (optional)
     * @param  string $route_lock2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getConditionalRoutesConditionsRelRouteLockCollectionRequest($condition = null, $condition_conditional_route = null, $condition_conference_room = null, $condition_extension = null, $condition_friend_value = null, $condition_hunt_group = null, $condition_ivr = null, $condition_locution = null, $condition_number_country = null, $condition_number_value = null, $condition_priority = null, $condition_queue = null, $condition_route_type = null, $condition_user = null, $condition_voicemail_user = null, $condition2 = null, $id_exact = null, $route_lock = null, $route_lock_close_extension = null, $route_lock_description = null, $route_lock_name = null, $route_lock_open = null, $route_lock_open_extension = null, $route_lock_toggle_extension = null, $route_lock2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/conditional_routes_conditions_rel_route_locks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($condition !== null) {
            $queryParams['condition'] = ObjectSerializer::toQueryValue($condition);
        }
        // query params
        if ($condition_conditional_route !== null) {
            $queryParams['condition.conditionalRoute'] = ObjectSerializer::toQueryValue($condition_conditional_route);
        }
        // query params
        if ($condition_conference_room !== null) {
            $queryParams['condition.conferenceRoom'] = ObjectSerializer::toQueryValue($condition_conference_room);
        }
        // query params
        if ($condition_extension !== null) {
            $queryParams['condition.extension'] = ObjectSerializer::toQueryValue($condition_extension);
        }
        // query params
        if ($condition_friend_value !== null) {
            $queryParams['condition.friendValue'] = ObjectSerializer::toQueryValue($condition_friend_value);
        }
        // query params
        if ($condition_hunt_group !== null) {
            $queryParams['condition.huntGroup'] = ObjectSerializer::toQueryValue($condition_hunt_group);
        }
        // query params
        if ($condition_ivr !== null) {
            $queryParams['condition.ivr'] = ObjectSerializer::toQueryValue($condition_ivr);
        }
        // query params
        if ($condition_locution !== null) {
            $queryParams['condition.locution'] = ObjectSerializer::toQueryValue($condition_locution);
        }
        // query params
        if ($condition_number_country !== null) {
            $queryParams['condition.numberCountry'] = ObjectSerializer::toQueryValue($condition_number_country);
        }
        // query params
        if ($condition_number_value !== null) {
            $queryParams['condition.numberValue'] = ObjectSerializer::toQueryValue($condition_number_value);
        }
        // query params
        if ($condition_priority !== null) {
            $queryParams['condition.priority'] = ObjectSerializer::toQueryValue($condition_priority);
        }
        // query params
        if ($condition_queue !== null) {
            $queryParams['condition.queue'] = ObjectSerializer::toQueryValue($condition_queue);
        }
        // query params
        if ($condition_route_type !== null) {
            $queryParams['condition.routeType'] = ObjectSerializer::toQueryValue($condition_route_type);
        }
        // query params
        if ($condition_user !== null) {
            $queryParams['condition.user'] = ObjectSerializer::toQueryValue($condition_user);
        }
        // query params
        if ($condition_voicemail_user !== null) {
            $queryParams['condition.voicemailUser'] = ObjectSerializer::toQueryValue($condition_voicemail_user);
        }
        // query params
        if ($condition2 !== null) {
            $queryParams['condition[]'] = ObjectSerializer::toQueryValue($condition2);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($route_lock !== null) {
            $queryParams['routeLock'] = ObjectSerializer::toQueryValue($route_lock);
        }
        // query params
        if ($route_lock_close_extension !== null) {
            $queryParams['routeLock.closeExtension'] = ObjectSerializer::toQueryValue($route_lock_close_extension);
        }
        // query params
        if ($route_lock_description !== null) {
            $queryParams['routeLock.description'] = ObjectSerializer::toQueryValue($route_lock_description);
        }
        // query params
        if ($route_lock_name !== null) {
            $queryParams['routeLock.name'] = ObjectSerializer::toQueryValue($route_lock_name);
        }
        // query params
        if ($route_lock_open !== null) {
            $queryParams['routeLock.open'] = ObjectSerializer::toQueryValue($route_lock_open);
        }
        // query params
        if ($route_lock_open_extension !== null) {
            $queryParams['routeLock.openExtension'] = ObjectSerializer::toQueryValue($route_lock_open_extension);
        }
        // query params
        if ($route_lock_toggle_extension !== null) {
            $queryParams['routeLock.toggleExtension'] = ObjectSerializer::toQueryValue($route_lock_toggle_extension);
        }
        // query params
        if ($route_lock2 !== null) {
            $queryParams['routeLock[]'] = ObjectSerializer::toQueryValue($route_lock2);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConditionalRoutesConditionsRelRouteLockItem
     *
     * Retrieves a ConditionalRoutesConditionsRelRouteLock resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ConditionalRoutesConditionsRelRouteLockDetailed
     */
    public function getConditionalRoutesConditionsRelRouteLockItem($id)
    {
        list($response) = $this->getConditionalRoutesConditionsRelRouteLockItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getConditionalRoutesConditionsRelRouteLockItemWithHttpInfo
     *
     * Retrieves a ConditionalRoutesConditionsRelRouteLock resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ConditionalRoutesConditionsRelRouteLockDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConditionalRoutesConditionsRelRouteLockItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoutesConditionsRelRouteLockDetailed';
        $request = $this->getConditionalRoutesConditionsRelRouteLockItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ConditionalRoutesConditionsRelRouteLockDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConditionalRoutesConditionsRelRouteLockItemAsync
     *
     * Retrieves a ConditionalRoutesConditionsRelRouteLock resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConditionalRoutesConditionsRelRouteLockItemAsync($id)
    {
        return $this->getConditionalRoutesConditionsRelRouteLockItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConditionalRoutesConditionsRelRouteLockItemAsyncWithHttpInfo
     *
     * Retrieves a ConditionalRoutesConditionsRelRouteLock resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConditionalRoutesConditionsRelRouteLockItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoutesConditionsRelRouteLockDetailed';
        $request = $this->getConditionalRoutesConditionsRelRouteLockItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConditionalRoutesConditionsRelRouteLockItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getConditionalRoutesConditionsRelRouteLockItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getConditionalRoutesConditionsRelRouteLockItem'
            );
        }

        $resourcePath = '/conditional_routes_conditions_rel_route_locks/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConditionalRoutesConditionsRelScheduleCollection
     *
     * Retrieves the collection of ConditionalRoutesConditionsRelSchedule resources.
     *
     * @param  string $condition condition (optional)
     * @param  int $condition_conditional_route condition_conditional_route (optional)
     * @param  int $condition_conference_room condition_conference_room (optional)
     * @param  int $condition_extension condition_extension (optional)
     * @param  string $condition_friend_value condition_friend_value (optional)
     * @param  int $condition_hunt_group condition_hunt_group (optional)
     * @param  int $condition_ivr condition_ivr (optional)
     * @param  int $condition_locution condition_locution (optional)
     * @param  int $condition_number_country condition_number_country (optional)
     * @param  string $condition_number_value condition_number_value (optional)
     * @param  int $condition_priority condition_priority (optional)
     * @param  int $condition_queue condition_queue (optional)
     * @param  string $condition_route_type condition_route_type (optional)
     * @param  int $condition_user condition_user (optional)
     * @param  int $condition_voicemail_user condition_voicemail_user (optional)
     * @param  string $condition2 condition2 (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $schedule schedule (optional)
     * @param  bool $schedule_friday schedule_friday (optional)
     * @param  bool $schedule_monday schedule_monday (optional)
     * @param  string $schedule_name schedule_name (optional)
     * @param  bool $schedule_saturday schedule_saturday (optional)
     * @param  bool $schedule_sunday schedule_sunday (optional)
     * @param  bool $schedule_thursday schedule_thursday (optional)
     * @param  string $schedule_time_in schedule_time_in (optional)
     * @param  string $schedule_timeout schedule_timeout (optional)
     * @param  bool $schedule_tuesday schedule_tuesday (optional)
     * @param  bool $schedule_wednesday schedule_wednesday (optional)
     * @param  string $schedule2 schedule2 (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ConditionalRoutesConditionsRelScheduleDetailedCollection[]
     */
    public function getConditionalRoutesConditionsRelScheduleCollection($condition = null, $condition_conditional_route = null, $condition_conference_room = null, $condition_extension = null, $condition_friend_value = null, $condition_hunt_group = null, $condition_ivr = null, $condition_locution = null, $condition_number_country = null, $condition_number_value = null, $condition_priority = null, $condition_queue = null, $condition_route_type = null, $condition_user = null, $condition_voicemail_user = null, $condition2 = null, $id_exact = null, $schedule = null, $schedule_friday = null, $schedule_monday = null, $schedule_name = null, $schedule_saturday = null, $schedule_sunday = null, $schedule_thursday = null, $schedule_time_in = null, $schedule_timeout = null, $schedule_tuesday = null, $schedule_wednesday = null, $schedule2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getConditionalRoutesConditionsRelScheduleCollectionWithHttpInfo($condition, $condition_conditional_route, $condition_conference_room, $condition_extension, $condition_friend_value, $condition_hunt_group, $condition_ivr, $condition_locution, $condition_number_country, $condition_number_value, $condition_priority, $condition_queue, $condition_route_type, $condition_user, $condition_voicemail_user, $condition2, $id_exact, $schedule, $schedule_friday, $schedule_monday, $schedule_name, $schedule_saturday, $schedule_sunday, $schedule_thursday, $schedule_time_in, $schedule_timeout, $schedule_tuesday, $schedule_wednesday, $schedule2, $_order_id, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getConditionalRoutesConditionsRelScheduleCollectionWithHttpInfo
     *
     * Retrieves the collection of ConditionalRoutesConditionsRelSchedule resources.
     *
     * @param  string $condition (optional)
     * @param  int $condition_conditional_route (optional)
     * @param  int $condition_conference_room (optional)
     * @param  int $condition_extension (optional)
     * @param  string $condition_friend_value (optional)
     * @param  int $condition_hunt_group (optional)
     * @param  int $condition_ivr (optional)
     * @param  int $condition_locution (optional)
     * @param  int $condition_number_country (optional)
     * @param  string $condition_number_value (optional)
     * @param  int $condition_priority (optional)
     * @param  int $condition_queue (optional)
     * @param  string $condition_route_type (optional)
     * @param  int $condition_user (optional)
     * @param  int $condition_voicemail_user (optional)
     * @param  string $condition2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $schedule (optional)
     * @param  bool $schedule_friday (optional)
     * @param  bool $schedule_monday (optional)
     * @param  string $schedule_name (optional)
     * @param  bool $schedule_saturday (optional)
     * @param  bool $schedule_sunday (optional)
     * @param  bool $schedule_thursday (optional)
     * @param  string $schedule_time_in (optional)
     * @param  string $schedule_timeout (optional)
     * @param  bool $schedule_tuesday (optional)
     * @param  bool $schedule_wednesday (optional)
     * @param  string $schedule2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ConditionalRoutesConditionsRelScheduleDetailedCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getConditionalRoutesConditionsRelScheduleCollectionWithHttpInfo($condition = null, $condition_conditional_route = null, $condition_conference_room = null, $condition_extension = null, $condition_friend_value = null, $condition_hunt_group = null, $condition_ivr = null, $condition_locution = null, $condition_number_country = null, $condition_number_value = null, $condition_priority = null, $condition_queue = null, $condition_route_type = null, $condition_user = null, $condition_voicemail_user = null, $condition2 = null, $id_exact = null, $schedule = null, $schedule_friday = null, $schedule_monday = null, $schedule_name = null, $schedule_saturday = null, $schedule_sunday = null, $schedule_thursday = null, $schedule_time_in = null, $schedule_timeout = null, $schedule_tuesday = null, $schedule_wednesday = null, $schedule2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoutesConditionsRelScheduleDetailedCollection[]';
        $request = $this->getConditionalRoutesConditionsRelScheduleCollectionRequest($condition, $condition_conditional_route, $condition_conference_room, $condition_extension, $condition_friend_value, $condition_hunt_group, $condition_ivr, $condition_locution, $condition_number_country, $condition_number_value, $condition_priority, $condition_queue, $condition_route_type, $condition_user, $condition_voicemail_user, $condition2, $id_exact, $schedule, $schedule_friday, $schedule_monday, $schedule_name, $schedule_saturday, $schedule_sunday, $schedule_thursday, $schedule_time_in, $schedule_timeout, $schedule_tuesday, $schedule_wednesday, $schedule2, $_order_id, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ConditionalRoutesConditionsRelScheduleDetailedCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConditionalRoutesConditionsRelScheduleCollectionAsync
     *
     * Retrieves the collection of ConditionalRoutesConditionsRelSchedule resources.
     *
     * @param  string $condition (optional)
     * @param  int $condition_conditional_route (optional)
     * @param  int $condition_conference_room (optional)
     * @param  int $condition_extension (optional)
     * @param  string $condition_friend_value (optional)
     * @param  int $condition_hunt_group (optional)
     * @param  int $condition_ivr (optional)
     * @param  int $condition_locution (optional)
     * @param  int $condition_number_country (optional)
     * @param  string $condition_number_value (optional)
     * @param  int $condition_priority (optional)
     * @param  int $condition_queue (optional)
     * @param  string $condition_route_type (optional)
     * @param  int $condition_user (optional)
     * @param  int $condition_voicemail_user (optional)
     * @param  string $condition2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $schedule (optional)
     * @param  bool $schedule_friday (optional)
     * @param  bool $schedule_monday (optional)
     * @param  string $schedule_name (optional)
     * @param  bool $schedule_saturday (optional)
     * @param  bool $schedule_sunday (optional)
     * @param  bool $schedule_thursday (optional)
     * @param  string $schedule_time_in (optional)
     * @param  string $schedule_timeout (optional)
     * @param  bool $schedule_tuesday (optional)
     * @param  bool $schedule_wednesday (optional)
     * @param  string $schedule2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConditionalRoutesConditionsRelScheduleCollectionAsync($condition = null, $condition_conditional_route = null, $condition_conference_room = null, $condition_extension = null, $condition_friend_value = null, $condition_hunt_group = null, $condition_ivr = null, $condition_locution = null, $condition_number_country = null, $condition_number_value = null, $condition_priority = null, $condition_queue = null, $condition_route_type = null, $condition_user = null, $condition_voicemail_user = null, $condition2 = null, $id_exact = null, $schedule = null, $schedule_friday = null, $schedule_monday = null, $schedule_name = null, $schedule_saturday = null, $schedule_sunday = null, $schedule_thursday = null, $schedule_time_in = null, $schedule_timeout = null, $schedule_tuesday = null, $schedule_wednesday = null, $schedule2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getConditionalRoutesConditionsRelScheduleCollectionAsyncWithHttpInfo($condition, $condition_conditional_route, $condition_conference_room, $condition_extension, $condition_friend_value, $condition_hunt_group, $condition_ivr, $condition_locution, $condition_number_country, $condition_number_value, $condition_priority, $condition_queue, $condition_route_type, $condition_user, $condition_voicemail_user, $condition2, $id_exact, $schedule, $schedule_friday, $schedule_monday, $schedule_name, $schedule_saturday, $schedule_sunday, $schedule_thursday, $schedule_time_in, $schedule_timeout, $schedule_tuesday, $schedule_wednesday, $schedule2, $_order_id, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConditionalRoutesConditionsRelScheduleCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of ConditionalRoutesConditionsRelSchedule resources.
     *
     * @param  string $condition (optional)
     * @param  int $condition_conditional_route (optional)
     * @param  int $condition_conference_room (optional)
     * @param  int $condition_extension (optional)
     * @param  string $condition_friend_value (optional)
     * @param  int $condition_hunt_group (optional)
     * @param  int $condition_ivr (optional)
     * @param  int $condition_locution (optional)
     * @param  int $condition_number_country (optional)
     * @param  string $condition_number_value (optional)
     * @param  int $condition_priority (optional)
     * @param  int $condition_queue (optional)
     * @param  string $condition_route_type (optional)
     * @param  int $condition_user (optional)
     * @param  int $condition_voicemail_user (optional)
     * @param  string $condition2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $schedule (optional)
     * @param  bool $schedule_friday (optional)
     * @param  bool $schedule_monday (optional)
     * @param  string $schedule_name (optional)
     * @param  bool $schedule_saturday (optional)
     * @param  bool $schedule_sunday (optional)
     * @param  bool $schedule_thursday (optional)
     * @param  string $schedule_time_in (optional)
     * @param  string $schedule_timeout (optional)
     * @param  bool $schedule_tuesday (optional)
     * @param  bool $schedule_wednesday (optional)
     * @param  string $schedule2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConditionalRoutesConditionsRelScheduleCollectionAsyncWithHttpInfo($condition = null, $condition_conditional_route = null, $condition_conference_room = null, $condition_extension = null, $condition_friend_value = null, $condition_hunt_group = null, $condition_ivr = null, $condition_locution = null, $condition_number_country = null, $condition_number_value = null, $condition_priority = null, $condition_queue = null, $condition_route_type = null, $condition_user = null, $condition_voicemail_user = null, $condition2 = null, $id_exact = null, $schedule = null, $schedule_friday = null, $schedule_monday = null, $schedule_name = null, $schedule_saturday = null, $schedule_sunday = null, $schedule_thursday = null, $schedule_time_in = null, $schedule_timeout = null, $schedule_tuesday = null, $schedule_wednesday = null, $schedule2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoutesConditionsRelScheduleDetailedCollection[]';
        $request = $this->getConditionalRoutesConditionsRelScheduleCollectionRequest($condition, $condition_conditional_route, $condition_conference_room, $condition_extension, $condition_friend_value, $condition_hunt_group, $condition_ivr, $condition_locution, $condition_number_country, $condition_number_value, $condition_priority, $condition_queue, $condition_route_type, $condition_user, $condition_voicemail_user, $condition2, $id_exact, $schedule, $schedule_friday, $schedule_monday, $schedule_name, $schedule_saturday, $schedule_sunday, $schedule_thursday, $schedule_time_in, $schedule_timeout, $schedule_tuesday, $schedule_wednesday, $schedule2, $_order_id, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConditionalRoutesConditionsRelScheduleCollection'
     *
     * @param  string $condition (optional)
     * @param  int $condition_conditional_route (optional)
     * @param  int $condition_conference_room (optional)
     * @param  int $condition_extension (optional)
     * @param  string $condition_friend_value (optional)
     * @param  int $condition_hunt_group (optional)
     * @param  int $condition_ivr (optional)
     * @param  int $condition_locution (optional)
     * @param  int $condition_number_country (optional)
     * @param  string $condition_number_value (optional)
     * @param  int $condition_priority (optional)
     * @param  int $condition_queue (optional)
     * @param  string $condition_route_type (optional)
     * @param  int $condition_user (optional)
     * @param  int $condition_voicemail_user (optional)
     * @param  string $condition2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $schedule (optional)
     * @param  bool $schedule_friday (optional)
     * @param  bool $schedule_monday (optional)
     * @param  string $schedule_name (optional)
     * @param  bool $schedule_saturday (optional)
     * @param  bool $schedule_sunday (optional)
     * @param  bool $schedule_thursday (optional)
     * @param  string $schedule_time_in (optional)
     * @param  string $schedule_timeout (optional)
     * @param  bool $schedule_tuesday (optional)
     * @param  bool $schedule_wednesday (optional)
     * @param  string $schedule2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getConditionalRoutesConditionsRelScheduleCollectionRequest($condition = null, $condition_conditional_route = null, $condition_conference_room = null, $condition_extension = null, $condition_friend_value = null, $condition_hunt_group = null, $condition_ivr = null, $condition_locution = null, $condition_number_country = null, $condition_number_value = null, $condition_priority = null, $condition_queue = null, $condition_route_type = null, $condition_user = null, $condition_voicemail_user = null, $condition2 = null, $id_exact = null, $schedule = null, $schedule_friday = null, $schedule_monday = null, $schedule_name = null, $schedule_saturday = null, $schedule_sunday = null, $schedule_thursday = null, $schedule_time_in = null, $schedule_timeout = null, $schedule_tuesday = null, $schedule_wednesday = null, $schedule2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/conditional_routes_conditions_rel_schedules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($condition !== null) {
            $queryParams['condition'] = ObjectSerializer::toQueryValue($condition);
        }
        // query params
        if ($condition_conditional_route !== null) {
            $queryParams['condition.conditionalRoute'] = ObjectSerializer::toQueryValue($condition_conditional_route);
        }
        // query params
        if ($condition_conference_room !== null) {
            $queryParams['condition.conferenceRoom'] = ObjectSerializer::toQueryValue($condition_conference_room);
        }
        // query params
        if ($condition_extension !== null) {
            $queryParams['condition.extension'] = ObjectSerializer::toQueryValue($condition_extension);
        }
        // query params
        if ($condition_friend_value !== null) {
            $queryParams['condition.friendValue'] = ObjectSerializer::toQueryValue($condition_friend_value);
        }
        // query params
        if ($condition_hunt_group !== null) {
            $queryParams['condition.huntGroup'] = ObjectSerializer::toQueryValue($condition_hunt_group);
        }
        // query params
        if ($condition_ivr !== null) {
            $queryParams['condition.ivr'] = ObjectSerializer::toQueryValue($condition_ivr);
        }
        // query params
        if ($condition_locution !== null) {
            $queryParams['condition.locution'] = ObjectSerializer::toQueryValue($condition_locution);
        }
        // query params
        if ($condition_number_country !== null) {
            $queryParams['condition.numberCountry'] = ObjectSerializer::toQueryValue($condition_number_country);
        }
        // query params
        if ($condition_number_value !== null) {
            $queryParams['condition.numberValue'] = ObjectSerializer::toQueryValue($condition_number_value);
        }
        // query params
        if ($condition_priority !== null) {
            $queryParams['condition.priority'] = ObjectSerializer::toQueryValue($condition_priority);
        }
        // query params
        if ($condition_queue !== null) {
            $queryParams['condition.queue'] = ObjectSerializer::toQueryValue($condition_queue);
        }
        // query params
        if ($condition_route_type !== null) {
            $queryParams['condition.routeType'] = ObjectSerializer::toQueryValue($condition_route_type);
        }
        // query params
        if ($condition_user !== null) {
            $queryParams['condition.user'] = ObjectSerializer::toQueryValue($condition_user);
        }
        // query params
        if ($condition_voicemail_user !== null) {
            $queryParams['condition.voicemailUser'] = ObjectSerializer::toQueryValue($condition_voicemail_user);
        }
        // query params
        if ($condition2 !== null) {
            $queryParams['condition[]'] = ObjectSerializer::toQueryValue($condition2);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($schedule !== null) {
            $queryParams['schedule'] = ObjectSerializer::toQueryValue($schedule);
        }
        // query params
        if ($schedule_friday !== null) {
            $queryParams['schedule.friday'] = ObjectSerializer::toQueryValue($schedule_friday);
        }
        // query params
        if ($schedule_monday !== null) {
            $queryParams['schedule.monday'] = ObjectSerializer::toQueryValue($schedule_monday);
        }
        // query params
        if ($schedule_name !== null) {
            $queryParams['schedule.name'] = ObjectSerializer::toQueryValue($schedule_name);
        }
        // query params
        if ($schedule_saturday !== null) {
            $queryParams['schedule.saturday'] = ObjectSerializer::toQueryValue($schedule_saturday);
        }
        // query params
        if ($schedule_sunday !== null) {
            $queryParams['schedule.sunday'] = ObjectSerializer::toQueryValue($schedule_sunday);
        }
        // query params
        if ($schedule_thursday !== null) {
            $queryParams['schedule.thursday'] = ObjectSerializer::toQueryValue($schedule_thursday);
        }
        // query params
        if ($schedule_time_in !== null) {
            $queryParams['schedule.timeIn'] = ObjectSerializer::toQueryValue($schedule_time_in);
        }
        // query params
        if ($schedule_timeout !== null) {
            $queryParams['schedule.timeout'] = ObjectSerializer::toQueryValue($schedule_timeout);
        }
        // query params
        if ($schedule_tuesday !== null) {
            $queryParams['schedule.tuesday'] = ObjectSerializer::toQueryValue($schedule_tuesday);
        }
        // query params
        if ($schedule_wednesday !== null) {
            $queryParams['schedule.wednesday'] = ObjectSerializer::toQueryValue($schedule_wednesday);
        }
        // query params
        if ($schedule2 !== null) {
            $queryParams['schedule[]'] = ObjectSerializer::toQueryValue($schedule2);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConditionalRoutesConditionsRelScheduleItem
     *
     * Retrieves a ConditionalRoutesConditionsRelSchedule resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ConditionalRoutesConditionsRelScheduleDetailed
     */
    public function getConditionalRoutesConditionsRelScheduleItem($id)
    {
        list($response) = $this->getConditionalRoutesConditionsRelScheduleItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getConditionalRoutesConditionsRelScheduleItemWithHttpInfo
     *
     * Retrieves a ConditionalRoutesConditionsRelSchedule resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ConditionalRoutesConditionsRelScheduleDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConditionalRoutesConditionsRelScheduleItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoutesConditionsRelScheduleDetailed';
        $request = $this->getConditionalRoutesConditionsRelScheduleItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ConditionalRoutesConditionsRelScheduleDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConditionalRoutesConditionsRelScheduleItemAsync
     *
     * Retrieves a ConditionalRoutesConditionsRelSchedule resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConditionalRoutesConditionsRelScheduleItemAsync($id)
    {
        return $this->getConditionalRoutesConditionsRelScheduleItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConditionalRoutesConditionsRelScheduleItemAsyncWithHttpInfo
     *
     * Retrieves a ConditionalRoutesConditionsRelSchedule resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConditionalRoutesConditionsRelScheduleItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoutesConditionsRelScheduleDetailed';
        $request = $this->getConditionalRoutesConditionsRelScheduleItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConditionalRoutesConditionsRelScheduleItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getConditionalRoutesConditionsRelScheduleItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getConditionalRoutesConditionsRelScheduleItem'
            );
        }

        $resourcePath = '/conditional_routes_conditions_rel_schedules/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConferenceRoomCollection
     *
     * Retrieves the collection of ConferenceRoom resources.
     *
     * @param  int $id_exact id_exact (optional)
     * @param  int $max_members max_members (optional)
     * @param  string $max_members_between max_members_between (optional)
     * @param  string $max_members_gt max_members_gt (optional)
     * @param  string $max_members_gte max_members_gte (optional)
     * @param  string $max_members_lt max_members_lt (optional)
     * @param  string $max_members_lte max_members_lte (optional)
     * @param  string $name name (optional)
     * @param  string $name_end name_end (optional)
     * @param  string $name_exact name_exact (optional)
     * @param  string $name_partial name_partial (optional)
     * @param  string $name_start name_start (optional)
     * @param  string $pin_code pin_code (optional)
     * @param  string $pin_code_end pin_code_end (optional)
     * @param  string $pin_code_exact pin_code_exact (optional)
     * @param  bool $pin_code_exists pin_code_exists (optional)
     * @param  string $pin_code_partial pin_code_partial (optional)
     * @param  string $pin_code_start pin_code_start (optional)
     * @param  bool $pin_protected pin_protected (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_max_members _order_max_members (optional)
     * @param  string $_order_name _order_name (optional)
     * @param  string $_order_pin_code _order_pin_code (optional)
     * @param  string $_order_pin_protected _order_pin_protected (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ConferenceRoomCollection[]
     */
    public function getConferenceRoomCollection($id_exact = null, $max_members = null, $max_members_between = null, $max_members_gt = null, $max_members_gte = null, $max_members_lt = null, $max_members_lte = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $pin_code = null, $pin_code_end = null, $pin_code_exact = null, $pin_code_exists = null, $pin_code_partial = null, $pin_code_start = null, $pin_protected = null, $_order_id = null, $_order_max_members = null, $_order_name = null, $_order_pin_code = null, $_order_pin_protected = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getConferenceRoomCollectionWithHttpInfo($id_exact, $max_members, $max_members_between, $max_members_gt, $max_members_gte, $max_members_lt, $max_members_lte, $name, $name_end, $name_exact, $name_partial, $name_start, $pin_code, $pin_code_end, $pin_code_exact, $pin_code_exists, $pin_code_partial, $pin_code_start, $pin_protected, $_order_id, $_order_max_members, $_order_name, $_order_pin_code, $_order_pin_protected, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getConferenceRoomCollectionWithHttpInfo
     *
     * Retrieves the collection of ConferenceRoom resources.
     *
     * @param  int $id_exact (optional)
     * @param  int $max_members (optional)
     * @param  string $max_members_between (optional)
     * @param  string $max_members_gt (optional)
     * @param  string $max_members_gte (optional)
     * @param  string $max_members_lt (optional)
     * @param  string $max_members_lte (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $pin_code (optional)
     * @param  string $pin_code_end (optional)
     * @param  string $pin_code_exact (optional)
     * @param  bool $pin_code_exists (optional)
     * @param  string $pin_code_partial (optional)
     * @param  string $pin_code_start (optional)
     * @param  bool $pin_protected (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_max_members (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_pin_code (optional)
     * @param  string $_order_pin_protected (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ConferenceRoomCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getConferenceRoomCollectionWithHttpInfo($id_exact = null, $max_members = null, $max_members_between = null, $max_members_gt = null, $max_members_gte = null, $max_members_lt = null, $max_members_lte = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $pin_code = null, $pin_code_end = null, $pin_code_exact = null, $pin_code_exists = null, $pin_code_partial = null, $pin_code_start = null, $pin_protected = null, $_order_id = null, $_order_max_members = null, $_order_name = null, $_order_pin_code = null, $_order_pin_protected = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ConferenceRoomCollection[]';
        $request = $this->getConferenceRoomCollectionRequest($id_exact, $max_members, $max_members_between, $max_members_gt, $max_members_gte, $max_members_lt, $max_members_lte, $name, $name_end, $name_exact, $name_partial, $name_start, $pin_code, $pin_code_end, $pin_code_exact, $pin_code_exists, $pin_code_partial, $pin_code_start, $pin_protected, $_order_id, $_order_max_members, $_order_name, $_order_pin_code, $_order_pin_protected, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ConferenceRoomCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConferenceRoomCollectionAsync
     *
     * Retrieves the collection of ConferenceRoom resources.
     *
     * @param  int $id_exact (optional)
     * @param  int $max_members (optional)
     * @param  string $max_members_between (optional)
     * @param  string $max_members_gt (optional)
     * @param  string $max_members_gte (optional)
     * @param  string $max_members_lt (optional)
     * @param  string $max_members_lte (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $pin_code (optional)
     * @param  string $pin_code_end (optional)
     * @param  string $pin_code_exact (optional)
     * @param  bool $pin_code_exists (optional)
     * @param  string $pin_code_partial (optional)
     * @param  string $pin_code_start (optional)
     * @param  bool $pin_protected (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_max_members (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_pin_code (optional)
     * @param  string $_order_pin_protected (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConferenceRoomCollectionAsync($id_exact = null, $max_members = null, $max_members_between = null, $max_members_gt = null, $max_members_gte = null, $max_members_lt = null, $max_members_lte = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $pin_code = null, $pin_code_end = null, $pin_code_exact = null, $pin_code_exists = null, $pin_code_partial = null, $pin_code_start = null, $pin_protected = null, $_order_id = null, $_order_max_members = null, $_order_name = null, $_order_pin_code = null, $_order_pin_protected = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getConferenceRoomCollectionAsyncWithHttpInfo($id_exact, $max_members, $max_members_between, $max_members_gt, $max_members_gte, $max_members_lt, $max_members_lte, $name, $name_end, $name_exact, $name_partial, $name_start, $pin_code, $pin_code_end, $pin_code_exact, $pin_code_exists, $pin_code_partial, $pin_code_start, $pin_protected, $_order_id, $_order_max_members, $_order_name, $_order_pin_code, $_order_pin_protected, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConferenceRoomCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of ConferenceRoom resources.
     *
     * @param  int $id_exact (optional)
     * @param  int $max_members (optional)
     * @param  string $max_members_between (optional)
     * @param  string $max_members_gt (optional)
     * @param  string $max_members_gte (optional)
     * @param  string $max_members_lt (optional)
     * @param  string $max_members_lte (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $pin_code (optional)
     * @param  string $pin_code_end (optional)
     * @param  string $pin_code_exact (optional)
     * @param  bool $pin_code_exists (optional)
     * @param  string $pin_code_partial (optional)
     * @param  string $pin_code_start (optional)
     * @param  bool $pin_protected (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_max_members (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_pin_code (optional)
     * @param  string $_order_pin_protected (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConferenceRoomCollectionAsyncWithHttpInfo($id_exact = null, $max_members = null, $max_members_between = null, $max_members_gt = null, $max_members_gte = null, $max_members_lt = null, $max_members_lte = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $pin_code = null, $pin_code_end = null, $pin_code_exact = null, $pin_code_exists = null, $pin_code_partial = null, $pin_code_start = null, $pin_protected = null, $_order_id = null, $_order_max_members = null, $_order_name = null, $_order_pin_code = null, $_order_pin_protected = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ConferenceRoomCollection[]';
        $request = $this->getConferenceRoomCollectionRequest($id_exact, $max_members, $max_members_between, $max_members_gt, $max_members_gte, $max_members_lt, $max_members_lte, $name, $name_end, $name_exact, $name_partial, $name_start, $pin_code, $pin_code_end, $pin_code_exact, $pin_code_exists, $pin_code_partial, $pin_code_start, $pin_protected, $_order_id, $_order_max_members, $_order_name, $_order_pin_code, $_order_pin_protected, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConferenceRoomCollection'
     *
     * @param  int $id_exact (optional)
     * @param  int $max_members (optional)
     * @param  string $max_members_between (optional)
     * @param  string $max_members_gt (optional)
     * @param  string $max_members_gte (optional)
     * @param  string $max_members_lt (optional)
     * @param  string $max_members_lte (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $pin_code (optional)
     * @param  string $pin_code_end (optional)
     * @param  string $pin_code_exact (optional)
     * @param  bool $pin_code_exists (optional)
     * @param  string $pin_code_partial (optional)
     * @param  string $pin_code_start (optional)
     * @param  bool $pin_protected (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_max_members (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_pin_code (optional)
     * @param  string $_order_pin_protected (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getConferenceRoomCollectionRequest($id_exact = null, $max_members = null, $max_members_between = null, $max_members_gt = null, $max_members_gte = null, $max_members_lt = null, $max_members_lte = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $pin_code = null, $pin_code_end = null, $pin_code_exact = null, $pin_code_exists = null, $pin_code_partial = null, $pin_code_start = null, $pin_protected = null, $_order_id = null, $_order_max_members = null, $_order_name = null, $_order_pin_code = null, $_order_pin_protected = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/conference_rooms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($max_members !== null) {
            $queryParams['maxMembers'] = ObjectSerializer::toQueryValue($max_members);
        }
        // query params
        if ($max_members_between !== null) {
            $queryParams['maxMembers[between]'] = ObjectSerializer::toQueryValue($max_members_between);
        }
        // query params
        if ($max_members_gt !== null) {
            $queryParams['maxMembers[gt]'] = ObjectSerializer::toQueryValue($max_members_gt);
        }
        // query params
        if ($max_members_gte !== null) {
            $queryParams['maxMembers[gte]'] = ObjectSerializer::toQueryValue($max_members_gte);
        }
        // query params
        if ($max_members_lt !== null) {
            $queryParams['maxMembers[lt]'] = ObjectSerializer::toQueryValue($max_members_lt);
        }
        // query params
        if ($max_members_lte !== null) {
            $queryParams['maxMembers[lte]'] = ObjectSerializer::toQueryValue($max_members_lte);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_end !== null) {
            $queryParams['name[end]'] = ObjectSerializer::toQueryValue($name_end);
        }
        // query params
        if ($name_exact !== null) {
            $queryParams['name[exact]'] = ObjectSerializer::toQueryValue($name_exact);
        }
        // query params
        if ($name_partial !== null) {
            $queryParams['name[partial]'] = ObjectSerializer::toQueryValue($name_partial);
        }
        // query params
        if ($name_start !== null) {
            $queryParams['name[start]'] = ObjectSerializer::toQueryValue($name_start);
        }
        // query params
        if ($pin_code !== null) {
            $queryParams['pinCode'] = ObjectSerializer::toQueryValue($pin_code);
        }
        // query params
        if ($pin_code_end !== null) {
            $queryParams['pinCode[end]'] = ObjectSerializer::toQueryValue($pin_code_end);
        }
        // query params
        if ($pin_code_exact !== null) {
            $queryParams['pinCode[exact]'] = ObjectSerializer::toQueryValue($pin_code_exact);
        }
        // query params
        if ($pin_code_exists !== null) {
            $queryParams['pinCode[exists]'] = ObjectSerializer::toQueryValue($pin_code_exists);
        }
        // query params
        if ($pin_code_partial !== null) {
            $queryParams['pinCode[partial]'] = ObjectSerializer::toQueryValue($pin_code_partial);
        }
        // query params
        if ($pin_code_start !== null) {
            $queryParams['pinCode[start]'] = ObjectSerializer::toQueryValue($pin_code_start);
        }
        // query params
        if ($pin_protected !== null) {
            $queryParams['pinProtected'] = ObjectSerializer::toQueryValue($pin_protected);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_max_members !== null) {
            $queryParams['_order[maxMembers]'] = ObjectSerializer::toQueryValue($_order_max_members);
        }
        // query params
        if ($_order_name !== null) {
            $queryParams['_order[name]'] = ObjectSerializer::toQueryValue($_order_name);
        }
        // query params
        if ($_order_pin_code !== null) {
            $queryParams['_order[pinCode]'] = ObjectSerializer::toQueryValue($_order_pin_code);
        }
        // query params
        if ($_order_pin_protected !== null) {
            $queryParams['_order[pinProtected]'] = ObjectSerializer::toQueryValue($_order_pin_protected);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConferenceRoomItem
     *
     * Retrieves a ConferenceRoom resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ConferenceRoomDetailed
     */
    public function getConferenceRoomItem($id)
    {
        list($response) = $this->getConferenceRoomItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getConferenceRoomItemWithHttpInfo
     *
     * Retrieves a ConferenceRoom resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ConferenceRoomDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConferenceRoomItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ConferenceRoomDetailed';
        $request = $this->getConferenceRoomItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ConferenceRoomDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConferenceRoomItemAsync
     *
     * Retrieves a ConferenceRoom resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConferenceRoomItemAsync($id)
    {
        return $this->getConferenceRoomItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConferenceRoomItemAsyncWithHttpInfo
     *
     * Retrieves a ConferenceRoom resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConferenceRoomItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ConferenceRoomDetailed';
        $request = $this->getConferenceRoomItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConferenceRoomItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getConferenceRoomItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getConferenceRoomItem'
            );
        }

        $resourcePath = '/conference_rooms/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCountryCollection
     *
     * Retrieves the collection of Country resources.
     *
     * @param  string $code code (optional)
     * @param  string $code_end code_end (optional)
     * @param  string $code_exact code_exact (optional)
     * @param  string $code_partial code_partial (optional)
     * @param  string $code_start code_start (optional)
     * @param  string $country_code country_code (optional)
     * @param  string $country_code_end country_code_end (optional)
     * @param  string $country_code_exact country_code_exact (optional)
     * @param  bool $country_code_exists country_code_exists (optional)
     * @param  string $country_code_partial country_code_partial (optional)
     * @param  string $country_code_start country_code_start (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $name_ca name_ca (optional)
     * @param  string $name_ca_end name_ca_end (optional)
     * @param  string $name_ca_exact name_ca_exact (optional)
     * @param  bool $name_ca_exists name_ca_exists (optional)
     * @param  string $name_ca_partial name_ca_partial (optional)
     * @param  string $name_ca_start name_ca_start (optional)
     * @param  string $name_en name_en (optional)
     * @param  string $name_en_end name_en_end (optional)
     * @param  string $name_en_exact name_en_exact (optional)
     * @param  bool $name_en_exists name_en_exists (optional)
     * @param  string $name_en_partial name_en_partial (optional)
     * @param  string $name_en_start name_en_start (optional)
     * @param  string $name_es name_es (optional)
     * @param  string $name_es_end name_es_end (optional)
     * @param  string $name_es_exact name_es_exact (optional)
     * @param  bool $name_es_exists name_es_exists (optional)
     * @param  string $name_es_partial name_es_partial (optional)
     * @param  string $name_es_start name_es_start (optional)
     * @param  string $name_it name_it (optional)
     * @param  string $name_it_end name_it_end (optional)
     * @param  string $name_it_exact name_it_exact (optional)
     * @param  bool $name_it_exists name_it_exists (optional)
     * @param  string $name_it_partial name_it_partial (optional)
     * @param  string $name_it_start name_it_start (optional)
     * @param  string $_order_code _order_code (optional)
     * @param  string $_order_country_code _order_country_code (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_name_ca _order_name_ca (optional)
     * @param  string $_order_name_en _order_name_en (optional)
     * @param  string $_order_name_es _order_name_es (optional)
     * @param  string $_order_name_it _order_name_it (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     * @param  bool $_pagination _pagination (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CountryCollection[]
     */
    public function getCountryCollection($code = null, $code_end = null, $code_exact = null, $code_partial = null, $code_start = null, $country_code = null, $country_code_end = null, $country_code_exact = null, $country_code_exists = null, $country_code_partial = null, $country_code_start = null, $id_exact = null, $name_ca = null, $name_ca_end = null, $name_ca_exact = null, $name_ca_exists = null, $name_ca_partial = null, $name_ca_start = null, $name_en = null, $name_en_end = null, $name_en_exact = null, $name_en_exists = null, $name_en_partial = null, $name_en_start = null, $name_es = null, $name_es_end = null, $name_es_exact = null, $name_es_exists = null, $name_es_partial = null, $name_es_start = null, $name_it = null, $name_it_end = null, $name_it_exact = null, $name_it_exists = null, $name_it_partial = null, $name_it_start = null, $_order_code = null, $_order_country_code = null, $_order_id = null, $_order_name_ca = null, $_order_name_en = null, $_order_name_es = null, $_order_name_it = null, $_items_per_page = null, $_page = null, $_properties = null, $_pagination = null)
    {
        list($response) = $this->getCountryCollectionWithHttpInfo($code, $code_end, $code_exact, $code_partial, $code_start, $country_code, $country_code_end, $country_code_exact, $country_code_exists, $country_code_partial, $country_code_start, $id_exact, $name_ca, $name_ca_end, $name_ca_exact, $name_ca_exists, $name_ca_partial, $name_ca_start, $name_en, $name_en_end, $name_en_exact, $name_en_exists, $name_en_partial, $name_en_start, $name_es, $name_es_end, $name_es_exact, $name_es_exists, $name_es_partial, $name_es_start, $name_it, $name_it_end, $name_it_exact, $name_it_exists, $name_it_partial, $name_it_start, $_order_code, $_order_country_code, $_order_id, $_order_name_ca, $_order_name_en, $_order_name_es, $_order_name_it, $_items_per_page, $_page, $_properties, $_pagination);
        return $response;
    }

    /**
     * Operation getCountryCollectionWithHttpInfo
     *
     * Retrieves the collection of Country resources.
     *
     * @param  string $code (optional)
     * @param  string $code_end (optional)
     * @param  string $code_exact (optional)
     * @param  string $code_partial (optional)
     * @param  string $code_start (optional)
     * @param  string $country_code (optional)
     * @param  string $country_code_end (optional)
     * @param  string $country_code_exact (optional)
     * @param  bool $country_code_exists (optional)
     * @param  string $country_code_partial (optional)
     * @param  string $country_code_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $name_ca (optional)
     * @param  string $name_ca_end (optional)
     * @param  string $name_ca_exact (optional)
     * @param  bool $name_ca_exists (optional)
     * @param  string $name_ca_partial (optional)
     * @param  string $name_ca_start (optional)
     * @param  string $name_en (optional)
     * @param  string $name_en_end (optional)
     * @param  string $name_en_exact (optional)
     * @param  bool $name_en_exists (optional)
     * @param  string $name_en_partial (optional)
     * @param  string $name_en_start (optional)
     * @param  string $name_es (optional)
     * @param  string $name_es_end (optional)
     * @param  string $name_es_exact (optional)
     * @param  bool $name_es_exists (optional)
     * @param  string $name_es_partial (optional)
     * @param  string $name_es_start (optional)
     * @param  string $name_it (optional)
     * @param  string $name_it_end (optional)
     * @param  string $name_it_exact (optional)
     * @param  bool $name_it_exists (optional)
     * @param  string $name_it_partial (optional)
     * @param  string $name_it_start (optional)
     * @param  string $_order_code (optional)
     * @param  string $_order_country_code (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name_ca (optional)
     * @param  string $_order_name_en (optional)
     * @param  string $_order_name_es (optional)
     * @param  string $_order_name_it (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  bool $_pagination (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CountryCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCountryCollectionWithHttpInfo($code = null, $code_end = null, $code_exact = null, $code_partial = null, $code_start = null, $country_code = null, $country_code_end = null, $country_code_exact = null, $country_code_exists = null, $country_code_partial = null, $country_code_start = null, $id_exact = null, $name_ca = null, $name_ca_end = null, $name_ca_exact = null, $name_ca_exists = null, $name_ca_partial = null, $name_ca_start = null, $name_en = null, $name_en_end = null, $name_en_exact = null, $name_en_exists = null, $name_en_partial = null, $name_en_start = null, $name_es = null, $name_es_end = null, $name_es_exact = null, $name_es_exists = null, $name_es_partial = null, $name_es_start = null, $name_it = null, $name_it_end = null, $name_it_exact = null, $name_it_exists = null, $name_it_partial = null, $name_it_start = null, $_order_code = null, $_order_country_code = null, $_order_id = null, $_order_name_ca = null, $_order_name_en = null, $_order_name_es = null, $_order_name_it = null, $_items_per_page = null, $_page = null, $_properties = null, $_pagination = null)
    {
        $returnType = '\Ivz\Client\Model\CountryCollection[]';
        $request = $this->getCountryCollectionRequest($code, $code_end, $code_exact, $code_partial, $code_start, $country_code, $country_code_end, $country_code_exact, $country_code_exists, $country_code_partial, $country_code_start, $id_exact, $name_ca, $name_ca_end, $name_ca_exact, $name_ca_exists, $name_ca_partial, $name_ca_start, $name_en, $name_en_end, $name_en_exact, $name_en_exists, $name_en_partial, $name_en_start, $name_es, $name_es_end, $name_es_exact, $name_es_exists, $name_es_partial, $name_es_start, $name_it, $name_it_end, $name_it_exact, $name_it_exists, $name_it_partial, $name_it_start, $_order_code, $_order_country_code, $_order_id, $_order_name_ca, $_order_name_en, $_order_name_es, $_order_name_it, $_items_per_page, $_page, $_properties, $_pagination);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CountryCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCountryCollectionAsync
     *
     * Retrieves the collection of Country resources.
     *
     * @param  string $code (optional)
     * @param  string $code_end (optional)
     * @param  string $code_exact (optional)
     * @param  string $code_partial (optional)
     * @param  string $code_start (optional)
     * @param  string $country_code (optional)
     * @param  string $country_code_end (optional)
     * @param  string $country_code_exact (optional)
     * @param  bool $country_code_exists (optional)
     * @param  string $country_code_partial (optional)
     * @param  string $country_code_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $name_ca (optional)
     * @param  string $name_ca_end (optional)
     * @param  string $name_ca_exact (optional)
     * @param  bool $name_ca_exists (optional)
     * @param  string $name_ca_partial (optional)
     * @param  string $name_ca_start (optional)
     * @param  string $name_en (optional)
     * @param  string $name_en_end (optional)
     * @param  string $name_en_exact (optional)
     * @param  bool $name_en_exists (optional)
     * @param  string $name_en_partial (optional)
     * @param  string $name_en_start (optional)
     * @param  string $name_es (optional)
     * @param  string $name_es_end (optional)
     * @param  string $name_es_exact (optional)
     * @param  bool $name_es_exists (optional)
     * @param  string $name_es_partial (optional)
     * @param  string $name_es_start (optional)
     * @param  string $name_it (optional)
     * @param  string $name_it_end (optional)
     * @param  string $name_it_exact (optional)
     * @param  bool $name_it_exists (optional)
     * @param  string $name_it_partial (optional)
     * @param  string $name_it_start (optional)
     * @param  string $_order_code (optional)
     * @param  string $_order_country_code (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name_ca (optional)
     * @param  string $_order_name_en (optional)
     * @param  string $_order_name_es (optional)
     * @param  string $_order_name_it (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  bool $_pagination (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCountryCollectionAsync($code = null, $code_end = null, $code_exact = null, $code_partial = null, $code_start = null, $country_code = null, $country_code_end = null, $country_code_exact = null, $country_code_exists = null, $country_code_partial = null, $country_code_start = null, $id_exact = null, $name_ca = null, $name_ca_end = null, $name_ca_exact = null, $name_ca_exists = null, $name_ca_partial = null, $name_ca_start = null, $name_en = null, $name_en_end = null, $name_en_exact = null, $name_en_exists = null, $name_en_partial = null, $name_en_start = null, $name_es = null, $name_es_end = null, $name_es_exact = null, $name_es_exists = null, $name_es_partial = null, $name_es_start = null, $name_it = null, $name_it_end = null, $name_it_exact = null, $name_it_exists = null, $name_it_partial = null, $name_it_start = null, $_order_code = null, $_order_country_code = null, $_order_id = null, $_order_name_ca = null, $_order_name_en = null, $_order_name_es = null, $_order_name_it = null, $_items_per_page = null, $_page = null, $_properties = null, $_pagination = null)
    {
        return $this->getCountryCollectionAsyncWithHttpInfo($code, $code_end, $code_exact, $code_partial, $code_start, $country_code, $country_code_end, $country_code_exact, $country_code_exists, $country_code_partial, $country_code_start, $id_exact, $name_ca, $name_ca_end, $name_ca_exact, $name_ca_exists, $name_ca_partial, $name_ca_start, $name_en, $name_en_end, $name_en_exact, $name_en_exists, $name_en_partial, $name_en_start, $name_es, $name_es_end, $name_es_exact, $name_es_exists, $name_es_partial, $name_es_start, $name_it, $name_it_end, $name_it_exact, $name_it_exists, $name_it_partial, $name_it_start, $_order_code, $_order_country_code, $_order_id, $_order_name_ca, $_order_name_en, $_order_name_es, $_order_name_it, $_items_per_page, $_page, $_properties, $_pagination)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCountryCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of Country resources.
     *
     * @param  string $code (optional)
     * @param  string $code_end (optional)
     * @param  string $code_exact (optional)
     * @param  string $code_partial (optional)
     * @param  string $code_start (optional)
     * @param  string $country_code (optional)
     * @param  string $country_code_end (optional)
     * @param  string $country_code_exact (optional)
     * @param  bool $country_code_exists (optional)
     * @param  string $country_code_partial (optional)
     * @param  string $country_code_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $name_ca (optional)
     * @param  string $name_ca_end (optional)
     * @param  string $name_ca_exact (optional)
     * @param  bool $name_ca_exists (optional)
     * @param  string $name_ca_partial (optional)
     * @param  string $name_ca_start (optional)
     * @param  string $name_en (optional)
     * @param  string $name_en_end (optional)
     * @param  string $name_en_exact (optional)
     * @param  bool $name_en_exists (optional)
     * @param  string $name_en_partial (optional)
     * @param  string $name_en_start (optional)
     * @param  string $name_es (optional)
     * @param  string $name_es_end (optional)
     * @param  string $name_es_exact (optional)
     * @param  bool $name_es_exists (optional)
     * @param  string $name_es_partial (optional)
     * @param  string $name_es_start (optional)
     * @param  string $name_it (optional)
     * @param  string $name_it_end (optional)
     * @param  string $name_it_exact (optional)
     * @param  bool $name_it_exists (optional)
     * @param  string $name_it_partial (optional)
     * @param  string $name_it_start (optional)
     * @param  string $_order_code (optional)
     * @param  string $_order_country_code (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name_ca (optional)
     * @param  string $_order_name_en (optional)
     * @param  string $_order_name_es (optional)
     * @param  string $_order_name_it (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  bool $_pagination (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCountryCollectionAsyncWithHttpInfo($code = null, $code_end = null, $code_exact = null, $code_partial = null, $code_start = null, $country_code = null, $country_code_end = null, $country_code_exact = null, $country_code_exists = null, $country_code_partial = null, $country_code_start = null, $id_exact = null, $name_ca = null, $name_ca_end = null, $name_ca_exact = null, $name_ca_exists = null, $name_ca_partial = null, $name_ca_start = null, $name_en = null, $name_en_end = null, $name_en_exact = null, $name_en_exists = null, $name_en_partial = null, $name_en_start = null, $name_es = null, $name_es_end = null, $name_es_exact = null, $name_es_exists = null, $name_es_partial = null, $name_es_start = null, $name_it = null, $name_it_end = null, $name_it_exact = null, $name_it_exists = null, $name_it_partial = null, $name_it_start = null, $_order_code = null, $_order_country_code = null, $_order_id = null, $_order_name_ca = null, $_order_name_en = null, $_order_name_es = null, $_order_name_it = null, $_items_per_page = null, $_page = null, $_properties = null, $_pagination = null)
    {
        $returnType = '\Ivz\Client\Model\CountryCollection[]';
        $request = $this->getCountryCollectionRequest($code, $code_end, $code_exact, $code_partial, $code_start, $country_code, $country_code_end, $country_code_exact, $country_code_exists, $country_code_partial, $country_code_start, $id_exact, $name_ca, $name_ca_end, $name_ca_exact, $name_ca_exists, $name_ca_partial, $name_ca_start, $name_en, $name_en_end, $name_en_exact, $name_en_exists, $name_en_partial, $name_en_start, $name_es, $name_es_end, $name_es_exact, $name_es_exists, $name_es_partial, $name_es_start, $name_it, $name_it_end, $name_it_exact, $name_it_exists, $name_it_partial, $name_it_start, $_order_code, $_order_country_code, $_order_id, $_order_name_ca, $_order_name_en, $_order_name_es, $_order_name_it, $_items_per_page, $_page, $_properties, $_pagination);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCountryCollection'
     *
     * @param  string $code (optional)
     * @param  string $code_end (optional)
     * @param  string $code_exact (optional)
     * @param  string $code_partial (optional)
     * @param  string $code_start (optional)
     * @param  string $country_code (optional)
     * @param  string $country_code_end (optional)
     * @param  string $country_code_exact (optional)
     * @param  bool $country_code_exists (optional)
     * @param  string $country_code_partial (optional)
     * @param  string $country_code_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $name_ca (optional)
     * @param  string $name_ca_end (optional)
     * @param  string $name_ca_exact (optional)
     * @param  bool $name_ca_exists (optional)
     * @param  string $name_ca_partial (optional)
     * @param  string $name_ca_start (optional)
     * @param  string $name_en (optional)
     * @param  string $name_en_end (optional)
     * @param  string $name_en_exact (optional)
     * @param  bool $name_en_exists (optional)
     * @param  string $name_en_partial (optional)
     * @param  string $name_en_start (optional)
     * @param  string $name_es (optional)
     * @param  string $name_es_end (optional)
     * @param  string $name_es_exact (optional)
     * @param  bool $name_es_exists (optional)
     * @param  string $name_es_partial (optional)
     * @param  string $name_es_start (optional)
     * @param  string $name_it (optional)
     * @param  string $name_it_end (optional)
     * @param  string $name_it_exact (optional)
     * @param  bool $name_it_exists (optional)
     * @param  string $name_it_partial (optional)
     * @param  string $name_it_start (optional)
     * @param  string $_order_code (optional)
     * @param  string $_order_country_code (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name_ca (optional)
     * @param  string $_order_name_en (optional)
     * @param  string $_order_name_es (optional)
     * @param  string $_order_name_it (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  bool $_pagination (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCountryCollectionRequest($code = null, $code_end = null, $code_exact = null, $code_partial = null, $code_start = null, $country_code = null, $country_code_end = null, $country_code_exact = null, $country_code_exists = null, $country_code_partial = null, $country_code_start = null, $id_exact = null, $name_ca = null, $name_ca_end = null, $name_ca_exact = null, $name_ca_exists = null, $name_ca_partial = null, $name_ca_start = null, $name_en = null, $name_en_end = null, $name_en_exact = null, $name_en_exists = null, $name_en_partial = null, $name_en_start = null, $name_es = null, $name_es_end = null, $name_es_exact = null, $name_es_exists = null, $name_es_partial = null, $name_es_start = null, $name_it = null, $name_it_end = null, $name_it_exact = null, $name_it_exists = null, $name_it_partial = null, $name_it_start = null, $_order_code = null, $_order_country_code = null, $_order_id = null, $_order_name_ca = null, $_order_name_en = null, $_order_name_es = null, $_order_name_it = null, $_items_per_page = null, $_page = null, $_properties = null, $_pagination = null)
    {

        $resourcePath = '/countries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($code !== null) {
            $queryParams['code'] = ObjectSerializer::toQueryValue($code);
        }
        // query params
        if ($code_end !== null) {
            $queryParams['code[end]'] = ObjectSerializer::toQueryValue($code_end);
        }
        // query params
        if ($code_exact !== null) {
            $queryParams['code[exact]'] = ObjectSerializer::toQueryValue($code_exact);
        }
        // query params
        if ($code_partial !== null) {
            $queryParams['code[partial]'] = ObjectSerializer::toQueryValue($code_partial);
        }
        // query params
        if ($code_start !== null) {
            $queryParams['code[start]'] = ObjectSerializer::toQueryValue($code_start);
        }
        // query params
        if ($country_code !== null) {
            $queryParams['countryCode'] = ObjectSerializer::toQueryValue($country_code);
        }
        // query params
        if ($country_code_end !== null) {
            $queryParams['countryCode[end]'] = ObjectSerializer::toQueryValue($country_code_end);
        }
        // query params
        if ($country_code_exact !== null) {
            $queryParams['countryCode[exact]'] = ObjectSerializer::toQueryValue($country_code_exact);
        }
        // query params
        if ($country_code_exists !== null) {
            $queryParams['countryCode[exists]'] = ObjectSerializer::toQueryValue($country_code_exists);
        }
        // query params
        if ($country_code_partial !== null) {
            $queryParams['countryCode[partial]'] = ObjectSerializer::toQueryValue($country_code_partial);
        }
        // query params
        if ($country_code_start !== null) {
            $queryParams['countryCode[start]'] = ObjectSerializer::toQueryValue($country_code_start);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($name_ca !== null) {
            $queryParams['name.ca'] = ObjectSerializer::toQueryValue($name_ca);
        }
        // query params
        if ($name_ca_end !== null) {
            $queryParams['name.ca[end]'] = ObjectSerializer::toQueryValue($name_ca_end);
        }
        // query params
        if ($name_ca_exact !== null) {
            $queryParams['name.ca[exact]'] = ObjectSerializer::toQueryValue($name_ca_exact);
        }
        // query params
        if ($name_ca_exists !== null) {
            $queryParams['name.ca[exists]'] = ObjectSerializer::toQueryValue($name_ca_exists);
        }
        // query params
        if ($name_ca_partial !== null) {
            $queryParams['name.ca[partial]'] = ObjectSerializer::toQueryValue($name_ca_partial);
        }
        // query params
        if ($name_ca_start !== null) {
            $queryParams['name.ca[start]'] = ObjectSerializer::toQueryValue($name_ca_start);
        }
        // query params
        if ($name_en !== null) {
            $queryParams['name.en'] = ObjectSerializer::toQueryValue($name_en);
        }
        // query params
        if ($name_en_end !== null) {
            $queryParams['name.en[end]'] = ObjectSerializer::toQueryValue($name_en_end);
        }
        // query params
        if ($name_en_exact !== null) {
            $queryParams['name.en[exact]'] = ObjectSerializer::toQueryValue($name_en_exact);
        }
        // query params
        if ($name_en_exists !== null) {
            $queryParams['name.en[exists]'] = ObjectSerializer::toQueryValue($name_en_exists);
        }
        // query params
        if ($name_en_partial !== null) {
            $queryParams['name.en[partial]'] = ObjectSerializer::toQueryValue($name_en_partial);
        }
        // query params
        if ($name_en_start !== null) {
            $queryParams['name.en[start]'] = ObjectSerializer::toQueryValue($name_en_start);
        }
        // query params
        if ($name_es !== null) {
            $queryParams['name.es'] = ObjectSerializer::toQueryValue($name_es);
        }
        // query params
        if ($name_es_end !== null) {
            $queryParams['name.es[end]'] = ObjectSerializer::toQueryValue($name_es_end);
        }
        // query params
        if ($name_es_exact !== null) {
            $queryParams['name.es[exact]'] = ObjectSerializer::toQueryValue($name_es_exact);
        }
        // query params
        if ($name_es_exists !== null) {
            $queryParams['name.es[exists]'] = ObjectSerializer::toQueryValue($name_es_exists);
        }
        // query params
        if ($name_es_partial !== null) {
            $queryParams['name.es[partial]'] = ObjectSerializer::toQueryValue($name_es_partial);
        }
        // query params
        if ($name_es_start !== null) {
            $queryParams['name.es[start]'] = ObjectSerializer::toQueryValue($name_es_start);
        }
        // query params
        if ($name_it !== null) {
            $queryParams['name.it'] = ObjectSerializer::toQueryValue($name_it);
        }
        // query params
        if ($name_it_end !== null) {
            $queryParams['name.it[end]'] = ObjectSerializer::toQueryValue($name_it_end);
        }
        // query params
        if ($name_it_exact !== null) {
            $queryParams['name.it[exact]'] = ObjectSerializer::toQueryValue($name_it_exact);
        }
        // query params
        if ($name_it_exists !== null) {
            $queryParams['name.it[exists]'] = ObjectSerializer::toQueryValue($name_it_exists);
        }
        // query params
        if ($name_it_partial !== null) {
            $queryParams['name.it[partial]'] = ObjectSerializer::toQueryValue($name_it_partial);
        }
        // query params
        if ($name_it_start !== null) {
            $queryParams['name.it[start]'] = ObjectSerializer::toQueryValue($name_it_start);
        }
        // query params
        if ($_order_code !== null) {
            $queryParams['_order[code]'] = ObjectSerializer::toQueryValue($_order_code);
        }
        // query params
        if ($_order_country_code !== null) {
            $queryParams['_order[countryCode]'] = ObjectSerializer::toQueryValue($_order_country_code);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_name_ca !== null) {
            $queryParams['_order[name.ca]'] = ObjectSerializer::toQueryValue($_order_name_ca);
        }
        // query params
        if ($_order_name_en !== null) {
            $queryParams['_order[name.en]'] = ObjectSerializer::toQueryValue($_order_name_en);
        }
        // query params
        if ($_order_name_es !== null) {
            $queryParams['_order[name.es]'] = ObjectSerializer::toQueryValue($_order_name_es);
        }
        // query params
        if ($_order_name_it !== null) {
            $queryParams['_order[name.it]'] = ObjectSerializer::toQueryValue($_order_name_it);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }
        // query params
        if ($_pagination !== null) {
            $queryParams['_pagination'] = ObjectSerializer::toQueryValue($_pagination);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCountryItem
     *
     * Retrieves a Country resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CountryDetailed
     */
    public function getCountryItem($id)
    {
        list($response) = $this->getCountryItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getCountryItemWithHttpInfo
     *
     * Retrieves a Country resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CountryDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCountryItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\CountryDetailed';
        $request = $this->getCountryItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CountryDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCountryItemAsync
     *
     * Retrieves a Country resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCountryItemAsync($id)
    {
        return $this->getCountryItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCountryItemAsyncWithHttpInfo
     *
     * Retrieves a Country resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCountryItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\CountryDetailed';
        $request = $this->getCountryItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCountryItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCountryItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCountryItem'
            );
        }

        $resourcePath = '/countries/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDdiCollection
     *
     * Retrieves the collection of Ddi resources.
     *
     * @param  string $conditional_route conditional_route (optional)
     * @param  string $conditional_route2 conditional_route2 (optional)
     * @param  bool $conditional_route_exists conditional_route_exists (optional)
     * @param  string $conference_room conference_room (optional)
     * @param  string $conference_room2 conference_room2 (optional)
     * @param  bool $conference_room_exists conference_room_exists (optional)
     * @param  string $country country (optional)
     * @param  string $country2 country2 (optional)
     * @param  bool $country_exists country_exists (optional)
     * @param  string $ddi ddi (optional)
     * @param  string $ddi_end ddi_end (optional)
     * @param  string $ddi_exact ddi_exact (optional)
     * @param  string $ddi_partial ddi_partial (optional)
     * @param  string $ddi_start ddi_start (optional)
     * @param  string $ddie164 ddie164 (optional)
     * @param  string $ddie164_end ddie164_end (optional)
     * @param  string $ddie164_exact ddie164_exact (optional)
     * @param  bool $ddie164_exists ddie164_exists (optional)
     * @param  string $ddie164_partial ddie164_partial (optional)
     * @param  string $ddie164_start ddie164_start (optional)
     * @param  string $external_call_filter external_call_filter (optional)
     * @param  string $external_call_filter2 external_call_filter2 (optional)
     * @param  bool $external_call_filter_exists external_call_filter_exists (optional)
     * @param  string $fax fax (optional)
     * @param  string $fax2 fax2 (optional)
     * @param  bool $fax_exists fax_exists (optional)
     * @param  string $friend_value friend_value (optional)
     * @param  string $friend_value_end friend_value_end (optional)
     * @param  string $friend_value_exact friend_value_exact (optional)
     * @param  bool $friend_value_exists friend_value_exists (optional)
     * @param  string $friend_value_partial friend_value_partial (optional)
     * @param  string $friend_value_start friend_value_start (optional)
     * @param  string $hunt_group hunt_group (optional)
     * @param  string $hunt_group2 hunt_group2 (optional)
     * @param  bool $hunt_group_exists hunt_group_exists (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $ivr ivr (optional)
     * @param  string $ivr2 ivr2 (optional)
     * @param  bool $ivr_exists ivr_exists (optional)
     * @param  string $language language (optional)
     * @param  string $language2 language2 (optional)
     * @param  bool $language_exists language_exists (optional)
     * @param  string $queue queue (optional)
     * @param  string $queue2 queue2 (optional)
     * @param  bool $queue_exists queue_exists (optional)
     * @param  string $residential_device residential_device (optional)
     * @param  string $residential_device2 residential_device2 (optional)
     * @param  bool $residential_device_exists residential_device_exists (optional)
     * @param  string $retail_account retail_account (optional)
     * @param  string $retail_account2 retail_account2 (optional)
     * @param  bool $retail_account_exists retail_account_exists (optional)
     * @param  string $route_type route_type (optional)
     * @param  string $route_type_end route_type_end (optional)
     * @param  string $route_type_exact route_type_exact (optional)
     * @param  bool $route_type_exists route_type_exists (optional)
     * @param  string $route_type_partial route_type_partial (optional)
     * @param  string $route_type_start route_type_start (optional)
     * @param  string $user user (optional)
     * @param  string $user2 user2 (optional)
     * @param  bool $user_exists user_exists (optional)
     * @param  string $_order_ddi _order_ddi (optional)
     * @param  string $_order_ddie164 _order_ddie164 (optional)
     * @param  string $_order_friend_value _order_friend_value (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_route_type _order_route_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\DdiCollection[]
     */
    public function getDdiCollection($conditional_route = null, $conditional_route2 = null, $conditional_route_exists = null, $conference_room = null, $conference_room2 = null, $conference_room_exists = null, $country = null, $country2 = null, $country_exists = null, $ddi = null, $ddi_end = null, $ddi_exact = null, $ddi_partial = null, $ddi_start = null, $ddie164 = null, $ddie164_end = null, $ddie164_exact = null, $ddie164_exists = null, $ddie164_partial = null, $ddie164_start = null, $external_call_filter = null, $external_call_filter2 = null, $external_call_filter_exists = null, $fax = null, $fax2 = null, $fax_exists = null, $friend_value = null, $friend_value_end = null, $friend_value_exact = null, $friend_value_exists = null, $friend_value_partial = null, $friend_value_start = null, $hunt_group = null, $hunt_group2 = null, $hunt_group_exists = null, $id_exact = null, $ivr = null, $ivr2 = null, $ivr_exists = null, $language = null, $language2 = null, $language_exists = null, $queue = null, $queue2 = null, $queue_exists = null, $residential_device = null, $residential_device2 = null, $residential_device_exists = null, $retail_account = null, $retail_account2 = null, $retail_account_exists = null, $route_type = null, $route_type_end = null, $route_type_exact = null, $route_type_exists = null, $route_type_partial = null, $route_type_start = null, $user = null, $user2 = null, $user_exists = null, $_order_ddi = null, $_order_ddie164 = null, $_order_friend_value = null, $_order_id = null, $_order_route_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getDdiCollectionWithHttpInfo($conditional_route, $conditional_route2, $conditional_route_exists, $conference_room, $conference_room2, $conference_room_exists, $country, $country2, $country_exists, $ddi, $ddi_end, $ddi_exact, $ddi_partial, $ddi_start, $ddie164, $ddie164_end, $ddie164_exact, $ddie164_exists, $ddie164_partial, $ddie164_start, $external_call_filter, $external_call_filter2, $external_call_filter_exists, $fax, $fax2, $fax_exists, $friend_value, $friend_value_end, $friend_value_exact, $friend_value_exists, $friend_value_partial, $friend_value_start, $hunt_group, $hunt_group2, $hunt_group_exists, $id_exact, $ivr, $ivr2, $ivr_exists, $language, $language2, $language_exists, $queue, $queue2, $queue_exists, $residential_device, $residential_device2, $residential_device_exists, $retail_account, $retail_account2, $retail_account_exists, $route_type, $route_type_end, $route_type_exact, $route_type_exists, $route_type_partial, $route_type_start, $user, $user2, $user_exists, $_order_ddi, $_order_ddie164, $_order_friend_value, $_order_id, $_order_route_type, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getDdiCollectionWithHttpInfo
     *
     * Retrieves the collection of Ddi resources.
     *
     * @param  string $conditional_route (optional)
     * @param  string $conditional_route2 (optional)
     * @param  bool $conditional_route_exists (optional)
     * @param  string $conference_room (optional)
     * @param  string $conference_room2 (optional)
     * @param  bool $conference_room_exists (optional)
     * @param  string $country (optional)
     * @param  string $country2 (optional)
     * @param  bool $country_exists (optional)
     * @param  string $ddi (optional)
     * @param  string $ddi_end (optional)
     * @param  string $ddi_exact (optional)
     * @param  string $ddi_partial (optional)
     * @param  string $ddi_start (optional)
     * @param  string $ddie164 (optional)
     * @param  string $ddie164_end (optional)
     * @param  string $ddie164_exact (optional)
     * @param  bool $ddie164_exists (optional)
     * @param  string $ddie164_partial (optional)
     * @param  string $ddie164_start (optional)
     * @param  string $external_call_filter (optional)
     * @param  string $external_call_filter2 (optional)
     * @param  bool $external_call_filter_exists (optional)
     * @param  string $fax (optional)
     * @param  string $fax2 (optional)
     * @param  bool $fax_exists (optional)
     * @param  string $friend_value (optional)
     * @param  string $friend_value_end (optional)
     * @param  string $friend_value_exact (optional)
     * @param  bool $friend_value_exists (optional)
     * @param  string $friend_value_partial (optional)
     * @param  string $friend_value_start (optional)
     * @param  string $hunt_group (optional)
     * @param  string $hunt_group2 (optional)
     * @param  bool $hunt_group_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $ivr (optional)
     * @param  string $ivr2 (optional)
     * @param  bool $ivr_exists (optional)
     * @param  string $language (optional)
     * @param  string $language2 (optional)
     * @param  bool $language_exists (optional)
     * @param  string $queue (optional)
     * @param  string $queue2 (optional)
     * @param  bool $queue_exists (optional)
     * @param  string $residential_device (optional)
     * @param  string $residential_device2 (optional)
     * @param  bool $residential_device_exists (optional)
     * @param  string $retail_account (optional)
     * @param  string $retail_account2 (optional)
     * @param  bool $retail_account_exists (optional)
     * @param  string $route_type (optional)
     * @param  string $route_type_end (optional)
     * @param  string $route_type_exact (optional)
     * @param  bool $route_type_exists (optional)
     * @param  string $route_type_partial (optional)
     * @param  string $route_type_start (optional)
     * @param  string $user (optional)
     * @param  string $user2 (optional)
     * @param  bool $user_exists (optional)
     * @param  string $_order_ddi (optional)
     * @param  string $_order_ddie164 (optional)
     * @param  string $_order_friend_value (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_route_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\DdiCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getDdiCollectionWithHttpInfo($conditional_route = null, $conditional_route2 = null, $conditional_route_exists = null, $conference_room = null, $conference_room2 = null, $conference_room_exists = null, $country = null, $country2 = null, $country_exists = null, $ddi = null, $ddi_end = null, $ddi_exact = null, $ddi_partial = null, $ddi_start = null, $ddie164 = null, $ddie164_end = null, $ddie164_exact = null, $ddie164_exists = null, $ddie164_partial = null, $ddie164_start = null, $external_call_filter = null, $external_call_filter2 = null, $external_call_filter_exists = null, $fax = null, $fax2 = null, $fax_exists = null, $friend_value = null, $friend_value_end = null, $friend_value_exact = null, $friend_value_exists = null, $friend_value_partial = null, $friend_value_start = null, $hunt_group = null, $hunt_group2 = null, $hunt_group_exists = null, $id_exact = null, $ivr = null, $ivr2 = null, $ivr_exists = null, $language = null, $language2 = null, $language_exists = null, $queue = null, $queue2 = null, $queue_exists = null, $residential_device = null, $residential_device2 = null, $residential_device_exists = null, $retail_account = null, $retail_account2 = null, $retail_account_exists = null, $route_type = null, $route_type_end = null, $route_type_exact = null, $route_type_exists = null, $route_type_partial = null, $route_type_start = null, $user = null, $user2 = null, $user_exists = null, $_order_ddi = null, $_order_ddie164 = null, $_order_friend_value = null, $_order_id = null, $_order_route_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\DdiCollection[]';
        $request = $this->getDdiCollectionRequest($conditional_route, $conditional_route2, $conditional_route_exists, $conference_room, $conference_room2, $conference_room_exists, $country, $country2, $country_exists, $ddi, $ddi_end, $ddi_exact, $ddi_partial, $ddi_start, $ddie164, $ddie164_end, $ddie164_exact, $ddie164_exists, $ddie164_partial, $ddie164_start, $external_call_filter, $external_call_filter2, $external_call_filter_exists, $fax, $fax2, $fax_exists, $friend_value, $friend_value_end, $friend_value_exact, $friend_value_exists, $friend_value_partial, $friend_value_start, $hunt_group, $hunt_group2, $hunt_group_exists, $id_exact, $ivr, $ivr2, $ivr_exists, $language, $language2, $language_exists, $queue, $queue2, $queue_exists, $residential_device, $residential_device2, $residential_device_exists, $retail_account, $retail_account2, $retail_account_exists, $route_type, $route_type_end, $route_type_exact, $route_type_exists, $route_type_partial, $route_type_start, $user, $user2, $user_exists, $_order_ddi, $_order_ddie164, $_order_friend_value, $_order_id, $_order_route_type, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\DdiCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDdiCollectionAsync
     *
     * Retrieves the collection of Ddi resources.
     *
     * @param  string $conditional_route (optional)
     * @param  string $conditional_route2 (optional)
     * @param  bool $conditional_route_exists (optional)
     * @param  string $conference_room (optional)
     * @param  string $conference_room2 (optional)
     * @param  bool $conference_room_exists (optional)
     * @param  string $country (optional)
     * @param  string $country2 (optional)
     * @param  bool $country_exists (optional)
     * @param  string $ddi (optional)
     * @param  string $ddi_end (optional)
     * @param  string $ddi_exact (optional)
     * @param  string $ddi_partial (optional)
     * @param  string $ddi_start (optional)
     * @param  string $ddie164 (optional)
     * @param  string $ddie164_end (optional)
     * @param  string $ddie164_exact (optional)
     * @param  bool $ddie164_exists (optional)
     * @param  string $ddie164_partial (optional)
     * @param  string $ddie164_start (optional)
     * @param  string $external_call_filter (optional)
     * @param  string $external_call_filter2 (optional)
     * @param  bool $external_call_filter_exists (optional)
     * @param  string $fax (optional)
     * @param  string $fax2 (optional)
     * @param  bool $fax_exists (optional)
     * @param  string $friend_value (optional)
     * @param  string $friend_value_end (optional)
     * @param  string $friend_value_exact (optional)
     * @param  bool $friend_value_exists (optional)
     * @param  string $friend_value_partial (optional)
     * @param  string $friend_value_start (optional)
     * @param  string $hunt_group (optional)
     * @param  string $hunt_group2 (optional)
     * @param  bool $hunt_group_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $ivr (optional)
     * @param  string $ivr2 (optional)
     * @param  bool $ivr_exists (optional)
     * @param  string $language (optional)
     * @param  string $language2 (optional)
     * @param  bool $language_exists (optional)
     * @param  string $queue (optional)
     * @param  string $queue2 (optional)
     * @param  bool $queue_exists (optional)
     * @param  string $residential_device (optional)
     * @param  string $residential_device2 (optional)
     * @param  bool $residential_device_exists (optional)
     * @param  string $retail_account (optional)
     * @param  string $retail_account2 (optional)
     * @param  bool $retail_account_exists (optional)
     * @param  string $route_type (optional)
     * @param  string $route_type_end (optional)
     * @param  string $route_type_exact (optional)
     * @param  bool $route_type_exists (optional)
     * @param  string $route_type_partial (optional)
     * @param  string $route_type_start (optional)
     * @param  string $user (optional)
     * @param  string $user2 (optional)
     * @param  bool $user_exists (optional)
     * @param  string $_order_ddi (optional)
     * @param  string $_order_ddie164 (optional)
     * @param  string $_order_friend_value (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_route_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDdiCollectionAsync($conditional_route = null, $conditional_route2 = null, $conditional_route_exists = null, $conference_room = null, $conference_room2 = null, $conference_room_exists = null, $country = null, $country2 = null, $country_exists = null, $ddi = null, $ddi_end = null, $ddi_exact = null, $ddi_partial = null, $ddi_start = null, $ddie164 = null, $ddie164_end = null, $ddie164_exact = null, $ddie164_exists = null, $ddie164_partial = null, $ddie164_start = null, $external_call_filter = null, $external_call_filter2 = null, $external_call_filter_exists = null, $fax = null, $fax2 = null, $fax_exists = null, $friend_value = null, $friend_value_end = null, $friend_value_exact = null, $friend_value_exists = null, $friend_value_partial = null, $friend_value_start = null, $hunt_group = null, $hunt_group2 = null, $hunt_group_exists = null, $id_exact = null, $ivr = null, $ivr2 = null, $ivr_exists = null, $language = null, $language2 = null, $language_exists = null, $queue = null, $queue2 = null, $queue_exists = null, $residential_device = null, $residential_device2 = null, $residential_device_exists = null, $retail_account = null, $retail_account2 = null, $retail_account_exists = null, $route_type = null, $route_type_end = null, $route_type_exact = null, $route_type_exists = null, $route_type_partial = null, $route_type_start = null, $user = null, $user2 = null, $user_exists = null, $_order_ddi = null, $_order_ddie164 = null, $_order_friend_value = null, $_order_id = null, $_order_route_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getDdiCollectionAsyncWithHttpInfo($conditional_route, $conditional_route2, $conditional_route_exists, $conference_room, $conference_room2, $conference_room_exists, $country, $country2, $country_exists, $ddi, $ddi_end, $ddi_exact, $ddi_partial, $ddi_start, $ddie164, $ddie164_end, $ddie164_exact, $ddie164_exists, $ddie164_partial, $ddie164_start, $external_call_filter, $external_call_filter2, $external_call_filter_exists, $fax, $fax2, $fax_exists, $friend_value, $friend_value_end, $friend_value_exact, $friend_value_exists, $friend_value_partial, $friend_value_start, $hunt_group, $hunt_group2, $hunt_group_exists, $id_exact, $ivr, $ivr2, $ivr_exists, $language, $language2, $language_exists, $queue, $queue2, $queue_exists, $residential_device, $residential_device2, $residential_device_exists, $retail_account, $retail_account2, $retail_account_exists, $route_type, $route_type_end, $route_type_exact, $route_type_exists, $route_type_partial, $route_type_start, $user, $user2, $user_exists, $_order_ddi, $_order_ddie164, $_order_friend_value, $_order_id, $_order_route_type, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDdiCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of Ddi resources.
     *
     * @param  string $conditional_route (optional)
     * @param  string $conditional_route2 (optional)
     * @param  bool $conditional_route_exists (optional)
     * @param  string $conference_room (optional)
     * @param  string $conference_room2 (optional)
     * @param  bool $conference_room_exists (optional)
     * @param  string $country (optional)
     * @param  string $country2 (optional)
     * @param  bool $country_exists (optional)
     * @param  string $ddi (optional)
     * @param  string $ddi_end (optional)
     * @param  string $ddi_exact (optional)
     * @param  string $ddi_partial (optional)
     * @param  string $ddi_start (optional)
     * @param  string $ddie164 (optional)
     * @param  string $ddie164_end (optional)
     * @param  string $ddie164_exact (optional)
     * @param  bool $ddie164_exists (optional)
     * @param  string $ddie164_partial (optional)
     * @param  string $ddie164_start (optional)
     * @param  string $external_call_filter (optional)
     * @param  string $external_call_filter2 (optional)
     * @param  bool $external_call_filter_exists (optional)
     * @param  string $fax (optional)
     * @param  string $fax2 (optional)
     * @param  bool $fax_exists (optional)
     * @param  string $friend_value (optional)
     * @param  string $friend_value_end (optional)
     * @param  string $friend_value_exact (optional)
     * @param  bool $friend_value_exists (optional)
     * @param  string $friend_value_partial (optional)
     * @param  string $friend_value_start (optional)
     * @param  string $hunt_group (optional)
     * @param  string $hunt_group2 (optional)
     * @param  bool $hunt_group_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $ivr (optional)
     * @param  string $ivr2 (optional)
     * @param  bool $ivr_exists (optional)
     * @param  string $language (optional)
     * @param  string $language2 (optional)
     * @param  bool $language_exists (optional)
     * @param  string $queue (optional)
     * @param  string $queue2 (optional)
     * @param  bool $queue_exists (optional)
     * @param  string $residential_device (optional)
     * @param  string $residential_device2 (optional)
     * @param  bool $residential_device_exists (optional)
     * @param  string $retail_account (optional)
     * @param  string $retail_account2 (optional)
     * @param  bool $retail_account_exists (optional)
     * @param  string $route_type (optional)
     * @param  string $route_type_end (optional)
     * @param  string $route_type_exact (optional)
     * @param  bool $route_type_exists (optional)
     * @param  string $route_type_partial (optional)
     * @param  string $route_type_start (optional)
     * @param  string $user (optional)
     * @param  string $user2 (optional)
     * @param  bool $user_exists (optional)
     * @param  string $_order_ddi (optional)
     * @param  string $_order_ddie164 (optional)
     * @param  string $_order_friend_value (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_route_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDdiCollectionAsyncWithHttpInfo($conditional_route = null, $conditional_route2 = null, $conditional_route_exists = null, $conference_room = null, $conference_room2 = null, $conference_room_exists = null, $country = null, $country2 = null, $country_exists = null, $ddi = null, $ddi_end = null, $ddi_exact = null, $ddi_partial = null, $ddi_start = null, $ddie164 = null, $ddie164_end = null, $ddie164_exact = null, $ddie164_exists = null, $ddie164_partial = null, $ddie164_start = null, $external_call_filter = null, $external_call_filter2 = null, $external_call_filter_exists = null, $fax = null, $fax2 = null, $fax_exists = null, $friend_value = null, $friend_value_end = null, $friend_value_exact = null, $friend_value_exists = null, $friend_value_partial = null, $friend_value_start = null, $hunt_group = null, $hunt_group2 = null, $hunt_group_exists = null, $id_exact = null, $ivr = null, $ivr2 = null, $ivr_exists = null, $language = null, $language2 = null, $language_exists = null, $queue = null, $queue2 = null, $queue_exists = null, $residential_device = null, $residential_device2 = null, $residential_device_exists = null, $retail_account = null, $retail_account2 = null, $retail_account_exists = null, $route_type = null, $route_type_end = null, $route_type_exact = null, $route_type_exists = null, $route_type_partial = null, $route_type_start = null, $user = null, $user2 = null, $user_exists = null, $_order_ddi = null, $_order_ddie164 = null, $_order_friend_value = null, $_order_id = null, $_order_route_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\DdiCollection[]';
        $request = $this->getDdiCollectionRequest($conditional_route, $conditional_route2, $conditional_route_exists, $conference_room, $conference_room2, $conference_room_exists, $country, $country2, $country_exists, $ddi, $ddi_end, $ddi_exact, $ddi_partial, $ddi_start, $ddie164, $ddie164_end, $ddie164_exact, $ddie164_exists, $ddie164_partial, $ddie164_start, $external_call_filter, $external_call_filter2, $external_call_filter_exists, $fax, $fax2, $fax_exists, $friend_value, $friend_value_end, $friend_value_exact, $friend_value_exists, $friend_value_partial, $friend_value_start, $hunt_group, $hunt_group2, $hunt_group_exists, $id_exact, $ivr, $ivr2, $ivr_exists, $language, $language2, $language_exists, $queue, $queue2, $queue_exists, $residential_device, $residential_device2, $residential_device_exists, $retail_account, $retail_account2, $retail_account_exists, $route_type, $route_type_end, $route_type_exact, $route_type_exists, $route_type_partial, $route_type_start, $user, $user2, $user_exists, $_order_ddi, $_order_ddie164, $_order_friend_value, $_order_id, $_order_route_type, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDdiCollection'
     *
     * @param  string $conditional_route (optional)
     * @param  string $conditional_route2 (optional)
     * @param  bool $conditional_route_exists (optional)
     * @param  string $conference_room (optional)
     * @param  string $conference_room2 (optional)
     * @param  bool $conference_room_exists (optional)
     * @param  string $country (optional)
     * @param  string $country2 (optional)
     * @param  bool $country_exists (optional)
     * @param  string $ddi (optional)
     * @param  string $ddi_end (optional)
     * @param  string $ddi_exact (optional)
     * @param  string $ddi_partial (optional)
     * @param  string $ddi_start (optional)
     * @param  string $ddie164 (optional)
     * @param  string $ddie164_end (optional)
     * @param  string $ddie164_exact (optional)
     * @param  bool $ddie164_exists (optional)
     * @param  string $ddie164_partial (optional)
     * @param  string $ddie164_start (optional)
     * @param  string $external_call_filter (optional)
     * @param  string $external_call_filter2 (optional)
     * @param  bool $external_call_filter_exists (optional)
     * @param  string $fax (optional)
     * @param  string $fax2 (optional)
     * @param  bool $fax_exists (optional)
     * @param  string $friend_value (optional)
     * @param  string $friend_value_end (optional)
     * @param  string $friend_value_exact (optional)
     * @param  bool $friend_value_exists (optional)
     * @param  string $friend_value_partial (optional)
     * @param  string $friend_value_start (optional)
     * @param  string $hunt_group (optional)
     * @param  string $hunt_group2 (optional)
     * @param  bool $hunt_group_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $ivr (optional)
     * @param  string $ivr2 (optional)
     * @param  bool $ivr_exists (optional)
     * @param  string $language (optional)
     * @param  string $language2 (optional)
     * @param  bool $language_exists (optional)
     * @param  string $queue (optional)
     * @param  string $queue2 (optional)
     * @param  bool $queue_exists (optional)
     * @param  string $residential_device (optional)
     * @param  string $residential_device2 (optional)
     * @param  bool $residential_device_exists (optional)
     * @param  string $retail_account (optional)
     * @param  string $retail_account2 (optional)
     * @param  bool $retail_account_exists (optional)
     * @param  string $route_type (optional)
     * @param  string $route_type_end (optional)
     * @param  string $route_type_exact (optional)
     * @param  bool $route_type_exists (optional)
     * @param  string $route_type_partial (optional)
     * @param  string $route_type_start (optional)
     * @param  string $user (optional)
     * @param  string $user2 (optional)
     * @param  bool $user_exists (optional)
     * @param  string $_order_ddi (optional)
     * @param  string $_order_ddie164 (optional)
     * @param  string $_order_friend_value (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_route_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDdiCollectionRequest($conditional_route = null, $conditional_route2 = null, $conditional_route_exists = null, $conference_room = null, $conference_room2 = null, $conference_room_exists = null, $country = null, $country2 = null, $country_exists = null, $ddi = null, $ddi_end = null, $ddi_exact = null, $ddi_partial = null, $ddi_start = null, $ddie164 = null, $ddie164_end = null, $ddie164_exact = null, $ddie164_exists = null, $ddie164_partial = null, $ddie164_start = null, $external_call_filter = null, $external_call_filter2 = null, $external_call_filter_exists = null, $fax = null, $fax2 = null, $fax_exists = null, $friend_value = null, $friend_value_end = null, $friend_value_exact = null, $friend_value_exists = null, $friend_value_partial = null, $friend_value_start = null, $hunt_group = null, $hunt_group2 = null, $hunt_group_exists = null, $id_exact = null, $ivr = null, $ivr2 = null, $ivr_exists = null, $language = null, $language2 = null, $language_exists = null, $queue = null, $queue2 = null, $queue_exists = null, $residential_device = null, $residential_device2 = null, $residential_device_exists = null, $retail_account = null, $retail_account2 = null, $retail_account_exists = null, $route_type = null, $route_type_end = null, $route_type_exact = null, $route_type_exists = null, $route_type_partial = null, $route_type_start = null, $user = null, $user2 = null, $user_exists = null, $_order_ddi = null, $_order_ddie164 = null, $_order_friend_value = null, $_order_id = null, $_order_route_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/ddis';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($conditional_route !== null) {
            $queryParams['conditionalRoute'] = ObjectSerializer::toQueryValue($conditional_route);
        }
        // query params
        if ($conditional_route2 !== null) {
            $queryParams['conditionalRoute[]'] = ObjectSerializer::toQueryValue($conditional_route2);
        }
        // query params
        if ($conditional_route_exists !== null) {
            $queryParams['conditionalRoute[exists]'] = ObjectSerializer::toQueryValue($conditional_route_exists);
        }
        // query params
        if ($conference_room !== null) {
            $queryParams['conferenceRoom'] = ObjectSerializer::toQueryValue($conference_room);
        }
        // query params
        if ($conference_room2 !== null) {
            $queryParams['conferenceRoom[]'] = ObjectSerializer::toQueryValue($conference_room2);
        }
        // query params
        if ($conference_room_exists !== null) {
            $queryParams['conferenceRoom[exists]'] = ObjectSerializer::toQueryValue($conference_room_exists);
        }
        // query params
        if ($country !== null) {
            $queryParams['country'] = ObjectSerializer::toQueryValue($country);
        }
        // query params
        if ($country2 !== null) {
            $queryParams['country[]'] = ObjectSerializer::toQueryValue($country2);
        }
        // query params
        if ($country_exists !== null) {
            $queryParams['country[exists]'] = ObjectSerializer::toQueryValue($country_exists);
        }
        // query params
        if ($ddi !== null) {
            $queryParams['ddi'] = ObjectSerializer::toQueryValue($ddi);
        }
        // query params
        if ($ddi_end !== null) {
            $queryParams['ddi[end]'] = ObjectSerializer::toQueryValue($ddi_end);
        }
        // query params
        if ($ddi_exact !== null) {
            $queryParams['ddi[exact]'] = ObjectSerializer::toQueryValue($ddi_exact);
        }
        // query params
        if ($ddi_partial !== null) {
            $queryParams['ddi[partial]'] = ObjectSerializer::toQueryValue($ddi_partial);
        }
        // query params
        if ($ddi_start !== null) {
            $queryParams['ddi[start]'] = ObjectSerializer::toQueryValue($ddi_start);
        }
        // query params
        if ($ddie164 !== null) {
            $queryParams['ddie164'] = ObjectSerializer::toQueryValue($ddie164);
        }
        // query params
        if ($ddie164_end !== null) {
            $queryParams['ddie164[end]'] = ObjectSerializer::toQueryValue($ddie164_end);
        }
        // query params
        if ($ddie164_exact !== null) {
            $queryParams['ddie164[exact]'] = ObjectSerializer::toQueryValue($ddie164_exact);
        }
        // query params
        if ($ddie164_exists !== null) {
            $queryParams['ddie164[exists]'] = ObjectSerializer::toQueryValue($ddie164_exists);
        }
        // query params
        if ($ddie164_partial !== null) {
            $queryParams['ddie164[partial]'] = ObjectSerializer::toQueryValue($ddie164_partial);
        }
        // query params
        if ($ddie164_start !== null) {
            $queryParams['ddie164[start]'] = ObjectSerializer::toQueryValue($ddie164_start);
        }
        // query params
        if ($external_call_filter !== null) {
            $queryParams['externalCallFilter'] = ObjectSerializer::toQueryValue($external_call_filter);
        }
        // query params
        if ($external_call_filter2 !== null) {
            $queryParams['externalCallFilter[]'] = ObjectSerializer::toQueryValue($external_call_filter2);
        }
        // query params
        if ($external_call_filter_exists !== null) {
            $queryParams['externalCallFilter[exists]'] = ObjectSerializer::toQueryValue($external_call_filter_exists);
        }
        // query params
        if ($fax !== null) {
            $queryParams['fax'] = ObjectSerializer::toQueryValue($fax);
        }
        // query params
        if ($fax2 !== null) {
            $queryParams['fax[]'] = ObjectSerializer::toQueryValue($fax2);
        }
        // query params
        if ($fax_exists !== null) {
            $queryParams['fax[exists]'] = ObjectSerializer::toQueryValue($fax_exists);
        }
        // query params
        if ($friend_value !== null) {
            $queryParams['friendValue'] = ObjectSerializer::toQueryValue($friend_value);
        }
        // query params
        if ($friend_value_end !== null) {
            $queryParams['friendValue[end]'] = ObjectSerializer::toQueryValue($friend_value_end);
        }
        // query params
        if ($friend_value_exact !== null) {
            $queryParams['friendValue[exact]'] = ObjectSerializer::toQueryValue($friend_value_exact);
        }
        // query params
        if ($friend_value_exists !== null) {
            $queryParams['friendValue[exists]'] = ObjectSerializer::toQueryValue($friend_value_exists);
        }
        // query params
        if ($friend_value_partial !== null) {
            $queryParams['friendValue[partial]'] = ObjectSerializer::toQueryValue($friend_value_partial);
        }
        // query params
        if ($friend_value_start !== null) {
            $queryParams['friendValue[start]'] = ObjectSerializer::toQueryValue($friend_value_start);
        }
        // query params
        if ($hunt_group !== null) {
            $queryParams['huntGroup'] = ObjectSerializer::toQueryValue($hunt_group);
        }
        // query params
        if ($hunt_group2 !== null) {
            $queryParams['huntGroup[]'] = ObjectSerializer::toQueryValue($hunt_group2);
        }
        // query params
        if ($hunt_group_exists !== null) {
            $queryParams['huntGroup[exists]'] = ObjectSerializer::toQueryValue($hunt_group_exists);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($ivr !== null) {
            $queryParams['ivr'] = ObjectSerializer::toQueryValue($ivr);
        }
        // query params
        if ($ivr2 !== null) {
            $queryParams['ivr[]'] = ObjectSerializer::toQueryValue($ivr2);
        }
        // query params
        if ($ivr_exists !== null) {
            $queryParams['ivr[exists]'] = ObjectSerializer::toQueryValue($ivr_exists);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($language2 !== null) {
            $queryParams['language[]'] = ObjectSerializer::toQueryValue($language2);
        }
        // query params
        if ($language_exists !== null) {
            $queryParams['language[exists]'] = ObjectSerializer::toQueryValue($language_exists);
        }
        // query params
        if ($queue !== null) {
            $queryParams['queue'] = ObjectSerializer::toQueryValue($queue);
        }
        // query params
        if ($queue2 !== null) {
            $queryParams['queue[]'] = ObjectSerializer::toQueryValue($queue2);
        }
        // query params
        if ($queue_exists !== null) {
            $queryParams['queue[exists]'] = ObjectSerializer::toQueryValue($queue_exists);
        }
        // query params
        if ($residential_device !== null) {
            $queryParams['residentialDevice'] = ObjectSerializer::toQueryValue($residential_device);
        }
        // query params
        if ($residential_device2 !== null) {
            $queryParams['residentialDevice[]'] = ObjectSerializer::toQueryValue($residential_device2);
        }
        // query params
        if ($residential_device_exists !== null) {
            $queryParams['residentialDevice[exists]'] = ObjectSerializer::toQueryValue($residential_device_exists);
        }
        // query params
        if ($retail_account !== null) {
            $queryParams['retailAccount'] = ObjectSerializer::toQueryValue($retail_account);
        }
        // query params
        if ($retail_account2 !== null) {
            $queryParams['retailAccount[]'] = ObjectSerializer::toQueryValue($retail_account2);
        }
        // query params
        if ($retail_account_exists !== null) {
            $queryParams['retailAccount[exists]'] = ObjectSerializer::toQueryValue($retail_account_exists);
        }
        // query params
        if ($route_type !== null) {
            $queryParams['routeType'] = ObjectSerializer::toQueryValue($route_type);
        }
        // query params
        if ($route_type_end !== null) {
            $queryParams['routeType[end]'] = ObjectSerializer::toQueryValue($route_type_end);
        }
        // query params
        if ($route_type_exact !== null) {
            $queryParams['routeType[exact]'] = ObjectSerializer::toQueryValue($route_type_exact);
        }
        // query params
        if ($route_type_exists !== null) {
            $queryParams['routeType[exists]'] = ObjectSerializer::toQueryValue($route_type_exists);
        }
        // query params
        if ($route_type_partial !== null) {
            $queryParams['routeType[partial]'] = ObjectSerializer::toQueryValue($route_type_partial);
        }
        // query params
        if ($route_type_start !== null) {
            $queryParams['routeType[start]'] = ObjectSerializer::toQueryValue($route_type_start);
        }
        // query params
        if ($user !== null) {
            $queryParams['user'] = ObjectSerializer::toQueryValue($user);
        }
        // query params
        if ($user2 !== null) {
            $queryParams['user[]'] = ObjectSerializer::toQueryValue($user2);
        }
        // query params
        if ($user_exists !== null) {
            $queryParams['user[exists]'] = ObjectSerializer::toQueryValue($user_exists);
        }
        // query params
        if ($_order_ddi !== null) {
            $queryParams['_order[ddi]'] = ObjectSerializer::toQueryValue($_order_ddi);
        }
        // query params
        if ($_order_ddie164 !== null) {
            $queryParams['_order[ddie164]'] = ObjectSerializer::toQueryValue($_order_ddie164);
        }
        // query params
        if ($_order_friend_value !== null) {
            $queryParams['_order[friendValue]'] = ObjectSerializer::toQueryValue($_order_friend_value);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_route_type !== null) {
            $queryParams['_order[routeType]'] = ObjectSerializer::toQueryValue($_order_route_type);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDdiItem
     *
     * Retrieves a Ddi resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\DdiDetailed
     */
    public function getDdiItem($id)
    {
        list($response) = $this->getDdiItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getDdiItemWithHttpInfo
     *
     * Retrieves a Ddi resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\DdiDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDdiItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\DdiDetailed';
        $request = $this->getDdiItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\DdiDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDdiItemAsync
     *
     * Retrieves a Ddi resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDdiItemAsync($id)
    {
        return $this->getDdiItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDdiItemAsyncWithHttpInfo
     *
     * Retrieves a Ddi resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDdiItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\DdiDetailed';
        $request = $this->getDdiItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDdiItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDdiItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getDdiItem'
            );
        }

        $resourcePath = '/ddis/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getExtensionCollection
     *
     * Retrieves the collection of Extension resources.
     *
     * @param  string $conditional_route conditional_route (optional)
     * @param  string $conditional_route2 conditional_route2 (optional)
     * @param  bool $conditional_route_exists conditional_route_exists (optional)
     * @param  string $conference_room conference_room (optional)
     * @param  string $conference_room2 conference_room2 (optional)
     * @param  bool $conference_room_exists conference_room_exists (optional)
     * @param  string $friend_value friend_value (optional)
     * @param  string $friend_value_end friend_value_end (optional)
     * @param  string $friend_value_exact friend_value_exact (optional)
     * @param  bool $friend_value_exists friend_value_exists (optional)
     * @param  string $friend_value_partial friend_value_partial (optional)
     * @param  string $friend_value_start friend_value_start (optional)
     * @param  string $hunt_group hunt_group (optional)
     * @param  string $hunt_group2 hunt_group2 (optional)
     * @param  bool $hunt_group_exists hunt_group_exists (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $ivr ivr (optional)
     * @param  string $ivr2 ivr2 (optional)
     * @param  bool $ivr_exists ivr_exists (optional)
     * @param  string $number number (optional)
     * @param  string $number_country number_country (optional)
     * @param  string $number_country2 number_country2 (optional)
     * @param  bool $number_country_exists number_country_exists (optional)
     * @param  string $number_value number_value (optional)
     * @param  string $number_value_end number_value_end (optional)
     * @param  string $number_value_exact number_value_exact (optional)
     * @param  bool $number_value_exists number_value_exists (optional)
     * @param  string $number_value_partial number_value_partial (optional)
     * @param  string $number_value_start number_value_start (optional)
     * @param  string $number_end number_end (optional)
     * @param  string $number_exact number_exact (optional)
     * @param  string $number_partial number_partial (optional)
     * @param  string $number_start number_start (optional)
     * @param  string $queue queue (optional)
     * @param  string $queue2 queue2 (optional)
     * @param  bool $queue_exists queue_exists (optional)
     * @param  string $route_type route_type (optional)
     * @param  string $route_type_end route_type_end (optional)
     * @param  string $route_type_exact route_type_exact (optional)
     * @param  bool $route_type_exists route_type_exists (optional)
     * @param  string $route_type_partial route_type_partial (optional)
     * @param  string $route_type_start route_type_start (optional)
     * @param  string $user user (optional)
     * @param  string $user2 user2 (optional)
     * @param  bool $user_exists user_exists (optional)
     * @param  string $_order_friend_value _order_friend_value (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_number_value _order_number_value (optional)
     * @param  string $_order_number _order_number (optional)
     * @param  string $_order_route_type _order_route_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ExtensionCollection[]
     */
    public function getExtensionCollection($conditional_route = null, $conditional_route2 = null, $conditional_route_exists = null, $conference_room = null, $conference_room2 = null, $conference_room_exists = null, $friend_value = null, $friend_value_end = null, $friend_value_exact = null, $friend_value_exists = null, $friend_value_partial = null, $friend_value_start = null, $hunt_group = null, $hunt_group2 = null, $hunt_group_exists = null, $id_exact = null, $ivr = null, $ivr2 = null, $ivr_exists = null, $number = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $number_value = null, $number_value_end = null, $number_value_exact = null, $number_value_exists = null, $number_value_partial = null, $number_value_start = null, $number_end = null, $number_exact = null, $number_partial = null, $number_start = null, $queue = null, $queue2 = null, $queue_exists = null, $route_type = null, $route_type_end = null, $route_type_exact = null, $route_type_exists = null, $route_type_partial = null, $route_type_start = null, $user = null, $user2 = null, $user_exists = null, $_order_friend_value = null, $_order_id = null, $_order_number_value = null, $_order_number = null, $_order_route_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getExtensionCollectionWithHttpInfo($conditional_route, $conditional_route2, $conditional_route_exists, $conference_room, $conference_room2, $conference_room_exists, $friend_value, $friend_value_end, $friend_value_exact, $friend_value_exists, $friend_value_partial, $friend_value_start, $hunt_group, $hunt_group2, $hunt_group_exists, $id_exact, $ivr, $ivr2, $ivr_exists, $number, $number_country, $number_country2, $number_country_exists, $number_value, $number_value_end, $number_value_exact, $number_value_exists, $number_value_partial, $number_value_start, $number_end, $number_exact, $number_partial, $number_start, $queue, $queue2, $queue_exists, $route_type, $route_type_end, $route_type_exact, $route_type_exists, $route_type_partial, $route_type_start, $user, $user2, $user_exists, $_order_friend_value, $_order_id, $_order_number_value, $_order_number, $_order_route_type, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getExtensionCollectionWithHttpInfo
     *
     * Retrieves the collection of Extension resources.
     *
     * @param  string $conditional_route (optional)
     * @param  string $conditional_route2 (optional)
     * @param  bool $conditional_route_exists (optional)
     * @param  string $conference_room (optional)
     * @param  string $conference_room2 (optional)
     * @param  bool $conference_room_exists (optional)
     * @param  string $friend_value (optional)
     * @param  string $friend_value_end (optional)
     * @param  string $friend_value_exact (optional)
     * @param  bool $friend_value_exists (optional)
     * @param  string $friend_value_partial (optional)
     * @param  string $friend_value_start (optional)
     * @param  string $hunt_group (optional)
     * @param  string $hunt_group2 (optional)
     * @param  bool $hunt_group_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $ivr (optional)
     * @param  string $ivr2 (optional)
     * @param  bool $ivr_exists (optional)
     * @param  string $number (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $number_value (optional)
     * @param  string $number_value_end (optional)
     * @param  string $number_value_exact (optional)
     * @param  bool $number_value_exists (optional)
     * @param  string $number_value_partial (optional)
     * @param  string $number_value_start (optional)
     * @param  string $number_end (optional)
     * @param  string $number_exact (optional)
     * @param  string $number_partial (optional)
     * @param  string $number_start (optional)
     * @param  string $queue (optional)
     * @param  string $queue2 (optional)
     * @param  bool $queue_exists (optional)
     * @param  string $route_type (optional)
     * @param  string $route_type_end (optional)
     * @param  string $route_type_exact (optional)
     * @param  bool $route_type_exists (optional)
     * @param  string $route_type_partial (optional)
     * @param  string $route_type_start (optional)
     * @param  string $user (optional)
     * @param  string $user2 (optional)
     * @param  bool $user_exists (optional)
     * @param  string $_order_friend_value (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_number_value (optional)
     * @param  string $_order_number (optional)
     * @param  string $_order_route_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ExtensionCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getExtensionCollectionWithHttpInfo($conditional_route = null, $conditional_route2 = null, $conditional_route_exists = null, $conference_room = null, $conference_room2 = null, $conference_room_exists = null, $friend_value = null, $friend_value_end = null, $friend_value_exact = null, $friend_value_exists = null, $friend_value_partial = null, $friend_value_start = null, $hunt_group = null, $hunt_group2 = null, $hunt_group_exists = null, $id_exact = null, $ivr = null, $ivr2 = null, $ivr_exists = null, $number = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $number_value = null, $number_value_end = null, $number_value_exact = null, $number_value_exists = null, $number_value_partial = null, $number_value_start = null, $number_end = null, $number_exact = null, $number_partial = null, $number_start = null, $queue = null, $queue2 = null, $queue_exists = null, $route_type = null, $route_type_end = null, $route_type_exact = null, $route_type_exists = null, $route_type_partial = null, $route_type_start = null, $user = null, $user2 = null, $user_exists = null, $_order_friend_value = null, $_order_id = null, $_order_number_value = null, $_order_number = null, $_order_route_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ExtensionCollection[]';
        $request = $this->getExtensionCollectionRequest($conditional_route, $conditional_route2, $conditional_route_exists, $conference_room, $conference_room2, $conference_room_exists, $friend_value, $friend_value_end, $friend_value_exact, $friend_value_exists, $friend_value_partial, $friend_value_start, $hunt_group, $hunt_group2, $hunt_group_exists, $id_exact, $ivr, $ivr2, $ivr_exists, $number, $number_country, $number_country2, $number_country_exists, $number_value, $number_value_end, $number_value_exact, $number_value_exists, $number_value_partial, $number_value_start, $number_end, $number_exact, $number_partial, $number_start, $queue, $queue2, $queue_exists, $route_type, $route_type_end, $route_type_exact, $route_type_exists, $route_type_partial, $route_type_start, $user, $user2, $user_exists, $_order_friend_value, $_order_id, $_order_number_value, $_order_number, $_order_route_type, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ExtensionCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getExtensionCollectionAsync
     *
     * Retrieves the collection of Extension resources.
     *
     * @param  string $conditional_route (optional)
     * @param  string $conditional_route2 (optional)
     * @param  bool $conditional_route_exists (optional)
     * @param  string $conference_room (optional)
     * @param  string $conference_room2 (optional)
     * @param  bool $conference_room_exists (optional)
     * @param  string $friend_value (optional)
     * @param  string $friend_value_end (optional)
     * @param  string $friend_value_exact (optional)
     * @param  bool $friend_value_exists (optional)
     * @param  string $friend_value_partial (optional)
     * @param  string $friend_value_start (optional)
     * @param  string $hunt_group (optional)
     * @param  string $hunt_group2 (optional)
     * @param  bool $hunt_group_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $ivr (optional)
     * @param  string $ivr2 (optional)
     * @param  bool $ivr_exists (optional)
     * @param  string $number (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $number_value (optional)
     * @param  string $number_value_end (optional)
     * @param  string $number_value_exact (optional)
     * @param  bool $number_value_exists (optional)
     * @param  string $number_value_partial (optional)
     * @param  string $number_value_start (optional)
     * @param  string $number_end (optional)
     * @param  string $number_exact (optional)
     * @param  string $number_partial (optional)
     * @param  string $number_start (optional)
     * @param  string $queue (optional)
     * @param  string $queue2 (optional)
     * @param  bool $queue_exists (optional)
     * @param  string $route_type (optional)
     * @param  string $route_type_end (optional)
     * @param  string $route_type_exact (optional)
     * @param  bool $route_type_exists (optional)
     * @param  string $route_type_partial (optional)
     * @param  string $route_type_start (optional)
     * @param  string $user (optional)
     * @param  string $user2 (optional)
     * @param  bool $user_exists (optional)
     * @param  string $_order_friend_value (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_number_value (optional)
     * @param  string $_order_number (optional)
     * @param  string $_order_route_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExtensionCollectionAsync($conditional_route = null, $conditional_route2 = null, $conditional_route_exists = null, $conference_room = null, $conference_room2 = null, $conference_room_exists = null, $friend_value = null, $friend_value_end = null, $friend_value_exact = null, $friend_value_exists = null, $friend_value_partial = null, $friend_value_start = null, $hunt_group = null, $hunt_group2 = null, $hunt_group_exists = null, $id_exact = null, $ivr = null, $ivr2 = null, $ivr_exists = null, $number = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $number_value = null, $number_value_end = null, $number_value_exact = null, $number_value_exists = null, $number_value_partial = null, $number_value_start = null, $number_end = null, $number_exact = null, $number_partial = null, $number_start = null, $queue = null, $queue2 = null, $queue_exists = null, $route_type = null, $route_type_end = null, $route_type_exact = null, $route_type_exists = null, $route_type_partial = null, $route_type_start = null, $user = null, $user2 = null, $user_exists = null, $_order_friend_value = null, $_order_id = null, $_order_number_value = null, $_order_number = null, $_order_route_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getExtensionCollectionAsyncWithHttpInfo($conditional_route, $conditional_route2, $conditional_route_exists, $conference_room, $conference_room2, $conference_room_exists, $friend_value, $friend_value_end, $friend_value_exact, $friend_value_exists, $friend_value_partial, $friend_value_start, $hunt_group, $hunt_group2, $hunt_group_exists, $id_exact, $ivr, $ivr2, $ivr_exists, $number, $number_country, $number_country2, $number_country_exists, $number_value, $number_value_end, $number_value_exact, $number_value_exists, $number_value_partial, $number_value_start, $number_end, $number_exact, $number_partial, $number_start, $queue, $queue2, $queue_exists, $route_type, $route_type_end, $route_type_exact, $route_type_exists, $route_type_partial, $route_type_start, $user, $user2, $user_exists, $_order_friend_value, $_order_id, $_order_number_value, $_order_number, $_order_route_type, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getExtensionCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of Extension resources.
     *
     * @param  string $conditional_route (optional)
     * @param  string $conditional_route2 (optional)
     * @param  bool $conditional_route_exists (optional)
     * @param  string $conference_room (optional)
     * @param  string $conference_room2 (optional)
     * @param  bool $conference_room_exists (optional)
     * @param  string $friend_value (optional)
     * @param  string $friend_value_end (optional)
     * @param  string $friend_value_exact (optional)
     * @param  bool $friend_value_exists (optional)
     * @param  string $friend_value_partial (optional)
     * @param  string $friend_value_start (optional)
     * @param  string $hunt_group (optional)
     * @param  string $hunt_group2 (optional)
     * @param  bool $hunt_group_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $ivr (optional)
     * @param  string $ivr2 (optional)
     * @param  bool $ivr_exists (optional)
     * @param  string $number (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $number_value (optional)
     * @param  string $number_value_end (optional)
     * @param  string $number_value_exact (optional)
     * @param  bool $number_value_exists (optional)
     * @param  string $number_value_partial (optional)
     * @param  string $number_value_start (optional)
     * @param  string $number_end (optional)
     * @param  string $number_exact (optional)
     * @param  string $number_partial (optional)
     * @param  string $number_start (optional)
     * @param  string $queue (optional)
     * @param  string $queue2 (optional)
     * @param  bool $queue_exists (optional)
     * @param  string $route_type (optional)
     * @param  string $route_type_end (optional)
     * @param  string $route_type_exact (optional)
     * @param  bool $route_type_exists (optional)
     * @param  string $route_type_partial (optional)
     * @param  string $route_type_start (optional)
     * @param  string $user (optional)
     * @param  string $user2 (optional)
     * @param  bool $user_exists (optional)
     * @param  string $_order_friend_value (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_number_value (optional)
     * @param  string $_order_number (optional)
     * @param  string $_order_route_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExtensionCollectionAsyncWithHttpInfo($conditional_route = null, $conditional_route2 = null, $conditional_route_exists = null, $conference_room = null, $conference_room2 = null, $conference_room_exists = null, $friend_value = null, $friend_value_end = null, $friend_value_exact = null, $friend_value_exists = null, $friend_value_partial = null, $friend_value_start = null, $hunt_group = null, $hunt_group2 = null, $hunt_group_exists = null, $id_exact = null, $ivr = null, $ivr2 = null, $ivr_exists = null, $number = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $number_value = null, $number_value_end = null, $number_value_exact = null, $number_value_exists = null, $number_value_partial = null, $number_value_start = null, $number_end = null, $number_exact = null, $number_partial = null, $number_start = null, $queue = null, $queue2 = null, $queue_exists = null, $route_type = null, $route_type_end = null, $route_type_exact = null, $route_type_exists = null, $route_type_partial = null, $route_type_start = null, $user = null, $user2 = null, $user_exists = null, $_order_friend_value = null, $_order_id = null, $_order_number_value = null, $_order_number = null, $_order_route_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ExtensionCollection[]';
        $request = $this->getExtensionCollectionRequest($conditional_route, $conditional_route2, $conditional_route_exists, $conference_room, $conference_room2, $conference_room_exists, $friend_value, $friend_value_end, $friend_value_exact, $friend_value_exists, $friend_value_partial, $friend_value_start, $hunt_group, $hunt_group2, $hunt_group_exists, $id_exact, $ivr, $ivr2, $ivr_exists, $number, $number_country, $number_country2, $number_country_exists, $number_value, $number_value_end, $number_value_exact, $number_value_exists, $number_value_partial, $number_value_start, $number_end, $number_exact, $number_partial, $number_start, $queue, $queue2, $queue_exists, $route_type, $route_type_end, $route_type_exact, $route_type_exists, $route_type_partial, $route_type_start, $user, $user2, $user_exists, $_order_friend_value, $_order_id, $_order_number_value, $_order_number, $_order_route_type, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getExtensionCollection'
     *
     * @param  string $conditional_route (optional)
     * @param  string $conditional_route2 (optional)
     * @param  bool $conditional_route_exists (optional)
     * @param  string $conference_room (optional)
     * @param  string $conference_room2 (optional)
     * @param  bool $conference_room_exists (optional)
     * @param  string $friend_value (optional)
     * @param  string $friend_value_end (optional)
     * @param  string $friend_value_exact (optional)
     * @param  bool $friend_value_exists (optional)
     * @param  string $friend_value_partial (optional)
     * @param  string $friend_value_start (optional)
     * @param  string $hunt_group (optional)
     * @param  string $hunt_group2 (optional)
     * @param  bool $hunt_group_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $ivr (optional)
     * @param  string $ivr2 (optional)
     * @param  bool $ivr_exists (optional)
     * @param  string $number (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $number_value (optional)
     * @param  string $number_value_end (optional)
     * @param  string $number_value_exact (optional)
     * @param  bool $number_value_exists (optional)
     * @param  string $number_value_partial (optional)
     * @param  string $number_value_start (optional)
     * @param  string $number_end (optional)
     * @param  string $number_exact (optional)
     * @param  string $number_partial (optional)
     * @param  string $number_start (optional)
     * @param  string $queue (optional)
     * @param  string $queue2 (optional)
     * @param  bool $queue_exists (optional)
     * @param  string $route_type (optional)
     * @param  string $route_type_end (optional)
     * @param  string $route_type_exact (optional)
     * @param  bool $route_type_exists (optional)
     * @param  string $route_type_partial (optional)
     * @param  string $route_type_start (optional)
     * @param  string $user (optional)
     * @param  string $user2 (optional)
     * @param  bool $user_exists (optional)
     * @param  string $_order_friend_value (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_number_value (optional)
     * @param  string $_order_number (optional)
     * @param  string $_order_route_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getExtensionCollectionRequest($conditional_route = null, $conditional_route2 = null, $conditional_route_exists = null, $conference_room = null, $conference_room2 = null, $conference_room_exists = null, $friend_value = null, $friend_value_end = null, $friend_value_exact = null, $friend_value_exists = null, $friend_value_partial = null, $friend_value_start = null, $hunt_group = null, $hunt_group2 = null, $hunt_group_exists = null, $id_exact = null, $ivr = null, $ivr2 = null, $ivr_exists = null, $number = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $number_value = null, $number_value_end = null, $number_value_exact = null, $number_value_exists = null, $number_value_partial = null, $number_value_start = null, $number_end = null, $number_exact = null, $number_partial = null, $number_start = null, $queue = null, $queue2 = null, $queue_exists = null, $route_type = null, $route_type_end = null, $route_type_exact = null, $route_type_exists = null, $route_type_partial = null, $route_type_start = null, $user = null, $user2 = null, $user_exists = null, $_order_friend_value = null, $_order_id = null, $_order_number_value = null, $_order_number = null, $_order_route_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/extensions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($conditional_route !== null) {
            $queryParams['conditionalRoute'] = ObjectSerializer::toQueryValue($conditional_route);
        }
        // query params
        if ($conditional_route2 !== null) {
            $queryParams['conditionalRoute[]'] = ObjectSerializer::toQueryValue($conditional_route2);
        }
        // query params
        if ($conditional_route_exists !== null) {
            $queryParams['conditionalRoute[exists]'] = ObjectSerializer::toQueryValue($conditional_route_exists);
        }
        // query params
        if ($conference_room !== null) {
            $queryParams['conferenceRoom'] = ObjectSerializer::toQueryValue($conference_room);
        }
        // query params
        if ($conference_room2 !== null) {
            $queryParams['conferenceRoom[]'] = ObjectSerializer::toQueryValue($conference_room2);
        }
        // query params
        if ($conference_room_exists !== null) {
            $queryParams['conferenceRoom[exists]'] = ObjectSerializer::toQueryValue($conference_room_exists);
        }
        // query params
        if ($friend_value !== null) {
            $queryParams['friendValue'] = ObjectSerializer::toQueryValue($friend_value);
        }
        // query params
        if ($friend_value_end !== null) {
            $queryParams['friendValue[end]'] = ObjectSerializer::toQueryValue($friend_value_end);
        }
        // query params
        if ($friend_value_exact !== null) {
            $queryParams['friendValue[exact]'] = ObjectSerializer::toQueryValue($friend_value_exact);
        }
        // query params
        if ($friend_value_exists !== null) {
            $queryParams['friendValue[exists]'] = ObjectSerializer::toQueryValue($friend_value_exists);
        }
        // query params
        if ($friend_value_partial !== null) {
            $queryParams['friendValue[partial]'] = ObjectSerializer::toQueryValue($friend_value_partial);
        }
        // query params
        if ($friend_value_start !== null) {
            $queryParams['friendValue[start]'] = ObjectSerializer::toQueryValue($friend_value_start);
        }
        // query params
        if ($hunt_group !== null) {
            $queryParams['huntGroup'] = ObjectSerializer::toQueryValue($hunt_group);
        }
        // query params
        if ($hunt_group2 !== null) {
            $queryParams['huntGroup[]'] = ObjectSerializer::toQueryValue($hunt_group2);
        }
        // query params
        if ($hunt_group_exists !== null) {
            $queryParams['huntGroup[exists]'] = ObjectSerializer::toQueryValue($hunt_group_exists);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($ivr !== null) {
            $queryParams['ivr'] = ObjectSerializer::toQueryValue($ivr);
        }
        // query params
        if ($ivr2 !== null) {
            $queryParams['ivr[]'] = ObjectSerializer::toQueryValue($ivr2);
        }
        // query params
        if ($ivr_exists !== null) {
            $queryParams['ivr[exists]'] = ObjectSerializer::toQueryValue($ivr_exists);
        }
        // query params
        if ($number !== null) {
            $queryParams['number'] = ObjectSerializer::toQueryValue($number);
        }
        // query params
        if ($number_country !== null) {
            $queryParams['numberCountry'] = ObjectSerializer::toQueryValue($number_country);
        }
        // query params
        if ($number_country2 !== null) {
            $queryParams['numberCountry[]'] = ObjectSerializer::toQueryValue($number_country2);
        }
        // query params
        if ($number_country_exists !== null) {
            $queryParams['numberCountry[exists]'] = ObjectSerializer::toQueryValue($number_country_exists);
        }
        // query params
        if ($number_value !== null) {
            $queryParams['numberValue'] = ObjectSerializer::toQueryValue($number_value);
        }
        // query params
        if ($number_value_end !== null) {
            $queryParams['numberValue[end]'] = ObjectSerializer::toQueryValue($number_value_end);
        }
        // query params
        if ($number_value_exact !== null) {
            $queryParams['numberValue[exact]'] = ObjectSerializer::toQueryValue($number_value_exact);
        }
        // query params
        if ($number_value_exists !== null) {
            $queryParams['numberValue[exists]'] = ObjectSerializer::toQueryValue($number_value_exists);
        }
        // query params
        if ($number_value_partial !== null) {
            $queryParams['numberValue[partial]'] = ObjectSerializer::toQueryValue($number_value_partial);
        }
        // query params
        if ($number_value_start !== null) {
            $queryParams['numberValue[start]'] = ObjectSerializer::toQueryValue($number_value_start);
        }
        // query params
        if ($number_end !== null) {
            $queryParams['number[end]'] = ObjectSerializer::toQueryValue($number_end);
        }
        // query params
        if ($number_exact !== null) {
            $queryParams['number[exact]'] = ObjectSerializer::toQueryValue($number_exact);
        }
        // query params
        if ($number_partial !== null) {
            $queryParams['number[partial]'] = ObjectSerializer::toQueryValue($number_partial);
        }
        // query params
        if ($number_start !== null) {
            $queryParams['number[start]'] = ObjectSerializer::toQueryValue($number_start);
        }
        // query params
        if ($queue !== null) {
            $queryParams['queue'] = ObjectSerializer::toQueryValue($queue);
        }
        // query params
        if ($queue2 !== null) {
            $queryParams['queue[]'] = ObjectSerializer::toQueryValue($queue2);
        }
        // query params
        if ($queue_exists !== null) {
            $queryParams['queue[exists]'] = ObjectSerializer::toQueryValue($queue_exists);
        }
        // query params
        if ($route_type !== null) {
            $queryParams['routeType'] = ObjectSerializer::toQueryValue($route_type);
        }
        // query params
        if ($route_type_end !== null) {
            $queryParams['routeType[end]'] = ObjectSerializer::toQueryValue($route_type_end);
        }
        // query params
        if ($route_type_exact !== null) {
            $queryParams['routeType[exact]'] = ObjectSerializer::toQueryValue($route_type_exact);
        }
        // query params
        if ($route_type_exists !== null) {
            $queryParams['routeType[exists]'] = ObjectSerializer::toQueryValue($route_type_exists);
        }
        // query params
        if ($route_type_partial !== null) {
            $queryParams['routeType[partial]'] = ObjectSerializer::toQueryValue($route_type_partial);
        }
        // query params
        if ($route_type_start !== null) {
            $queryParams['routeType[start]'] = ObjectSerializer::toQueryValue($route_type_start);
        }
        // query params
        if ($user !== null) {
            $queryParams['user'] = ObjectSerializer::toQueryValue($user);
        }
        // query params
        if ($user2 !== null) {
            $queryParams['user[]'] = ObjectSerializer::toQueryValue($user2);
        }
        // query params
        if ($user_exists !== null) {
            $queryParams['user[exists]'] = ObjectSerializer::toQueryValue($user_exists);
        }
        // query params
        if ($_order_friend_value !== null) {
            $queryParams['_order[friendValue]'] = ObjectSerializer::toQueryValue($_order_friend_value);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_number_value !== null) {
            $queryParams['_order[numberValue]'] = ObjectSerializer::toQueryValue($_order_number_value);
        }
        // query params
        if ($_order_number !== null) {
            $queryParams['_order[number]'] = ObjectSerializer::toQueryValue($_order_number);
        }
        // query params
        if ($_order_route_type !== null) {
            $queryParams['_order[routeType]'] = ObjectSerializer::toQueryValue($_order_route_type);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getExtensionItem
     *
     * Retrieves a Extension resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ExtensionDetailed
     */
    public function getExtensionItem($id)
    {
        list($response) = $this->getExtensionItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getExtensionItemWithHttpInfo
     *
     * Retrieves a Extension resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ExtensionDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getExtensionItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ExtensionDetailed';
        $request = $this->getExtensionItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ExtensionDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getExtensionItemAsync
     *
     * Retrieves a Extension resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExtensionItemAsync($id)
    {
        return $this->getExtensionItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getExtensionItemAsyncWithHttpInfo
     *
     * Retrieves a Extension resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExtensionItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ExtensionDetailed';
        $request = $this->getExtensionItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getExtensionItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getExtensionItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getExtensionItem'
            );
        }

        $resourcePath = '/extensions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getExternalCallFilterBlackListCollection
     *
     * Retrieves the collection of ExternalCallFilterBlackList resources.
     *
     * @param  string $filter filter (optional)
     * @param  int $filter_holiday_extension filter_holiday_extension (optional)
     * @param  int $filter_holiday_locution filter_holiday_locution (optional)
     * @param  int $filter_holiday_number_country filter_holiday_number_country (optional)
     * @param  string $filter_holiday_number_value filter_holiday_number_value (optional)
     * @param  string $filter_holiday_target_type filter_holiday_target_type (optional)
     * @param  int $filter_holiday_voice_mail_user filter_holiday_voice_mail_user (optional)
     * @param  string $filter_name filter_name (optional)
     * @param  int $filter_out_of_schedule_extension filter_out_of_schedule_extension (optional)
     * @param  int $filter_out_of_schedule_locution filter_out_of_schedule_locution (optional)
     * @param  int $filter_out_of_schedule_number_country filter_out_of_schedule_number_country (optional)
     * @param  string $filter_out_of_schedule_number_value filter_out_of_schedule_number_value (optional)
     * @param  string $filter_out_of_schedule_target_type filter_out_of_schedule_target_type (optional)
     * @param  int $filter_out_of_schedule_voice_mail_user filter_out_of_schedule_voice_mail_user (optional)
     * @param  int $filter_welcome_locution filter_welcome_locution (optional)
     * @param  string $filter2 filter2 (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $matchlist matchlist (optional)
     * @param  string $matchlist_name matchlist_name (optional)
     * @param  string $matchlist2 matchlist2 (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ExternalCallFilterBlackListDetailedCollection[]
     */
    public function getExternalCallFilterBlackListCollection($filter = null, $filter_holiday_extension = null, $filter_holiday_locution = null, $filter_holiday_number_country = null, $filter_holiday_number_value = null, $filter_holiday_target_type = null, $filter_holiday_voice_mail_user = null, $filter_name = null, $filter_out_of_schedule_extension = null, $filter_out_of_schedule_locution = null, $filter_out_of_schedule_number_country = null, $filter_out_of_schedule_number_value = null, $filter_out_of_schedule_target_type = null, $filter_out_of_schedule_voice_mail_user = null, $filter_welcome_locution = null, $filter2 = null, $id_exact = null, $matchlist = null, $matchlist_name = null, $matchlist2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getExternalCallFilterBlackListCollectionWithHttpInfo($filter, $filter_holiday_extension, $filter_holiday_locution, $filter_holiday_number_country, $filter_holiday_number_value, $filter_holiday_target_type, $filter_holiday_voice_mail_user, $filter_name, $filter_out_of_schedule_extension, $filter_out_of_schedule_locution, $filter_out_of_schedule_number_country, $filter_out_of_schedule_number_value, $filter_out_of_schedule_target_type, $filter_out_of_schedule_voice_mail_user, $filter_welcome_locution, $filter2, $id_exact, $matchlist, $matchlist_name, $matchlist2, $_order_id, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getExternalCallFilterBlackListCollectionWithHttpInfo
     *
     * Retrieves the collection of ExternalCallFilterBlackList resources.
     *
     * @param  string $filter (optional)
     * @param  int $filter_holiday_extension (optional)
     * @param  int $filter_holiday_locution (optional)
     * @param  int $filter_holiday_number_country (optional)
     * @param  string $filter_holiday_number_value (optional)
     * @param  string $filter_holiday_target_type (optional)
     * @param  int $filter_holiday_voice_mail_user (optional)
     * @param  string $filter_name (optional)
     * @param  int $filter_out_of_schedule_extension (optional)
     * @param  int $filter_out_of_schedule_locution (optional)
     * @param  int $filter_out_of_schedule_number_country (optional)
     * @param  string $filter_out_of_schedule_number_value (optional)
     * @param  string $filter_out_of_schedule_target_type (optional)
     * @param  int $filter_out_of_schedule_voice_mail_user (optional)
     * @param  int $filter_welcome_locution (optional)
     * @param  string $filter2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $matchlist (optional)
     * @param  string $matchlist_name (optional)
     * @param  string $matchlist2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ExternalCallFilterBlackListDetailedCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getExternalCallFilterBlackListCollectionWithHttpInfo($filter = null, $filter_holiday_extension = null, $filter_holiday_locution = null, $filter_holiday_number_country = null, $filter_holiday_number_value = null, $filter_holiday_target_type = null, $filter_holiday_voice_mail_user = null, $filter_name = null, $filter_out_of_schedule_extension = null, $filter_out_of_schedule_locution = null, $filter_out_of_schedule_number_country = null, $filter_out_of_schedule_number_value = null, $filter_out_of_schedule_target_type = null, $filter_out_of_schedule_voice_mail_user = null, $filter_welcome_locution = null, $filter2 = null, $id_exact = null, $matchlist = null, $matchlist_name = null, $matchlist2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterBlackListDetailedCollection[]';
        $request = $this->getExternalCallFilterBlackListCollectionRequest($filter, $filter_holiday_extension, $filter_holiday_locution, $filter_holiday_number_country, $filter_holiday_number_value, $filter_holiday_target_type, $filter_holiday_voice_mail_user, $filter_name, $filter_out_of_schedule_extension, $filter_out_of_schedule_locution, $filter_out_of_schedule_number_country, $filter_out_of_schedule_number_value, $filter_out_of_schedule_target_type, $filter_out_of_schedule_voice_mail_user, $filter_welcome_locution, $filter2, $id_exact, $matchlist, $matchlist_name, $matchlist2, $_order_id, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ExternalCallFilterBlackListDetailedCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getExternalCallFilterBlackListCollectionAsync
     *
     * Retrieves the collection of ExternalCallFilterBlackList resources.
     *
     * @param  string $filter (optional)
     * @param  int $filter_holiday_extension (optional)
     * @param  int $filter_holiday_locution (optional)
     * @param  int $filter_holiday_number_country (optional)
     * @param  string $filter_holiday_number_value (optional)
     * @param  string $filter_holiday_target_type (optional)
     * @param  int $filter_holiday_voice_mail_user (optional)
     * @param  string $filter_name (optional)
     * @param  int $filter_out_of_schedule_extension (optional)
     * @param  int $filter_out_of_schedule_locution (optional)
     * @param  int $filter_out_of_schedule_number_country (optional)
     * @param  string $filter_out_of_schedule_number_value (optional)
     * @param  string $filter_out_of_schedule_target_type (optional)
     * @param  int $filter_out_of_schedule_voice_mail_user (optional)
     * @param  int $filter_welcome_locution (optional)
     * @param  string $filter2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $matchlist (optional)
     * @param  string $matchlist_name (optional)
     * @param  string $matchlist2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExternalCallFilterBlackListCollectionAsync($filter = null, $filter_holiday_extension = null, $filter_holiday_locution = null, $filter_holiday_number_country = null, $filter_holiday_number_value = null, $filter_holiday_target_type = null, $filter_holiday_voice_mail_user = null, $filter_name = null, $filter_out_of_schedule_extension = null, $filter_out_of_schedule_locution = null, $filter_out_of_schedule_number_country = null, $filter_out_of_schedule_number_value = null, $filter_out_of_schedule_target_type = null, $filter_out_of_schedule_voice_mail_user = null, $filter_welcome_locution = null, $filter2 = null, $id_exact = null, $matchlist = null, $matchlist_name = null, $matchlist2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getExternalCallFilterBlackListCollectionAsyncWithHttpInfo($filter, $filter_holiday_extension, $filter_holiday_locution, $filter_holiday_number_country, $filter_holiday_number_value, $filter_holiday_target_type, $filter_holiday_voice_mail_user, $filter_name, $filter_out_of_schedule_extension, $filter_out_of_schedule_locution, $filter_out_of_schedule_number_country, $filter_out_of_schedule_number_value, $filter_out_of_schedule_target_type, $filter_out_of_schedule_voice_mail_user, $filter_welcome_locution, $filter2, $id_exact, $matchlist, $matchlist_name, $matchlist2, $_order_id, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getExternalCallFilterBlackListCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of ExternalCallFilterBlackList resources.
     *
     * @param  string $filter (optional)
     * @param  int $filter_holiday_extension (optional)
     * @param  int $filter_holiday_locution (optional)
     * @param  int $filter_holiday_number_country (optional)
     * @param  string $filter_holiday_number_value (optional)
     * @param  string $filter_holiday_target_type (optional)
     * @param  int $filter_holiday_voice_mail_user (optional)
     * @param  string $filter_name (optional)
     * @param  int $filter_out_of_schedule_extension (optional)
     * @param  int $filter_out_of_schedule_locution (optional)
     * @param  int $filter_out_of_schedule_number_country (optional)
     * @param  string $filter_out_of_schedule_number_value (optional)
     * @param  string $filter_out_of_schedule_target_type (optional)
     * @param  int $filter_out_of_schedule_voice_mail_user (optional)
     * @param  int $filter_welcome_locution (optional)
     * @param  string $filter2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $matchlist (optional)
     * @param  string $matchlist_name (optional)
     * @param  string $matchlist2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExternalCallFilterBlackListCollectionAsyncWithHttpInfo($filter = null, $filter_holiday_extension = null, $filter_holiday_locution = null, $filter_holiday_number_country = null, $filter_holiday_number_value = null, $filter_holiday_target_type = null, $filter_holiday_voice_mail_user = null, $filter_name = null, $filter_out_of_schedule_extension = null, $filter_out_of_schedule_locution = null, $filter_out_of_schedule_number_country = null, $filter_out_of_schedule_number_value = null, $filter_out_of_schedule_target_type = null, $filter_out_of_schedule_voice_mail_user = null, $filter_welcome_locution = null, $filter2 = null, $id_exact = null, $matchlist = null, $matchlist_name = null, $matchlist2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterBlackListDetailedCollection[]';
        $request = $this->getExternalCallFilterBlackListCollectionRequest($filter, $filter_holiday_extension, $filter_holiday_locution, $filter_holiday_number_country, $filter_holiday_number_value, $filter_holiday_target_type, $filter_holiday_voice_mail_user, $filter_name, $filter_out_of_schedule_extension, $filter_out_of_schedule_locution, $filter_out_of_schedule_number_country, $filter_out_of_schedule_number_value, $filter_out_of_schedule_target_type, $filter_out_of_schedule_voice_mail_user, $filter_welcome_locution, $filter2, $id_exact, $matchlist, $matchlist_name, $matchlist2, $_order_id, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getExternalCallFilterBlackListCollection'
     *
     * @param  string $filter (optional)
     * @param  int $filter_holiday_extension (optional)
     * @param  int $filter_holiday_locution (optional)
     * @param  int $filter_holiday_number_country (optional)
     * @param  string $filter_holiday_number_value (optional)
     * @param  string $filter_holiday_target_type (optional)
     * @param  int $filter_holiday_voice_mail_user (optional)
     * @param  string $filter_name (optional)
     * @param  int $filter_out_of_schedule_extension (optional)
     * @param  int $filter_out_of_schedule_locution (optional)
     * @param  int $filter_out_of_schedule_number_country (optional)
     * @param  string $filter_out_of_schedule_number_value (optional)
     * @param  string $filter_out_of_schedule_target_type (optional)
     * @param  int $filter_out_of_schedule_voice_mail_user (optional)
     * @param  int $filter_welcome_locution (optional)
     * @param  string $filter2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $matchlist (optional)
     * @param  string $matchlist_name (optional)
     * @param  string $matchlist2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getExternalCallFilterBlackListCollectionRequest($filter = null, $filter_holiday_extension = null, $filter_holiday_locution = null, $filter_holiday_number_country = null, $filter_holiday_number_value = null, $filter_holiday_target_type = null, $filter_holiday_voice_mail_user = null, $filter_name = null, $filter_out_of_schedule_extension = null, $filter_out_of_schedule_locution = null, $filter_out_of_schedule_number_country = null, $filter_out_of_schedule_number_value = null, $filter_out_of_schedule_target_type = null, $filter_out_of_schedule_voice_mail_user = null, $filter_welcome_locution = null, $filter2 = null, $id_exact = null, $matchlist = null, $matchlist_name = null, $matchlist2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/external_call_filter_black_lists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($filter_holiday_extension !== null) {
            $queryParams['filter.holidayExtension'] = ObjectSerializer::toQueryValue($filter_holiday_extension);
        }
        // query params
        if ($filter_holiday_locution !== null) {
            $queryParams['filter.holidayLocution'] = ObjectSerializer::toQueryValue($filter_holiday_locution);
        }
        // query params
        if ($filter_holiday_number_country !== null) {
            $queryParams['filter.holidayNumberCountry'] = ObjectSerializer::toQueryValue($filter_holiday_number_country);
        }
        // query params
        if ($filter_holiday_number_value !== null) {
            $queryParams['filter.holidayNumberValue'] = ObjectSerializer::toQueryValue($filter_holiday_number_value);
        }
        // query params
        if ($filter_holiday_target_type !== null) {
            $queryParams['filter.holidayTargetType'] = ObjectSerializer::toQueryValue($filter_holiday_target_type);
        }
        // query params
        if ($filter_holiday_voice_mail_user !== null) {
            $queryParams['filter.holidayVoiceMailUser'] = ObjectSerializer::toQueryValue($filter_holiday_voice_mail_user);
        }
        // query params
        if ($filter_name !== null) {
            $queryParams['filter.name'] = ObjectSerializer::toQueryValue($filter_name);
        }
        // query params
        if ($filter_out_of_schedule_extension !== null) {
            $queryParams['filter.outOfScheduleExtension'] = ObjectSerializer::toQueryValue($filter_out_of_schedule_extension);
        }
        // query params
        if ($filter_out_of_schedule_locution !== null) {
            $queryParams['filter.outOfScheduleLocution'] = ObjectSerializer::toQueryValue($filter_out_of_schedule_locution);
        }
        // query params
        if ($filter_out_of_schedule_number_country !== null) {
            $queryParams['filter.outOfScheduleNumberCountry'] = ObjectSerializer::toQueryValue($filter_out_of_schedule_number_country);
        }
        // query params
        if ($filter_out_of_schedule_number_value !== null) {
            $queryParams['filter.outOfScheduleNumberValue'] = ObjectSerializer::toQueryValue($filter_out_of_schedule_number_value);
        }
        // query params
        if ($filter_out_of_schedule_target_type !== null) {
            $queryParams['filter.outOfScheduleTargetType'] = ObjectSerializer::toQueryValue($filter_out_of_schedule_target_type);
        }
        // query params
        if ($filter_out_of_schedule_voice_mail_user !== null) {
            $queryParams['filter.outOfScheduleVoiceMailUser'] = ObjectSerializer::toQueryValue($filter_out_of_schedule_voice_mail_user);
        }
        // query params
        if ($filter_welcome_locution !== null) {
            $queryParams['filter.welcomeLocution'] = ObjectSerializer::toQueryValue($filter_welcome_locution);
        }
        // query params
        if ($filter2 !== null) {
            $queryParams['filter[]'] = ObjectSerializer::toQueryValue($filter2);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($matchlist !== null) {
            $queryParams['matchlist'] = ObjectSerializer::toQueryValue($matchlist);
        }
        // query params
        if ($matchlist_name !== null) {
            $queryParams['matchlist.name'] = ObjectSerializer::toQueryValue($matchlist_name);
        }
        // query params
        if ($matchlist2 !== null) {
            $queryParams['matchlist[]'] = ObjectSerializer::toQueryValue($matchlist2);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getExternalCallFilterBlackListItem
     *
     * Retrieves a ExternalCallFilterBlackList resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ExternalCallFilterBlackListDetailed
     */
    public function getExternalCallFilterBlackListItem($id)
    {
        list($response) = $this->getExternalCallFilterBlackListItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getExternalCallFilterBlackListItemWithHttpInfo
     *
     * Retrieves a ExternalCallFilterBlackList resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ExternalCallFilterBlackListDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getExternalCallFilterBlackListItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterBlackListDetailed';
        $request = $this->getExternalCallFilterBlackListItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ExternalCallFilterBlackListDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getExternalCallFilterBlackListItemAsync
     *
     * Retrieves a ExternalCallFilterBlackList resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExternalCallFilterBlackListItemAsync($id)
    {
        return $this->getExternalCallFilterBlackListItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getExternalCallFilterBlackListItemAsyncWithHttpInfo
     *
     * Retrieves a ExternalCallFilterBlackList resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExternalCallFilterBlackListItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterBlackListDetailed';
        $request = $this->getExternalCallFilterBlackListItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getExternalCallFilterBlackListItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getExternalCallFilterBlackListItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getExternalCallFilterBlackListItem'
            );
        }

        $resourcePath = '/external_call_filter_black_lists/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getExternalCallFilterCollection
     *
     * Retrieves the collection of ExternalCallFilter resources.
     *
     * @param  string $holiday_extension holiday_extension (optional)
     * @param  string $holiday_extension2 holiday_extension2 (optional)
     * @param  bool $holiday_extension_exists holiday_extension_exists (optional)
     * @param  string $holiday_locution holiday_locution (optional)
     * @param  string $holiday_locution2 holiday_locution2 (optional)
     * @param  bool $holiday_locution_exists holiday_locution_exists (optional)
     * @param  string $holiday_number_country holiday_number_country (optional)
     * @param  string $holiday_number_country2 holiday_number_country2 (optional)
     * @param  bool $holiday_number_country_exists holiday_number_country_exists (optional)
     * @param  string $holiday_number_value holiday_number_value (optional)
     * @param  string $holiday_number_value_end holiday_number_value_end (optional)
     * @param  string $holiday_number_value_exact holiday_number_value_exact (optional)
     * @param  bool $holiday_number_value_exists holiday_number_value_exists (optional)
     * @param  string $holiday_number_value_partial holiday_number_value_partial (optional)
     * @param  string $holiday_number_value_start holiday_number_value_start (optional)
     * @param  string $holiday_target_type holiday_target_type (optional)
     * @param  string $holiday_target_type_end holiday_target_type_end (optional)
     * @param  string $holiday_target_type_exact holiday_target_type_exact (optional)
     * @param  bool $holiday_target_type_exists holiday_target_type_exists (optional)
     * @param  string $holiday_target_type_partial holiday_target_type_partial (optional)
     * @param  string $holiday_target_type_start holiday_target_type_start (optional)
     * @param  string $holiday_voice_mail_user holiday_voice_mail_user (optional)
     * @param  string $holiday_voice_mail_user2 holiday_voice_mail_user2 (optional)
     * @param  bool $holiday_voice_mail_user_exists holiday_voice_mail_user_exists (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $name name (optional)
     * @param  string $name_end name_end (optional)
     * @param  string $name_exact name_exact (optional)
     * @param  string $name_partial name_partial (optional)
     * @param  string $name_start name_start (optional)
     * @param  string $out_of_schedule_extension out_of_schedule_extension (optional)
     * @param  string $out_of_schedule_extension2 out_of_schedule_extension2 (optional)
     * @param  bool $out_of_schedule_extension_exists out_of_schedule_extension_exists (optional)
     * @param  string $out_of_schedule_locution out_of_schedule_locution (optional)
     * @param  string $out_of_schedule_locution2 out_of_schedule_locution2 (optional)
     * @param  bool $out_of_schedule_locution_exists out_of_schedule_locution_exists (optional)
     * @param  string $out_of_schedule_number_country out_of_schedule_number_country (optional)
     * @param  string $out_of_schedule_number_country2 out_of_schedule_number_country2 (optional)
     * @param  bool $out_of_schedule_number_country_exists out_of_schedule_number_country_exists (optional)
     * @param  string $out_of_schedule_number_value out_of_schedule_number_value (optional)
     * @param  string $out_of_schedule_number_value_end out_of_schedule_number_value_end (optional)
     * @param  string $out_of_schedule_number_value_exact out_of_schedule_number_value_exact (optional)
     * @param  bool $out_of_schedule_number_value_exists out_of_schedule_number_value_exists (optional)
     * @param  string $out_of_schedule_number_value_partial out_of_schedule_number_value_partial (optional)
     * @param  string $out_of_schedule_number_value_start out_of_schedule_number_value_start (optional)
     * @param  string $out_of_schedule_target_type out_of_schedule_target_type (optional)
     * @param  string $out_of_schedule_target_type_end out_of_schedule_target_type_end (optional)
     * @param  string $out_of_schedule_target_type_exact out_of_schedule_target_type_exact (optional)
     * @param  bool $out_of_schedule_target_type_exists out_of_schedule_target_type_exists (optional)
     * @param  string $out_of_schedule_target_type_partial out_of_schedule_target_type_partial (optional)
     * @param  string $out_of_schedule_target_type_start out_of_schedule_target_type_start (optional)
     * @param  string $out_of_schedule_voice_mail_user out_of_schedule_voice_mail_user (optional)
     * @param  string $out_of_schedule_voice_mail_user2 out_of_schedule_voice_mail_user2 (optional)
     * @param  bool $out_of_schedule_voice_mail_user_exists out_of_schedule_voice_mail_user_exists (optional)
     * @param  string $welcome_locution welcome_locution (optional)
     * @param  string $welcome_locution2 welcome_locution2 (optional)
     * @param  bool $welcome_locution_exists welcome_locution_exists (optional)
     * @param  string $_order_holiday_number_value _order_holiday_number_value (optional)
     * @param  string $_order_holiday_target_type _order_holiday_target_type (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_name _order_name (optional)
     * @param  string $_order_out_of_schedule_number_value _order_out_of_schedule_number_value (optional)
     * @param  string $_order_out_of_schedule_target_type _order_out_of_schedule_target_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ExternalCallFilterCollection[]
     */
    public function getExternalCallFilterCollection($holiday_extension = null, $holiday_extension2 = null, $holiday_extension_exists = null, $holiday_locution = null, $holiday_locution2 = null, $holiday_locution_exists = null, $holiday_number_country = null, $holiday_number_country2 = null, $holiday_number_country_exists = null, $holiday_number_value = null, $holiday_number_value_end = null, $holiday_number_value_exact = null, $holiday_number_value_exists = null, $holiday_number_value_partial = null, $holiday_number_value_start = null, $holiday_target_type = null, $holiday_target_type_end = null, $holiday_target_type_exact = null, $holiday_target_type_exists = null, $holiday_target_type_partial = null, $holiday_target_type_start = null, $holiday_voice_mail_user = null, $holiday_voice_mail_user2 = null, $holiday_voice_mail_user_exists = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $out_of_schedule_extension = null, $out_of_schedule_extension2 = null, $out_of_schedule_extension_exists = null, $out_of_schedule_locution = null, $out_of_schedule_locution2 = null, $out_of_schedule_locution_exists = null, $out_of_schedule_number_country = null, $out_of_schedule_number_country2 = null, $out_of_schedule_number_country_exists = null, $out_of_schedule_number_value = null, $out_of_schedule_number_value_end = null, $out_of_schedule_number_value_exact = null, $out_of_schedule_number_value_exists = null, $out_of_schedule_number_value_partial = null, $out_of_schedule_number_value_start = null, $out_of_schedule_target_type = null, $out_of_schedule_target_type_end = null, $out_of_schedule_target_type_exact = null, $out_of_schedule_target_type_exists = null, $out_of_schedule_target_type_partial = null, $out_of_schedule_target_type_start = null, $out_of_schedule_voice_mail_user = null, $out_of_schedule_voice_mail_user2 = null, $out_of_schedule_voice_mail_user_exists = null, $welcome_locution = null, $welcome_locution2 = null, $welcome_locution_exists = null, $_order_holiday_number_value = null, $_order_holiday_target_type = null, $_order_id = null, $_order_name = null, $_order_out_of_schedule_number_value = null, $_order_out_of_schedule_target_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getExternalCallFilterCollectionWithHttpInfo($holiday_extension, $holiday_extension2, $holiday_extension_exists, $holiday_locution, $holiday_locution2, $holiday_locution_exists, $holiday_number_country, $holiday_number_country2, $holiday_number_country_exists, $holiday_number_value, $holiday_number_value_end, $holiday_number_value_exact, $holiday_number_value_exists, $holiday_number_value_partial, $holiday_number_value_start, $holiday_target_type, $holiday_target_type_end, $holiday_target_type_exact, $holiday_target_type_exists, $holiday_target_type_partial, $holiday_target_type_start, $holiday_voice_mail_user, $holiday_voice_mail_user2, $holiday_voice_mail_user_exists, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $out_of_schedule_extension, $out_of_schedule_extension2, $out_of_schedule_extension_exists, $out_of_schedule_locution, $out_of_schedule_locution2, $out_of_schedule_locution_exists, $out_of_schedule_number_country, $out_of_schedule_number_country2, $out_of_schedule_number_country_exists, $out_of_schedule_number_value, $out_of_schedule_number_value_end, $out_of_schedule_number_value_exact, $out_of_schedule_number_value_exists, $out_of_schedule_number_value_partial, $out_of_schedule_number_value_start, $out_of_schedule_target_type, $out_of_schedule_target_type_end, $out_of_schedule_target_type_exact, $out_of_schedule_target_type_exists, $out_of_schedule_target_type_partial, $out_of_schedule_target_type_start, $out_of_schedule_voice_mail_user, $out_of_schedule_voice_mail_user2, $out_of_schedule_voice_mail_user_exists, $welcome_locution, $welcome_locution2, $welcome_locution_exists, $_order_holiday_number_value, $_order_holiday_target_type, $_order_id, $_order_name, $_order_out_of_schedule_number_value, $_order_out_of_schedule_target_type, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getExternalCallFilterCollectionWithHttpInfo
     *
     * Retrieves the collection of ExternalCallFilter resources.
     *
     * @param  string $holiday_extension (optional)
     * @param  string $holiday_extension2 (optional)
     * @param  bool $holiday_extension_exists (optional)
     * @param  string $holiday_locution (optional)
     * @param  string $holiday_locution2 (optional)
     * @param  bool $holiday_locution_exists (optional)
     * @param  string $holiday_number_country (optional)
     * @param  string $holiday_number_country2 (optional)
     * @param  bool $holiday_number_country_exists (optional)
     * @param  string $holiday_number_value (optional)
     * @param  string $holiday_number_value_end (optional)
     * @param  string $holiday_number_value_exact (optional)
     * @param  bool $holiday_number_value_exists (optional)
     * @param  string $holiday_number_value_partial (optional)
     * @param  string $holiday_number_value_start (optional)
     * @param  string $holiday_target_type (optional)
     * @param  string $holiday_target_type_end (optional)
     * @param  string $holiday_target_type_exact (optional)
     * @param  bool $holiday_target_type_exists (optional)
     * @param  string $holiday_target_type_partial (optional)
     * @param  string $holiday_target_type_start (optional)
     * @param  string $holiday_voice_mail_user (optional)
     * @param  string $holiday_voice_mail_user2 (optional)
     * @param  bool $holiday_voice_mail_user_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $out_of_schedule_extension (optional)
     * @param  string $out_of_schedule_extension2 (optional)
     * @param  bool $out_of_schedule_extension_exists (optional)
     * @param  string $out_of_schedule_locution (optional)
     * @param  string $out_of_schedule_locution2 (optional)
     * @param  bool $out_of_schedule_locution_exists (optional)
     * @param  string $out_of_schedule_number_country (optional)
     * @param  string $out_of_schedule_number_country2 (optional)
     * @param  bool $out_of_schedule_number_country_exists (optional)
     * @param  string $out_of_schedule_number_value (optional)
     * @param  string $out_of_schedule_number_value_end (optional)
     * @param  string $out_of_schedule_number_value_exact (optional)
     * @param  bool $out_of_schedule_number_value_exists (optional)
     * @param  string $out_of_schedule_number_value_partial (optional)
     * @param  string $out_of_schedule_number_value_start (optional)
     * @param  string $out_of_schedule_target_type (optional)
     * @param  string $out_of_schedule_target_type_end (optional)
     * @param  string $out_of_schedule_target_type_exact (optional)
     * @param  bool $out_of_schedule_target_type_exists (optional)
     * @param  string $out_of_schedule_target_type_partial (optional)
     * @param  string $out_of_schedule_target_type_start (optional)
     * @param  string $out_of_schedule_voice_mail_user (optional)
     * @param  string $out_of_schedule_voice_mail_user2 (optional)
     * @param  bool $out_of_schedule_voice_mail_user_exists (optional)
     * @param  string $welcome_locution (optional)
     * @param  string $welcome_locution2 (optional)
     * @param  bool $welcome_locution_exists (optional)
     * @param  string $_order_holiday_number_value (optional)
     * @param  string $_order_holiday_target_type (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_out_of_schedule_number_value (optional)
     * @param  string $_order_out_of_schedule_target_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ExternalCallFilterCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getExternalCallFilterCollectionWithHttpInfo($holiday_extension = null, $holiday_extension2 = null, $holiday_extension_exists = null, $holiday_locution = null, $holiday_locution2 = null, $holiday_locution_exists = null, $holiday_number_country = null, $holiday_number_country2 = null, $holiday_number_country_exists = null, $holiday_number_value = null, $holiday_number_value_end = null, $holiday_number_value_exact = null, $holiday_number_value_exists = null, $holiday_number_value_partial = null, $holiday_number_value_start = null, $holiday_target_type = null, $holiday_target_type_end = null, $holiday_target_type_exact = null, $holiday_target_type_exists = null, $holiday_target_type_partial = null, $holiday_target_type_start = null, $holiday_voice_mail_user = null, $holiday_voice_mail_user2 = null, $holiday_voice_mail_user_exists = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $out_of_schedule_extension = null, $out_of_schedule_extension2 = null, $out_of_schedule_extension_exists = null, $out_of_schedule_locution = null, $out_of_schedule_locution2 = null, $out_of_schedule_locution_exists = null, $out_of_schedule_number_country = null, $out_of_schedule_number_country2 = null, $out_of_schedule_number_country_exists = null, $out_of_schedule_number_value = null, $out_of_schedule_number_value_end = null, $out_of_schedule_number_value_exact = null, $out_of_schedule_number_value_exists = null, $out_of_schedule_number_value_partial = null, $out_of_schedule_number_value_start = null, $out_of_schedule_target_type = null, $out_of_schedule_target_type_end = null, $out_of_schedule_target_type_exact = null, $out_of_schedule_target_type_exists = null, $out_of_schedule_target_type_partial = null, $out_of_schedule_target_type_start = null, $out_of_schedule_voice_mail_user = null, $out_of_schedule_voice_mail_user2 = null, $out_of_schedule_voice_mail_user_exists = null, $welcome_locution = null, $welcome_locution2 = null, $welcome_locution_exists = null, $_order_holiday_number_value = null, $_order_holiday_target_type = null, $_order_id = null, $_order_name = null, $_order_out_of_schedule_number_value = null, $_order_out_of_schedule_target_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterCollection[]';
        $request = $this->getExternalCallFilterCollectionRequest($holiday_extension, $holiday_extension2, $holiday_extension_exists, $holiday_locution, $holiday_locution2, $holiday_locution_exists, $holiday_number_country, $holiday_number_country2, $holiday_number_country_exists, $holiday_number_value, $holiday_number_value_end, $holiday_number_value_exact, $holiday_number_value_exists, $holiday_number_value_partial, $holiday_number_value_start, $holiday_target_type, $holiday_target_type_end, $holiday_target_type_exact, $holiday_target_type_exists, $holiday_target_type_partial, $holiday_target_type_start, $holiday_voice_mail_user, $holiday_voice_mail_user2, $holiday_voice_mail_user_exists, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $out_of_schedule_extension, $out_of_schedule_extension2, $out_of_schedule_extension_exists, $out_of_schedule_locution, $out_of_schedule_locution2, $out_of_schedule_locution_exists, $out_of_schedule_number_country, $out_of_schedule_number_country2, $out_of_schedule_number_country_exists, $out_of_schedule_number_value, $out_of_schedule_number_value_end, $out_of_schedule_number_value_exact, $out_of_schedule_number_value_exists, $out_of_schedule_number_value_partial, $out_of_schedule_number_value_start, $out_of_schedule_target_type, $out_of_schedule_target_type_end, $out_of_schedule_target_type_exact, $out_of_schedule_target_type_exists, $out_of_schedule_target_type_partial, $out_of_schedule_target_type_start, $out_of_schedule_voice_mail_user, $out_of_schedule_voice_mail_user2, $out_of_schedule_voice_mail_user_exists, $welcome_locution, $welcome_locution2, $welcome_locution_exists, $_order_holiday_number_value, $_order_holiday_target_type, $_order_id, $_order_name, $_order_out_of_schedule_number_value, $_order_out_of_schedule_target_type, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ExternalCallFilterCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getExternalCallFilterCollectionAsync
     *
     * Retrieves the collection of ExternalCallFilter resources.
     *
     * @param  string $holiday_extension (optional)
     * @param  string $holiday_extension2 (optional)
     * @param  bool $holiday_extension_exists (optional)
     * @param  string $holiday_locution (optional)
     * @param  string $holiday_locution2 (optional)
     * @param  bool $holiday_locution_exists (optional)
     * @param  string $holiday_number_country (optional)
     * @param  string $holiday_number_country2 (optional)
     * @param  bool $holiday_number_country_exists (optional)
     * @param  string $holiday_number_value (optional)
     * @param  string $holiday_number_value_end (optional)
     * @param  string $holiday_number_value_exact (optional)
     * @param  bool $holiday_number_value_exists (optional)
     * @param  string $holiday_number_value_partial (optional)
     * @param  string $holiday_number_value_start (optional)
     * @param  string $holiday_target_type (optional)
     * @param  string $holiday_target_type_end (optional)
     * @param  string $holiday_target_type_exact (optional)
     * @param  bool $holiday_target_type_exists (optional)
     * @param  string $holiday_target_type_partial (optional)
     * @param  string $holiday_target_type_start (optional)
     * @param  string $holiday_voice_mail_user (optional)
     * @param  string $holiday_voice_mail_user2 (optional)
     * @param  bool $holiday_voice_mail_user_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $out_of_schedule_extension (optional)
     * @param  string $out_of_schedule_extension2 (optional)
     * @param  bool $out_of_schedule_extension_exists (optional)
     * @param  string $out_of_schedule_locution (optional)
     * @param  string $out_of_schedule_locution2 (optional)
     * @param  bool $out_of_schedule_locution_exists (optional)
     * @param  string $out_of_schedule_number_country (optional)
     * @param  string $out_of_schedule_number_country2 (optional)
     * @param  bool $out_of_schedule_number_country_exists (optional)
     * @param  string $out_of_schedule_number_value (optional)
     * @param  string $out_of_schedule_number_value_end (optional)
     * @param  string $out_of_schedule_number_value_exact (optional)
     * @param  bool $out_of_schedule_number_value_exists (optional)
     * @param  string $out_of_schedule_number_value_partial (optional)
     * @param  string $out_of_schedule_number_value_start (optional)
     * @param  string $out_of_schedule_target_type (optional)
     * @param  string $out_of_schedule_target_type_end (optional)
     * @param  string $out_of_schedule_target_type_exact (optional)
     * @param  bool $out_of_schedule_target_type_exists (optional)
     * @param  string $out_of_schedule_target_type_partial (optional)
     * @param  string $out_of_schedule_target_type_start (optional)
     * @param  string $out_of_schedule_voice_mail_user (optional)
     * @param  string $out_of_schedule_voice_mail_user2 (optional)
     * @param  bool $out_of_schedule_voice_mail_user_exists (optional)
     * @param  string $welcome_locution (optional)
     * @param  string $welcome_locution2 (optional)
     * @param  bool $welcome_locution_exists (optional)
     * @param  string $_order_holiday_number_value (optional)
     * @param  string $_order_holiday_target_type (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_out_of_schedule_number_value (optional)
     * @param  string $_order_out_of_schedule_target_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExternalCallFilterCollectionAsync($holiday_extension = null, $holiday_extension2 = null, $holiday_extension_exists = null, $holiday_locution = null, $holiday_locution2 = null, $holiday_locution_exists = null, $holiday_number_country = null, $holiday_number_country2 = null, $holiday_number_country_exists = null, $holiday_number_value = null, $holiday_number_value_end = null, $holiday_number_value_exact = null, $holiday_number_value_exists = null, $holiday_number_value_partial = null, $holiday_number_value_start = null, $holiday_target_type = null, $holiday_target_type_end = null, $holiday_target_type_exact = null, $holiday_target_type_exists = null, $holiday_target_type_partial = null, $holiday_target_type_start = null, $holiday_voice_mail_user = null, $holiday_voice_mail_user2 = null, $holiday_voice_mail_user_exists = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $out_of_schedule_extension = null, $out_of_schedule_extension2 = null, $out_of_schedule_extension_exists = null, $out_of_schedule_locution = null, $out_of_schedule_locution2 = null, $out_of_schedule_locution_exists = null, $out_of_schedule_number_country = null, $out_of_schedule_number_country2 = null, $out_of_schedule_number_country_exists = null, $out_of_schedule_number_value = null, $out_of_schedule_number_value_end = null, $out_of_schedule_number_value_exact = null, $out_of_schedule_number_value_exists = null, $out_of_schedule_number_value_partial = null, $out_of_schedule_number_value_start = null, $out_of_schedule_target_type = null, $out_of_schedule_target_type_end = null, $out_of_schedule_target_type_exact = null, $out_of_schedule_target_type_exists = null, $out_of_schedule_target_type_partial = null, $out_of_schedule_target_type_start = null, $out_of_schedule_voice_mail_user = null, $out_of_schedule_voice_mail_user2 = null, $out_of_schedule_voice_mail_user_exists = null, $welcome_locution = null, $welcome_locution2 = null, $welcome_locution_exists = null, $_order_holiday_number_value = null, $_order_holiday_target_type = null, $_order_id = null, $_order_name = null, $_order_out_of_schedule_number_value = null, $_order_out_of_schedule_target_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getExternalCallFilterCollectionAsyncWithHttpInfo($holiday_extension, $holiday_extension2, $holiday_extension_exists, $holiday_locution, $holiday_locution2, $holiday_locution_exists, $holiday_number_country, $holiday_number_country2, $holiday_number_country_exists, $holiday_number_value, $holiday_number_value_end, $holiday_number_value_exact, $holiday_number_value_exists, $holiday_number_value_partial, $holiday_number_value_start, $holiday_target_type, $holiday_target_type_end, $holiday_target_type_exact, $holiday_target_type_exists, $holiday_target_type_partial, $holiday_target_type_start, $holiday_voice_mail_user, $holiday_voice_mail_user2, $holiday_voice_mail_user_exists, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $out_of_schedule_extension, $out_of_schedule_extension2, $out_of_schedule_extension_exists, $out_of_schedule_locution, $out_of_schedule_locution2, $out_of_schedule_locution_exists, $out_of_schedule_number_country, $out_of_schedule_number_country2, $out_of_schedule_number_country_exists, $out_of_schedule_number_value, $out_of_schedule_number_value_end, $out_of_schedule_number_value_exact, $out_of_schedule_number_value_exists, $out_of_schedule_number_value_partial, $out_of_schedule_number_value_start, $out_of_schedule_target_type, $out_of_schedule_target_type_end, $out_of_schedule_target_type_exact, $out_of_schedule_target_type_exists, $out_of_schedule_target_type_partial, $out_of_schedule_target_type_start, $out_of_schedule_voice_mail_user, $out_of_schedule_voice_mail_user2, $out_of_schedule_voice_mail_user_exists, $welcome_locution, $welcome_locution2, $welcome_locution_exists, $_order_holiday_number_value, $_order_holiday_target_type, $_order_id, $_order_name, $_order_out_of_schedule_number_value, $_order_out_of_schedule_target_type, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getExternalCallFilterCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of ExternalCallFilter resources.
     *
     * @param  string $holiday_extension (optional)
     * @param  string $holiday_extension2 (optional)
     * @param  bool $holiday_extension_exists (optional)
     * @param  string $holiday_locution (optional)
     * @param  string $holiday_locution2 (optional)
     * @param  bool $holiday_locution_exists (optional)
     * @param  string $holiday_number_country (optional)
     * @param  string $holiday_number_country2 (optional)
     * @param  bool $holiday_number_country_exists (optional)
     * @param  string $holiday_number_value (optional)
     * @param  string $holiday_number_value_end (optional)
     * @param  string $holiday_number_value_exact (optional)
     * @param  bool $holiday_number_value_exists (optional)
     * @param  string $holiday_number_value_partial (optional)
     * @param  string $holiday_number_value_start (optional)
     * @param  string $holiday_target_type (optional)
     * @param  string $holiday_target_type_end (optional)
     * @param  string $holiday_target_type_exact (optional)
     * @param  bool $holiday_target_type_exists (optional)
     * @param  string $holiday_target_type_partial (optional)
     * @param  string $holiday_target_type_start (optional)
     * @param  string $holiday_voice_mail_user (optional)
     * @param  string $holiday_voice_mail_user2 (optional)
     * @param  bool $holiday_voice_mail_user_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $out_of_schedule_extension (optional)
     * @param  string $out_of_schedule_extension2 (optional)
     * @param  bool $out_of_schedule_extension_exists (optional)
     * @param  string $out_of_schedule_locution (optional)
     * @param  string $out_of_schedule_locution2 (optional)
     * @param  bool $out_of_schedule_locution_exists (optional)
     * @param  string $out_of_schedule_number_country (optional)
     * @param  string $out_of_schedule_number_country2 (optional)
     * @param  bool $out_of_schedule_number_country_exists (optional)
     * @param  string $out_of_schedule_number_value (optional)
     * @param  string $out_of_schedule_number_value_end (optional)
     * @param  string $out_of_schedule_number_value_exact (optional)
     * @param  bool $out_of_schedule_number_value_exists (optional)
     * @param  string $out_of_schedule_number_value_partial (optional)
     * @param  string $out_of_schedule_number_value_start (optional)
     * @param  string $out_of_schedule_target_type (optional)
     * @param  string $out_of_schedule_target_type_end (optional)
     * @param  string $out_of_schedule_target_type_exact (optional)
     * @param  bool $out_of_schedule_target_type_exists (optional)
     * @param  string $out_of_schedule_target_type_partial (optional)
     * @param  string $out_of_schedule_target_type_start (optional)
     * @param  string $out_of_schedule_voice_mail_user (optional)
     * @param  string $out_of_schedule_voice_mail_user2 (optional)
     * @param  bool $out_of_schedule_voice_mail_user_exists (optional)
     * @param  string $welcome_locution (optional)
     * @param  string $welcome_locution2 (optional)
     * @param  bool $welcome_locution_exists (optional)
     * @param  string $_order_holiday_number_value (optional)
     * @param  string $_order_holiday_target_type (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_out_of_schedule_number_value (optional)
     * @param  string $_order_out_of_schedule_target_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExternalCallFilterCollectionAsyncWithHttpInfo($holiday_extension = null, $holiday_extension2 = null, $holiday_extension_exists = null, $holiday_locution = null, $holiday_locution2 = null, $holiday_locution_exists = null, $holiday_number_country = null, $holiday_number_country2 = null, $holiday_number_country_exists = null, $holiday_number_value = null, $holiday_number_value_end = null, $holiday_number_value_exact = null, $holiday_number_value_exists = null, $holiday_number_value_partial = null, $holiday_number_value_start = null, $holiday_target_type = null, $holiday_target_type_end = null, $holiday_target_type_exact = null, $holiday_target_type_exists = null, $holiday_target_type_partial = null, $holiday_target_type_start = null, $holiday_voice_mail_user = null, $holiday_voice_mail_user2 = null, $holiday_voice_mail_user_exists = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $out_of_schedule_extension = null, $out_of_schedule_extension2 = null, $out_of_schedule_extension_exists = null, $out_of_schedule_locution = null, $out_of_schedule_locution2 = null, $out_of_schedule_locution_exists = null, $out_of_schedule_number_country = null, $out_of_schedule_number_country2 = null, $out_of_schedule_number_country_exists = null, $out_of_schedule_number_value = null, $out_of_schedule_number_value_end = null, $out_of_schedule_number_value_exact = null, $out_of_schedule_number_value_exists = null, $out_of_schedule_number_value_partial = null, $out_of_schedule_number_value_start = null, $out_of_schedule_target_type = null, $out_of_schedule_target_type_end = null, $out_of_schedule_target_type_exact = null, $out_of_schedule_target_type_exists = null, $out_of_schedule_target_type_partial = null, $out_of_schedule_target_type_start = null, $out_of_schedule_voice_mail_user = null, $out_of_schedule_voice_mail_user2 = null, $out_of_schedule_voice_mail_user_exists = null, $welcome_locution = null, $welcome_locution2 = null, $welcome_locution_exists = null, $_order_holiday_number_value = null, $_order_holiday_target_type = null, $_order_id = null, $_order_name = null, $_order_out_of_schedule_number_value = null, $_order_out_of_schedule_target_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterCollection[]';
        $request = $this->getExternalCallFilterCollectionRequest($holiday_extension, $holiday_extension2, $holiday_extension_exists, $holiday_locution, $holiday_locution2, $holiday_locution_exists, $holiday_number_country, $holiday_number_country2, $holiday_number_country_exists, $holiday_number_value, $holiday_number_value_end, $holiday_number_value_exact, $holiday_number_value_exists, $holiday_number_value_partial, $holiday_number_value_start, $holiday_target_type, $holiday_target_type_end, $holiday_target_type_exact, $holiday_target_type_exists, $holiday_target_type_partial, $holiday_target_type_start, $holiday_voice_mail_user, $holiday_voice_mail_user2, $holiday_voice_mail_user_exists, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $out_of_schedule_extension, $out_of_schedule_extension2, $out_of_schedule_extension_exists, $out_of_schedule_locution, $out_of_schedule_locution2, $out_of_schedule_locution_exists, $out_of_schedule_number_country, $out_of_schedule_number_country2, $out_of_schedule_number_country_exists, $out_of_schedule_number_value, $out_of_schedule_number_value_end, $out_of_schedule_number_value_exact, $out_of_schedule_number_value_exists, $out_of_schedule_number_value_partial, $out_of_schedule_number_value_start, $out_of_schedule_target_type, $out_of_schedule_target_type_end, $out_of_schedule_target_type_exact, $out_of_schedule_target_type_exists, $out_of_schedule_target_type_partial, $out_of_schedule_target_type_start, $out_of_schedule_voice_mail_user, $out_of_schedule_voice_mail_user2, $out_of_schedule_voice_mail_user_exists, $welcome_locution, $welcome_locution2, $welcome_locution_exists, $_order_holiday_number_value, $_order_holiday_target_type, $_order_id, $_order_name, $_order_out_of_schedule_number_value, $_order_out_of_schedule_target_type, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getExternalCallFilterCollection'
     *
     * @param  string $holiday_extension (optional)
     * @param  string $holiday_extension2 (optional)
     * @param  bool $holiday_extension_exists (optional)
     * @param  string $holiday_locution (optional)
     * @param  string $holiday_locution2 (optional)
     * @param  bool $holiday_locution_exists (optional)
     * @param  string $holiday_number_country (optional)
     * @param  string $holiday_number_country2 (optional)
     * @param  bool $holiday_number_country_exists (optional)
     * @param  string $holiday_number_value (optional)
     * @param  string $holiday_number_value_end (optional)
     * @param  string $holiday_number_value_exact (optional)
     * @param  bool $holiday_number_value_exists (optional)
     * @param  string $holiday_number_value_partial (optional)
     * @param  string $holiday_number_value_start (optional)
     * @param  string $holiday_target_type (optional)
     * @param  string $holiday_target_type_end (optional)
     * @param  string $holiday_target_type_exact (optional)
     * @param  bool $holiday_target_type_exists (optional)
     * @param  string $holiday_target_type_partial (optional)
     * @param  string $holiday_target_type_start (optional)
     * @param  string $holiday_voice_mail_user (optional)
     * @param  string $holiday_voice_mail_user2 (optional)
     * @param  bool $holiday_voice_mail_user_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $out_of_schedule_extension (optional)
     * @param  string $out_of_schedule_extension2 (optional)
     * @param  bool $out_of_schedule_extension_exists (optional)
     * @param  string $out_of_schedule_locution (optional)
     * @param  string $out_of_schedule_locution2 (optional)
     * @param  bool $out_of_schedule_locution_exists (optional)
     * @param  string $out_of_schedule_number_country (optional)
     * @param  string $out_of_schedule_number_country2 (optional)
     * @param  bool $out_of_schedule_number_country_exists (optional)
     * @param  string $out_of_schedule_number_value (optional)
     * @param  string $out_of_schedule_number_value_end (optional)
     * @param  string $out_of_schedule_number_value_exact (optional)
     * @param  bool $out_of_schedule_number_value_exists (optional)
     * @param  string $out_of_schedule_number_value_partial (optional)
     * @param  string $out_of_schedule_number_value_start (optional)
     * @param  string $out_of_schedule_target_type (optional)
     * @param  string $out_of_schedule_target_type_end (optional)
     * @param  string $out_of_schedule_target_type_exact (optional)
     * @param  bool $out_of_schedule_target_type_exists (optional)
     * @param  string $out_of_schedule_target_type_partial (optional)
     * @param  string $out_of_schedule_target_type_start (optional)
     * @param  string $out_of_schedule_voice_mail_user (optional)
     * @param  string $out_of_schedule_voice_mail_user2 (optional)
     * @param  bool $out_of_schedule_voice_mail_user_exists (optional)
     * @param  string $welcome_locution (optional)
     * @param  string $welcome_locution2 (optional)
     * @param  bool $welcome_locution_exists (optional)
     * @param  string $_order_holiday_number_value (optional)
     * @param  string $_order_holiday_target_type (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_out_of_schedule_number_value (optional)
     * @param  string $_order_out_of_schedule_target_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getExternalCallFilterCollectionRequest($holiday_extension = null, $holiday_extension2 = null, $holiday_extension_exists = null, $holiday_locution = null, $holiday_locution2 = null, $holiday_locution_exists = null, $holiday_number_country = null, $holiday_number_country2 = null, $holiday_number_country_exists = null, $holiday_number_value = null, $holiday_number_value_end = null, $holiday_number_value_exact = null, $holiday_number_value_exists = null, $holiday_number_value_partial = null, $holiday_number_value_start = null, $holiday_target_type = null, $holiday_target_type_end = null, $holiday_target_type_exact = null, $holiday_target_type_exists = null, $holiday_target_type_partial = null, $holiday_target_type_start = null, $holiday_voice_mail_user = null, $holiday_voice_mail_user2 = null, $holiday_voice_mail_user_exists = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $out_of_schedule_extension = null, $out_of_schedule_extension2 = null, $out_of_schedule_extension_exists = null, $out_of_schedule_locution = null, $out_of_schedule_locution2 = null, $out_of_schedule_locution_exists = null, $out_of_schedule_number_country = null, $out_of_schedule_number_country2 = null, $out_of_schedule_number_country_exists = null, $out_of_schedule_number_value = null, $out_of_schedule_number_value_end = null, $out_of_schedule_number_value_exact = null, $out_of_schedule_number_value_exists = null, $out_of_schedule_number_value_partial = null, $out_of_schedule_number_value_start = null, $out_of_schedule_target_type = null, $out_of_schedule_target_type_end = null, $out_of_schedule_target_type_exact = null, $out_of_schedule_target_type_exists = null, $out_of_schedule_target_type_partial = null, $out_of_schedule_target_type_start = null, $out_of_schedule_voice_mail_user = null, $out_of_schedule_voice_mail_user2 = null, $out_of_schedule_voice_mail_user_exists = null, $welcome_locution = null, $welcome_locution2 = null, $welcome_locution_exists = null, $_order_holiday_number_value = null, $_order_holiday_target_type = null, $_order_id = null, $_order_name = null, $_order_out_of_schedule_number_value = null, $_order_out_of_schedule_target_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/external_call_filters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($holiday_extension !== null) {
            $queryParams['holidayExtension'] = ObjectSerializer::toQueryValue($holiday_extension);
        }
        // query params
        if ($holiday_extension2 !== null) {
            $queryParams['holidayExtension[]'] = ObjectSerializer::toQueryValue($holiday_extension2);
        }
        // query params
        if ($holiday_extension_exists !== null) {
            $queryParams['holidayExtension[exists]'] = ObjectSerializer::toQueryValue($holiday_extension_exists);
        }
        // query params
        if ($holiday_locution !== null) {
            $queryParams['holidayLocution'] = ObjectSerializer::toQueryValue($holiday_locution);
        }
        // query params
        if ($holiday_locution2 !== null) {
            $queryParams['holidayLocution[]'] = ObjectSerializer::toQueryValue($holiday_locution2);
        }
        // query params
        if ($holiday_locution_exists !== null) {
            $queryParams['holidayLocution[exists]'] = ObjectSerializer::toQueryValue($holiday_locution_exists);
        }
        // query params
        if ($holiday_number_country !== null) {
            $queryParams['holidayNumberCountry'] = ObjectSerializer::toQueryValue($holiday_number_country);
        }
        // query params
        if ($holiday_number_country2 !== null) {
            $queryParams['holidayNumberCountry[]'] = ObjectSerializer::toQueryValue($holiday_number_country2);
        }
        // query params
        if ($holiday_number_country_exists !== null) {
            $queryParams['holidayNumberCountry[exists]'] = ObjectSerializer::toQueryValue($holiday_number_country_exists);
        }
        // query params
        if ($holiday_number_value !== null) {
            $queryParams['holidayNumberValue'] = ObjectSerializer::toQueryValue($holiday_number_value);
        }
        // query params
        if ($holiday_number_value_end !== null) {
            $queryParams['holidayNumberValue[end]'] = ObjectSerializer::toQueryValue($holiday_number_value_end);
        }
        // query params
        if ($holiday_number_value_exact !== null) {
            $queryParams['holidayNumberValue[exact]'] = ObjectSerializer::toQueryValue($holiday_number_value_exact);
        }
        // query params
        if ($holiday_number_value_exists !== null) {
            $queryParams['holidayNumberValue[exists]'] = ObjectSerializer::toQueryValue($holiday_number_value_exists);
        }
        // query params
        if ($holiday_number_value_partial !== null) {
            $queryParams['holidayNumberValue[partial]'] = ObjectSerializer::toQueryValue($holiday_number_value_partial);
        }
        // query params
        if ($holiday_number_value_start !== null) {
            $queryParams['holidayNumberValue[start]'] = ObjectSerializer::toQueryValue($holiday_number_value_start);
        }
        // query params
        if ($holiday_target_type !== null) {
            $queryParams['holidayTargetType'] = ObjectSerializer::toQueryValue($holiday_target_type);
        }
        // query params
        if ($holiday_target_type_end !== null) {
            $queryParams['holidayTargetType[end]'] = ObjectSerializer::toQueryValue($holiday_target_type_end);
        }
        // query params
        if ($holiday_target_type_exact !== null) {
            $queryParams['holidayTargetType[exact]'] = ObjectSerializer::toQueryValue($holiday_target_type_exact);
        }
        // query params
        if ($holiday_target_type_exists !== null) {
            $queryParams['holidayTargetType[exists]'] = ObjectSerializer::toQueryValue($holiday_target_type_exists);
        }
        // query params
        if ($holiday_target_type_partial !== null) {
            $queryParams['holidayTargetType[partial]'] = ObjectSerializer::toQueryValue($holiday_target_type_partial);
        }
        // query params
        if ($holiday_target_type_start !== null) {
            $queryParams['holidayTargetType[start]'] = ObjectSerializer::toQueryValue($holiday_target_type_start);
        }
        // query params
        if ($holiday_voice_mail_user !== null) {
            $queryParams['holidayVoiceMailUser'] = ObjectSerializer::toQueryValue($holiday_voice_mail_user);
        }
        // query params
        if ($holiday_voice_mail_user2 !== null) {
            $queryParams['holidayVoiceMailUser[]'] = ObjectSerializer::toQueryValue($holiday_voice_mail_user2);
        }
        // query params
        if ($holiday_voice_mail_user_exists !== null) {
            $queryParams['holidayVoiceMailUser[exists]'] = ObjectSerializer::toQueryValue($holiday_voice_mail_user_exists);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_end !== null) {
            $queryParams['name[end]'] = ObjectSerializer::toQueryValue($name_end);
        }
        // query params
        if ($name_exact !== null) {
            $queryParams['name[exact]'] = ObjectSerializer::toQueryValue($name_exact);
        }
        // query params
        if ($name_partial !== null) {
            $queryParams['name[partial]'] = ObjectSerializer::toQueryValue($name_partial);
        }
        // query params
        if ($name_start !== null) {
            $queryParams['name[start]'] = ObjectSerializer::toQueryValue($name_start);
        }
        // query params
        if ($out_of_schedule_extension !== null) {
            $queryParams['outOfScheduleExtension'] = ObjectSerializer::toQueryValue($out_of_schedule_extension);
        }
        // query params
        if ($out_of_schedule_extension2 !== null) {
            $queryParams['outOfScheduleExtension[]'] = ObjectSerializer::toQueryValue($out_of_schedule_extension2);
        }
        // query params
        if ($out_of_schedule_extension_exists !== null) {
            $queryParams['outOfScheduleExtension[exists]'] = ObjectSerializer::toQueryValue($out_of_schedule_extension_exists);
        }
        // query params
        if ($out_of_schedule_locution !== null) {
            $queryParams['outOfScheduleLocution'] = ObjectSerializer::toQueryValue($out_of_schedule_locution);
        }
        // query params
        if ($out_of_schedule_locution2 !== null) {
            $queryParams['outOfScheduleLocution[]'] = ObjectSerializer::toQueryValue($out_of_schedule_locution2);
        }
        // query params
        if ($out_of_schedule_locution_exists !== null) {
            $queryParams['outOfScheduleLocution[exists]'] = ObjectSerializer::toQueryValue($out_of_schedule_locution_exists);
        }
        // query params
        if ($out_of_schedule_number_country !== null) {
            $queryParams['outOfScheduleNumberCountry'] = ObjectSerializer::toQueryValue($out_of_schedule_number_country);
        }
        // query params
        if ($out_of_schedule_number_country2 !== null) {
            $queryParams['outOfScheduleNumberCountry[]'] = ObjectSerializer::toQueryValue($out_of_schedule_number_country2);
        }
        // query params
        if ($out_of_schedule_number_country_exists !== null) {
            $queryParams['outOfScheduleNumberCountry[exists]'] = ObjectSerializer::toQueryValue($out_of_schedule_number_country_exists);
        }
        // query params
        if ($out_of_schedule_number_value !== null) {
            $queryParams['outOfScheduleNumberValue'] = ObjectSerializer::toQueryValue($out_of_schedule_number_value);
        }
        // query params
        if ($out_of_schedule_number_value_end !== null) {
            $queryParams['outOfScheduleNumberValue[end]'] = ObjectSerializer::toQueryValue($out_of_schedule_number_value_end);
        }
        // query params
        if ($out_of_schedule_number_value_exact !== null) {
            $queryParams['outOfScheduleNumberValue[exact]'] = ObjectSerializer::toQueryValue($out_of_schedule_number_value_exact);
        }
        // query params
        if ($out_of_schedule_number_value_exists !== null) {
            $queryParams['outOfScheduleNumberValue[exists]'] = ObjectSerializer::toQueryValue($out_of_schedule_number_value_exists);
        }
        // query params
        if ($out_of_schedule_number_value_partial !== null) {
            $queryParams['outOfScheduleNumberValue[partial]'] = ObjectSerializer::toQueryValue($out_of_schedule_number_value_partial);
        }
        // query params
        if ($out_of_schedule_number_value_start !== null) {
            $queryParams['outOfScheduleNumberValue[start]'] = ObjectSerializer::toQueryValue($out_of_schedule_number_value_start);
        }
        // query params
        if ($out_of_schedule_target_type !== null) {
            $queryParams['outOfScheduleTargetType'] = ObjectSerializer::toQueryValue($out_of_schedule_target_type);
        }
        // query params
        if ($out_of_schedule_target_type_end !== null) {
            $queryParams['outOfScheduleTargetType[end]'] = ObjectSerializer::toQueryValue($out_of_schedule_target_type_end);
        }
        // query params
        if ($out_of_schedule_target_type_exact !== null) {
            $queryParams['outOfScheduleTargetType[exact]'] = ObjectSerializer::toQueryValue($out_of_schedule_target_type_exact);
        }
        // query params
        if ($out_of_schedule_target_type_exists !== null) {
            $queryParams['outOfScheduleTargetType[exists]'] = ObjectSerializer::toQueryValue($out_of_schedule_target_type_exists);
        }
        // query params
        if ($out_of_schedule_target_type_partial !== null) {
            $queryParams['outOfScheduleTargetType[partial]'] = ObjectSerializer::toQueryValue($out_of_schedule_target_type_partial);
        }
        // query params
        if ($out_of_schedule_target_type_start !== null) {
            $queryParams['outOfScheduleTargetType[start]'] = ObjectSerializer::toQueryValue($out_of_schedule_target_type_start);
        }
        // query params
        if ($out_of_schedule_voice_mail_user !== null) {
            $queryParams['outOfScheduleVoiceMailUser'] = ObjectSerializer::toQueryValue($out_of_schedule_voice_mail_user);
        }
        // query params
        if ($out_of_schedule_voice_mail_user2 !== null) {
            $queryParams['outOfScheduleVoiceMailUser[]'] = ObjectSerializer::toQueryValue($out_of_schedule_voice_mail_user2);
        }
        // query params
        if ($out_of_schedule_voice_mail_user_exists !== null) {
            $queryParams['outOfScheduleVoiceMailUser[exists]'] = ObjectSerializer::toQueryValue($out_of_schedule_voice_mail_user_exists);
        }
        // query params
        if ($welcome_locution !== null) {
            $queryParams['welcomeLocution'] = ObjectSerializer::toQueryValue($welcome_locution);
        }
        // query params
        if ($welcome_locution2 !== null) {
            $queryParams['welcomeLocution[]'] = ObjectSerializer::toQueryValue($welcome_locution2);
        }
        // query params
        if ($welcome_locution_exists !== null) {
            $queryParams['welcomeLocution[exists]'] = ObjectSerializer::toQueryValue($welcome_locution_exists);
        }
        // query params
        if ($_order_holiday_number_value !== null) {
            $queryParams['_order[holidayNumberValue]'] = ObjectSerializer::toQueryValue($_order_holiday_number_value);
        }
        // query params
        if ($_order_holiday_target_type !== null) {
            $queryParams['_order[holidayTargetType]'] = ObjectSerializer::toQueryValue($_order_holiday_target_type);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_name !== null) {
            $queryParams['_order[name]'] = ObjectSerializer::toQueryValue($_order_name);
        }
        // query params
        if ($_order_out_of_schedule_number_value !== null) {
            $queryParams['_order[outOfScheduleNumberValue]'] = ObjectSerializer::toQueryValue($_order_out_of_schedule_number_value);
        }
        // query params
        if ($_order_out_of_schedule_target_type !== null) {
            $queryParams['_order[outOfScheduleTargetType]'] = ObjectSerializer::toQueryValue($_order_out_of_schedule_target_type);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getExternalCallFilterItem
     *
     * Retrieves a ExternalCallFilter resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ExternalCallFilterDetailed
     */
    public function getExternalCallFilterItem($id)
    {
        list($response) = $this->getExternalCallFilterItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getExternalCallFilterItemWithHttpInfo
     *
     * Retrieves a ExternalCallFilter resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ExternalCallFilterDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getExternalCallFilterItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterDetailed';
        $request = $this->getExternalCallFilterItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ExternalCallFilterDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getExternalCallFilterItemAsync
     *
     * Retrieves a ExternalCallFilter resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExternalCallFilterItemAsync($id)
    {
        return $this->getExternalCallFilterItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getExternalCallFilterItemAsyncWithHttpInfo
     *
     * Retrieves a ExternalCallFilter resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExternalCallFilterItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterDetailed';
        $request = $this->getExternalCallFilterItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getExternalCallFilterItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getExternalCallFilterItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getExternalCallFilterItem'
            );
        }

        $resourcePath = '/external_call_filters/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getExternalCallFilterRelCalendarCollection
     *
     * Retrieves the collection of ExternalCallFilterRelCalendar resources.
     *
     * @param  string $calendar calendar (optional)
     * @param  string $calendar_name calendar_name (optional)
     * @param  string $calendar2 calendar2 (optional)
     * @param  string $filter filter (optional)
     * @param  int $filter_holiday_extension filter_holiday_extension (optional)
     * @param  int $filter_holiday_locution filter_holiday_locution (optional)
     * @param  int $filter_holiday_number_country filter_holiday_number_country (optional)
     * @param  string $filter_holiday_number_value filter_holiday_number_value (optional)
     * @param  string $filter_holiday_target_type filter_holiday_target_type (optional)
     * @param  int $filter_holiday_voice_mail_user filter_holiday_voice_mail_user (optional)
     * @param  string $filter_name filter_name (optional)
     * @param  int $filter_out_of_schedule_extension filter_out_of_schedule_extension (optional)
     * @param  int $filter_out_of_schedule_locution filter_out_of_schedule_locution (optional)
     * @param  int $filter_out_of_schedule_number_country filter_out_of_schedule_number_country (optional)
     * @param  string $filter_out_of_schedule_number_value filter_out_of_schedule_number_value (optional)
     * @param  string $filter_out_of_schedule_target_type filter_out_of_schedule_target_type (optional)
     * @param  int $filter_out_of_schedule_voice_mail_user filter_out_of_schedule_voice_mail_user (optional)
     * @param  int $filter_welcome_locution filter_welcome_locution (optional)
     * @param  string $filter2 filter2 (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ExternalCallFilterRelCalendarDetailedCollection[]
     */
    public function getExternalCallFilterRelCalendarCollection($calendar = null, $calendar_name = null, $calendar2 = null, $filter = null, $filter_holiday_extension = null, $filter_holiday_locution = null, $filter_holiday_number_country = null, $filter_holiday_number_value = null, $filter_holiday_target_type = null, $filter_holiday_voice_mail_user = null, $filter_name = null, $filter_out_of_schedule_extension = null, $filter_out_of_schedule_locution = null, $filter_out_of_schedule_number_country = null, $filter_out_of_schedule_number_value = null, $filter_out_of_schedule_target_type = null, $filter_out_of_schedule_voice_mail_user = null, $filter_welcome_locution = null, $filter2 = null, $id_exact = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getExternalCallFilterRelCalendarCollectionWithHttpInfo($calendar, $calendar_name, $calendar2, $filter, $filter_holiday_extension, $filter_holiday_locution, $filter_holiday_number_country, $filter_holiday_number_value, $filter_holiday_target_type, $filter_holiday_voice_mail_user, $filter_name, $filter_out_of_schedule_extension, $filter_out_of_schedule_locution, $filter_out_of_schedule_number_country, $filter_out_of_schedule_number_value, $filter_out_of_schedule_target_type, $filter_out_of_schedule_voice_mail_user, $filter_welcome_locution, $filter2, $id_exact, $_order_id, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getExternalCallFilterRelCalendarCollectionWithHttpInfo
     *
     * Retrieves the collection of ExternalCallFilterRelCalendar resources.
     *
     * @param  string $calendar (optional)
     * @param  string $calendar_name (optional)
     * @param  string $calendar2 (optional)
     * @param  string $filter (optional)
     * @param  int $filter_holiday_extension (optional)
     * @param  int $filter_holiday_locution (optional)
     * @param  int $filter_holiday_number_country (optional)
     * @param  string $filter_holiday_number_value (optional)
     * @param  string $filter_holiday_target_type (optional)
     * @param  int $filter_holiday_voice_mail_user (optional)
     * @param  string $filter_name (optional)
     * @param  int $filter_out_of_schedule_extension (optional)
     * @param  int $filter_out_of_schedule_locution (optional)
     * @param  int $filter_out_of_schedule_number_country (optional)
     * @param  string $filter_out_of_schedule_number_value (optional)
     * @param  string $filter_out_of_schedule_target_type (optional)
     * @param  int $filter_out_of_schedule_voice_mail_user (optional)
     * @param  int $filter_welcome_locution (optional)
     * @param  string $filter2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ExternalCallFilterRelCalendarDetailedCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getExternalCallFilterRelCalendarCollectionWithHttpInfo($calendar = null, $calendar_name = null, $calendar2 = null, $filter = null, $filter_holiday_extension = null, $filter_holiday_locution = null, $filter_holiday_number_country = null, $filter_holiday_number_value = null, $filter_holiday_target_type = null, $filter_holiday_voice_mail_user = null, $filter_name = null, $filter_out_of_schedule_extension = null, $filter_out_of_schedule_locution = null, $filter_out_of_schedule_number_country = null, $filter_out_of_schedule_number_value = null, $filter_out_of_schedule_target_type = null, $filter_out_of_schedule_voice_mail_user = null, $filter_welcome_locution = null, $filter2 = null, $id_exact = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterRelCalendarDetailedCollection[]';
        $request = $this->getExternalCallFilterRelCalendarCollectionRequest($calendar, $calendar_name, $calendar2, $filter, $filter_holiday_extension, $filter_holiday_locution, $filter_holiday_number_country, $filter_holiday_number_value, $filter_holiday_target_type, $filter_holiday_voice_mail_user, $filter_name, $filter_out_of_schedule_extension, $filter_out_of_schedule_locution, $filter_out_of_schedule_number_country, $filter_out_of_schedule_number_value, $filter_out_of_schedule_target_type, $filter_out_of_schedule_voice_mail_user, $filter_welcome_locution, $filter2, $id_exact, $_order_id, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ExternalCallFilterRelCalendarDetailedCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getExternalCallFilterRelCalendarCollectionAsync
     *
     * Retrieves the collection of ExternalCallFilterRelCalendar resources.
     *
     * @param  string $calendar (optional)
     * @param  string $calendar_name (optional)
     * @param  string $calendar2 (optional)
     * @param  string $filter (optional)
     * @param  int $filter_holiday_extension (optional)
     * @param  int $filter_holiday_locution (optional)
     * @param  int $filter_holiday_number_country (optional)
     * @param  string $filter_holiday_number_value (optional)
     * @param  string $filter_holiday_target_type (optional)
     * @param  int $filter_holiday_voice_mail_user (optional)
     * @param  string $filter_name (optional)
     * @param  int $filter_out_of_schedule_extension (optional)
     * @param  int $filter_out_of_schedule_locution (optional)
     * @param  int $filter_out_of_schedule_number_country (optional)
     * @param  string $filter_out_of_schedule_number_value (optional)
     * @param  string $filter_out_of_schedule_target_type (optional)
     * @param  int $filter_out_of_schedule_voice_mail_user (optional)
     * @param  int $filter_welcome_locution (optional)
     * @param  string $filter2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExternalCallFilterRelCalendarCollectionAsync($calendar = null, $calendar_name = null, $calendar2 = null, $filter = null, $filter_holiday_extension = null, $filter_holiday_locution = null, $filter_holiday_number_country = null, $filter_holiday_number_value = null, $filter_holiday_target_type = null, $filter_holiday_voice_mail_user = null, $filter_name = null, $filter_out_of_schedule_extension = null, $filter_out_of_schedule_locution = null, $filter_out_of_schedule_number_country = null, $filter_out_of_schedule_number_value = null, $filter_out_of_schedule_target_type = null, $filter_out_of_schedule_voice_mail_user = null, $filter_welcome_locution = null, $filter2 = null, $id_exact = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getExternalCallFilterRelCalendarCollectionAsyncWithHttpInfo($calendar, $calendar_name, $calendar2, $filter, $filter_holiday_extension, $filter_holiday_locution, $filter_holiday_number_country, $filter_holiday_number_value, $filter_holiday_target_type, $filter_holiday_voice_mail_user, $filter_name, $filter_out_of_schedule_extension, $filter_out_of_schedule_locution, $filter_out_of_schedule_number_country, $filter_out_of_schedule_number_value, $filter_out_of_schedule_target_type, $filter_out_of_schedule_voice_mail_user, $filter_welcome_locution, $filter2, $id_exact, $_order_id, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getExternalCallFilterRelCalendarCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of ExternalCallFilterRelCalendar resources.
     *
     * @param  string $calendar (optional)
     * @param  string $calendar_name (optional)
     * @param  string $calendar2 (optional)
     * @param  string $filter (optional)
     * @param  int $filter_holiday_extension (optional)
     * @param  int $filter_holiday_locution (optional)
     * @param  int $filter_holiday_number_country (optional)
     * @param  string $filter_holiday_number_value (optional)
     * @param  string $filter_holiday_target_type (optional)
     * @param  int $filter_holiday_voice_mail_user (optional)
     * @param  string $filter_name (optional)
     * @param  int $filter_out_of_schedule_extension (optional)
     * @param  int $filter_out_of_schedule_locution (optional)
     * @param  int $filter_out_of_schedule_number_country (optional)
     * @param  string $filter_out_of_schedule_number_value (optional)
     * @param  string $filter_out_of_schedule_target_type (optional)
     * @param  int $filter_out_of_schedule_voice_mail_user (optional)
     * @param  int $filter_welcome_locution (optional)
     * @param  string $filter2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExternalCallFilterRelCalendarCollectionAsyncWithHttpInfo($calendar = null, $calendar_name = null, $calendar2 = null, $filter = null, $filter_holiday_extension = null, $filter_holiday_locution = null, $filter_holiday_number_country = null, $filter_holiday_number_value = null, $filter_holiday_target_type = null, $filter_holiday_voice_mail_user = null, $filter_name = null, $filter_out_of_schedule_extension = null, $filter_out_of_schedule_locution = null, $filter_out_of_schedule_number_country = null, $filter_out_of_schedule_number_value = null, $filter_out_of_schedule_target_type = null, $filter_out_of_schedule_voice_mail_user = null, $filter_welcome_locution = null, $filter2 = null, $id_exact = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterRelCalendarDetailedCollection[]';
        $request = $this->getExternalCallFilterRelCalendarCollectionRequest($calendar, $calendar_name, $calendar2, $filter, $filter_holiday_extension, $filter_holiday_locution, $filter_holiday_number_country, $filter_holiday_number_value, $filter_holiday_target_type, $filter_holiday_voice_mail_user, $filter_name, $filter_out_of_schedule_extension, $filter_out_of_schedule_locution, $filter_out_of_schedule_number_country, $filter_out_of_schedule_number_value, $filter_out_of_schedule_target_type, $filter_out_of_schedule_voice_mail_user, $filter_welcome_locution, $filter2, $id_exact, $_order_id, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getExternalCallFilterRelCalendarCollection'
     *
     * @param  string $calendar (optional)
     * @param  string $calendar_name (optional)
     * @param  string $calendar2 (optional)
     * @param  string $filter (optional)
     * @param  int $filter_holiday_extension (optional)
     * @param  int $filter_holiday_locution (optional)
     * @param  int $filter_holiday_number_country (optional)
     * @param  string $filter_holiday_number_value (optional)
     * @param  string $filter_holiday_target_type (optional)
     * @param  int $filter_holiday_voice_mail_user (optional)
     * @param  string $filter_name (optional)
     * @param  int $filter_out_of_schedule_extension (optional)
     * @param  int $filter_out_of_schedule_locution (optional)
     * @param  int $filter_out_of_schedule_number_country (optional)
     * @param  string $filter_out_of_schedule_number_value (optional)
     * @param  string $filter_out_of_schedule_target_type (optional)
     * @param  int $filter_out_of_schedule_voice_mail_user (optional)
     * @param  int $filter_welcome_locution (optional)
     * @param  string $filter2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getExternalCallFilterRelCalendarCollectionRequest($calendar = null, $calendar_name = null, $calendar2 = null, $filter = null, $filter_holiday_extension = null, $filter_holiday_locution = null, $filter_holiday_number_country = null, $filter_holiday_number_value = null, $filter_holiday_target_type = null, $filter_holiday_voice_mail_user = null, $filter_name = null, $filter_out_of_schedule_extension = null, $filter_out_of_schedule_locution = null, $filter_out_of_schedule_number_country = null, $filter_out_of_schedule_number_value = null, $filter_out_of_schedule_target_type = null, $filter_out_of_schedule_voice_mail_user = null, $filter_welcome_locution = null, $filter2 = null, $id_exact = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/external_call_filter_rel_calendars';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($calendar !== null) {
            $queryParams['calendar'] = ObjectSerializer::toQueryValue($calendar);
        }
        // query params
        if ($calendar_name !== null) {
            $queryParams['calendar.name'] = ObjectSerializer::toQueryValue($calendar_name);
        }
        // query params
        if ($calendar2 !== null) {
            $queryParams['calendar[]'] = ObjectSerializer::toQueryValue($calendar2);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($filter_holiday_extension !== null) {
            $queryParams['filter.holidayExtension'] = ObjectSerializer::toQueryValue($filter_holiday_extension);
        }
        // query params
        if ($filter_holiday_locution !== null) {
            $queryParams['filter.holidayLocution'] = ObjectSerializer::toQueryValue($filter_holiday_locution);
        }
        // query params
        if ($filter_holiday_number_country !== null) {
            $queryParams['filter.holidayNumberCountry'] = ObjectSerializer::toQueryValue($filter_holiday_number_country);
        }
        // query params
        if ($filter_holiday_number_value !== null) {
            $queryParams['filter.holidayNumberValue'] = ObjectSerializer::toQueryValue($filter_holiday_number_value);
        }
        // query params
        if ($filter_holiday_target_type !== null) {
            $queryParams['filter.holidayTargetType'] = ObjectSerializer::toQueryValue($filter_holiday_target_type);
        }
        // query params
        if ($filter_holiday_voice_mail_user !== null) {
            $queryParams['filter.holidayVoiceMailUser'] = ObjectSerializer::toQueryValue($filter_holiday_voice_mail_user);
        }
        // query params
        if ($filter_name !== null) {
            $queryParams['filter.name'] = ObjectSerializer::toQueryValue($filter_name);
        }
        // query params
        if ($filter_out_of_schedule_extension !== null) {
            $queryParams['filter.outOfScheduleExtension'] = ObjectSerializer::toQueryValue($filter_out_of_schedule_extension);
        }
        // query params
        if ($filter_out_of_schedule_locution !== null) {
            $queryParams['filter.outOfScheduleLocution'] = ObjectSerializer::toQueryValue($filter_out_of_schedule_locution);
        }
        // query params
        if ($filter_out_of_schedule_number_country !== null) {
            $queryParams['filter.outOfScheduleNumberCountry'] = ObjectSerializer::toQueryValue($filter_out_of_schedule_number_country);
        }
        // query params
        if ($filter_out_of_schedule_number_value !== null) {
            $queryParams['filter.outOfScheduleNumberValue'] = ObjectSerializer::toQueryValue($filter_out_of_schedule_number_value);
        }
        // query params
        if ($filter_out_of_schedule_target_type !== null) {
            $queryParams['filter.outOfScheduleTargetType'] = ObjectSerializer::toQueryValue($filter_out_of_schedule_target_type);
        }
        // query params
        if ($filter_out_of_schedule_voice_mail_user !== null) {
            $queryParams['filter.outOfScheduleVoiceMailUser'] = ObjectSerializer::toQueryValue($filter_out_of_schedule_voice_mail_user);
        }
        // query params
        if ($filter_welcome_locution !== null) {
            $queryParams['filter.welcomeLocution'] = ObjectSerializer::toQueryValue($filter_welcome_locution);
        }
        // query params
        if ($filter2 !== null) {
            $queryParams['filter[]'] = ObjectSerializer::toQueryValue($filter2);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getExternalCallFilterRelCalendarItem
     *
     * Retrieves a ExternalCallFilterRelCalendar resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ExternalCallFilterRelCalendarDetailed
     */
    public function getExternalCallFilterRelCalendarItem($id)
    {
        list($response) = $this->getExternalCallFilterRelCalendarItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getExternalCallFilterRelCalendarItemWithHttpInfo
     *
     * Retrieves a ExternalCallFilterRelCalendar resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ExternalCallFilterRelCalendarDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getExternalCallFilterRelCalendarItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterRelCalendarDetailed';
        $request = $this->getExternalCallFilterRelCalendarItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ExternalCallFilterRelCalendarDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getExternalCallFilterRelCalendarItemAsync
     *
     * Retrieves a ExternalCallFilterRelCalendar resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExternalCallFilterRelCalendarItemAsync($id)
    {
        return $this->getExternalCallFilterRelCalendarItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getExternalCallFilterRelCalendarItemAsyncWithHttpInfo
     *
     * Retrieves a ExternalCallFilterRelCalendar resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExternalCallFilterRelCalendarItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterRelCalendarDetailed';
        $request = $this->getExternalCallFilterRelCalendarItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getExternalCallFilterRelCalendarItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getExternalCallFilterRelCalendarItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getExternalCallFilterRelCalendarItem'
            );
        }

        $resourcePath = '/external_call_filter_rel_calendars/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getExternalCallFilterRelScheduleCollection
     *
     * Retrieves the collection of ExternalCallFilterRelSchedule resources.
     *
     * @param  string $filter filter (optional)
     * @param  int $filter_holiday_extension filter_holiday_extension (optional)
     * @param  int $filter_holiday_locution filter_holiday_locution (optional)
     * @param  int $filter_holiday_number_country filter_holiday_number_country (optional)
     * @param  string $filter_holiday_number_value filter_holiday_number_value (optional)
     * @param  string $filter_holiday_target_type filter_holiday_target_type (optional)
     * @param  int $filter_holiday_voice_mail_user filter_holiday_voice_mail_user (optional)
     * @param  string $filter_name filter_name (optional)
     * @param  int $filter_out_of_schedule_extension filter_out_of_schedule_extension (optional)
     * @param  int $filter_out_of_schedule_locution filter_out_of_schedule_locution (optional)
     * @param  int $filter_out_of_schedule_number_country filter_out_of_schedule_number_country (optional)
     * @param  string $filter_out_of_schedule_number_value filter_out_of_schedule_number_value (optional)
     * @param  string $filter_out_of_schedule_target_type filter_out_of_schedule_target_type (optional)
     * @param  int $filter_out_of_schedule_voice_mail_user filter_out_of_schedule_voice_mail_user (optional)
     * @param  int $filter_welcome_locution filter_welcome_locution (optional)
     * @param  string $filter2 filter2 (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $schedule schedule (optional)
     * @param  bool $schedule_friday schedule_friday (optional)
     * @param  bool $schedule_monday schedule_monday (optional)
     * @param  string $schedule_name schedule_name (optional)
     * @param  bool $schedule_saturday schedule_saturday (optional)
     * @param  bool $schedule_sunday schedule_sunday (optional)
     * @param  bool $schedule_thursday schedule_thursday (optional)
     * @param  string $schedule_time_in schedule_time_in (optional)
     * @param  string $schedule_timeout schedule_timeout (optional)
     * @param  bool $schedule_tuesday schedule_tuesday (optional)
     * @param  bool $schedule_wednesday schedule_wednesday (optional)
     * @param  string $schedule2 schedule2 (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ExternalCallFilterRelScheduleDetailedCollection[]
     */
    public function getExternalCallFilterRelScheduleCollection($filter = null, $filter_holiday_extension = null, $filter_holiday_locution = null, $filter_holiday_number_country = null, $filter_holiday_number_value = null, $filter_holiday_target_type = null, $filter_holiday_voice_mail_user = null, $filter_name = null, $filter_out_of_schedule_extension = null, $filter_out_of_schedule_locution = null, $filter_out_of_schedule_number_country = null, $filter_out_of_schedule_number_value = null, $filter_out_of_schedule_target_type = null, $filter_out_of_schedule_voice_mail_user = null, $filter_welcome_locution = null, $filter2 = null, $id_exact = null, $schedule = null, $schedule_friday = null, $schedule_monday = null, $schedule_name = null, $schedule_saturday = null, $schedule_sunday = null, $schedule_thursday = null, $schedule_time_in = null, $schedule_timeout = null, $schedule_tuesday = null, $schedule_wednesday = null, $schedule2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getExternalCallFilterRelScheduleCollectionWithHttpInfo($filter, $filter_holiday_extension, $filter_holiday_locution, $filter_holiday_number_country, $filter_holiday_number_value, $filter_holiday_target_type, $filter_holiday_voice_mail_user, $filter_name, $filter_out_of_schedule_extension, $filter_out_of_schedule_locution, $filter_out_of_schedule_number_country, $filter_out_of_schedule_number_value, $filter_out_of_schedule_target_type, $filter_out_of_schedule_voice_mail_user, $filter_welcome_locution, $filter2, $id_exact, $schedule, $schedule_friday, $schedule_monday, $schedule_name, $schedule_saturday, $schedule_sunday, $schedule_thursday, $schedule_time_in, $schedule_timeout, $schedule_tuesday, $schedule_wednesday, $schedule2, $_order_id, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getExternalCallFilterRelScheduleCollectionWithHttpInfo
     *
     * Retrieves the collection of ExternalCallFilterRelSchedule resources.
     *
     * @param  string $filter (optional)
     * @param  int $filter_holiday_extension (optional)
     * @param  int $filter_holiday_locution (optional)
     * @param  int $filter_holiday_number_country (optional)
     * @param  string $filter_holiday_number_value (optional)
     * @param  string $filter_holiday_target_type (optional)
     * @param  int $filter_holiday_voice_mail_user (optional)
     * @param  string $filter_name (optional)
     * @param  int $filter_out_of_schedule_extension (optional)
     * @param  int $filter_out_of_schedule_locution (optional)
     * @param  int $filter_out_of_schedule_number_country (optional)
     * @param  string $filter_out_of_schedule_number_value (optional)
     * @param  string $filter_out_of_schedule_target_type (optional)
     * @param  int $filter_out_of_schedule_voice_mail_user (optional)
     * @param  int $filter_welcome_locution (optional)
     * @param  string $filter2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $schedule (optional)
     * @param  bool $schedule_friday (optional)
     * @param  bool $schedule_monday (optional)
     * @param  string $schedule_name (optional)
     * @param  bool $schedule_saturday (optional)
     * @param  bool $schedule_sunday (optional)
     * @param  bool $schedule_thursday (optional)
     * @param  string $schedule_time_in (optional)
     * @param  string $schedule_timeout (optional)
     * @param  bool $schedule_tuesday (optional)
     * @param  bool $schedule_wednesday (optional)
     * @param  string $schedule2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ExternalCallFilterRelScheduleDetailedCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getExternalCallFilterRelScheduleCollectionWithHttpInfo($filter = null, $filter_holiday_extension = null, $filter_holiday_locution = null, $filter_holiday_number_country = null, $filter_holiday_number_value = null, $filter_holiday_target_type = null, $filter_holiday_voice_mail_user = null, $filter_name = null, $filter_out_of_schedule_extension = null, $filter_out_of_schedule_locution = null, $filter_out_of_schedule_number_country = null, $filter_out_of_schedule_number_value = null, $filter_out_of_schedule_target_type = null, $filter_out_of_schedule_voice_mail_user = null, $filter_welcome_locution = null, $filter2 = null, $id_exact = null, $schedule = null, $schedule_friday = null, $schedule_monday = null, $schedule_name = null, $schedule_saturday = null, $schedule_sunday = null, $schedule_thursday = null, $schedule_time_in = null, $schedule_timeout = null, $schedule_tuesday = null, $schedule_wednesday = null, $schedule2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterRelScheduleDetailedCollection[]';
        $request = $this->getExternalCallFilterRelScheduleCollectionRequest($filter, $filter_holiday_extension, $filter_holiday_locution, $filter_holiday_number_country, $filter_holiday_number_value, $filter_holiday_target_type, $filter_holiday_voice_mail_user, $filter_name, $filter_out_of_schedule_extension, $filter_out_of_schedule_locution, $filter_out_of_schedule_number_country, $filter_out_of_schedule_number_value, $filter_out_of_schedule_target_type, $filter_out_of_schedule_voice_mail_user, $filter_welcome_locution, $filter2, $id_exact, $schedule, $schedule_friday, $schedule_monday, $schedule_name, $schedule_saturday, $schedule_sunday, $schedule_thursday, $schedule_time_in, $schedule_timeout, $schedule_tuesday, $schedule_wednesday, $schedule2, $_order_id, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ExternalCallFilterRelScheduleDetailedCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getExternalCallFilterRelScheduleCollectionAsync
     *
     * Retrieves the collection of ExternalCallFilterRelSchedule resources.
     *
     * @param  string $filter (optional)
     * @param  int $filter_holiday_extension (optional)
     * @param  int $filter_holiday_locution (optional)
     * @param  int $filter_holiday_number_country (optional)
     * @param  string $filter_holiday_number_value (optional)
     * @param  string $filter_holiday_target_type (optional)
     * @param  int $filter_holiday_voice_mail_user (optional)
     * @param  string $filter_name (optional)
     * @param  int $filter_out_of_schedule_extension (optional)
     * @param  int $filter_out_of_schedule_locution (optional)
     * @param  int $filter_out_of_schedule_number_country (optional)
     * @param  string $filter_out_of_schedule_number_value (optional)
     * @param  string $filter_out_of_schedule_target_type (optional)
     * @param  int $filter_out_of_schedule_voice_mail_user (optional)
     * @param  int $filter_welcome_locution (optional)
     * @param  string $filter2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $schedule (optional)
     * @param  bool $schedule_friday (optional)
     * @param  bool $schedule_monday (optional)
     * @param  string $schedule_name (optional)
     * @param  bool $schedule_saturday (optional)
     * @param  bool $schedule_sunday (optional)
     * @param  bool $schedule_thursday (optional)
     * @param  string $schedule_time_in (optional)
     * @param  string $schedule_timeout (optional)
     * @param  bool $schedule_tuesday (optional)
     * @param  bool $schedule_wednesday (optional)
     * @param  string $schedule2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExternalCallFilterRelScheduleCollectionAsync($filter = null, $filter_holiday_extension = null, $filter_holiday_locution = null, $filter_holiday_number_country = null, $filter_holiday_number_value = null, $filter_holiday_target_type = null, $filter_holiday_voice_mail_user = null, $filter_name = null, $filter_out_of_schedule_extension = null, $filter_out_of_schedule_locution = null, $filter_out_of_schedule_number_country = null, $filter_out_of_schedule_number_value = null, $filter_out_of_schedule_target_type = null, $filter_out_of_schedule_voice_mail_user = null, $filter_welcome_locution = null, $filter2 = null, $id_exact = null, $schedule = null, $schedule_friday = null, $schedule_monday = null, $schedule_name = null, $schedule_saturday = null, $schedule_sunday = null, $schedule_thursday = null, $schedule_time_in = null, $schedule_timeout = null, $schedule_tuesday = null, $schedule_wednesday = null, $schedule2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getExternalCallFilterRelScheduleCollectionAsyncWithHttpInfo($filter, $filter_holiday_extension, $filter_holiday_locution, $filter_holiday_number_country, $filter_holiday_number_value, $filter_holiday_target_type, $filter_holiday_voice_mail_user, $filter_name, $filter_out_of_schedule_extension, $filter_out_of_schedule_locution, $filter_out_of_schedule_number_country, $filter_out_of_schedule_number_value, $filter_out_of_schedule_target_type, $filter_out_of_schedule_voice_mail_user, $filter_welcome_locution, $filter2, $id_exact, $schedule, $schedule_friday, $schedule_monday, $schedule_name, $schedule_saturday, $schedule_sunday, $schedule_thursday, $schedule_time_in, $schedule_timeout, $schedule_tuesday, $schedule_wednesday, $schedule2, $_order_id, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getExternalCallFilterRelScheduleCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of ExternalCallFilterRelSchedule resources.
     *
     * @param  string $filter (optional)
     * @param  int $filter_holiday_extension (optional)
     * @param  int $filter_holiday_locution (optional)
     * @param  int $filter_holiday_number_country (optional)
     * @param  string $filter_holiday_number_value (optional)
     * @param  string $filter_holiday_target_type (optional)
     * @param  int $filter_holiday_voice_mail_user (optional)
     * @param  string $filter_name (optional)
     * @param  int $filter_out_of_schedule_extension (optional)
     * @param  int $filter_out_of_schedule_locution (optional)
     * @param  int $filter_out_of_schedule_number_country (optional)
     * @param  string $filter_out_of_schedule_number_value (optional)
     * @param  string $filter_out_of_schedule_target_type (optional)
     * @param  int $filter_out_of_schedule_voice_mail_user (optional)
     * @param  int $filter_welcome_locution (optional)
     * @param  string $filter2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $schedule (optional)
     * @param  bool $schedule_friday (optional)
     * @param  bool $schedule_monday (optional)
     * @param  string $schedule_name (optional)
     * @param  bool $schedule_saturday (optional)
     * @param  bool $schedule_sunday (optional)
     * @param  bool $schedule_thursday (optional)
     * @param  string $schedule_time_in (optional)
     * @param  string $schedule_timeout (optional)
     * @param  bool $schedule_tuesday (optional)
     * @param  bool $schedule_wednesday (optional)
     * @param  string $schedule2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExternalCallFilterRelScheduleCollectionAsyncWithHttpInfo($filter = null, $filter_holiday_extension = null, $filter_holiday_locution = null, $filter_holiday_number_country = null, $filter_holiday_number_value = null, $filter_holiday_target_type = null, $filter_holiday_voice_mail_user = null, $filter_name = null, $filter_out_of_schedule_extension = null, $filter_out_of_schedule_locution = null, $filter_out_of_schedule_number_country = null, $filter_out_of_schedule_number_value = null, $filter_out_of_schedule_target_type = null, $filter_out_of_schedule_voice_mail_user = null, $filter_welcome_locution = null, $filter2 = null, $id_exact = null, $schedule = null, $schedule_friday = null, $schedule_monday = null, $schedule_name = null, $schedule_saturday = null, $schedule_sunday = null, $schedule_thursday = null, $schedule_time_in = null, $schedule_timeout = null, $schedule_tuesday = null, $schedule_wednesday = null, $schedule2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterRelScheduleDetailedCollection[]';
        $request = $this->getExternalCallFilterRelScheduleCollectionRequest($filter, $filter_holiday_extension, $filter_holiday_locution, $filter_holiday_number_country, $filter_holiday_number_value, $filter_holiday_target_type, $filter_holiday_voice_mail_user, $filter_name, $filter_out_of_schedule_extension, $filter_out_of_schedule_locution, $filter_out_of_schedule_number_country, $filter_out_of_schedule_number_value, $filter_out_of_schedule_target_type, $filter_out_of_schedule_voice_mail_user, $filter_welcome_locution, $filter2, $id_exact, $schedule, $schedule_friday, $schedule_monday, $schedule_name, $schedule_saturday, $schedule_sunday, $schedule_thursday, $schedule_time_in, $schedule_timeout, $schedule_tuesday, $schedule_wednesday, $schedule2, $_order_id, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getExternalCallFilterRelScheduleCollection'
     *
     * @param  string $filter (optional)
     * @param  int $filter_holiday_extension (optional)
     * @param  int $filter_holiday_locution (optional)
     * @param  int $filter_holiday_number_country (optional)
     * @param  string $filter_holiday_number_value (optional)
     * @param  string $filter_holiday_target_type (optional)
     * @param  int $filter_holiday_voice_mail_user (optional)
     * @param  string $filter_name (optional)
     * @param  int $filter_out_of_schedule_extension (optional)
     * @param  int $filter_out_of_schedule_locution (optional)
     * @param  int $filter_out_of_schedule_number_country (optional)
     * @param  string $filter_out_of_schedule_number_value (optional)
     * @param  string $filter_out_of_schedule_target_type (optional)
     * @param  int $filter_out_of_schedule_voice_mail_user (optional)
     * @param  int $filter_welcome_locution (optional)
     * @param  string $filter2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $schedule (optional)
     * @param  bool $schedule_friday (optional)
     * @param  bool $schedule_monday (optional)
     * @param  string $schedule_name (optional)
     * @param  bool $schedule_saturday (optional)
     * @param  bool $schedule_sunday (optional)
     * @param  bool $schedule_thursday (optional)
     * @param  string $schedule_time_in (optional)
     * @param  string $schedule_timeout (optional)
     * @param  bool $schedule_tuesday (optional)
     * @param  bool $schedule_wednesday (optional)
     * @param  string $schedule2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getExternalCallFilterRelScheduleCollectionRequest($filter = null, $filter_holiday_extension = null, $filter_holiday_locution = null, $filter_holiday_number_country = null, $filter_holiday_number_value = null, $filter_holiday_target_type = null, $filter_holiday_voice_mail_user = null, $filter_name = null, $filter_out_of_schedule_extension = null, $filter_out_of_schedule_locution = null, $filter_out_of_schedule_number_country = null, $filter_out_of_schedule_number_value = null, $filter_out_of_schedule_target_type = null, $filter_out_of_schedule_voice_mail_user = null, $filter_welcome_locution = null, $filter2 = null, $id_exact = null, $schedule = null, $schedule_friday = null, $schedule_monday = null, $schedule_name = null, $schedule_saturday = null, $schedule_sunday = null, $schedule_thursday = null, $schedule_time_in = null, $schedule_timeout = null, $schedule_tuesday = null, $schedule_wednesday = null, $schedule2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/external_call_filter_rel_schedules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($filter_holiday_extension !== null) {
            $queryParams['filter.holidayExtension'] = ObjectSerializer::toQueryValue($filter_holiday_extension);
        }
        // query params
        if ($filter_holiday_locution !== null) {
            $queryParams['filter.holidayLocution'] = ObjectSerializer::toQueryValue($filter_holiday_locution);
        }
        // query params
        if ($filter_holiday_number_country !== null) {
            $queryParams['filter.holidayNumberCountry'] = ObjectSerializer::toQueryValue($filter_holiday_number_country);
        }
        // query params
        if ($filter_holiday_number_value !== null) {
            $queryParams['filter.holidayNumberValue'] = ObjectSerializer::toQueryValue($filter_holiday_number_value);
        }
        // query params
        if ($filter_holiday_target_type !== null) {
            $queryParams['filter.holidayTargetType'] = ObjectSerializer::toQueryValue($filter_holiday_target_type);
        }
        // query params
        if ($filter_holiday_voice_mail_user !== null) {
            $queryParams['filter.holidayVoiceMailUser'] = ObjectSerializer::toQueryValue($filter_holiday_voice_mail_user);
        }
        // query params
        if ($filter_name !== null) {
            $queryParams['filter.name'] = ObjectSerializer::toQueryValue($filter_name);
        }
        // query params
        if ($filter_out_of_schedule_extension !== null) {
            $queryParams['filter.outOfScheduleExtension'] = ObjectSerializer::toQueryValue($filter_out_of_schedule_extension);
        }
        // query params
        if ($filter_out_of_schedule_locution !== null) {
            $queryParams['filter.outOfScheduleLocution'] = ObjectSerializer::toQueryValue($filter_out_of_schedule_locution);
        }
        // query params
        if ($filter_out_of_schedule_number_country !== null) {
            $queryParams['filter.outOfScheduleNumberCountry'] = ObjectSerializer::toQueryValue($filter_out_of_schedule_number_country);
        }
        // query params
        if ($filter_out_of_schedule_number_value !== null) {
            $queryParams['filter.outOfScheduleNumberValue'] = ObjectSerializer::toQueryValue($filter_out_of_schedule_number_value);
        }
        // query params
        if ($filter_out_of_schedule_target_type !== null) {
            $queryParams['filter.outOfScheduleTargetType'] = ObjectSerializer::toQueryValue($filter_out_of_schedule_target_type);
        }
        // query params
        if ($filter_out_of_schedule_voice_mail_user !== null) {
            $queryParams['filter.outOfScheduleVoiceMailUser'] = ObjectSerializer::toQueryValue($filter_out_of_schedule_voice_mail_user);
        }
        // query params
        if ($filter_welcome_locution !== null) {
            $queryParams['filter.welcomeLocution'] = ObjectSerializer::toQueryValue($filter_welcome_locution);
        }
        // query params
        if ($filter2 !== null) {
            $queryParams['filter[]'] = ObjectSerializer::toQueryValue($filter2);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($schedule !== null) {
            $queryParams['schedule'] = ObjectSerializer::toQueryValue($schedule);
        }
        // query params
        if ($schedule_friday !== null) {
            $queryParams['schedule.friday'] = ObjectSerializer::toQueryValue($schedule_friday);
        }
        // query params
        if ($schedule_monday !== null) {
            $queryParams['schedule.monday'] = ObjectSerializer::toQueryValue($schedule_monday);
        }
        // query params
        if ($schedule_name !== null) {
            $queryParams['schedule.name'] = ObjectSerializer::toQueryValue($schedule_name);
        }
        // query params
        if ($schedule_saturday !== null) {
            $queryParams['schedule.saturday'] = ObjectSerializer::toQueryValue($schedule_saturday);
        }
        // query params
        if ($schedule_sunday !== null) {
            $queryParams['schedule.sunday'] = ObjectSerializer::toQueryValue($schedule_sunday);
        }
        // query params
        if ($schedule_thursday !== null) {
            $queryParams['schedule.thursday'] = ObjectSerializer::toQueryValue($schedule_thursday);
        }
        // query params
        if ($schedule_time_in !== null) {
            $queryParams['schedule.timeIn'] = ObjectSerializer::toQueryValue($schedule_time_in);
        }
        // query params
        if ($schedule_timeout !== null) {
            $queryParams['schedule.timeout'] = ObjectSerializer::toQueryValue($schedule_timeout);
        }
        // query params
        if ($schedule_tuesday !== null) {
            $queryParams['schedule.tuesday'] = ObjectSerializer::toQueryValue($schedule_tuesday);
        }
        // query params
        if ($schedule_wednesday !== null) {
            $queryParams['schedule.wednesday'] = ObjectSerializer::toQueryValue($schedule_wednesday);
        }
        // query params
        if ($schedule2 !== null) {
            $queryParams['schedule[]'] = ObjectSerializer::toQueryValue($schedule2);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getExternalCallFilterRelScheduleItem
     *
     * Retrieves a ExternalCallFilterRelSchedule resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ExternalCallFilterRelScheduleDetailed
     */
    public function getExternalCallFilterRelScheduleItem($id)
    {
        list($response) = $this->getExternalCallFilterRelScheduleItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getExternalCallFilterRelScheduleItemWithHttpInfo
     *
     * Retrieves a ExternalCallFilterRelSchedule resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ExternalCallFilterRelScheduleDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getExternalCallFilterRelScheduleItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterRelScheduleDetailed';
        $request = $this->getExternalCallFilterRelScheduleItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ExternalCallFilterRelScheduleDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getExternalCallFilterRelScheduleItemAsync
     *
     * Retrieves a ExternalCallFilterRelSchedule resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExternalCallFilterRelScheduleItemAsync($id)
    {
        return $this->getExternalCallFilterRelScheduleItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getExternalCallFilterRelScheduleItemAsyncWithHttpInfo
     *
     * Retrieves a ExternalCallFilterRelSchedule resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExternalCallFilterRelScheduleItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterRelScheduleDetailed';
        $request = $this->getExternalCallFilterRelScheduleItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getExternalCallFilterRelScheduleItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getExternalCallFilterRelScheduleItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getExternalCallFilterRelScheduleItem'
            );
        }

        $resourcePath = '/external_call_filter_rel_schedules/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getExternalCallFilterWhiteListCollection
     *
     * Retrieves the collection of ExternalCallFilterWhiteList resources.
     *
     * @param  string $filter filter (optional)
     * @param  int $filter_holiday_extension filter_holiday_extension (optional)
     * @param  int $filter_holiday_locution filter_holiday_locution (optional)
     * @param  int $filter_holiday_number_country filter_holiday_number_country (optional)
     * @param  string $filter_holiday_number_value filter_holiday_number_value (optional)
     * @param  string $filter_holiday_target_type filter_holiday_target_type (optional)
     * @param  int $filter_holiday_voice_mail_user filter_holiday_voice_mail_user (optional)
     * @param  string $filter_name filter_name (optional)
     * @param  int $filter_out_of_schedule_extension filter_out_of_schedule_extension (optional)
     * @param  int $filter_out_of_schedule_locution filter_out_of_schedule_locution (optional)
     * @param  int $filter_out_of_schedule_number_country filter_out_of_schedule_number_country (optional)
     * @param  string $filter_out_of_schedule_number_value filter_out_of_schedule_number_value (optional)
     * @param  string $filter_out_of_schedule_target_type filter_out_of_schedule_target_type (optional)
     * @param  int $filter_out_of_schedule_voice_mail_user filter_out_of_schedule_voice_mail_user (optional)
     * @param  int $filter_welcome_locution filter_welcome_locution (optional)
     * @param  string $filter2 filter2 (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $matchlist matchlist (optional)
     * @param  string $matchlist_name matchlist_name (optional)
     * @param  string $matchlist2 matchlist2 (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ExternalCallFilterWhiteListDetailedCollection[]
     */
    public function getExternalCallFilterWhiteListCollection($filter = null, $filter_holiday_extension = null, $filter_holiday_locution = null, $filter_holiday_number_country = null, $filter_holiday_number_value = null, $filter_holiday_target_type = null, $filter_holiday_voice_mail_user = null, $filter_name = null, $filter_out_of_schedule_extension = null, $filter_out_of_schedule_locution = null, $filter_out_of_schedule_number_country = null, $filter_out_of_schedule_number_value = null, $filter_out_of_schedule_target_type = null, $filter_out_of_schedule_voice_mail_user = null, $filter_welcome_locution = null, $filter2 = null, $id_exact = null, $matchlist = null, $matchlist_name = null, $matchlist2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getExternalCallFilterWhiteListCollectionWithHttpInfo($filter, $filter_holiday_extension, $filter_holiday_locution, $filter_holiday_number_country, $filter_holiday_number_value, $filter_holiday_target_type, $filter_holiday_voice_mail_user, $filter_name, $filter_out_of_schedule_extension, $filter_out_of_schedule_locution, $filter_out_of_schedule_number_country, $filter_out_of_schedule_number_value, $filter_out_of_schedule_target_type, $filter_out_of_schedule_voice_mail_user, $filter_welcome_locution, $filter2, $id_exact, $matchlist, $matchlist_name, $matchlist2, $_order_id, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getExternalCallFilterWhiteListCollectionWithHttpInfo
     *
     * Retrieves the collection of ExternalCallFilterWhiteList resources.
     *
     * @param  string $filter (optional)
     * @param  int $filter_holiday_extension (optional)
     * @param  int $filter_holiday_locution (optional)
     * @param  int $filter_holiday_number_country (optional)
     * @param  string $filter_holiday_number_value (optional)
     * @param  string $filter_holiday_target_type (optional)
     * @param  int $filter_holiday_voice_mail_user (optional)
     * @param  string $filter_name (optional)
     * @param  int $filter_out_of_schedule_extension (optional)
     * @param  int $filter_out_of_schedule_locution (optional)
     * @param  int $filter_out_of_schedule_number_country (optional)
     * @param  string $filter_out_of_schedule_number_value (optional)
     * @param  string $filter_out_of_schedule_target_type (optional)
     * @param  int $filter_out_of_schedule_voice_mail_user (optional)
     * @param  int $filter_welcome_locution (optional)
     * @param  string $filter2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $matchlist (optional)
     * @param  string $matchlist_name (optional)
     * @param  string $matchlist2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ExternalCallFilterWhiteListDetailedCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getExternalCallFilterWhiteListCollectionWithHttpInfo($filter = null, $filter_holiday_extension = null, $filter_holiday_locution = null, $filter_holiday_number_country = null, $filter_holiday_number_value = null, $filter_holiday_target_type = null, $filter_holiday_voice_mail_user = null, $filter_name = null, $filter_out_of_schedule_extension = null, $filter_out_of_schedule_locution = null, $filter_out_of_schedule_number_country = null, $filter_out_of_schedule_number_value = null, $filter_out_of_schedule_target_type = null, $filter_out_of_schedule_voice_mail_user = null, $filter_welcome_locution = null, $filter2 = null, $id_exact = null, $matchlist = null, $matchlist_name = null, $matchlist2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterWhiteListDetailedCollection[]';
        $request = $this->getExternalCallFilterWhiteListCollectionRequest($filter, $filter_holiday_extension, $filter_holiday_locution, $filter_holiday_number_country, $filter_holiday_number_value, $filter_holiday_target_type, $filter_holiday_voice_mail_user, $filter_name, $filter_out_of_schedule_extension, $filter_out_of_schedule_locution, $filter_out_of_schedule_number_country, $filter_out_of_schedule_number_value, $filter_out_of_schedule_target_type, $filter_out_of_schedule_voice_mail_user, $filter_welcome_locution, $filter2, $id_exact, $matchlist, $matchlist_name, $matchlist2, $_order_id, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ExternalCallFilterWhiteListDetailedCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getExternalCallFilterWhiteListCollectionAsync
     *
     * Retrieves the collection of ExternalCallFilterWhiteList resources.
     *
     * @param  string $filter (optional)
     * @param  int $filter_holiday_extension (optional)
     * @param  int $filter_holiday_locution (optional)
     * @param  int $filter_holiday_number_country (optional)
     * @param  string $filter_holiday_number_value (optional)
     * @param  string $filter_holiday_target_type (optional)
     * @param  int $filter_holiday_voice_mail_user (optional)
     * @param  string $filter_name (optional)
     * @param  int $filter_out_of_schedule_extension (optional)
     * @param  int $filter_out_of_schedule_locution (optional)
     * @param  int $filter_out_of_schedule_number_country (optional)
     * @param  string $filter_out_of_schedule_number_value (optional)
     * @param  string $filter_out_of_schedule_target_type (optional)
     * @param  int $filter_out_of_schedule_voice_mail_user (optional)
     * @param  int $filter_welcome_locution (optional)
     * @param  string $filter2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $matchlist (optional)
     * @param  string $matchlist_name (optional)
     * @param  string $matchlist2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExternalCallFilterWhiteListCollectionAsync($filter = null, $filter_holiday_extension = null, $filter_holiday_locution = null, $filter_holiday_number_country = null, $filter_holiday_number_value = null, $filter_holiday_target_type = null, $filter_holiday_voice_mail_user = null, $filter_name = null, $filter_out_of_schedule_extension = null, $filter_out_of_schedule_locution = null, $filter_out_of_schedule_number_country = null, $filter_out_of_schedule_number_value = null, $filter_out_of_schedule_target_type = null, $filter_out_of_schedule_voice_mail_user = null, $filter_welcome_locution = null, $filter2 = null, $id_exact = null, $matchlist = null, $matchlist_name = null, $matchlist2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getExternalCallFilterWhiteListCollectionAsyncWithHttpInfo($filter, $filter_holiday_extension, $filter_holiday_locution, $filter_holiday_number_country, $filter_holiday_number_value, $filter_holiday_target_type, $filter_holiday_voice_mail_user, $filter_name, $filter_out_of_schedule_extension, $filter_out_of_schedule_locution, $filter_out_of_schedule_number_country, $filter_out_of_schedule_number_value, $filter_out_of_schedule_target_type, $filter_out_of_schedule_voice_mail_user, $filter_welcome_locution, $filter2, $id_exact, $matchlist, $matchlist_name, $matchlist2, $_order_id, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getExternalCallFilterWhiteListCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of ExternalCallFilterWhiteList resources.
     *
     * @param  string $filter (optional)
     * @param  int $filter_holiday_extension (optional)
     * @param  int $filter_holiday_locution (optional)
     * @param  int $filter_holiday_number_country (optional)
     * @param  string $filter_holiday_number_value (optional)
     * @param  string $filter_holiday_target_type (optional)
     * @param  int $filter_holiday_voice_mail_user (optional)
     * @param  string $filter_name (optional)
     * @param  int $filter_out_of_schedule_extension (optional)
     * @param  int $filter_out_of_schedule_locution (optional)
     * @param  int $filter_out_of_schedule_number_country (optional)
     * @param  string $filter_out_of_schedule_number_value (optional)
     * @param  string $filter_out_of_schedule_target_type (optional)
     * @param  int $filter_out_of_schedule_voice_mail_user (optional)
     * @param  int $filter_welcome_locution (optional)
     * @param  string $filter2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $matchlist (optional)
     * @param  string $matchlist_name (optional)
     * @param  string $matchlist2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExternalCallFilterWhiteListCollectionAsyncWithHttpInfo($filter = null, $filter_holiday_extension = null, $filter_holiday_locution = null, $filter_holiday_number_country = null, $filter_holiday_number_value = null, $filter_holiday_target_type = null, $filter_holiday_voice_mail_user = null, $filter_name = null, $filter_out_of_schedule_extension = null, $filter_out_of_schedule_locution = null, $filter_out_of_schedule_number_country = null, $filter_out_of_schedule_number_value = null, $filter_out_of_schedule_target_type = null, $filter_out_of_schedule_voice_mail_user = null, $filter_welcome_locution = null, $filter2 = null, $id_exact = null, $matchlist = null, $matchlist_name = null, $matchlist2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterWhiteListDetailedCollection[]';
        $request = $this->getExternalCallFilterWhiteListCollectionRequest($filter, $filter_holiday_extension, $filter_holiday_locution, $filter_holiday_number_country, $filter_holiday_number_value, $filter_holiday_target_type, $filter_holiday_voice_mail_user, $filter_name, $filter_out_of_schedule_extension, $filter_out_of_schedule_locution, $filter_out_of_schedule_number_country, $filter_out_of_schedule_number_value, $filter_out_of_schedule_target_type, $filter_out_of_schedule_voice_mail_user, $filter_welcome_locution, $filter2, $id_exact, $matchlist, $matchlist_name, $matchlist2, $_order_id, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getExternalCallFilterWhiteListCollection'
     *
     * @param  string $filter (optional)
     * @param  int $filter_holiday_extension (optional)
     * @param  int $filter_holiday_locution (optional)
     * @param  int $filter_holiday_number_country (optional)
     * @param  string $filter_holiday_number_value (optional)
     * @param  string $filter_holiday_target_type (optional)
     * @param  int $filter_holiday_voice_mail_user (optional)
     * @param  string $filter_name (optional)
     * @param  int $filter_out_of_schedule_extension (optional)
     * @param  int $filter_out_of_schedule_locution (optional)
     * @param  int $filter_out_of_schedule_number_country (optional)
     * @param  string $filter_out_of_schedule_number_value (optional)
     * @param  string $filter_out_of_schedule_target_type (optional)
     * @param  int $filter_out_of_schedule_voice_mail_user (optional)
     * @param  int $filter_welcome_locution (optional)
     * @param  string $filter2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $matchlist (optional)
     * @param  string $matchlist_name (optional)
     * @param  string $matchlist2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getExternalCallFilterWhiteListCollectionRequest($filter = null, $filter_holiday_extension = null, $filter_holiday_locution = null, $filter_holiday_number_country = null, $filter_holiday_number_value = null, $filter_holiday_target_type = null, $filter_holiday_voice_mail_user = null, $filter_name = null, $filter_out_of_schedule_extension = null, $filter_out_of_schedule_locution = null, $filter_out_of_schedule_number_country = null, $filter_out_of_schedule_number_value = null, $filter_out_of_schedule_target_type = null, $filter_out_of_schedule_voice_mail_user = null, $filter_welcome_locution = null, $filter2 = null, $id_exact = null, $matchlist = null, $matchlist_name = null, $matchlist2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/external_call_filter_white_lists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($filter_holiday_extension !== null) {
            $queryParams['filter.holidayExtension'] = ObjectSerializer::toQueryValue($filter_holiday_extension);
        }
        // query params
        if ($filter_holiday_locution !== null) {
            $queryParams['filter.holidayLocution'] = ObjectSerializer::toQueryValue($filter_holiday_locution);
        }
        // query params
        if ($filter_holiday_number_country !== null) {
            $queryParams['filter.holidayNumberCountry'] = ObjectSerializer::toQueryValue($filter_holiday_number_country);
        }
        // query params
        if ($filter_holiday_number_value !== null) {
            $queryParams['filter.holidayNumberValue'] = ObjectSerializer::toQueryValue($filter_holiday_number_value);
        }
        // query params
        if ($filter_holiday_target_type !== null) {
            $queryParams['filter.holidayTargetType'] = ObjectSerializer::toQueryValue($filter_holiday_target_type);
        }
        // query params
        if ($filter_holiday_voice_mail_user !== null) {
            $queryParams['filter.holidayVoiceMailUser'] = ObjectSerializer::toQueryValue($filter_holiday_voice_mail_user);
        }
        // query params
        if ($filter_name !== null) {
            $queryParams['filter.name'] = ObjectSerializer::toQueryValue($filter_name);
        }
        // query params
        if ($filter_out_of_schedule_extension !== null) {
            $queryParams['filter.outOfScheduleExtension'] = ObjectSerializer::toQueryValue($filter_out_of_schedule_extension);
        }
        // query params
        if ($filter_out_of_schedule_locution !== null) {
            $queryParams['filter.outOfScheduleLocution'] = ObjectSerializer::toQueryValue($filter_out_of_schedule_locution);
        }
        // query params
        if ($filter_out_of_schedule_number_country !== null) {
            $queryParams['filter.outOfScheduleNumberCountry'] = ObjectSerializer::toQueryValue($filter_out_of_schedule_number_country);
        }
        // query params
        if ($filter_out_of_schedule_number_value !== null) {
            $queryParams['filter.outOfScheduleNumberValue'] = ObjectSerializer::toQueryValue($filter_out_of_schedule_number_value);
        }
        // query params
        if ($filter_out_of_schedule_target_type !== null) {
            $queryParams['filter.outOfScheduleTargetType'] = ObjectSerializer::toQueryValue($filter_out_of_schedule_target_type);
        }
        // query params
        if ($filter_out_of_schedule_voice_mail_user !== null) {
            $queryParams['filter.outOfScheduleVoiceMailUser'] = ObjectSerializer::toQueryValue($filter_out_of_schedule_voice_mail_user);
        }
        // query params
        if ($filter_welcome_locution !== null) {
            $queryParams['filter.welcomeLocution'] = ObjectSerializer::toQueryValue($filter_welcome_locution);
        }
        // query params
        if ($filter2 !== null) {
            $queryParams['filter[]'] = ObjectSerializer::toQueryValue($filter2);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($matchlist !== null) {
            $queryParams['matchlist'] = ObjectSerializer::toQueryValue($matchlist);
        }
        // query params
        if ($matchlist_name !== null) {
            $queryParams['matchlist.name'] = ObjectSerializer::toQueryValue($matchlist_name);
        }
        // query params
        if ($matchlist2 !== null) {
            $queryParams['matchlist[]'] = ObjectSerializer::toQueryValue($matchlist2);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getExternalCallFilterWhiteListItem
     *
     * Retrieves a ExternalCallFilterWhiteList resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ExternalCallFilterWhiteListDetailed
     */
    public function getExternalCallFilterWhiteListItem($id)
    {
        list($response) = $this->getExternalCallFilterWhiteListItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getExternalCallFilterWhiteListItemWithHttpInfo
     *
     * Retrieves a ExternalCallFilterWhiteList resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ExternalCallFilterWhiteListDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getExternalCallFilterWhiteListItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterWhiteListDetailed';
        $request = $this->getExternalCallFilterWhiteListItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ExternalCallFilterWhiteListDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getExternalCallFilterWhiteListItemAsync
     *
     * Retrieves a ExternalCallFilterWhiteList resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExternalCallFilterWhiteListItemAsync($id)
    {
        return $this->getExternalCallFilterWhiteListItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getExternalCallFilterWhiteListItemAsyncWithHttpInfo
     *
     * Retrieves a ExternalCallFilterWhiteList resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExternalCallFilterWhiteListItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterWhiteListDetailed';
        $request = $this->getExternalCallFilterWhiteListItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getExternalCallFilterWhiteListItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getExternalCallFilterWhiteListItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getExternalCallFilterWhiteListItem'
            );
        }

        $resourcePath = '/external_call_filter_white_lists/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFaxCollection
     *
     * Retrieves the collection of Fax resources.
     *
     * @param  string $email email (optional)
     * @param  string $email_end email_end (optional)
     * @param  string $email_exact email_exact (optional)
     * @param  bool $email_exists email_exists (optional)
     * @param  string $email_partial email_partial (optional)
     * @param  string $email_start email_start (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $name name (optional)
     * @param  string $name_end name_end (optional)
     * @param  string $name_exact name_exact (optional)
     * @param  string $name_partial name_partial (optional)
     * @param  string $name_start name_start (optional)
     * @param  string $outgoing_ddi outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists outgoing_ddi_exists (optional)
     * @param  bool $send_by_email send_by_email (optional)
     * @param  string $_order_email _order_email (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_name _order_name (optional)
     * @param  string $_order_send_by_email _order_send_by_email (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\FaxCollection[]
     */
    public function getFaxCollection($email = null, $email_end = null, $email_exact = null, $email_exists = null, $email_partial = null, $email_start = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $send_by_email = null, $_order_email = null, $_order_id = null, $_order_name = null, $_order_send_by_email = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getFaxCollectionWithHttpInfo($email, $email_end, $email_exact, $email_exists, $email_partial, $email_start, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $outgoing_ddi, $outgoing_ddi2, $outgoing_ddi_exists, $send_by_email, $_order_email, $_order_id, $_order_name, $_order_send_by_email, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getFaxCollectionWithHttpInfo
     *
     * Retrieves the collection of Fax resources.
     *
     * @param  string $email (optional)
     * @param  string $email_end (optional)
     * @param  string $email_exact (optional)
     * @param  bool $email_exists (optional)
     * @param  string $email_partial (optional)
     * @param  string $email_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  bool $send_by_email (optional)
     * @param  string $_order_email (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_send_by_email (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\FaxCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getFaxCollectionWithHttpInfo($email = null, $email_end = null, $email_exact = null, $email_exists = null, $email_partial = null, $email_start = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $send_by_email = null, $_order_email = null, $_order_id = null, $_order_name = null, $_order_send_by_email = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\FaxCollection[]';
        $request = $this->getFaxCollectionRequest($email, $email_end, $email_exact, $email_exists, $email_partial, $email_start, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $outgoing_ddi, $outgoing_ddi2, $outgoing_ddi_exists, $send_by_email, $_order_email, $_order_id, $_order_name, $_order_send_by_email, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\FaxCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFaxCollectionAsync
     *
     * Retrieves the collection of Fax resources.
     *
     * @param  string $email (optional)
     * @param  string $email_end (optional)
     * @param  string $email_exact (optional)
     * @param  bool $email_exists (optional)
     * @param  string $email_partial (optional)
     * @param  string $email_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  bool $send_by_email (optional)
     * @param  string $_order_email (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_send_by_email (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFaxCollectionAsync($email = null, $email_end = null, $email_exact = null, $email_exists = null, $email_partial = null, $email_start = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $send_by_email = null, $_order_email = null, $_order_id = null, $_order_name = null, $_order_send_by_email = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getFaxCollectionAsyncWithHttpInfo($email, $email_end, $email_exact, $email_exists, $email_partial, $email_start, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $outgoing_ddi, $outgoing_ddi2, $outgoing_ddi_exists, $send_by_email, $_order_email, $_order_id, $_order_name, $_order_send_by_email, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFaxCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of Fax resources.
     *
     * @param  string $email (optional)
     * @param  string $email_end (optional)
     * @param  string $email_exact (optional)
     * @param  bool $email_exists (optional)
     * @param  string $email_partial (optional)
     * @param  string $email_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  bool $send_by_email (optional)
     * @param  string $_order_email (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_send_by_email (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFaxCollectionAsyncWithHttpInfo($email = null, $email_end = null, $email_exact = null, $email_exists = null, $email_partial = null, $email_start = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $send_by_email = null, $_order_email = null, $_order_id = null, $_order_name = null, $_order_send_by_email = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\FaxCollection[]';
        $request = $this->getFaxCollectionRequest($email, $email_end, $email_exact, $email_exists, $email_partial, $email_start, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $outgoing_ddi, $outgoing_ddi2, $outgoing_ddi_exists, $send_by_email, $_order_email, $_order_id, $_order_name, $_order_send_by_email, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFaxCollection'
     *
     * @param  string $email (optional)
     * @param  string $email_end (optional)
     * @param  string $email_exact (optional)
     * @param  bool $email_exists (optional)
     * @param  string $email_partial (optional)
     * @param  string $email_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  bool $send_by_email (optional)
     * @param  string $_order_email (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_send_by_email (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFaxCollectionRequest($email = null, $email_end = null, $email_exact = null, $email_exists = null, $email_partial = null, $email_start = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $send_by_email = null, $_order_email = null, $_order_id = null, $_order_name = null, $_order_send_by_email = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/faxes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email);
        }
        // query params
        if ($email_end !== null) {
            $queryParams['email[end]'] = ObjectSerializer::toQueryValue($email_end);
        }
        // query params
        if ($email_exact !== null) {
            $queryParams['email[exact]'] = ObjectSerializer::toQueryValue($email_exact);
        }
        // query params
        if ($email_exists !== null) {
            $queryParams['email[exists]'] = ObjectSerializer::toQueryValue($email_exists);
        }
        // query params
        if ($email_partial !== null) {
            $queryParams['email[partial]'] = ObjectSerializer::toQueryValue($email_partial);
        }
        // query params
        if ($email_start !== null) {
            $queryParams['email[start]'] = ObjectSerializer::toQueryValue($email_start);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_end !== null) {
            $queryParams['name[end]'] = ObjectSerializer::toQueryValue($name_end);
        }
        // query params
        if ($name_exact !== null) {
            $queryParams['name[exact]'] = ObjectSerializer::toQueryValue($name_exact);
        }
        // query params
        if ($name_partial !== null) {
            $queryParams['name[partial]'] = ObjectSerializer::toQueryValue($name_partial);
        }
        // query params
        if ($name_start !== null) {
            $queryParams['name[start]'] = ObjectSerializer::toQueryValue($name_start);
        }
        // query params
        if ($outgoing_ddi !== null) {
            $queryParams['outgoingDdi'] = ObjectSerializer::toQueryValue($outgoing_ddi);
        }
        // query params
        if ($outgoing_ddi2 !== null) {
            $queryParams['outgoingDdi[]'] = ObjectSerializer::toQueryValue($outgoing_ddi2);
        }
        // query params
        if ($outgoing_ddi_exists !== null) {
            $queryParams['outgoingDdi[exists]'] = ObjectSerializer::toQueryValue($outgoing_ddi_exists);
        }
        // query params
        if ($send_by_email !== null) {
            $queryParams['sendByEmail'] = ObjectSerializer::toQueryValue($send_by_email);
        }
        // query params
        if ($_order_email !== null) {
            $queryParams['_order[email]'] = ObjectSerializer::toQueryValue($_order_email);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_name !== null) {
            $queryParams['_order[name]'] = ObjectSerializer::toQueryValue($_order_name);
        }
        // query params
        if ($_order_send_by_email !== null) {
            $queryParams['_order[sendByEmail]'] = ObjectSerializer::toQueryValue($_order_send_by_email);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFaxItem
     *
     * Retrieves a Fax resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\FaxDetailed
     */
    public function getFaxItem($id)
    {
        list($response) = $this->getFaxItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getFaxItemWithHttpInfo
     *
     * Retrieves a Fax resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\FaxDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFaxItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\FaxDetailed';
        $request = $this->getFaxItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\FaxDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFaxItemAsync
     *
     * Retrieves a Fax resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFaxItemAsync($id)
    {
        return $this->getFaxItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFaxItemAsyncWithHttpInfo
     *
     * Retrieves a Fax resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFaxItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\FaxDetailed';
        $request = $this->getFaxItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFaxItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFaxItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getFaxItem'
            );
        }

        $resourcePath = '/faxes/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFaxesInOutCollection
     *
     * Retrieves the collection of FaxesInOut resources.
     *
     * @param  string $calldate calldate (optional)
     * @param  string $calldate_after calldate_after (optional)
     * @param  string $calldate_before calldate_before (optional)
     * @param  string $calldate_start calldate_start (optional)
     * @param  string $calldate_strictly_after calldate_strictly_after (optional)
     * @param  string $calldate_strictly_before calldate_strictly_before (optional)
     * @param  string $dst dst (optional)
     * @param  string $dst_country dst_country (optional)
     * @param  string $dst_country2 dst_country2 (optional)
     * @param  bool $dst_country_exists dst_country_exists (optional)
     * @param  string $dst_end dst_end (optional)
     * @param  string $dst_exact dst_exact (optional)
     * @param  bool $dst_exists dst_exists (optional)
     * @param  string $dst_partial dst_partial (optional)
     * @param  string $dst_start dst_start (optional)
     * @param  string $fax fax (optional)
     * @param  string $fax2 fax2 (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $src src (optional)
     * @param  string $src_end src_end (optional)
     * @param  string $src_exact src_exact (optional)
     * @param  bool $src_exists src_exists (optional)
     * @param  string $src_partial src_partial (optional)
     * @param  string $src_start src_start (optional)
     * @param  string $status status (optional)
     * @param  string $status_end status_end (optional)
     * @param  string $status_exact status_exact (optional)
     * @param  bool $status_exists status_exists (optional)
     * @param  string $status_partial status_partial (optional)
     * @param  string $status_start status_start (optional)
     * @param  string $type type (optional)
     * @param  string $type_end type_end (optional)
     * @param  string $type_exact type_exact (optional)
     * @param  bool $type_exists type_exists (optional)
     * @param  string $type_partial type_partial (optional)
     * @param  string $type_start type_start (optional)
     * @param  string $_order_calldate _order_calldate (optional)
     * @param  string $_order_dst _order_dst (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_src _order_src (optional)
     * @param  string $_order_status _order_status (optional)
     * @param  string $_order_type _order_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\FaxesInOutCollection[]
     */
    public function getFaxesInOutCollection($calldate = null, $calldate_after = null, $calldate_before = null, $calldate_start = null, $calldate_strictly_after = null, $calldate_strictly_before = null, $dst = null, $dst_country = null, $dst_country2 = null, $dst_country_exists = null, $dst_end = null, $dst_exact = null, $dst_exists = null, $dst_partial = null, $dst_start = null, $fax = null, $fax2 = null, $id_exact = null, $src = null, $src_end = null, $src_exact = null, $src_exists = null, $src_partial = null, $src_start = null, $status = null, $status_end = null, $status_exact = null, $status_exists = null, $status_partial = null, $status_start = null, $type = null, $type_end = null, $type_exact = null, $type_exists = null, $type_partial = null, $type_start = null, $_order_calldate = null, $_order_dst = null, $_order_id = null, $_order_src = null, $_order_status = null, $_order_type = null, $_items_per_page = null, $_page = null, $_properties = null, $_timezone = null)
    {
        list($response) = $this->getFaxesInOutCollectionWithHttpInfo($calldate, $calldate_after, $calldate_before, $calldate_start, $calldate_strictly_after, $calldate_strictly_before, $dst, $dst_country, $dst_country2, $dst_country_exists, $dst_end, $dst_exact, $dst_exists, $dst_partial, $dst_start, $fax, $fax2, $id_exact, $src, $src_end, $src_exact, $src_exists, $src_partial, $src_start, $status, $status_end, $status_exact, $status_exists, $status_partial, $status_start, $type, $type_end, $type_exact, $type_exists, $type_partial, $type_start, $_order_calldate, $_order_dst, $_order_id, $_order_src, $_order_status, $_order_type, $_items_per_page, $_page, $_properties, $_timezone);
        return $response;
    }

    /**
     * Operation getFaxesInOutCollectionWithHttpInfo
     *
     * Retrieves the collection of FaxesInOut resources.
     *
     * @param  string $calldate (optional)
     * @param  string $calldate_after (optional)
     * @param  string $calldate_before (optional)
     * @param  string $calldate_start (optional)
     * @param  string $calldate_strictly_after (optional)
     * @param  string $calldate_strictly_before (optional)
     * @param  string $dst (optional)
     * @param  string $dst_country (optional)
     * @param  string $dst_country2 (optional)
     * @param  bool $dst_country_exists (optional)
     * @param  string $dst_end (optional)
     * @param  string $dst_exact (optional)
     * @param  bool $dst_exists (optional)
     * @param  string $dst_partial (optional)
     * @param  string $dst_start (optional)
     * @param  string $fax (optional)
     * @param  string $fax2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $src (optional)
     * @param  string $src_end (optional)
     * @param  string $src_exact (optional)
     * @param  bool $src_exists (optional)
     * @param  string $src_partial (optional)
     * @param  string $src_start (optional)
     * @param  string $status (optional)
     * @param  string $status_end (optional)
     * @param  string $status_exact (optional)
     * @param  bool $status_exists (optional)
     * @param  string $status_partial (optional)
     * @param  string $status_start (optional)
     * @param  string $type (optional)
     * @param  string $type_end (optional)
     * @param  string $type_exact (optional)
     * @param  bool $type_exists (optional)
     * @param  string $type_partial (optional)
     * @param  string $type_start (optional)
     * @param  string $_order_calldate (optional)
     * @param  string $_order_dst (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_src (optional)
     * @param  string $_order_status (optional)
     * @param  string $_order_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\FaxesInOutCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getFaxesInOutCollectionWithHttpInfo($calldate = null, $calldate_after = null, $calldate_before = null, $calldate_start = null, $calldate_strictly_after = null, $calldate_strictly_before = null, $dst = null, $dst_country = null, $dst_country2 = null, $dst_country_exists = null, $dst_end = null, $dst_exact = null, $dst_exists = null, $dst_partial = null, $dst_start = null, $fax = null, $fax2 = null, $id_exact = null, $src = null, $src_end = null, $src_exact = null, $src_exists = null, $src_partial = null, $src_start = null, $status = null, $status_end = null, $status_exact = null, $status_exists = null, $status_partial = null, $status_start = null, $type = null, $type_end = null, $type_exact = null, $type_exists = null, $type_partial = null, $type_start = null, $_order_calldate = null, $_order_dst = null, $_order_id = null, $_order_src = null, $_order_status = null, $_order_type = null, $_items_per_page = null, $_page = null, $_properties = null, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\FaxesInOutCollection[]';
        $request = $this->getFaxesInOutCollectionRequest($calldate, $calldate_after, $calldate_before, $calldate_start, $calldate_strictly_after, $calldate_strictly_before, $dst, $dst_country, $dst_country2, $dst_country_exists, $dst_end, $dst_exact, $dst_exists, $dst_partial, $dst_start, $fax, $fax2, $id_exact, $src, $src_end, $src_exact, $src_exists, $src_partial, $src_start, $status, $status_end, $status_exact, $status_exists, $status_partial, $status_start, $type, $type_end, $type_exact, $type_exists, $type_partial, $type_start, $_order_calldate, $_order_dst, $_order_id, $_order_src, $_order_status, $_order_type, $_items_per_page, $_page, $_properties, $_timezone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\FaxesInOutCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFaxesInOutCollectionAsync
     *
     * Retrieves the collection of FaxesInOut resources.
     *
     * @param  string $calldate (optional)
     * @param  string $calldate_after (optional)
     * @param  string $calldate_before (optional)
     * @param  string $calldate_start (optional)
     * @param  string $calldate_strictly_after (optional)
     * @param  string $calldate_strictly_before (optional)
     * @param  string $dst (optional)
     * @param  string $dst_country (optional)
     * @param  string $dst_country2 (optional)
     * @param  bool $dst_country_exists (optional)
     * @param  string $dst_end (optional)
     * @param  string $dst_exact (optional)
     * @param  bool $dst_exists (optional)
     * @param  string $dst_partial (optional)
     * @param  string $dst_start (optional)
     * @param  string $fax (optional)
     * @param  string $fax2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $src (optional)
     * @param  string $src_end (optional)
     * @param  string $src_exact (optional)
     * @param  bool $src_exists (optional)
     * @param  string $src_partial (optional)
     * @param  string $src_start (optional)
     * @param  string $status (optional)
     * @param  string $status_end (optional)
     * @param  string $status_exact (optional)
     * @param  bool $status_exists (optional)
     * @param  string $status_partial (optional)
     * @param  string $status_start (optional)
     * @param  string $type (optional)
     * @param  string $type_end (optional)
     * @param  string $type_exact (optional)
     * @param  bool $type_exists (optional)
     * @param  string $type_partial (optional)
     * @param  string $type_start (optional)
     * @param  string $_order_calldate (optional)
     * @param  string $_order_dst (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_src (optional)
     * @param  string $_order_status (optional)
     * @param  string $_order_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFaxesInOutCollectionAsync($calldate = null, $calldate_after = null, $calldate_before = null, $calldate_start = null, $calldate_strictly_after = null, $calldate_strictly_before = null, $dst = null, $dst_country = null, $dst_country2 = null, $dst_country_exists = null, $dst_end = null, $dst_exact = null, $dst_exists = null, $dst_partial = null, $dst_start = null, $fax = null, $fax2 = null, $id_exact = null, $src = null, $src_end = null, $src_exact = null, $src_exists = null, $src_partial = null, $src_start = null, $status = null, $status_end = null, $status_exact = null, $status_exists = null, $status_partial = null, $status_start = null, $type = null, $type_end = null, $type_exact = null, $type_exists = null, $type_partial = null, $type_start = null, $_order_calldate = null, $_order_dst = null, $_order_id = null, $_order_src = null, $_order_status = null, $_order_type = null, $_items_per_page = null, $_page = null, $_properties = null, $_timezone = null)
    {
        return $this->getFaxesInOutCollectionAsyncWithHttpInfo($calldate, $calldate_after, $calldate_before, $calldate_start, $calldate_strictly_after, $calldate_strictly_before, $dst, $dst_country, $dst_country2, $dst_country_exists, $dst_end, $dst_exact, $dst_exists, $dst_partial, $dst_start, $fax, $fax2, $id_exact, $src, $src_end, $src_exact, $src_exists, $src_partial, $src_start, $status, $status_end, $status_exact, $status_exists, $status_partial, $status_start, $type, $type_end, $type_exact, $type_exists, $type_partial, $type_start, $_order_calldate, $_order_dst, $_order_id, $_order_src, $_order_status, $_order_type, $_items_per_page, $_page, $_properties, $_timezone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFaxesInOutCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of FaxesInOut resources.
     *
     * @param  string $calldate (optional)
     * @param  string $calldate_after (optional)
     * @param  string $calldate_before (optional)
     * @param  string $calldate_start (optional)
     * @param  string $calldate_strictly_after (optional)
     * @param  string $calldate_strictly_before (optional)
     * @param  string $dst (optional)
     * @param  string $dst_country (optional)
     * @param  string $dst_country2 (optional)
     * @param  bool $dst_country_exists (optional)
     * @param  string $dst_end (optional)
     * @param  string $dst_exact (optional)
     * @param  bool $dst_exists (optional)
     * @param  string $dst_partial (optional)
     * @param  string $dst_start (optional)
     * @param  string $fax (optional)
     * @param  string $fax2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $src (optional)
     * @param  string $src_end (optional)
     * @param  string $src_exact (optional)
     * @param  bool $src_exists (optional)
     * @param  string $src_partial (optional)
     * @param  string $src_start (optional)
     * @param  string $status (optional)
     * @param  string $status_end (optional)
     * @param  string $status_exact (optional)
     * @param  bool $status_exists (optional)
     * @param  string $status_partial (optional)
     * @param  string $status_start (optional)
     * @param  string $type (optional)
     * @param  string $type_end (optional)
     * @param  string $type_exact (optional)
     * @param  bool $type_exists (optional)
     * @param  string $type_partial (optional)
     * @param  string $type_start (optional)
     * @param  string $_order_calldate (optional)
     * @param  string $_order_dst (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_src (optional)
     * @param  string $_order_status (optional)
     * @param  string $_order_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFaxesInOutCollectionAsyncWithHttpInfo($calldate = null, $calldate_after = null, $calldate_before = null, $calldate_start = null, $calldate_strictly_after = null, $calldate_strictly_before = null, $dst = null, $dst_country = null, $dst_country2 = null, $dst_country_exists = null, $dst_end = null, $dst_exact = null, $dst_exists = null, $dst_partial = null, $dst_start = null, $fax = null, $fax2 = null, $id_exact = null, $src = null, $src_end = null, $src_exact = null, $src_exists = null, $src_partial = null, $src_start = null, $status = null, $status_end = null, $status_exact = null, $status_exists = null, $status_partial = null, $status_start = null, $type = null, $type_end = null, $type_exact = null, $type_exists = null, $type_partial = null, $type_start = null, $_order_calldate = null, $_order_dst = null, $_order_id = null, $_order_src = null, $_order_status = null, $_order_type = null, $_items_per_page = null, $_page = null, $_properties = null, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\FaxesInOutCollection[]';
        $request = $this->getFaxesInOutCollectionRequest($calldate, $calldate_after, $calldate_before, $calldate_start, $calldate_strictly_after, $calldate_strictly_before, $dst, $dst_country, $dst_country2, $dst_country_exists, $dst_end, $dst_exact, $dst_exists, $dst_partial, $dst_start, $fax, $fax2, $id_exact, $src, $src_end, $src_exact, $src_exists, $src_partial, $src_start, $status, $status_end, $status_exact, $status_exists, $status_partial, $status_start, $type, $type_end, $type_exact, $type_exists, $type_partial, $type_start, $_order_calldate, $_order_dst, $_order_id, $_order_src, $_order_status, $_order_type, $_items_per_page, $_page, $_properties, $_timezone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFaxesInOutCollection'
     *
     * @param  string $calldate (optional)
     * @param  string $calldate_after (optional)
     * @param  string $calldate_before (optional)
     * @param  string $calldate_start (optional)
     * @param  string $calldate_strictly_after (optional)
     * @param  string $calldate_strictly_before (optional)
     * @param  string $dst (optional)
     * @param  string $dst_country (optional)
     * @param  string $dst_country2 (optional)
     * @param  bool $dst_country_exists (optional)
     * @param  string $dst_end (optional)
     * @param  string $dst_exact (optional)
     * @param  bool $dst_exists (optional)
     * @param  string $dst_partial (optional)
     * @param  string $dst_start (optional)
     * @param  string $fax (optional)
     * @param  string $fax2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $src (optional)
     * @param  string $src_end (optional)
     * @param  string $src_exact (optional)
     * @param  bool $src_exists (optional)
     * @param  string $src_partial (optional)
     * @param  string $src_start (optional)
     * @param  string $status (optional)
     * @param  string $status_end (optional)
     * @param  string $status_exact (optional)
     * @param  bool $status_exists (optional)
     * @param  string $status_partial (optional)
     * @param  string $status_start (optional)
     * @param  string $type (optional)
     * @param  string $type_end (optional)
     * @param  string $type_exact (optional)
     * @param  bool $type_exists (optional)
     * @param  string $type_partial (optional)
     * @param  string $type_start (optional)
     * @param  string $_order_calldate (optional)
     * @param  string $_order_dst (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_src (optional)
     * @param  string $_order_status (optional)
     * @param  string $_order_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFaxesInOutCollectionRequest($calldate = null, $calldate_after = null, $calldate_before = null, $calldate_start = null, $calldate_strictly_after = null, $calldate_strictly_before = null, $dst = null, $dst_country = null, $dst_country2 = null, $dst_country_exists = null, $dst_end = null, $dst_exact = null, $dst_exists = null, $dst_partial = null, $dst_start = null, $fax = null, $fax2 = null, $id_exact = null, $src = null, $src_end = null, $src_exact = null, $src_exists = null, $src_partial = null, $src_start = null, $status = null, $status_end = null, $status_exact = null, $status_exists = null, $status_partial = null, $status_start = null, $type = null, $type_end = null, $type_exact = null, $type_exists = null, $type_partial = null, $type_start = null, $_order_calldate = null, $_order_dst = null, $_order_id = null, $_order_src = null, $_order_status = null, $_order_type = null, $_items_per_page = null, $_page = null, $_properties = null, $_timezone = null)
    {

        $resourcePath = '/faxes_in_outs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($calldate !== null) {
            $queryParams['calldate'] = ObjectSerializer::toQueryValue($calldate);
        }
        // query params
        if ($calldate_after !== null) {
            $queryParams['calldate[after]'] = ObjectSerializer::toQueryValue($calldate_after);
        }
        // query params
        if ($calldate_before !== null) {
            $queryParams['calldate[before]'] = ObjectSerializer::toQueryValue($calldate_before);
        }
        // query params
        if ($calldate_start !== null) {
            $queryParams['calldate[start]'] = ObjectSerializer::toQueryValue($calldate_start);
        }
        // query params
        if ($calldate_strictly_after !== null) {
            $queryParams['calldate[strictly_after]'] = ObjectSerializer::toQueryValue($calldate_strictly_after);
        }
        // query params
        if ($calldate_strictly_before !== null) {
            $queryParams['calldate[strictly_before]'] = ObjectSerializer::toQueryValue($calldate_strictly_before);
        }
        // query params
        if ($dst !== null) {
            $queryParams['dst'] = ObjectSerializer::toQueryValue($dst);
        }
        // query params
        if ($dst_country !== null) {
            $queryParams['dstCountry'] = ObjectSerializer::toQueryValue($dst_country);
        }
        // query params
        if ($dst_country2 !== null) {
            $queryParams['dstCountry[]'] = ObjectSerializer::toQueryValue($dst_country2);
        }
        // query params
        if ($dst_country_exists !== null) {
            $queryParams['dstCountry[exists]'] = ObjectSerializer::toQueryValue($dst_country_exists);
        }
        // query params
        if ($dst_end !== null) {
            $queryParams['dst[end]'] = ObjectSerializer::toQueryValue($dst_end);
        }
        // query params
        if ($dst_exact !== null) {
            $queryParams['dst[exact]'] = ObjectSerializer::toQueryValue($dst_exact);
        }
        // query params
        if ($dst_exists !== null) {
            $queryParams['dst[exists]'] = ObjectSerializer::toQueryValue($dst_exists);
        }
        // query params
        if ($dst_partial !== null) {
            $queryParams['dst[partial]'] = ObjectSerializer::toQueryValue($dst_partial);
        }
        // query params
        if ($dst_start !== null) {
            $queryParams['dst[start]'] = ObjectSerializer::toQueryValue($dst_start);
        }
        // query params
        if ($fax !== null) {
            $queryParams['fax'] = ObjectSerializer::toQueryValue($fax);
        }
        // query params
        if ($fax2 !== null) {
            $queryParams['fax[]'] = ObjectSerializer::toQueryValue($fax2);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($src !== null) {
            $queryParams['src'] = ObjectSerializer::toQueryValue($src);
        }
        // query params
        if ($src_end !== null) {
            $queryParams['src[end]'] = ObjectSerializer::toQueryValue($src_end);
        }
        // query params
        if ($src_exact !== null) {
            $queryParams['src[exact]'] = ObjectSerializer::toQueryValue($src_exact);
        }
        // query params
        if ($src_exists !== null) {
            $queryParams['src[exists]'] = ObjectSerializer::toQueryValue($src_exists);
        }
        // query params
        if ($src_partial !== null) {
            $queryParams['src[partial]'] = ObjectSerializer::toQueryValue($src_partial);
        }
        // query params
        if ($src_start !== null) {
            $queryParams['src[start]'] = ObjectSerializer::toQueryValue($src_start);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($status_end !== null) {
            $queryParams['status[end]'] = ObjectSerializer::toQueryValue($status_end);
        }
        // query params
        if ($status_exact !== null) {
            $queryParams['status[exact]'] = ObjectSerializer::toQueryValue($status_exact);
        }
        // query params
        if ($status_exists !== null) {
            $queryParams['status[exists]'] = ObjectSerializer::toQueryValue($status_exists);
        }
        // query params
        if ($status_partial !== null) {
            $queryParams['status[partial]'] = ObjectSerializer::toQueryValue($status_partial);
        }
        // query params
        if ($status_start !== null) {
            $queryParams['status[start]'] = ObjectSerializer::toQueryValue($status_start);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($type_end !== null) {
            $queryParams['type[end]'] = ObjectSerializer::toQueryValue($type_end);
        }
        // query params
        if ($type_exact !== null) {
            $queryParams['type[exact]'] = ObjectSerializer::toQueryValue($type_exact);
        }
        // query params
        if ($type_exists !== null) {
            $queryParams['type[exists]'] = ObjectSerializer::toQueryValue($type_exists);
        }
        // query params
        if ($type_partial !== null) {
            $queryParams['type[partial]'] = ObjectSerializer::toQueryValue($type_partial);
        }
        // query params
        if ($type_start !== null) {
            $queryParams['type[start]'] = ObjectSerializer::toQueryValue($type_start);
        }
        // query params
        if ($_order_calldate !== null) {
            $queryParams['_order[calldate]'] = ObjectSerializer::toQueryValue($_order_calldate);
        }
        // query params
        if ($_order_dst !== null) {
            $queryParams['_order[dst]'] = ObjectSerializer::toQueryValue($_order_dst);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_src !== null) {
            $queryParams['_order[src]'] = ObjectSerializer::toQueryValue($_order_src);
        }
        // query params
        if ($_order_status !== null) {
            $queryParams['_order[status]'] = ObjectSerializer::toQueryValue($_order_status);
        }
        // query params
        if ($_order_type !== null) {
            $queryParams['_order[type]'] = ObjectSerializer::toQueryValue($_order_type);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }
        // query params
        if ($_timezone !== null) {
            $queryParams['_timezone'] = ObjectSerializer::toQueryValue($_timezone);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFaxesInOutItem
     *
     * Retrieves a FaxesInOut resource.
     *
     * @param  string $id id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\FaxesInOutDetailed
     */
    public function getFaxesInOutItem($id, $_timezone = null)
    {
        list($response) = $this->getFaxesInOutItemWithHttpInfo($id, $_timezone);
        return $response;
    }

    /**
     * Operation getFaxesInOutItemWithHttpInfo
     *
     * Retrieves a FaxesInOut resource.
     *
     * @param  string $id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\FaxesInOutDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFaxesInOutItemWithHttpInfo($id, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\FaxesInOutDetailed';
        $request = $this->getFaxesInOutItemRequest($id, $_timezone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\FaxesInOutDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFaxesInOutItemAsync
     *
     * Retrieves a FaxesInOut resource.
     *
     * @param  string $id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFaxesInOutItemAsync($id, $_timezone = null)
    {
        return $this->getFaxesInOutItemAsyncWithHttpInfo($id, $_timezone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFaxesInOutItemAsyncWithHttpInfo
     *
     * Retrieves a FaxesInOut resource.
     *
     * @param  string $id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFaxesInOutItemAsyncWithHttpInfo($id, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\FaxesInOutDetailed';
        $request = $this->getFaxesInOutItemRequest($id, $_timezone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFaxesInOutItem'
     *
     * @param  string $id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFaxesInOutItemRequest($id, $_timezone = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getFaxesInOutItem'
            );
        }

        $resourcePath = '/faxes_in_outs/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_timezone !== null) {
            $queryParams['_timezone'] = ObjectSerializer::toQueryValue($_timezone);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFeaturesRelCompanyCollection
     *
     * Retrieves the collection of FeaturesRelCompany resources.
     *
     * @param  string $feature feature (optional)
     * @param  string $feature2 feature2 (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\FeaturesRelCompanyCollection[]
     */
    public function getFeaturesRelCompanyCollection($feature = null, $feature2 = null, $id_exact = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getFeaturesRelCompanyCollectionWithHttpInfo($feature, $feature2, $id_exact, $_order_id, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getFeaturesRelCompanyCollectionWithHttpInfo
     *
     * Retrieves the collection of FeaturesRelCompany resources.
     *
     * @param  string $feature (optional)
     * @param  string $feature2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\FeaturesRelCompanyCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getFeaturesRelCompanyCollectionWithHttpInfo($feature = null, $feature2 = null, $id_exact = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\FeaturesRelCompanyCollection[]';
        $request = $this->getFeaturesRelCompanyCollectionRequest($feature, $feature2, $id_exact, $_order_id, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\FeaturesRelCompanyCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFeaturesRelCompanyCollectionAsync
     *
     * Retrieves the collection of FeaturesRelCompany resources.
     *
     * @param  string $feature (optional)
     * @param  string $feature2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFeaturesRelCompanyCollectionAsync($feature = null, $feature2 = null, $id_exact = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getFeaturesRelCompanyCollectionAsyncWithHttpInfo($feature, $feature2, $id_exact, $_order_id, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFeaturesRelCompanyCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of FeaturesRelCompany resources.
     *
     * @param  string $feature (optional)
     * @param  string $feature2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFeaturesRelCompanyCollectionAsyncWithHttpInfo($feature = null, $feature2 = null, $id_exact = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\FeaturesRelCompanyCollection[]';
        $request = $this->getFeaturesRelCompanyCollectionRequest($feature, $feature2, $id_exact, $_order_id, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFeaturesRelCompanyCollection'
     *
     * @param  string $feature (optional)
     * @param  string $feature2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFeaturesRelCompanyCollectionRequest($feature = null, $feature2 = null, $id_exact = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/features_rel_companies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($feature !== null) {
            $queryParams['feature'] = ObjectSerializer::toQueryValue($feature);
        }
        // query params
        if ($feature2 !== null) {
            $queryParams['feature[]'] = ObjectSerializer::toQueryValue($feature2);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFeaturesRelCompanyItem
     *
     * Retrieves a FeaturesRelCompany resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\FeaturesRelCompanyDetailed
     */
    public function getFeaturesRelCompanyItem($id)
    {
        list($response) = $this->getFeaturesRelCompanyItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getFeaturesRelCompanyItemWithHttpInfo
     *
     * Retrieves a FeaturesRelCompany resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\FeaturesRelCompanyDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFeaturesRelCompanyItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\FeaturesRelCompanyDetailed';
        $request = $this->getFeaturesRelCompanyItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\FeaturesRelCompanyDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFeaturesRelCompanyItemAsync
     *
     * Retrieves a FeaturesRelCompany resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFeaturesRelCompanyItemAsync($id)
    {
        return $this->getFeaturesRelCompanyItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFeaturesRelCompanyItemAsyncWithHttpInfo
     *
     * Retrieves a FeaturesRelCompany resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFeaturesRelCompanyItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\FeaturesRelCompanyDetailed';
        $request = $this->getFeaturesRelCompanyItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFeaturesRelCompanyItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFeaturesRelCompanyItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getFeaturesRelCompanyItem'
            );
        }

        $resourcePath = '/features_rel_companies/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFriendCollection
     *
     * Retrieves the collection of Friend resources.
     *
     * @param  string $call_acl call_acl (optional)
     * @param  string $call_acl2 call_acl2 (optional)
     * @param  bool $call_acl_exists call_acl_exists (optional)
     * @param  string $description description (optional)
     * @param  string $description_end description_end (optional)
     * @param  string $description_exact description_exact (optional)
     * @param  string $description_partial description_partial (optional)
     * @param  string $description_start description_start (optional)
     * @param  string $direct_connectivity direct_connectivity (optional)
     * @param  string $direct_connectivity_end direct_connectivity_end (optional)
     * @param  string $direct_connectivity_exact direct_connectivity_exact (optional)
     * @param  string $direct_connectivity_partial direct_connectivity_partial (optional)
     * @param  string $direct_connectivity_start direct_connectivity_start (optional)
     * @param  int $domain domain (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $language language (optional)
     * @param  string $language2 language2 (optional)
     * @param  bool $language_exists language_exists (optional)
     * @param  string $name name (optional)
     * @param  string $name_end name_end (optional)
     * @param  string $name_exact name_exact (optional)
     * @param  string $name_partial name_partial (optional)
     * @param  string $name_start name_start (optional)
     * @param  string $outgoing_ddi outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists outgoing_ddi_exists (optional)
     * @param  int $priority priority (optional)
     * @param  string $priority_between priority_between (optional)
     * @param  string $priority_gt priority_gt (optional)
     * @param  string $priority_gte priority_gte (optional)
     * @param  string $priority_lt priority_lt (optional)
     * @param  string $priority_lte priority_lte (optional)
     * @param  string $transformation_rule_set transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists transformation_rule_set_exists (optional)
     * @param  string $_order_description _order_description (optional)
     * @param  string $_order_direct_connectivity _order_direct_connectivity (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_name _order_name (optional)
     * @param  string $_order_priority _order_priority (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\FriendCollection[]
     */
    public function getFriendCollection($call_acl = null, $call_acl2 = null, $call_acl_exists = null, $description = null, $description_end = null, $description_exact = null, $description_partial = null, $description_start = null, $direct_connectivity = null, $direct_connectivity_end = null, $direct_connectivity_exact = null, $direct_connectivity_partial = null, $direct_connectivity_start = null, $domain = null, $id_exact = null, $language = null, $language2 = null, $language_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $priority = null, $priority_between = null, $priority_gt = null, $priority_gte = null, $priority_lt = null, $priority_lte = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $_order_description = null, $_order_direct_connectivity = null, $_order_id = null, $_order_name = null, $_order_priority = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getFriendCollectionWithHttpInfo($call_acl, $call_acl2, $call_acl_exists, $description, $description_end, $description_exact, $description_partial, $description_start, $direct_connectivity, $direct_connectivity_end, $direct_connectivity_exact, $direct_connectivity_partial, $direct_connectivity_start, $domain, $id_exact, $language, $language2, $language_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $outgoing_ddi, $outgoing_ddi2, $outgoing_ddi_exists, $priority, $priority_between, $priority_gt, $priority_gte, $priority_lt, $priority_lte, $transformation_rule_set, $transformation_rule_set2, $transformation_rule_set_exists, $_order_description, $_order_direct_connectivity, $_order_id, $_order_name, $_order_priority, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getFriendCollectionWithHttpInfo
     *
     * Retrieves the collection of Friend resources.
     *
     * @param  string $call_acl (optional)
     * @param  string $call_acl2 (optional)
     * @param  bool $call_acl_exists (optional)
     * @param  string $description (optional)
     * @param  string $description_end (optional)
     * @param  string $description_exact (optional)
     * @param  string $description_partial (optional)
     * @param  string $description_start (optional)
     * @param  string $direct_connectivity (optional)
     * @param  string $direct_connectivity_end (optional)
     * @param  string $direct_connectivity_exact (optional)
     * @param  string $direct_connectivity_partial (optional)
     * @param  string $direct_connectivity_start (optional)
     * @param  int $domain (optional)
     * @param  int $id_exact (optional)
     * @param  string $language (optional)
     * @param  string $language2 (optional)
     * @param  bool $language_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  int $priority (optional)
     * @param  string $priority_between (optional)
     * @param  string $priority_gt (optional)
     * @param  string $priority_gte (optional)
     * @param  string $priority_lt (optional)
     * @param  string $priority_lte (optional)
     * @param  string $transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists (optional)
     * @param  string $_order_description (optional)
     * @param  string $_order_direct_connectivity (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_priority (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\FriendCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getFriendCollectionWithHttpInfo($call_acl = null, $call_acl2 = null, $call_acl_exists = null, $description = null, $description_end = null, $description_exact = null, $description_partial = null, $description_start = null, $direct_connectivity = null, $direct_connectivity_end = null, $direct_connectivity_exact = null, $direct_connectivity_partial = null, $direct_connectivity_start = null, $domain = null, $id_exact = null, $language = null, $language2 = null, $language_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $priority = null, $priority_between = null, $priority_gt = null, $priority_gte = null, $priority_lt = null, $priority_lte = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $_order_description = null, $_order_direct_connectivity = null, $_order_id = null, $_order_name = null, $_order_priority = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\FriendCollection[]';
        $request = $this->getFriendCollectionRequest($call_acl, $call_acl2, $call_acl_exists, $description, $description_end, $description_exact, $description_partial, $description_start, $direct_connectivity, $direct_connectivity_end, $direct_connectivity_exact, $direct_connectivity_partial, $direct_connectivity_start, $domain, $id_exact, $language, $language2, $language_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $outgoing_ddi, $outgoing_ddi2, $outgoing_ddi_exists, $priority, $priority_between, $priority_gt, $priority_gte, $priority_lt, $priority_lte, $transformation_rule_set, $transformation_rule_set2, $transformation_rule_set_exists, $_order_description, $_order_direct_connectivity, $_order_id, $_order_name, $_order_priority, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\FriendCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFriendCollectionAsync
     *
     * Retrieves the collection of Friend resources.
     *
     * @param  string $call_acl (optional)
     * @param  string $call_acl2 (optional)
     * @param  bool $call_acl_exists (optional)
     * @param  string $description (optional)
     * @param  string $description_end (optional)
     * @param  string $description_exact (optional)
     * @param  string $description_partial (optional)
     * @param  string $description_start (optional)
     * @param  string $direct_connectivity (optional)
     * @param  string $direct_connectivity_end (optional)
     * @param  string $direct_connectivity_exact (optional)
     * @param  string $direct_connectivity_partial (optional)
     * @param  string $direct_connectivity_start (optional)
     * @param  int $domain (optional)
     * @param  int $id_exact (optional)
     * @param  string $language (optional)
     * @param  string $language2 (optional)
     * @param  bool $language_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  int $priority (optional)
     * @param  string $priority_between (optional)
     * @param  string $priority_gt (optional)
     * @param  string $priority_gte (optional)
     * @param  string $priority_lt (optional)
     * @param  string $priority_lte (optional)
     * @param  string $transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists (optional)
     * @param  string $_order_description (optional)
     * @param  string $_order_direct_connectivity (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_priority (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFriendCollectionAsync($call_acl = null, $call_acl2 = null, $call_acl_exists = null, $description = null, $description_end = null, $description_exact = null, $description_partial = null, $description_start = null, $direct_connectivity = null, $direct_connectivity_end = null, $direct_connectivity_exact = null, $direct_connectivity_partial = null, $direct_connectivity_start = null, $domain = null, $id_exact = null, $language = null, $language2 = null, $language_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $priority = null, $priority_between = null, $priority_gt = null, $priority_gte = null, $priority_lt = null, $priority_lte = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $_order_description = null, $_order_direct_connectivity = null, $_order_id = null, $_order_name = null, $_order_priority = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getFriendCollectionAsyncWithHttpInfo($call_acl, $call_acl2, $call_acl_exists, $description, $description_end, $description_exact, $description_partial, $description_start, $direct_connectivity, $direct_connectivity_end, $direct_connectivity_exact, $direct_connectivity_partial, $direct_connectivity_start, $domain, $id_exact, $language, $language2, $language_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $outgoing_ddi, $outgoing_ddi2, $outgoing_ddi_exists, $priority, $priority_between, $priority_gt, $priority_gte, $priority_lt, $priority_lte, $transformation_rule_set, $transformation_rule_set2, $transformation_rule_set_exists, $_order_description, $_order_direct_connectivity, $_order_id, $_order_name, $_order_priority, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFriendCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of Friend resources.
     *
     * @param  string $call_acl (optional)
     * @param  string $call_acl2 (optional)
     * @param  bool $call_acl_exists (optional)
     * @param  string $description (optional)
     * @param  string $description_end (optional)
     * @param  string $description_exact (optional)
     * @param  string $description_partial (optional)
     * @param  string $description_start (optional)
     * @param  string $direct_connectivity (optional)
     * @param  string $direct_connectivity_end (optional)
     * @param  string $direct_connectivity_exact (optional)
     * @param  string $direct_connectivity_partial (optional)
     * @param  string $direct_connectivity_start (optional)
     * @param  int $domain (optional)
     * @param  int $id_exact (optional)
     * @param  string $language (optional)
     * @param  string $language2 (optional)
     * @param  bool $language_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  int $priority (optional)
     * @param  string $priority_between (optional)
     * @param  string $priority_gt (optional)
     * @param  string $priority_gte (optional)
     * @param  string $priority_lt (optional)
     * @param  string $priority_lte (optional)
     * @param  string $transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists (optional)
     * @param  string $_order_description (optional)
     * @param  string $_order_direct_connectivity (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_priority (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFriendCollectionAsyncWithHttpInfo($call_acl = null, $call_acl2 = null, $call_acl_exists = null, $description = null, $description_end = null, $description_exact = null, $description_partial = null, $description_start = null, $direct_connectivity = null, $direct_connectivity_end = null, $direct_connectivity_exact = null, $direct_connectivity_partial = null, $direct_connectivity_start = null, $domain = null, $id_exact = null, $language = null, $language2 = null, $language_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $priority = null, $priority_between = null, $priority_gt = null, $priority_gte = null, $priority_lt = null, $priority_lte = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $_order_description = null, $_order_direct_connectivity = null, $_order_id = null, $_order_name = null, $_order_priority = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\FriendCollection[]';
        $request = $this->getFriendCollectionRequest($call_acl, $call_acl2, $call_acl_exists, $description, $description_end, $description_exact, $description_partial, $description_start, $direct_connectivity, $direct_connectivity_end, $direct_connectivity_exact, $direct_connectivity_partial, $direct_connectivity_start, $domain, $id_exact, $language, $language2, $language_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $outgoing_ddi, $outgoing_ddi2, $outgoing_ddi_exists, $priority, $priority_between, $priority_gt, $priority_gte, $priority_lt, $priority_lte, $transformation_rule_set, $transformation_rule_set2, $transformation_rule_set_exists, $_order_description, $_order_direct_connectivity, $_order_id, $_order_name, $_order_priority, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFriendCollection'
     *
     * @param  string $call_acl (optional)
     * @param  string $call_acl2 (optional)
     * @param  bool $call_acl_exists (optional)
     * @param  string $description (optional)
     * @param  string $description_end (optional)
     * @param  string $description_exact (optional)
     * @param  string $description_partial (optional)
     * @param  string $description_start (optional)
     * @param  string $direct_connectivity (optional)
     * @param  string $direct_connectivity_end (optional)
     * @param  string $direct_connectivity_exact (optional)
     * @param  string $direct_connectivity_partial (optional)
     * @param  string $direct_connectivity_start (optional)
     * @param  int $domain (optional)
     * @param  int $id_exact (optional)
     * @param  string $language (optional)
     * @param  string $language2 (optional)
     * @param  bool $language_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  int $priority (optional)
     * @param  string $priority_between (optional)
     * @param  string $priority_gt (optional)
     * @param  string $priority_gte (optional)
     * @param  string $priority_lt (optional)
     * @param  string $priority_lte (optional)
     * @param  string $transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists (optional)
     * @param  string $_order_description (optional)
     * @param  string $_order_direct_connectivity (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_priority (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFriendCollectionRequest($call_acl = null, $call_acl2 = null, $call_acl_exists = null, $description = null, $description_end = null, $description_exact = null, $description_partial = null, $description_start = null, $direct_connectivity = null, $direct_connectivity_end = null, $direct_connectivity_exact = null, $direct_connectivity_partial = null, $direct_connectivity_start = null, $domain = null, $id_exact = null, $language = null, $language2 = null, $language_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $priority = null, $priority_between = null, $priority_gt = null, $priority_gte = null, $priority_lt = null, $priority_lte = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $_order_description = null, $_order_direct_connectivity = null, $_order_id = null, $_order_name = null, $_order_priority = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/friends';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($call_acl !== null) {
            $queryParams['callAcl'] = ObjectSerializer::toQueryValue($call_acl);
        }
        // query params
        if ($call_acl2 !== null) {
            $queryParams['callAcl[]'] = ObjectSerializer::toQueryValue($call_acl2);
        }
        // query params
        if ($call_acl_exists !== null) {
            $queryParams['callAcl[exists]'] = ObjectSerializer::toQueryValue($call_acl_exists);
        }
        // query params
        if ($description !== null) {
            $queryParams['description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($description_end !== null) {
            $queryParams['description[end]'] = ObjectSerializer::toQueryValue($description_end);
        }
        // query params
        if ($description_exact !== null) {
            $queryParams['description[exact]'] = ObjectSerializer::toQueryValue($description_exact);
        }
        // query params
        if ($description_partial !== null) {
            $queryParams['description[partial]'] = ObjectSerializer::toQueryValue($description_partial);
        }
        // query params
        if ($description_start !== null) {
            $queryParams['description[start]'] = ObjectSerializer::toQueryValue($description_start);
        }
        // query params
        if ($direct_connectivity !== null) {
            $queryParams['directConnectivity'] = ObjectSerializer::toQueryValue($direct_connectivity);
        }
        // query params
        if ($direct_connectivity_end !== null) {
            $queryParams['directConnectivity[end]'] = ObjectSerializer::toQueryValue($direct_connectivity_end);
        }
        // query params
        if ($direct_connectivity_exact !== null) {
            $queryParams['directConnectivity[exact]'] = ObjectSerializer::toQueryValue($direct_connectivity_exact);
        }
        // query params
        if ($direct_connectivity_partial !== null) {
            $queryParams['directConnectivity[partial]'] = ObjectSerializer::toQueryValue($direct_connectivity_partial);
        }
        // query params
        if ($direct_connectivity_start !== null) {
            $queryParams['directConnectivity[start]'] = ObjectSerializer::toQueryValue($direct_connectivity_start);
        }
        // query params
        if ($domain !== null) {
            $queryParams['domain'] = ObjectSerializer::toQueryValue($domain);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($language2 !== null) {
            $queryParams['language[]'] = ObjectSerializer::toQueryValue($language2);
        }
        // query params
        if ($language_exists !== null) {
            $queryParams['language[exists]'] = ObjectSerializer::toQueryValue($language_exists);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_end !== null) {
            $queryParams['name[end]'] = ObjectSerializer::toQueryValue($name_end);
        }
        // query params
        if ($name_exact !== null) {
            $queryParams['name[exact]'] = ObjectSerializer::toQueryValue($name_exact);
        }
        // query params
        if ($name_partial !== null) {
            $queryParams['name[partial]'] = ObjectSerializer::toQueryValue($name_partial);
        }
        // query params
        if ($name_start !== null) {
            $queryParams['name[start]'] = ObjectSerializer::toQueryValue($name_start);
        }
        // query params
        if ($outgoing_ddi !== null) {
            $queryParams['outgoingDdi'] = ObjectSerializer::toQueryValue($outgoing_ddi);
        }
        // query params
        if ($outgoing_ddi2 !== null) {
            $queryParams['outgoingDdi[]'] = ObjectSerializer::toQueryValue($outgoing_ddi2);
        }
        // query params
        if ($outgoing_ddi_exists !== null) {
            $queryParams['outgoingDdi[exists]'] = ObjectSerializer::toQueryValue($outgoing_ddi_exists);
        }
        // query params
        if ($priority !== null) {
            $queryParams['priority'] = ObjectSerializer::toQueryValue($priority);
        }
        // query params
        if ($priority_between !== null) {
            $queryParams['priority[between]'] = ObjectSerializer::toQueryValue($priority_between);
        }
        // query params
        if ($priority_gt !== null) {
            $queryParams['priority[gt]'] = ObjectSerializer::toQueryValue($priority_gt);
        }
        // query params
        if ($priority_gte !== null) {
            $queryParams['priority[gte]'] = ObjectSerializer::toQueryValue($priority_gte);
        }
        // query params
        if ($priority_lt !== null) {
            $queryParams['priority[lt]'] = ObjectSerializer::toQueryValue($priority_lt);
        }
        // query params
        if ($priority_lte !== null) {
            $queryParams['priority[lte]'] = ObjectSerializer::toQueryValue($priority_lte);
        }
        // query params
        if ($transformation_rule_set !== null) {
            $queryParams['transformationRuleSet'] = ObjectSerializer::toQueryValue($transformation_rule_set);
        }
        // query params
        if ($transformation_rule_set2 !== null) {
            $queryParams['transformationRuleSet[]'] = ObjectSerializer::toQueryValue($transformation_rule_set2);
        }
        // query params
        if ($transformation_rule_set_exists !== null) {
            $queryParams['transformationRuleSet[exists]'] = ObjectSerializer::toQueryValue($transformation_rule_set_exists);
        }
        // query params
        if ($_order_description !== null) {
            $queryParams['_order[description]'] = ObjectSerializer::toQueryValue($_order_description);
        }
        // query params
        if ($_order_direct_connectivity !== null) {
            $queryParams['_order[directConnectivity]'] = ObjectSerializer::toQueryValue($_order_direct_connectivity);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_name !== null) {
            $queryParams['_order[name]'] = ObjectSerializer::toQueryValue($_order_name);
        }
        // query params
        if ($_order_priority !== null) {
            $queryParams['_order[priority]'] = ObjectSerializer::toQueryValue($_order_priority);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFriendItem
     *
     * Retrieves a Friend resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\FriendDetailed
     */
    public function getFriendItem($id)
    {
        list($response) = $this->getFriendItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getFriendItemWithHttpInfo
     *
     * Retrieves a Friend resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\FriendDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFriendItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\FriendDetailed';
        $request = $this->getFriendItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\FriendDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFriendItemAsync
     *
     * Retrieves a Friend resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFriendItemAsync($id)
    {
        return $this->getFriendItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFriendItemAsyncWithHttpInfo
     *
     * Retrieves a Friend resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFriendItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\FriendDetailed';
        $request = $this->getFriendItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFriendItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFriendItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getFriendItem'
            );
        }

        $resourcePath = '/friends/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFriendsPatternCollection
     *
     * Retrieves the collection of FriendsPattern resources.
     *
     * @param  string $friend friend (optional)
     * @param  string $friend2 friend2 (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $name name (optional)
     * @param  string $name_end name_end (optional)
     * @param  string $name_exact name_exact (optional)
     * @param  string $name_partial name_partial (optional)
     * @param  string $name_start name_start (optional)
     * @param  string $reg_exp reg_exp (optional)
     * @param  string $reg_exp_end reg_exp_end (optional)
     * @param  string $reg_exp_exact reg_exp_exact (optional)
     * @param  string $reg_exp_partial reg_exp_partial (optional)
     * @param  string $reg_exp_start reg_exp_start (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_name _order_name (optional)
     * @param  string $_order_reg_exp _order_reg_exp (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\FriendsPatternCollection[]
     */
    public function getFriendsPatternCollection($friend = null, $friend2 = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $reg_exp = null, $reg_exp_end = null, $reg_exp_exact = null, $reg_exp_partial = null, $reg_exp_start = null, $_order_id = null, $_order_name = null, $_order_reg_exp = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getFriendsPatternCollectionWithHttpInfo($friend, $friend2, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $reg_exp, $reg_exp_end, $reg_exp_exact, $reg_exp_partial, $reg_exp_start, $_order_id, $_order_name, $_order_reg_exp, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getFriendsPatternCollectionWithHttpInfo
     *
     * Retrieves the collection of FriendsPattern resources.
     *
     * @param  string $friend (optional)
     * @param  string $friend2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $reg_exp (optional)
     * @param  string $reg_exp_end (optional)
     * @param  string $reg_exp_exact (optional)
     * @param  string $reg_exp_partial (optional)
     * @param  string $reg_exp_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_reg_exp (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\FriendsPatternCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getFriendsPatternCollectionWithHttpInfo($friend = null, $friend2 = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $reg_exp = null, $reg_exp_end = null, $reg_exp_exact = null, $reg_exp_partial = null, $reg_exp_start = null, $_order_id = null, $_order_name = null, $_order_reg_exp = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\FriendsPatternCollection[]';
        $request = $this->getFriendsPatternCollectionRequest($friend, $friend2, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $reg_exp, $reg_exp_end, $reg_exp_exact, $reg_exp_partial, $reg_exp_start, $_order_id, $_order_name, $_order_reg_exp, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\FriendsPatternCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFriendsPatternCollectionAsync
     *
     * Retrieves the collection of FriendsPattern resources.
     *
     * @param  string $friend (optional)
     * @param  string $friend2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $reg_exp (optional)
     * @param  string $reg_exp_end (optional)
     * @param  string $reg_exp_exact (optional)
     * @param  string $reg_exp_partial (optional)
     * @param  string $reg_exp_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_reg_exp (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFriendsPatternCollectionAsync($friend = null, $friend2 = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $reg_exp = null, $reg_exp_end = null, $reg_exp_exact = null, $reg_exp_partial = null, $reg_exp_start = null, $_order_id = null, $_order_name = null, $_order_reg_exp = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getFriendsPatternCollectionAsyncWithHttpInfo($friend, $friend2, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $reg_exp, $reg_exp_end, $reg_exp_exact, $reg_exp_partial, $reg_exp_start, $_order_id, $_order_name, $_order_reg_exp, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFriendsPatternCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of FriendsPattern resources.
     *
     * @param  string $friend (optional)
     * @param  string $friend2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $reg_exp (optional)
     * @param  string $reg_exp_end (optional)
     * @param  string $reg_exp_exact (optional)
     * @param  string $reg_exp_partial (optional)
     * @param  string $reg_exp_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_reg_exp (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFriendsPatternCollectionAsyncWithHttpInfo($friend = null, $friend2 = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $reg_exp = null, $reg_exp_end = null, $reg_exp_exact = null, $reg_exp_partial = null, $reg_exp_start = null, $_order_id = null, $_order_name = null, $_order_reg_exp = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\FriendsPatternCollection[]';
        $request = $this->getFriendsPatternCollectionRequest($friend, $friend2, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $reg_exp, $reg_exp_end, $reg_exp_exact, $reg_exp_partial, $reg_exp_start, $_order_id, $_order_name, $_order_reg_exp, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFriendsPatternCollection'
     *
     * @param  string $friend (optional)
     * @param  string $friend2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $reg_exp (optional)
     * @param  string $reg_exp_end (optional)
     * @param  string $reg_exp_exact (optional)
     * @param  string $reg_exp_partial (optional)
     * @param  string $reg_exp_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_reg_exp (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFriendsPatternCollectionRequest($friend = null, $friend2 = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $reg_exp = null, $reg_exp_end = null, $reg_exp_exact = null, $reg_exp_partial = null, $reg_exp_start = null, $_order_id = null, $_order_name = null, $_order_reg_exp = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/friends_patterns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($friend !== null) {
            $queryParams['friend'] = ObjectSerializer::toQueryValue($friend);
        }
        // query params
        if ($friend2 !== null) {
            $queryParams['friend[]'] = ObjectSerializer::toQueryValue($friend2);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_end !== null) {
            $queryParams['name[end]'] = ObjectSerializer::toQueryValue($name_end);
        }
        // query params
        if ($name_exact !== null) {
            $queryParams['name[exact]'] = ObjectSerializer::toQueryValue($name_exact);
        }
        // query params
        if ($name_partial !== null) {
            $queryParams['name[partial]'] = ObjectSerializer::toQueryValue($name_partial);
        }
        // query params
        if ($name_start !== null) {
            $queryParams['name[start]'] = ObjectSerializer::toQueryValue($name_start);
        }
        // query params
        if ($reg_exp !== null) {
            $queryParams['regExp'] = ObjectSerializer::toQueryValue($reg_exp);
        }
        // query params
        if ($reg_exp_end !== null) {
            $queryParams['regExp[end]'] = ObjectSerializer::toQueryValue($reg_exp_end);
        }
        // query params
        if ($reg_exp_exact !== null) {
            $queryParams['regExp[exact]'] = ObjectSerializer::toQueryValue($reg_exp_exact);
        }
        // query params
        if ($reg_exp_partial !== null) {
            $queryParams['regExp[partial]'] = ObjectSerializer::toQueryValue($reg_exp_partial);
        }
        // query params
        if ($reg_exp_start !== null) {
            $queryParams['regExp[start]'] = ObjectSerializer::toQueryValue($reg_exp_start);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_name !== null) {
            $queryParams['_order[name]'] = ObjectSerializer::toQueryValue($_order_name);
        }
        // query params
        if ($_order_reg_exp !== null) {
            $queryParams['_order[regExp]'] = ObjectSerializer::toQueryValue($_order_reg_exp);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFriendsPatternItem
     *
     * Retrieves a FriendsPattern resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\FriendsPatternDetailed
     */
    public function getFriendsPatternItem($id)
    {
        list($response) = $this->getFriendsPatternItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getFriendsPatternItemWithHttpInfo
     *
     * Retrieves a FriendsPattern resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\FriendsPatternDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFriendsPatternItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\FriendsPatternDetailed';
        $request = $this->getFriendsPatternItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\FriendsPatternDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFriendsPatternItemAsync
     *
     * Retrieves a FriendsPattern resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFriendsPatternItemAsync($id)
    {
        return $this->getFriendsPatternItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFriendsPatternItemAsyncWithHttpInfo
     *
     * Retrieves a FriendsPattern resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFriendsPatternItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\FriendsPatternDetailed';
        $request = $this->getFriendsPatternItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFriendsPatternItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFriendsPatternItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getFriendsPatternItem'
            );
        }

        $resourcePath = '/friends_patterns/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHolidayDateCollection
     *
     * Retrieves the collection of HolidayDate resources.
     *
     * @param  string $calendar calendar (optional)
     * @param  string $calendar2 calendar2 (optional)
     * @param  string $event_date event_date (optional)
     * @param  string $event_date_after event_date_after (optional)
     * @param  string $event_date_before event_date_before (optional)
     * @param  string $event_date_start event_date_start (optional)
     * @param  string $event_date_strictly_after event_date_strictly_after (optional)
     * @param  string $event_date_strictly_before event_date_strictly_before (optional)
     * @param  string $extension extension (optional)
     * @param  string $extension2 extension2 (optional)
     * @param  bool $extension_exists extension_exists (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $locution locution (optional)
     * @param  string $locution2 locution2 (optional)
     * @param  bool $locution_exists locution_exists (optional)
     * @param  string $name name (optional)
     * @param  string $name_end name_end (optional)
     * @param  string $name_exact name_exact (optional)
     * @param  string $name_partial name_partial (optional)
     * @param  string $name_start name_start (optional)
     * @param  string $number_country number_country (optional)
     * @param  string $number_country2 number_country2 (optional)
     * @param  bool $number_country_exists number_country_exists (optional)
     * @param  string $voice_mail_user voice_mail_user (optional)
     * @param  string $voice_mail_user2 voice_mail_user2 (optional)
     * @param  bool $voice_mail_user_exists voice_mail_user_exists (optional)
     * @param  string $_order_event_date _order_event_date (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_name _order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\HolidayDateCollection[]
     */
    public function getHolidayDateCollection($calendar = null, $calendar2 = null, $event_date = null, $event_date_after = null, $event_date_before = null, $event_date_start = null, $event_date_strictly_after = null, $event_date_strictly_before = null, $extension = null, $extension2 = null, $extension_exists = null, $id_exact = null, $locution = null, $locution2 = null, $locution_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $voice_mail_user = null, $voice_mail_user2 = null, $voice_mail_user_exists = null, $_order_event_date = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getHolidayDateCollectionWithHttpInfo($calendar, $calendar2, $event_date, $event_date_after, $event_date_before, $event_date_start, $event_date_strictly_after, $event_date_strictly_before, $extension, $extension2, $extension_exists, $id_exact, $locution, $locution2, $locution_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $number_country, $number_country2, $number_country_exists, $voice_mail_user, $voice_mail_user2, $voice_mail_user_exists, $_order_event_date, $_order_id, $_order_name, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getHolidayDateCollectionWithHttpInfo
     *
     * Retrieves the collection of HolidayDate resources.
     *
     * @param  string $calendar (optional)
     * @param  string $calendar2 (optional)
     * @param  string $event_date (optional)
     * @param  string $event_date_after (optional)
     * @param  string $event_date_before (optional)
     * @param  string $event_date_start (optional)
     * @param  string $event_date_strictly_after (optional)
     * @param  string $event_date_strictly_before (optional)
     * @param  string $extension (optional)
     * @param  string $extension2 (optional)
     * @param  bool $extension_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $locution (optional)
     * @param  string $locution2 (optional)
     * @param  bool $locution_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $voice_mail_user (optional)
     * @param  string $voice_mail_user2 (optional)
     * @param  bool $voice_mail_user_exists (optional)
     * @param  string $_order_event_date (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\HolidayDateCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getHolidayDateCollectionWithHttpInfo($calendar = null, $calendar2 = null, $event_date = null, $event_date_after = null, $event_date_before = null, $event_date_start = null, $event_date_strictly_after = null, $event_date_strictly_before = null, $extension = null, $extension2 = null, $extension_exists = null, $id_exact = null, $locution = null, $locution2 = null, $locution_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $voice_mail_user = null, $voice_mail_user2 = null, $voice_mail_user_exists = null, $_order_event_date = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\HolidayDateCollection[]';
        $request = $this->getHolidayDateCollectionRequest($calendar, $calendar2, $event_date, $event_date_after, $event_date_before, $event_date_start, $event_date_strictly_after, $event_date_strictly_before, $extension, $extension2, $extension_exists, $id_exact, $locution, $locution2, $locution_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $number_country, $number_country2, $number_country_exists, $voice_mail_user, $voice_mail_user2, $voice_mail_user_exists, $_order_event_date, $_order_id, $_order_name, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\HolidayDateCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHolidayDateCollectionAsync
     *
     * Retrieves the collection of HolidayDate resources.
     *
     * @param  string $calendar (optional)
     * @param  string $calendar2 (optional)
     * @param  string $event_date (optional)
     * @param  string $event_date_after (optional)
     * @param  string $event_date_before (optional)
     * @param  string $event_date_start (optional)
     * @param  string $event_date_strictly_after (optional)
     * @param  string $event_date_strictly_before (optional)
     * @param  string $extension (optional)
     * @param  string $extension2 (optional)
     * @param  bool $extension_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $locution (optional)
     * @param  string $locution2 (optional)
     * @param  bool $locution_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $voice_mail_user (optional)
     * @param  string $voice_mail_user2 (optional)
     * @param  bool $voice_mail_user_exists (optional)
     * @param  string $_order_event_date (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHolidayDateCollectionAsync($calendar = null, $calendar2 = null, $event_date = null, $event_date_after = null, $event_date_before = null, $event_date_start = null, $event_date_strictly_after = null, $event_date_strictly_before = null, $extension = null, $extension2 = null, $extension_exists = null, $id_exact = null, $locution = null, $locution2 = null, $locution_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $voice_mail_user = null, $voice_mail_user2 = null, $voice_mail_user_exists = null, $_order_event_date = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getHolidayDateCollectionAsyncWithHttpInfo($calendar, $calendar2, $event_date, $event_date_after, $event_date_before, $event_date_start, $event_date_strictly_after, $event_date_strictly_before, $extension, $extension2, $extension_exists, $id_exact, $locution, $locution2, $locution_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $number_country, $number_country2, $number_country_exists, $voice_mail_user, $voice_mail_user2, $voice_mail_user_exists, $_order_event_date, $_order_id, $_order_name, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHolidayDateCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of HolidayDate resources.
     *
     * @param  string $calendar (optional)
     * @param  string $calendar2 (optional)
     * @param  string $event_date (optional)
     * @param  string $event_date_after (optional)
     * @param  string $event_date_before (optional)
     * @param  string $event_date_start (optional)
     * @param  string $event_date_strictly_after (optional)
     * @param  string $event_date_strictly_before (optional)
     * @param  string $extension (optional)
     * @param  string $extension2 (optional)
     * @param  bool $extension_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $locution (optional)
     * @param  string $locution2 (optional)
     * @param  bool $locution_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $voice_mail_user (optional)
     * @param  string $voice_mail_user2 (optional)
     * @param  bool $voice_mail_user_exists (optional)
     * @param  string $_order_event_date (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHolidayDateCollectionAsyncWithHttpInfo($calendar = null, $calendar2 = null, $event_date = null, $event_date_after = null, $event_date_before = null, $event_date_start = null, $event_date_strictly_after = null, $event_date_strictly_before = null, $extension = null, $extension2 = null, $extension_exists = null, $id_exact = null, $locution = null, $locution2 = null, $locution_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $voice_mail_user = null, $voice_mail_user2 = null, $voice_mail_user_exists = null, $_order_event_date = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\HolidayDateCollection[]';
        $request = $this->getHolidayDateCollectionRequest($calendar, $calendar2, $event_date, $event_date_after, $event_date_before, $event_date_start, $event_date_strictly_after, $event_date_strictly_before, $extension, $extension2, $extension_exists, $id_exact, $locution, $locution2, $locution_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $number_country, $number_country2, $number_country_exists, $voice_mail_user, $voice_mail_user2, $voice_mail_user_exists, $_order_event_date, $_order_id, $_order_name, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHolidayDateCollection'
     *
     * @param  string $calendar (optional)
     * @param  string $calendar2 (optional)
     * @param  string $event_date (optional)
     * @param  string $event_date_after (optional)
     * @param  string $event_date_before (optional)
     * @param  string $event_date_start (optional)
     * @param  string $event_date_strictly_after (optional)
     * @param  string $event_date_strictly_before (optional)
     * @param  string $extension (optional)
     * @param  string $extension2 (optional)
     * @param  bool $extension_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $locution (optional)
     * @param  string $locution2 (optional)
     * @param  bool $locution_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $voice_mail_user (optional)
     * @param  string $voice_mail_user2 (optional)
     * @param  bool $voice_mail_user_exists (optional)
     * @param  string $_order_event_date (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHolidayDateCollectionRequest($calendar = null, $calendar2 = null, $event_date = null, $event_date_after = null, $event_date_before = null, $event_date_start = null, $event_date_strictly_after = null, $event_date_strictly_before = null, $extension = null, $extension2 = null, $extension_exists = null, $id_exact = null, $locution = null, $locution2 = null, $locution_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $voice_mail_user = null, $voice_mail_user2 = null, $voice_mail_user_exists = null, $_order_event_date = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/holiday_dates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($calendar !== null) {
            $queryParams['calendar'] = ObjectSerializer::toQueryValue($calendar);
        }
        // query params
        if ($calendar2 !== null) {
            $queryParams['calendar[]'] = ObjectSerializer::toQueryValue($calendar2);
        }
        // query params
        if ($event_date !== null) {
            $queryParams['eventDate'] = ObjectSerializer::toQueryValue($event_date);
        }
        // query params
        if ($event_date_after !== null) {
            $queryParams['eventDate[after]'] = ObjectSerializer::toQueryValue($event_date_after);
        }
        // query params
        if ($event_date_before !== null) {
            $queryParams['eventDate[before]'] = ObjectSerializer::toQueryValue($event_date_before);
        }
        // query params
        if ($event_date_start !== null) {
            $queryParams['eventDate[start]'] = ObjectSerializer::toQueryValue($event_date_start);
        }
        // query params
        if ($event_date_strictly_after !== null) {
            $queryParams['eventDate[strictly_after]'] = ObjectSerializer::toQueryValue($event_date_strictly_after);
        }
        // query params
        if ($event_date_strictly_before !== null) {
            $queryParams['eventDate[strictly_before]'] = ObjectSerializer::toQueryValue($event_date_strictly_before);
        }
        // query params
        if ($extension !== null) {
            $queryParams['extension'] = ObjectSerializer::toQueryValue($extension);
        }
        // query params
        if ($extension2 !== null) {
            $queryParams['extension[]'] = ObjectSerializer::toQueryValue($extension2);
        }
        // query params
        if ($extension_exists !== null) {
            $queryParams['extension[exists]'] = ObjectSerializer::toQueryValue($extension_exists);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($locution !== null) {
            $queryParams['locution'] = ObjectSerializer::toQueryValue($locution);
        }
        // query params
        if ($locution2 !== null) {
            $queryParams['locution[]'] = ObjectSerializer::toQueryValue($locution2);
        }
        // query params
        if ($locution_exists !== null) {
            $queryParams['locution[exists]'] = ObjectSerializer::toQueryValue($locution_exists);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_end !== null) {
            $queryParams['name[end]'] = ObjectSerializer::toQueryValue($name_end);
        }
        // query params
        if ($name_exact !== null) {
            $queryParams['name[exact]'] = ObjectSerializer::toQueryValue($name_exact);
        }
        // query params
        if ($name_partial !== null) {
            $queryParams['name[partial]'] = ObjectSerializer::toQueryValue($name_partial);
        }
        // query params
        if ($name_start !== null) {
            $queryParams['name[start]'] = ObjectSerializer::toQueryValue($name_start);
        }
        // query params
        if ($number_country !== null) {
            $queryParams['numberCountry'] = ObjectSerializer::toQueryValue($number_country);
        }
        // query params
        if ($number_country2 !== null) {
            $queryParams['numberCountry[]'] = ObjectSerializer::toQueryValue($number_country2);
        }
        // query params
        if ($number_country_exists !== null) {
            $queryParams['numberCountry[exists]'] = ObjectSerializer::toQueryValue($number_country_exists);
        }
        // query params
        if ($voice_mail_user !== null) {
            $queryParams['voiceMailUser'] = ObjectSerializer::toQueryValue($voice_mail_user);
        }
        // query params
        if ($voice_mail_user2 !== null) {
            $queryParams['voiceMailUser[]'] = ObjectSerializer::toQueryValue($voice_mail_user2);
        }
        // query params
        if ($voice_mail_user_exists !== null) {
            $queryParams['voiceMailUser[exists]'] = ObjectSerializer::toQueryValue($voice_mail_user_exists);
        }
        // query params
        if ($_order_event_date !== null) {
            $queryParams['_order[eventDate]'] = ObjectSerializer::toQueryValue($_order_event_date);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_name !== null) {
            $queryParams['_order[name]'] = ObjectSerializer::toQueryValue($_order_name);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHolidayDateItem
     *
     * Retrieves a HolidayDate resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\HolidayDateDetailed
     */
    public function getHolidayDateItem($id)
    {
        list($response) = $this->getHolidayDateItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getHolidayDateItemWithHttpInfo
     *
     * Retrieves a HolidayDate resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\HolidayDateDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHolidayDateItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\HolidayDateDetailed';
        $request = $this->getHolidayDateItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\HolidayDateDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHolidayDateItemAsync
     *
     * Retrieves a HolidayDate resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHolidayDateItemAsync($id)
    {
        return $this->getHolidayDateItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHolidayDateItemAsyncWithHttpInfo
     *
     * Retrieves a HolidayDate resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHolidayDateItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\HolidayDateDetailed';
        $request = $this->getHolidayDateItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHolidayDateItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHolidayDateItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getHolidayDateItem'
            );
        }

        $resourcePath = '/holiday_dates/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHuntGroupCollection
     *
     * Retrieves the collection of HuntGroup resources.
     *
     * @param  string $description description (optional)
     * @param  string $description_end description_end (optional)
     * @param  string $description_exact description_exact (optional)
     * @param  string $description_partial description_partial (optional)
     * @param  string $description_start description_start (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $name name (optional)
     * @param  string $name_end name_end (optional)
     * @param  string $name_exact name_exact (optional)
     * @param  string $name_partial name_partial (optional)
     * @param  string $name_start name_start (optional)
     * @param  string $no_answer_extension no_answer_extension (optional)
     * @param  string $no_answer_extension2 no_answer_extension2 (optional)
     * @param  bool $no_answer_extension_exists no_answer_extension_exists (optional)
     * @param  string $no_answer_locution no_answer_locution (optional)
     * @param  string $no_answer_locution2 no_answer_locution2 (optional)
     * @param  bool $no_answer_locution_exists no_answer_locution_exists (optional)
     * @param  string $no_answer_number_country no_answer_number_country (optional)
     * @param  string $no_answer_number_country2 no_answer_number_country2 (optional)
     * @param  bool $no_answer_number_country_exists no_answer_number_country_exists (optional)
     * @param  string $no_answer_voice_mail_user no_answer_voice_mail_user (optional)
     * @param  string $no_answer_voice_mail_user2 no_answer_voice_mail_user2 (optional)
     * @param  bool $no_answer_voice_mail_user_exists no_answer_voice_mail_user_exists (optional)
     * @param  string $strategy strategy (optional)
     * @param  string $strategy_end strategy_end (optional)
     * @param  string $strategy_exact strategy_exact (optional)
     * @param  string $strategy_partial strategy_partial (optional)
     * @param  string $strategy_start strategy_start (optional)
     * @param  string $_order_description _order_description (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_name _order_name (optional)
     * @param  string $_order_strategy _order_strategy (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\HuntGroupCollection[]
     */
    public function getHuntGroupCollection($description = null, $description_end = null, $description_exact = null, $description_partial = null, $description_start = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $no_answer_extension = null, $no_answer_extension2 = null, $no_answer_extension_exists = null, $no_answer_locution = null, $no_answer_locution2 = null, $no_answer_locution_exists = null, $no_answer_number_country = null, $no_answer_number_country2 = null, $no_answer_number_country_exists = null, $no_answer_voice_mail_user = null, $no_answer_voice_mail_user2 = null, $no_answer_voice_mail_user_exists = null, $strategy = null, $strategy_end = null, $strategy_exact = null, $strategy_partial = null, $strategy_start = null, $_order_description = null, $_order_id = null, $_order_name = null, $_order_strategy = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getHuntGroupCollectionWithHttpInfo($description, $description_end, $description_exact, $description_partial, $description_start, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $no_answer_extension, $no_answer_extension2, $no_answer_extension_exists, $no_answer_locution, $no_answer_locution2, $no_answer_locution_exists, $no_answer_number_country, $no_answer_number_country2, $no_answer_number_country_exists, $no_answer_voice_mail_user, $no_answer_voice_mail_user2, $no_answer_voice_mail_user_exists, $strategy, $strategy_end, $strategy_exact, $strategy_partial, $strategy_start, $_order_description, $_order_id, $_order_name, $_order_strategy, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getHuntGroupCollectionWithHttpInfo
     *
     * Retrieves the collection of HuntGroup resources.
     *
     * @param  string $description (optional)
     * @param  string $description_end (optional)
     * @param  string $description_exact (optional)
     * @param  string $description_partial (optional)
     * @param  string $description_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $no_answer_extension (optional)
     * @param  string $no_answer_extension2 (optional)
     * @param  bool $no_answer_extension_exists (optional)
     * @param  string $no_answer_locution (optional)
     * @param  string $no_answer_locution2 (optional)
     * @param  bool $no_answer_locution_exists (optional)
     * @param  string $no_answer_number_country (optional)
     * @param  string $no_answer_number_country2 (optional)
     * @param  bool $no_answer_number_country_exists (optional)
     * @param  string $no_answer_voice_mail_user (optional)
     * @param  string $no_answer_voice_mail_user2 (optional)
     * @param  bool $no_answer_voice_mail_user_exists (optional)
     * @param  string $strategy (optional)
     * @param  string $strategy_end (optional)
     * @param  string $strategy_exact (optional)
     * @param  string $strategy_partial (optional)
     * @param  string $strategy_start (optional)
     * @param  string $_order_description (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_strategy (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\HuntGroupCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getHuntGroupCollectionWithHttpInfo($description = null, $description_end = null, $description_exact = null, $description_partial = null, $description_start = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $no_answer_extension = null, $no_answer_extension2 = null, $no_answer_extension_exists = null, $no_answer_locution = null, $no_answer_locution2 = null, $no_answer_locution_exists = null, $no_answer_number_country = null, $no_answer_number_country2 = null, $no_answer_number_country_exists = null, $no_answer_voice_mail_user = null, $no_answer_voice_mail_user2 = null, $no_answer_voice_mail_user_exists = null, $strategy = null, $strategy_end = null, $strategy_exact = null, $strategy_partial = null, $strategy_start = null, $_order_description = null, $_order_id = null, $_order_name = null, $_order_strategy = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\HuntGroupCollection[]';
        $request = $this->getHuntGroupCollectionRequest($description, $description_end, $description_exact, $description_partial, $description_start, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $no_answer_extension, $no_answer_extension2, $no_answer_extension_exists, $no_answer_locution, $no_answer_locution2, $no_answer_locution_exists, $no_answer_number_country, $no_answer_number_country2, $no_answer_number_country_exists, $no_answer_voice_mail_user, $no_answer_voice_mail_user2, $no_answer_voice_mail_user_exists, $strategy, $strategy_end, $strategy_exact, $strategy_partial, $strategy_start, $_order_description, $_order_id, $_order_name, $_order_strategy, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\HuntGroupCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHuntGroupCollectionAsync
     *
     * Retrieves the collection of HuntGroup resources.
     *
     * @param  string $description (optional)
     * @param  string $description_end (optional)
     * @param  string $description_exact (optional)
     * @param  string $description_partial (optional)
     * @param  string $description_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $no_answer_extension (optional)
     * @param  string $no_answer_extension2 (optional)
     * @param  bool $no_answer_extension_exists (optional)
     * @param  string $no_answer_locution (optional)
     * @param  string $no_answer_locution2 (optional)
     * @param  bool $no_answer_locution_exists (optional)
     * @param  string $no_answer_number_country (optional)
     * @param  string $no_answer_number_country2 (optional)
     * @param  bool $no_answer_number_country_exists (optional)
     * @param  string $no_answer_voice_mail_user (optional)
     * @param  string $no_answer_voice_mail_user2 (optional)
     * @param  bool $no_answer_voice_mail_user_exists (optional)
     * @param  string $strategy (optional)
     * @param  string $strategy_end (optional)
     * @param  string $strategy_exact (optional)
     * @param  string $strategy_partial (optional)
     * @param  string $strategy_start (optional)
     * @param  string $_order_description (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_strategy (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHuntGroupCollectionAsync($description = null, $description_end = null, $description_exact = null, $description_partial = null, $description_start = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $no_answer_extension = null, $no_answer_extension2 = null, $no_answer_extension_exists = null, $no_answer_locution = null, $no_answer_locution2 = null, $no_answer_locution_exists = null, $no_answer_number_country = null, $no_answer_number_country2 = null, $no_answer_number_country_exists = null, $no_answer_voice_mail_user = null, $no_answer_voice_mail_user2 = null, $no_answer_voice_mail_user_exists = null, $strategy = null, $strategy_end = null, $strategy_exact = null, $strategy_partial = null, $strategy_start = null, $_order_description = null, $_order_id = null, $_order_name = null, $_order_strategy = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getHuntGroupCollectionAsyncWithHttpInfo($description, $description_end, $description_exact, $description_partial, $description_start, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $no_answer_extension, $no_answer_extension2, $no_answer_extension_exists, $no_answer_locution, $no_answer_locution2, $no_answer_locution_exists, $no_answer_number_country, $no_answer_number_country2, $no_answer_number_country_exists, $no_answer_voice_mail_user, $no_answer_voice_mail_user2, $no_answer_voice_mail_user_exists, $strategy, $strategy_end, $strategy_exact, $strategy_partial, $strategy_start, $_order_description, $_order_id, $_order_name, $_order_strategy, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHuntGroupCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of HuntGroup resources.
     *
     * @param  string $description (optional)
     * @param  string $description_end (optional)
     * @param  string $description_exact (optional)
     * @param  string $description_partial (optional)
     * @param  string $description_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $no_answer_extension (optional)
     * @param  string $no_answer_extension2 (optional)
     * @param  bool $no_answer_extension_exists (optional)
     * @param  string $no_answer_locution (optional)
     * @param  string $no_answer_locution2 (optional)
     * @param  bool $no_answer_locution_exists (optional)
     * @param  string $no_answer_number_country (optional)
     * @param  string $no_answer_number_country2 (optional)
     * @param  bool $no_answer_number_country_exists (optional)
     * @param  string $no_answer_voice_mail_user (optional)
     * @param  string $no_answer_voice_mail_user2 (optional)
     * @param  bool $no_answer_voice_mail_user_exists (optional)
     * @param  string $strategy (optional)
     * @param  string $strategy_end (optional)
     * @param  string $strategy_exact (optional)
     * @param  string $strategy_partial (optional)
     * @param  string $strategy_start (optional)
     * @param  string $_order_description (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_strategy (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHuntGroupCollectionAsyncWithHttpInfo($description = null, $description_end = null, $description_exact = null, $description_partial = null, $description_start = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $no_answer_extension = null, $no_answer_extension2 = null, $no_answer_extension_exists = null, $no_answer_locution = null, $no_answer_locution2 = null, $no_answer_locution_exists = null, $no_answer_number_country = null, $no_answer_number_country2 = null, $no_answer_number_country_exists = null, $no_answer_voice_mail_user = null, $no_answer_voice_mail_user2 = null, $no_answer_voice_mail_user_exists = null, $strategy = null, $strategy_end = null, $strategy_exact = null, $strategy_partial = null, $strategy_start = null, $_order_description = null, $_order_id = null, $_order_name = null, $_order_strategy = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\HuntGroupCollection[]';
        $request = $this->getHuntGroupCollectionRequest($description, $description_end, $description_exact, $description_partial, $description_start, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $no_answer_extension, $no_answer_extension2, $no_answer_extension_exists, $no_answer_locution, $no_answer_locution2, $no_answer_locution_exists, $no_answer_number_country, $no_answer_number_country2, $no_answer_number_country_exists, $no_answer_voice_mail_user, $no_answer_voice_mail_user2, $no_answer_voice_mail_user_exists, $strategy, $strategy_end, $strategy_exact, $strategy_partial, $strategy_start, $_order_description, $_order_id, $_order_name, $_order_strategy, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHuntGroupCollection'
     *
     * @param  string $description (optional)
     * @param  string $description_end (optional)
     * @param  string $description_exact (optional)
     * @param  string $description_partial (optional)
     * @param  string $description_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $no_answer_extension (optional)
     * @param  string $no_answer_extension2 (optional)
     * @param  bool $no_answer_extension_exists (optional)
     * @param  string $no_answer_locution (optional)
     * @param  string $no_answer_locution2 (optional)
     * @param  bool $no_answer_locution_exists (optional)
     * @param  string $no_answer_number_country (optional)
     * @param  string $no_answer_number_country2 (optional)
     * @param  bool $no_answer_number_country_exists (optional)
     * @param  string $no_answer_voice_mail_user (optional)
     * @param  string $no_answer_voice_mail_user2 (optional)
     * @param  bool $no_answer_voice_mail_user_exists (optional)
     * @param  string $strategy (optional)
     * @param  string $strategy_end (optional)
     * @param  string $strategy_exact (optional)
     * @param  string $strategy_partial (optional)
     * @param  string $strategy_start (optional)
     * @param  string $_order_description (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_strategy (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHuntGroupCollectionRequest($description = null, $description_end = null, $description_exact = null, $description_partial = null, $description_start = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $no_answer_extension = null, $no_answer_extension2 = null, $no_answer_extension_exists = null, $no_answer_locution = null, $no_answer_locution2 = null, $no_answer_locution_exists = null, $no_answer_number_country = null, $no_answer_number_country2 = null, $no_answer_number_country_exists = null, $no_answer_voice_mail_user = null, $no_answer_voice_mail_user2 = null, $no_answer_voice_mail_user_exists = null, $strategy = null, $strategy_end = null, $strategy_exact = null, $strategy_partial = null, $strategy_start = null, $_order_description = null, $_order_id = null, $_order_name = null, $_order_strategy = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/hunt_groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($description !== null) {
            $queryParams['description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($description_end !== null) {
            $queryParams['description[end]'] = ObjectSerializer::toQueryValue($description_end);
        }
        // query params
        if ($description_exact !== null) {
            $queryParams['description[exact]'] = ObjectSerializer::toQueryValue($description_exact);
        }
        // query params
        if ($description_partial !== null) {
            $queryParams['description[partial]'] = ObjectSerializer::toQueryValue($description_partial);
        }
        // query params
        if ($description_start !== null) {
            $queryParams['description[start]'] = ObjectSerializer::toQueryValue($description_start);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_end !== null) {
            $queryParams['name[end]'] = ObjectSerializer::toQueryValue($name_end);
        }
        // query params
        if ($name_exact !== null) {
            $queryParams['name[exact]'] = ObjectSerializer::toQueryValue($name_exact);
        }
        // query params
        if ($name_partial !== null) {
            $queryParams['name[partial]'] = ObjectSerializer::toQueryValue($name_partial);
        }
        // query params
        if ($name_start !== null) {
            $queryParams['name[start]'] = ObjectSerializer::toQueryValue($name_start);
        }
        // query params
        if ($no_answer_extension !== null) {
            $queryParams['noAnswerExtension'] = ObjectSerializer::toQueryValue($no_answer_extension);
        }
        // query params
        if ($no_answer_extension2 !== null) {
            $queryParams['noAnswerExtension[]'] = ObjectSerializer::toQueryValue($no_answer_extension2);
        }
        // query params
        if ($no_answer_extension_exists !== null) {
            $queryParams['noAnswerExtension[exists]'] = ObjectSerializer::toQueryValue($no_answer_extension_exists);
        }
        // query params
        if ($no_answer_locution !== null) {
            $queryParams['noAnswerLocution'] = ObjectSerializer::toQueryValue($no_answer_locution);
        }
        // query params
        if ($no_answer_locution2 !== null) {
            $queryParams['noAnswerLocution[]'] = ObjectSerializer::toQueryValue($no_answer_locution2);
        }
        // query params
        if ($no_answer_locution_exists !== null) {
            $queryParams['noAnswerLocution[exists]'] = ObjectSerializer::toQueryValue($no_answer_locution_exists);
        }
        // query params
        if ($no_answer_number_country !== null) {
            $queryParams['noAnswerNumberCountry'] = ObjectSerializer::toQueryValue($no_answer_number_country);
        }
        // query params
        if ($no_answer_number_country2 !== null) {
            $queryParams['noAnswerNumberCountry[]'] = ObjectSerializer::toQueryValue($no_answer_number_country2);
        }
        // query params
        if ($no_answer_number_country_exists !== null) {
            $queryParams['noAnswerNumberCountry[exists]'] = ObjectSerializer::toQueryValue($no_answer_number_country_exists);
        }
        // query params
        if ($no_answer_voice_mail_user !== null) {
            $queryParams['noAnswerVoiceMailUser'] = ObjectSerializer::toQueryValue($no_answer_voice_mail_user);
        }
        // query params
        if ($no_answer_voice_mail_user2 !== null) {
            $queryParams['noAnswerVoiceMailUser[]'] = ObjectSerializer::toQueryValue($no_answer_voice_mail_user2);
        }
        // query params
        if ($no_answer_voice_mail_user_exists !== null) {
            $queryParams['noAnswerVoiceMailUser[exists]'] = ObjectSerializer::toQueryValue($no_answer_voice_mail_user_exists);
        }
        // query params
        if ($strategy !== null) {
            $queryParams['strategy'] = ObjectSerializer::toQueryValue($strategy);
        }
        // query params
        if ($strategy_end !== null) {
            $queryParams['strategy[end]'] = ObjectSerializer::toQueryValue($strategy_end);
        }
        // query params
        if ($strategy_exact !== null) {
            $queryParams['strategy[exact]'] = ObjectSerializer::toQueryValue($strategy_exact);
        }
        // query params
        if ($strategy_partial !== null) {
            $queryParams['strategy[partial]'] = ObjectSerializer::toQueryValue($strategy_partial);
        }
        // query params
        if ($strategy_start !== null) {
            $queryParams['strategy[start]'] = ObjectSerializer::toQueryValue($strategy_start);
        }
        // query params
        if ($_order_description !== null) {
            $queryParams['_order[description]'] = ObjectSerializer::toQueryValue($_order_description);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_name !== null) {
            $queryParams['_order[name]'] = ObjectSerializer::toQueryValue($_order_name);
        }
        // query params
        if ($_order_strategy !== null) {
            $queryParams['_order[strategy]'] = ObjectSerializer::toQueryValue($_order_strategy);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHuntGroupItem
     *
     * Retrieves a HuntGroup resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\HuntGroupDetailed
     */
    public function getHuntGroupItem($id)
    {
        list($response) = $this->getHuntGroupItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getHuntGroupItemWithHttpInfo
     *
     * Retrieves a HuntGroup resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\HuntGroupDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHuntGroupItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\HuntGroupDetailed';
        $request = $this->getHuntGroupItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\HuntGroupDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHuntGroupItemAsync
     *
     * Retrieves a HuntGroup resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHuntGroupItemAsync($id)
    {
        return $this->getHuntGroupItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHuntGroupItemAsyncWithHttpInfo
     *
     * Retrieves a HuntGroup resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHuntGroupItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\HuntGroupDetailed';
        $request = $this->getHuntGroupItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHuntGroupItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHuntGroupItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getHuntGroupItem'
            );
        }

        $resourcePath = '/hunt_groups/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHuntGroupsRelUserCollection
     *
     * Retrieves the collection of HuntGroupsRelUser resources.
     *
     * @param  string $hunt_group hunt_group (optional)
     * @param  int $hunt_group_allow_call_forwards hunt_group_allow_call_forwards (optional)
     * @param  string $hunt_group_description hunt_group_description (optional)
     * @param  string $hunt_group_name hunt_group_name (optional)
     * @param  int $hunt_group_no_answer_extension hunt_group_no_answer_extension (optional)
     * @param  int $hunt_group_no_answer_locution hunt_group_no_answer_locution (optional)
     * @param  int $hunt_group_no_answer_number_country hunt_group_no_answer_number_country (optional)
     * @param  string $hunt_group_no_answer_number_value hunt_group_no_answer_number_value (optional)
     * @param  string $hunt_group_no_answer_target_type hunt_group_no_answer_target_type (optional)
     * @param  int $hunt_group_no_answer_voice_mail_user hunt_group_no_answer_voice_mail_user (optional)
     * @param  int $hunt_group_prevent_missed_calls hunt_group_prevent_missed_calls (optional)
     * @param  int $hunt_group_ring_all_timeout hunt_group_ring_all_timeout (optional)
     * @param  string $hunt_group_strategy hunt_group_strategy (optional)
     * @param  string $hunt_group2 hunt_group2 (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $name_ca name_ca (optional)
     * @param  string $name_en name_en (optional)
     * @param  string $name_es name_es (optional)
     * @param  string $name_it name_it (optional)
     * @param  string $number_country number_country (optional)
     * @param  string $number_country_code number_country_code (optional)
     * @param  string $number_country_country_code number_country_country_code (optional)
     * @param  string $number_country2 number_country2 (optional)
     * @param  bool $number_country_exists number_country_exists (optional)
     * @param  string $number_value number_value (optional)
     * @param  string $number_value_end number_value_end (optional)
     * @param  string $number_value_exact number_value_exact (optional)
     * @param  bool $number_value_exists number_value_exists (optional)
     * @param  string $number_value_partial number_value_partial (optional)
     * @param  string $number_value_start number_value_start (optional)
     * @param  int $priority priority (optional)
     * @param  string $priority_between priority_between (optional)
     * @param  bool $priority_exists priority_exists (optional)
     * @param  string $priority_gt priority_gt (optional)
     * @param  string $priority_gte priority_gte (optional)
     * @param  string $priority_lt priority_lt (optional)
     * @param  string $priority_lte priority_lte (optional)
     * @param  string $route_type route_type (optional)
     * @param  string $route_type_end route_type_end (optional)
     * @param  string $route_type_exact route_type_exact (optional)
     * @param  string $route_type_partial route_type_partial (optional)
     * @param  string $route_type_start route_type_start (optional)
     * @param  int $timeout_time timeout_time (optional)
     * @param  string $timeout_time_between timeout_time_between (optional)
     * @param  bool $timeout_time_exists timeout_time_exists (optional)
     * @param  string $timeout_time_gt timeout_time_gt (optional)
     * @param  string $timeout_time_gte timeout_time_gte (optional)
     * @param  string $timeout_time_lt timeout_time_lt (optional)
     * @param  string $timeout_time_lte timeout_time_lte (optional)
     * @param  string $user user (optional)
     * @param  bool $user_active user_active (optional)
     * @param  int $user_boss_assistant user_boss_assistant (optional)
     * @param  int $user_boss_assistant_white_list user_boss_assistant_white_list (optional)
     * @param  int $user_call_acl user_call_acl (optional)
     * @param  bool $user_do_not_disturb user_do_not_disturb (optional)
     * @param  string $user_email user_email (optional)
     * @param  int $user_extension user_extension (optional)
     * @param  string $user_external_ip_calls user_external_ip_calls (optional)
     * @param  bool $user_gs_qr_code user_gs_qr_code (optional)
     * @param  bool $user_is_boss user_is_boss (optional)
     * @param  int $user_language user_language (optional)
     * @param  string $user_lastname user_lastname (optional)
     * @param  int $user_location user_location (optional)
     * @param  int $user_max_calls user_max_calls (optional)
     * @param  bool $user_multi_contact user_multi_contact (optional)
     * @param  string $user_name user_name (optional)
     * @param  int $user_outgoing_ddi user_outgoing_ddi (optional)
     * @param  int $user_outgoing_ddi_rule user_outgoing_ddi_rule (optional)
     * @param  string $user_pass user_pass (optional)
     * @param  string $user_reject_call_method user_reject_call_method (optional)
     * @param  int $user_terminal user_terminal (optional)
     * @param  int $user_timezone user_timezone (optional)
     * @param  int $user_transformation_rule_set user_transformation_rule_set (optional)
     * @param  bool $user_voicemail_attach_sound user_voicemail_attach_sound (optional)
     * @param  bool $user_voicemail_enabled user_voicemail_enabled (optional)
     * @param  int $user_voicemail_locution user_voicemail_locution (optional)
     * @param  bool $user_voicemail_send_mail user_voicemail_send_mail (optional)
     * @param  string $user2 user2 (optional)
     * @param  bool $user_exists user_exists (optional)
     * @param  string $zone_ca zone_ca (optional)
     * @param  string $zone_en zone_en (optional)
     * @param  string $zone_es zone_es (optional)
     * @param  string $zone_it zone_it (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_number_value _order_number_value (optional)
     * @param  string $_order_priority _order_priority (optional)
     * @param  string $_order_route_type _order_route_type (optional)
     * @param  string $_order_timeout_time _order_timeout_time (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\HuntGroupsRelUserDetailedCollection[]
     */
    public function getHuntGroupsRelUserCollection($hunt_group = null, $hunt_group_allow_call_forwards = null, $hunt_group_description = null, $hunt_group_name = null, $hunt_group_no_answer_extension = null, $hunt_group_no_answer_locution = null, $hunt_group_no_answer_number_country = null, $hunt_group_no_answer_number_value = null, $hunt_group_no_answer_target_type = null, $hunt_group_no_answer_voice_mail_user = null, $hunt_group_prevent_missed_calls = null, $hunt_group_ring_all_timeout = null, $hunt_group_strategy = null, $hunt_group2 = null, $id_exact = null, $name_ca = null, $name_en = null, $name_es = null, $name_it = null, $number_country = null, $number_country_code = null, $number_country_country_code = null, $number_country2 = null, $number_country_exists = null, $number_value = null, $number_value_end = null, $number_value_exact = null, $number_value_exists = null, $number_value_partial = null, $number_value_start = null, $priority = null, $priority_between = null, $priority_exists = null, $priority_gt = null, $priority_gte = null, $priority_lt = null, $priority_lte = null, $route_type = null, $route_type_end = null, $route_type_exact = null, $route_type_partial = null, $route_type_start = null, $timeout_time = null, $timeout_time_between = null, $timeout_time_exists = null, $timeout_time_gt = null, $timeout_time_gte = null, $timeout_time_lt = null, $timeout_time_lte = null, $user = null, $user_active = null, $user_boss_assistant = null, $user_boss_assistant_white_list = null, $user_call_acl = null, $user_do_not_disturb = null, $user_email = null, $user_extension = null, $user_external_ip_calls = null, $user_gs_qr_code = null, $user_is_boss = null, $user_language = null, $user_lastname = null, $user_location = null, $user_max_calls = null, $user_multi_contact = null, $user_name = null, $user_outgoing_ddi = null, $user_outgoing_ddi_rule = null, $user_pass = null, $user_reject_call_method = null, $user_terminal = null, $user_timezone = null, $user_transformation_rule_set = null, $user_voicemail_attach_sound = null, $user_voicemail_enabled = null, $user_voicemail_locution = null, $user_voicemail_send_mail = null, $user2 = null, $user_exists = null, $zone_ca = null, $zone_en = null, $zone_es = null, $zone_it = null, $_order_id = null, $_order_number_value = null, $_order_priority = null, $_order_route_type = null, $_order_timeout_time = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getHuntGroupsRelUserCollectionWithHttpInfo($hunt_group, $hunt_group_allow_call_forwards, $hunt_group_description, $hunt_group_name, $hunt_group_no_answer_extension, $hunt_group_no_answer_locution, $hunt_group_no_answer_number_country, $hunt_group_no_answer_number_value, $hunt_group_no_answer_target_type, $hunt_group_no_answer_voice_mail_user, $hunt_group_prevent_missed_calls, $hunt_group_ring_all_timeout, $hunt_group_strategy, $hunt_group2, $id_exact, $name_ca, $name_en, $name_es, $name_it, $number_country, $number_country_code, $number_country_country_code, $number_country2, $number_country_exists, $number_value, $number_value_end, $number_value_exact, $number_value_exists, $number_value_partial, $number_value_start, $priority, $priority_between, $priority_exists, $priority_gt, $priority_gte, $priority_lt, $priority_lte, $route_type, $route_type_end, $route_type_exact, $route_type_partial, $route_type_start, $timeout_time, $timeout_time_between, $timeout_time_exists, $timeout_time_gt, $timeout_time_gte, $timeout_time_lt, $timeout_time_lte, $user, $user_active, $user_boss_assistant, $user_boss_assistant_white_list, $user_call_acl, $user_do_not_disturb, $user_email, $user_extension, $user_external_ip_calls, $user_gs_qr_code, $user_is_boss, $user_language, $user_lastname, $user_location, $user_max_calls, $user_multi_contact, $user_name, $user_outgoing_ddi, $user_outgoing_ddi_rule, $user_pass, $user_reject_call_method, $user_terminal, $user_timezone, $user_transformation_rule_set, $user_voicemail_attach_sound, $user_voicemail_enabled, $user_voicemail_locution, $user_voicemail_send_mail, $user2, $user_exists, $zone_ca, $zone_en, $zone_es, $zone_it, $_order_id, $_order_number_value, $_order_priority, $_order_route_type, $_order_timeout_time, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getHuntGroupsRelUserCollectionWithHttpInfo
     *
     * Retrieves the collection of HuntGroupsRelUser resources.
     *
     * @param  string $hunt_group (optional)
     * @param  int $hunt_group_allow_call_forwards (optional)
     * @param  string $hunt_group_description (optional)
     * @param  string $hunt_group_name (optional)
     * @param  int $hunt_group_no_answer_extension (optional)
     * @param  int $hunt_group_no_answer_locution (optional)
     * @param  int $hunt_group_no_answer_number_country (optional)
     * @param  string $hunt_group_no_answer_number_value (optional)
     * @param  string $hunt_group_no_answer_target_type (optional)
     * @param  int $hunt_group_no_answer_voice_mail_user (optional)
     * @param  int $hunt_group_prevent_missed_calls (optional)
     * @param  int $hunt_group_ring_all_timeout (optional)
     * @param  string $hunt_group_strategy (optional)
     * @param  string $hunt_group2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $name_ca (optional)
     * @param  string $name_en (optional)
     * @param  string $name_es (optional)
     * @param  string $name_it (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country_code (optional)
     * @param  string $number_country_country_code (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $number_value (optional)
     * @param  string $number_value_end (optional)
     * @param  string $number_value_exact (optional)
     * @param  bool $number_value_exists (optional)
     * @param  string $number_value_partial (optional)
     * @param  string $number_value_start (optional)
     * @param  int $priority (optional)
     * @param  string $priority_between (optional)
     * @param  bool $priority_exists (optional)
     * @param  string $priority_gt (optional)
     * @param  string $priority_gte (optional)
     * @param  string $priority_lt (optional)
     * @param  string $priority_lte (optional)
     * @param  string $route_type (optional)
     * @param  string $route_type_end (optional)
     * @param  string $route_type_exact (optional)
     * @param  string $route_type_partial (optional)
     * @param  string $route_type_start (optional)
     * @param  int $timeout_time (optional)
     * @param  string $timeout_time_between (optional)
     * @param  bool $timeout_time_exists (optional)
     * @param  string $timeout_time_gt (optional)
     * @param  string $timeout_time_gte (optional)
     * @param  string $timeout_time_lt (optional)
     * @param  string $timeout_time_lte (optional)
     * @param  string $user (optional)
     * @param  bool $user_active (optional)
     * @param  int $user_boss_assistant (optional)
     * @param  int $user_boss_assistant_white_list (optional)
     * @param  int $user_call_acl (optional)
     * @param  bool $user_do_not_disturb (optional)
     * @param  string $user_email (optional)
     * @param  int $user_extension (optional)
     * @param  string $user_external_ip_calls (optional)
     * @param  bool $user_gs_qr_code (optional)
     * @param  bool $user_is_boss (optional)
     * @param  int $user_language (optional)
     * @param  string $user_lastname (optional)
     * @param  int $user_location (optional)
     * @param  int $user_max_calls (optional)
     * @param  bool $user_multi_contact (optional)
     * @param  string $user_name (optional)
     * @param  int $user_outgoing_ddi (optional)
     * @param  int $user_outgoing_ddi_rule (optional)
     * @param  string $user_pass (optional)
     * @param  string $user_reject_call_method (optional)
     * @param  int $user_terminal (optional)
     * @param  int $user_timezone (optional)
     * @param  int $user_transformation_rule_set (optional)
     * @param  bool $user_voicemail_attach_sound (optional)
     * @param  bool $user_voicemail_enabled (optional)
     * @param  int $user_voicemail_locution (optional)
     * @param  bool $user_voicemail_send_mail (optional)
     * @param  string $user2 (optional)
     * @param  bool $user_exists (optional)
     * @param  string $zone_ca (optional)
     * @param  string $zone_en (optional)
     * @param  string $zone_es (optional)
     * @param  string $zone_it (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_number_value (optional)
     * @param  string $_order_priority (optional)
     * @param  string $_order_route_type (optional)
     * @param  string $_order_timeout_time (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\HuntGroupsRelUserDetailedCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getHuntGroupsRelUserCollectionWithHttpInfo($hunt_group = null, $hunt_group_allow_call_forwards = null, $hunt_group_description = null, $hunt_group_name = null, $hunt_group_no_answer_extension = null, $hunt_group_no_answer_locution = null, $hunt_group_no_answer_number_country = null, $hunt_group_no_answer_number_value = null, $hunt_group_no_answer_target_type = null, $hunt_group_no_answer_voice_mail_user = null, $hunt_group_prevent_missed_calls = null, $hunt_group_ring_all_timeout = null, $hunt_group_strategy = null, $hunt_group2 = null, $id_exact = null, $name_ca = null, $name_en = null, $name_es = null, $name_it = null, $number_country = null, $number_country_code = null, $number_country_country_code = null, $number_country2 = null, $number_country_exists = null, $number_value = null, $number_value_end = null, $number_value_exact = null, $number_value_exists = null, $number_value_partial = null, $number_value_start = null, $priority = null, $priority_between = null, $priority_exists = null, $priority_gt = null, $priority_gte = null, $priority_lt = null, $priority_lte = null, $route_type = null, $route_type_end = null, $route_type_exact = null, $route_type_partial = null, $route_type_start = null, $timeout_time = null, $timeout_time_between = null, $timeout_time_exists = null, $timeout_time_gt = null, $timeout_time_gte = null, $timeout_time_lt = null, $timeout_time_lte = null, $user = null, $user_active = null, $user_boss_assistant = null, $user_boss_assistant_white_list = null, $user_call_acl = null, $user_do_not_disturb = null, $user_email = null, $user_extension = null, $user_external_ip_calls = null, $user_gs_qr_code = null, $user_is_boss = null, $user_language = null, $user_lastname = null, $user_location = null, $user_max_calls = null, $user_multi_contact = null, $user_name = null, $user_outgoing_ddi = null, $user_outgoing_ddi_rule = null, $user_pass = null, $user_reject_call_method = null, $user_terminal = null, $user_timezone = null, $user_transformation_rule_set = null, $user_voicemail_attach_sound = null, $user_voicemail_enabled = null, $user_voicemail_locution = null, $user_voicemail_send_mail = null, $user2 = null, $user_exists = null, $zone_ca = null, $zone_en = null, $zone_es = null, $zone_it = null, $_order_id = null, $_order_number_value = null, $_order_priority = null, $_order_route_type = null, $_order_timeout_time = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\HuntGroupsRelUserDetailedCollection[]';
        $request = $this->getHuntGroupsRelUserCollectionRequest($hunt_group, $hunt_group_allow_call_forwards, $hunt_group_description, $hunt_group_name, $hunt_group_no_answer_extension, $hunt_group_no_answer_locution, $hunt_group_no_answer_number_country, $hunt_group_no_answer_number_value, $hunt_group_no_answer_target_type, $hunt_group_no_answer_voice_mail_user, $hunt_group_prevent_missed_calls, $hunt_group_ring_all_timeout, $hunt_group_strategy, $hunt_group2, $id_exact, $name_ca, $name_en, $name_es, $name_it, $number_country, $number_country_code, $number_country_country_code, $number_country2, $number_country_exists, $number_value, $number_value_end, $number_value_exact, $number_value_exists, $number_value_partial, $number_value_start, $priority, $priority_between, $priority_exists, $priority_gt, $priority_gte, $priority_lt, $priority_lte, $route_type, $route_type_end, $route_type_exact, $route_type_partial, $route_type_start, $timeout_time, $timeout_time_between, $timeout_time_exists, $timeout_time_gt, $timeout_time_gte, $timeout_time_lt, $timeout_time_lte, $user, $user_active, $user_boss_assistant, $user_boss_assistant_white_list, $user_call_acl, $user_do_not_disturb, $user_email, $user_extension, $user_external_ip_calls, $user_gs_qr_code, $user_is_boss, $user_language, $user_lastname, $user_location, $user_max_calls, $user_multi_contact, $user_name, $user_outgoing_ddi, $user_outgoing_ddi_rule, $user_pass, $user_reject_call_method, $user_terminal, $user_timezone, $user_transformation_rule_set, $user_voicemail_attach_sound, $user_voicemail_enabled, $user_voicemail_locution, $user_voicemail_send_mail, $user2, $user_exists, $zone_ca, $zone_en, $zone_es, $zone_it, $_order_id, $_order_number_value, $_order_priority, $_order_route_type, $_order_timeout_time, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\HuntGroupsRelUserDetailedCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHuntGroupsRelUserCollectionAsync
     *
     * Retrieves the collection of HuntGroupsRelUser resources.
     *
     * @param  string $hunt_group (optional)
     * @param  int $hunt_group_allow_call_forwards (optional)
     * @param  string $hunt_group_description (optional)
     * @param  string $hunt_group_name (optional)
     * @param  int $hunt_group_no_answer_extension (optional)
     * @param  int $hunt_group_no_answer_locution (optional)
     * @param  int $hunt_group_no_answer_number_country (optional)
     * @param  string $hunt_group_no_answer_number_value (optional)
     * @param  string $hunt_group_no_answer_target_type (optional)
     * @param  int $hunt_group_no_answer_voice_mail_user (optional)
     * @param  int $hunt_group_prevent_missed_calls (optional)
     * @param  int $hunt_group_ring_all_timeout (optional)
     * @param  string $hunt_group_strategy (optional)
     * @param  string $hunt_group2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $name_ca (optional)
     * @param  string $name_en (optional)
     * @param  string $name_es (optional)
     * @param  string $name_it (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country_code (optional)
     * @param  string $number_country_country_code (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $number_value (optional)
     * @param  string $number_value_end (optional)
     * @param  string $number_value_exact (optional)
     * @param  bool $number_value_exists (optional)
     * @param  string $number_value_partial (optional)
     * @param  string $number_value_start (optional)
     * @param  int $priority (optional)
     * @param  string $priority_between (optional)
     * @param  bool $priority_exists (optional)
     * @param  string $priority_gt (optional)
     * @param  string $priority_gte (optional)
     * @param  string $priority_lt (optional)
     * @param  string $priority_lte (optional)
     * @param  string $route_type (optional)
     * @param  string $route_type_end (optional)
     * @param  string $route_type_exact (optional)
     * @param  string $route_type_partial (optional)
     * @param  string $route_type_start (optional)
     * @param  int $timeout_time (optional)
     * @param  string $timeout_time_between (optional)
     * @param  bool $timeout_time_exists (optional)
     * @param  string $timeout_time_gt (optional)
     * @param  string $timeout_time_gte (optional)
     * @param  string $timeout_time_lt (optional)
     * @param  string $timeout_time_lte (optional)
     * @param  string $user (optional)
     * @param  bool $user_active (optional)
     * @param  int $user_boss_assistant (optional)
     * @param  int $user_boss_assistant_white_list (optional)
     * @param  int $user_call_acl (optional)
     * @param  bool $user_do_not_disturb (optional)
     * @param  string $user_email (optional)
     * @param  int $user_extension (optional)
     * @param  string $user_external_ip_calls (optional)
     * @param  bool $user_gs_qr_code (optional)
     * @param  bool $user_is_boss (optional)
     * @param  int $user_language (optional)
     * @param  string $user_lastname (optional)
     * @param  int $user_location (optional)
     * @param  int $user_max_calls (optional)
     * @param  bool $user_multi_contact (optional)
     * @param  string $user_name (optional)
     * @param  int $user_outgoing_ddi (optional)
     * @param  int $user_outgoing_ddi_rule (optional)
     * @param  string $user_pass (optional)
     * @param  string $user_reject_call_method (optional)
     * @param  int $user_terminal (optional)
     * @param  int $user_timezone (optional)
     * @param  int $user_transformation_rule_set (optional)
     * @param  bool $user_voicemail_attach_sound (optional)
     * @param  bool $user_voicemail_enabled (optional)
     * @param  int $user_voicemail_locution (optional)
     * @param  bool $user_voicemail_send_mail (optional)
     * @param  string $user2 (optional)
     * @param  bool $user_exists (optional)
     * @param  string $zone_ca (optional)
     * @param  string $zone_en (optional)
     * @param  string $zone_es (optional)
     * @param  string $zone_it (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_number_value (optional)
     * @param  string $_order_priority (optional)
     * @param  string $_order_route_type (optional)
     * @param  string $_order_timeout_time (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHuntGroupsRelUserCollectionAsync($hunt_group = null, $hunt_group_allow_call_forwards = null, $hunt_group_description = null, $hunt_group_name = null, $hunt_group_no_answer_extension = null, $hunt_group_no_answer_locution = null, $hunt_group_no_answer_number_country = null, $hunt_group_no_answer_number_value = null, $hunt_group_no_answer_target_type = null, $hunt_group_no_answer_voice_mail_user = null, $hunt_group_prevent_missed_calls = null, $hunt_group_ring_all_timeout = null, $hunt_group_strategy = null, $hunt_group2 = null, $id_exact = null, $name_ca = null, $name_en = null, $name_es = null, $name_it = null, $number_country = null, $number_country_code = null, $number_country_country_code = null, $number_country2 = null, $number_country_exists = null, $number_value = null, $number_value_end = null, $number_value_exact = null, $number_value_exists = null, $number_value_partial = null, $number_value_start = null, $priority = null, $priority_between = null, $priority_exists = null, $priority_gt = null, $priority_gte = null, $priority_lt = null, $priority_lte = null, $route_type = null, $route_type_end = null, $route_type_exact = null, $route_type_partial = null, $route_type_start = null, $timeout_time = null, $timeout_time_between = null, $timeout_time_exists = null, $timeout_time_gt = null, $timeout_time_gte = null, $timeout_time_lt = null, $timeout_time_lte = null, $user = null, $user_active = null, $user_boss_assistant = null, $user_boss_assistant_white_list = null, $user_call_acl = null, $user_do_not_disturb = null, $user_email = null, $user_extension = null, $user_external_ip_calls = null, $user_gs_qr_code = null, $user_is_boss = null, $user_language = null, $user_lastname = null, $user_location = null, $user_max_calls = null, $user_multi_contact = null, $user_name = null, $user_outgoing_ddi = null, $user_outgoing_ddi_rule = null, $user_pass = null, $user_reject_call_method = null, $user_terminal = null, $user_timezone = null, $user_transformation_rule_set = null, $user_voicemail_attach_sound = null, $user_voicemail_enabled = null, $user_voicemail_locution = null, $user_voicemail_send_mail = null, $user2 = null, $user_exists = null, $zone_ca = null, $zone_en = null, $zone_es = null, $zone_it = null, $_order_id = null, $_order_number_value = null, $_order_priority = null, $_order_route_type = null, $_order_timeout_time = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getHuntGroupsRelUserCollectionAsyncWithHttpInfo($hunt_group, $hunt_group_allow_call_forwards, $hunt_group_description, $hunt_group_name, $hunt_group_no_answer_extension, $hunt_group_no_answer_locution, $hunt_group_no_answer_number_country, $hunt_group_no_answer_number_value, $hunt_group_no_answer_target_type, $hunt_group_no_answer_voice_mail_user, $hunt_group_prevent_missed_calls, $hunt_group_ring_all_timeout, $hunt_group_strategy, $hunt_group2, $id_exact, $name_ca, $name_en, $name_es, $name_it, $number_country, $number_country_code, $number_country_country_code, $number_country2, $number_country_exists, $number_value, $number_value_end, $number_value_exact, $number_value_exists, $number_value_partial, $number_value_start, $priority, $priority_between, $priority_exists, $priority_gt, $priority_gte, $priority_lt, $priority_lte, $route_type, $route_type_end, $route_type_exact, $route_type_partial, $route_type_start, $timeout_time, $timeout_time_between, $timeout_time_exists, $timeout_time_gt, $timeout_time_gte, $timeout_time_lt, $timeout_time_lte, $user, $user_active, $user_boss_assistant, $user_boss_assistant_white_list, $user_call_acl, $user_do_not_disturb, $user_email, $user_extension, $user_external_ip_calls, $user_gs_qr_code, $user_is_boss, $user_language, $user_lastname, $user_location, $user_max_calls, $user_multi_contact, $user_name, $user_outgoing_ddi, $user_outgoing_ddi_rule, $user_pass, $user_reject_call_method, $user_terminal, $user_timezone, $user_transformation_rule_set, $user_voicemail_attach_sound, $user_voicemail_enabled, $user_voicemail_locution, $user_voicemail_send_mail, $user2, $user_exists, $zone_ca, $zone_en, $zone_es, $zone_it, $_order_id, $_order_number_value, $_order_priority, $_order_route_type, $_order_timeout_time, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHuntGroupsRelUserCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of HuntGroupsRelUser resources.
     *
     * @param  string $hunt_group (optional)
     * @param  int $hunt_group_allow_call_forwards (optional)
     * @param  string $hunt_group_description (optional)
     * @param  string $hunt_group_name (optional)
     * @param  int $hunt_group_no_answer_extension (optional)
     * @param  int $hunt_group_no_answer_locution (optional)
     * @param  int $hunt_group_no_answer_number_country (optional)
     * @param  string $hunt_group_no_answer_number_value (optional)
     * @param  string $hunt_group_no_answer_target_type (optional)
     * @param  int $hunt_group_no_answer_voice_mail_user (optional)
     * @param  int $hunt_group_prevent_missed_calls (optional)
     * @param  int $hunt_group_ring_all_timeout (optional)
     * @param  string $hunt_group_strategy (optional)
     * @param  string $hunt_group2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $name_ca (optional)
     * @param  string $name_en (optional)
     * @param  string $name_es (optional)
     * @param  string $name_it (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country_code (optional)
     * @param  string $number_country_country_code (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $number_value (optional)
     * @param  string $number_value_end (optional)
     * @param  string $number_value_exact (optional)
     * @param  bool $number_value_exists (optional)
     * @param  string $number_value_partial (optional)
     * @param  string $number_value_start (optional)
     * @param  int $priority (optional)
     * @param  string $priority_between (optional)
     * @param  bool $priority_exists (optional)
     * @param  string $priority_gt (optional)
     * @param  string $priority_gte (optional)
     * @param  string $priority_lt (optional)
     * @param  string $priority_lte (optional)
     * @param  string $route_type (optional)
     * @param  string $route_type_end (optional)
     * @param  string $route_type_exact (optional)
     * @param  string $route_type_partial (optional)
     * @param  string $route_type_start (optional)
     * @param  int $timeout_time (optional)
     * @param  string $timeout_time_between (optional)
     * @param  bool $timeout_time_exists (optional)
     * @param  string $timeout_time_gt (optional)
     * @param  string $timeout_time_gte (optional)
     * @param  string $timeout_time_lt (optional)
     * @param  string $timeout_time_lte (optional)
     * @param  string $user (optional)
     * @param  bool $user_active (optional)
     * @param  int $user_boss_assistant (optional)
     * @param  int $user_boss_assistant_white_list (optional)
     * @param  int $user_call_acl (optional)
     * @param  bool $user_do_not_disturb (optional)
     * @param  string $user_email (optional)
     * @param  int $user_extension (optional)
     * @param  string $user_external_ip_calls (optional)
     * @param  bool $user_gs_qr_code (optional)
     * @param  bool $user_is_boss (optional)
     * @param  int $user_language (optional)
     * @param  string $user_lastname (optional)
     * @param  int $user_location (optional)
     * @param  int $user_max_calls (optional)
     * @param  bool $user_multi_contact (optional)
     * @param  string $user_name (optional)
     * @param  int $user_outgoing_ddi (optional)
     * @param  int $user_outgoing_ddi_rule (optional)
     * @param  string $user_pass (optional)
     * @param  string $user_reject_call_method (optional)
     * @param  int $user_terminal (optional)
     * @param  int $user_timezone (optional)
     * @param  int $user_transformation_rule_set (optional)
     * @param  bool $user_voicemail_attach_sound (optional)
     * @param  bool $user_voicemail_enabled (optional)
     * @param  int $user_voicemail_locution (optional)
     * @param  bool $user_voicemail_send_mail (optional)
     * @param  string $user2 (optional)
     * @param  bool $user_exists (optional)
     * @param  string $zone_ca (optional)
     * @param  string $zone_en (optional)
     * @param  string $zone_es (optional)
     * @param  string $zone_it (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_number_value (optional)
     * @param  string $_order_priority (optional)
     * @param  string $_order_route_type (optional)
     * @param  string $_order_timeout_time (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHuntGroupsRelUserCollectionAsyncWithHttpInfo($hunt_group = null, $hunt_group_allow_call_forwards = null, $hunt_group_description = null, $hunt_group_name = null, $hunt_group_no_answer_extension = null, $hunt_group_no_answer_locution = null, $hunt_group_no_answer_number_country = null, $hunt_group_no_answer_number_value = null, $hunt_group_no_answer_target_type = null, $hunt_group_no_answer_voice_mail_user = null, $hunt_group_prevent_missed_calls = null, $hunt_group_ring_all_timeout = null, $hunt_group_strategy = null, $hunt_group2 = null, $id_exact = null, $name_ca = null, $name_en = null, $name_es = null, $name_it = null, $number_country = null, $number_country_code = null, $number_country_country_code = null, $number_country2 = null, $number_country_exists = null, $number_value = null, $number_value_end = null, $number_value_exact = null, $number_value_exists = null, $number_value_partial = null, $number_value_start = null, $priority = null, $priority_between = null, $priority_exists = null, $priority_gt = null, $priority_gte = null, $priority_lt = null, $priority_lte = null, $route_type = null, $route_type_end = null, $route_type_exact = null, $route_type_partial = null, $route_type_start = null, $timeout_time = null, $timeout_time_between = null, $timeout_time_exists = null, $timeout_time_gt = null, $timeout_time_gte = null, $timeout_time_lt = null, $timeout_time_lte = null, $user = null, $user_active = null, $user_boss_assistant = null, $user_boss_assistant_white_list = null, $user_call_acl = null, $user_do_not_disturb = null, $user_email = null, $user_extension = null, $user_external_ip_calls = null, $user_gs_qr_code = null, $user_is_boss = null, $user_language = null, $user_lastname = null, $user_location = null, $user_max_calls = null, $user_multi_contact = null, $user_name = null, $user_outgoing_ddi = null, $user_outgoing_ddi_rule = null, $user_pass = null, $user_reject_call_method = null, $user_terminal = null, $user_timezone = null, $user_transformation_rule_set = null, $user_voicemail_attach_sound = null, $user_voicemail_enabled = null, $user_voicemail_locution = null, $user_voicemail_send_mail = null, $user2 = null, $user_exists = null, $zone_ca = null, $zone_en = null, $zone_es = null, $zone_it = null, $_order_id = null, $_order_number_value = null, $_order_priority = null, $_order_route_type = null, $_order_timeout_time = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\HuntGroupsRelUserDetailedCollection[]';
        $request = $this->getHuntGroupsRelUserCollectionRequest($hunt_group, $hunt_group_allow_call_forwards, $hunt_group_description, $hunt_group_name, $hunt_group_no_answer_extension, $hunt_group_no_answer_locution, $hunt_group_no_answer_number_country, $hunt_group_no_answer_number_value, $hunt_group_no_answer_target_type, $hunt_group_no_answer_voice_mail_user, $hunt_group_prevent_missed_calls, $hunt_group_ring_all_timeout, $hunt_group_strategy, $hunt_group2, $id_exact, $name_ca, $name_en, $name_es, $name_it, $number_country, $number_country_code, $number_country_country_code, $number_country2, $number_country_exists, $number_value, $number_value_end, $number_value_exact, $number_value_exists, $number_value_partial, $number_value_start, $priority, $priority_between, $priority_exists, $priority_gt, $priority_gte, $priority_lt, $priority_lte, $route_type, $route_type_end, $route_type_exact, $route_type_partial, $route_type_start, $timeout_time, $timeout_time_between, $timeout_time_exists, $timeout_time_gt, $timeout_time_gte, $timeout_time_lt, $timeout_time_lte, $user, $user_active, $user_boss_assistant, $user_boss_assistant_white_list, $user_call_acl, $user_do_not_disturb, $user_email, $user_extension, $user_external_ip_calls, $user_gs_qr_code, $user_is_boss, $user_language, $user_lastname, $user_location, $user_max_calls, $user_multi_contact, $user_name, $user_outgoing_ddi, $user_outgoing_ddi_rule, $user_pass, $user_reject_call_method, $user_terminal, $user_timezone, $user_transformation_rule_set, $user_voicemail_attach_sound, $user_voicemail_enabled, $user_voicemail_locution, $user_voicemail_send_mail, $user2, $user_exists, $zone_ca, $zone_en, $zone_es, $zone_it, $_order_id, $_order_number_value, $_order_priority, $_order_route_type, $_order_timeout_time, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHuntGroupsRelUserCollection'
     *
     * @param  string $hunt_group (optional)
     * @param  int $hunt_group_allow_call_forwards (optional)
     * @param  string $hunt_group_description (optional)
     * @param  string $hunt_group_name (optional)
     * @param  int $hunt_group_no_answer_extension (optional)
     * @param  int $hunt_group_no_answer_locution (optional)
     * @param  int $hunt_group_no_answer_number_country (optional)
     * @param  string $hunt_group_no_answer_number_value (optional)
     * @param  string $hunt_group_no_answer_target_type (optional)
     * @param  int $hunt_group_no_answer_voice_mail_user (optional)
     * @param  int $hunt_group_prevent_missed_calls (optional)
     * @param  int $hunt_group_ring_all_timeout (optional)
     * @param  string $hunt_group_strategy (optional)
     * @param  string $hunt_group2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $name_ca (optional)
     * @param  string $name_en (optional)
     * @param  string $name_es (optional)
     * @param  string $name_it (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country_code (optional)
     * @param  string $number_country_country_code (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $number_value (optional)
     * @param  string $number_value_end (optional)
     * @param  string $number_value_exact (optional)
     * @param  bool $number_value_exists (optional)
     * @param  string $number_value_partial (optional)
     * @param  string $number_value_start (optional)
     * @param  int $priority (optional)
     * @param  string $priority_between (optional)
     * @param  bool $priority_exists (optional)
     * @param  string $priority_gt (optional)
     * @param  string $priority_gte (optional)
     * @param  string $priority_lt (optional)
     * @param  string $priority_lte (optional)
     * @param  string $route_type (optional)
     * @param  string $route_type_end (optional)
     * @param  string $route_type_exact (optional)
     * @param  string $route_type_partial (optional)
     * @param  string $route_type_start (optional)
     * @param  int $timeout_time (optional)
     * @param  string $timeout_time_between (optional)
     * @param  bool $timeout_time_exists (optional)
     * @param  string $timeout_time_gt (optional)
     * @param  string $timeout_time_gte (optional)
     * @param  string $timeout_time_lt (optional)
     * @param  string $timeout_time_lte (optional)
     * @param  string $user (optional)
     * @param  bool $user_active (optional)
     * @param  int $user_boss_assistant (optional)
     * @param  int $user_boss_assistant_white_list (optional)
     * @param  int $user_call_acl (optional)
     * @param  bool $user_do_not_disturb (optional)
     * @param  string $user_email (optional)
     * @param  int $user_extension (optional)
     * @param  string $user_external_ip_calls (optional)
     * @param  bool $user_gs_qr_code (optional)
     * @param  bool $user_is_boss (optional)
     * @param  int $user_language (optional)
     * @param  string $user_lastname (optional)
     * @param  int $user_location (optional)
     * @param  int $user_max_calls (optional)
     * @param  bool $user_multi_contact (optional)
     * @param  string $user_name (optional)
     * @param  int $user_outgoing_ddi (optional)
     * @param  int $user_outgoing_ddi_rule (optional)
     * @param  string $user_pass (optional)
     * @param  string $user_reject_call_method (optional)
     * @param  int $user_terminal (optional)
     * @param  int $user_timezone (optional)
     * @param  int $user_transformation_rule_set (optional)
     * @param  bool $user_voicemail_attach_sound (optional)
     * @param  bool $user_voicemail_enabled (optional)
     * @param  int $user_voicemail_locution (optional)
     * @param  bool $user_voicemail_send_mail (optional)
     * @param  string $user2 (optional)
     * @param  bool $user_exists (optional)
     * @param  string $zone_ca (optional)
     * @param  string $zone_en (optional)
     * @param  string $zone_es (optional)
     * @param  string $zone_it (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_number_value (optional)
     * @param  string $_order_priority (optional)
     * @param  string $_order_route_type (optional)
     * @param  string $_order_timeout_time (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHuntGroupsRelUserCollectionRequest($hunt_group = null, $hunt_group_allow_call_forwards = null, $hunt_group_description = null, $hunt_group_name = null, $hunt_group_no_answer_extension = null, $hunt_group_no_answer_locution = null, $hunt_group_no_answer_number_country = null, $hunt_group_no_answer_number_value = null, $hunt_group_no_answer_target_type = null, $hunt_group_no_answer_voice_mail_user = null, $hunt_group_prevent_missed_calls = null, $hunt_group_ring_all_timeout = null, $hunt_group_strategy = null, $hunt_group2 = null, $id_exact = null, $name_ca = null, $name_en = null, $name_es = null, $name_it = null, $number_country = null, $number_country_code = null, $number_country_country_code = null, $number_country2 = null, $number_country_exists = null, $number_value = null, $number_value_end = null, $number_value_exact = null, $number_value_exists = null, $number_value_partial = null, $number_value_start = null, $priority = null, $priority_between = null, $priority_exists = null, $priority_gt = null, $priority_gte = null, $priority_lt = null, $priority_lte = null, $route_type = null, $route_type_end = null, $route_type_exact = null, $route_type_partial = null, $route_type_start = null, $timeout_time = null, $timeout_time_between = null, $timeout_time_exists = null, $timeout_time_gt = null, $timeout_time_gte = null, $timeout_time_lt = null, $timeout_time_lte = null, $user = null, $user_active = null, $user_boss_assistant = null, $user_boss_assistant_white_list = null, $user_call_acl = null, $user_do_not_disturb = null, $user_email = null, $user_extension = null, $user_external_ip_calls = null, $user_gs_qr_code = null, $user_is_boss = null, $user_language = null, $user_lastname = null, $user_location = null, $user_max_calls = null, $user_multi_contact = null, $user_name = null, $user_outgoing_ddi = null, $user_outgoing_ddi_rule = null, $user_pass = null, $user_reject_call_method = null, $user_terminal = null, $user_timezone = null, $user_transformation_rule_set = null, $user_voicemail_attach_sound = null, $user_voicemail_enabled = null, $user_voicemail_locution = null, $user_voicemail_send_mail = null, $user2 = null, $user_exists = null, $zone_ca = null, $zone_en = null, $zone_es = null, $zone_it = null, $_order_id = null, $_order_number_value = null, $_order_priority = null, $_order_route_type = null, $_order_timeout_time = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/hunt_groups_rel_users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($hunt_group !== null) {
            $queryParams['huntGroup'] = ObjectSerializer::toQueryValue($hunt_group);
        }
        // query params
        if ($hunt_group_allow_call_forwards !== null) {
            $queryParams['huntGroup.allowCallForwards'] = ObjectSerializer::toQueryValue($hunt_group_allow_call_forwards);
        }
        // query params
        if ($hunt_group_description !== null) {
            $queryParams['huntGroup.description'] = ObjectSerializer::toQueryValue($hunt_group_description);
        }
        // query params
        if ($hunt_group_name !== null) {
            $queryParams['huntGroup.name'] = ObjectSerializer::toQueryValue($hunt_group_name);
        }
        // query params
        if ($hunt_group_no_answer_extension !== null) {
            $queryParams['huntGroup.noAnswerExtension'] = ObjectSerializer::toQueryValue($hunt_group_no_answer_extension);
        }
        // query params
        if ($hunt_group_no_answer_locution !== null) {
            $queryParams['huntGroup.noAnswerLocution'] = ObjectSerializer::toQueryValue($hunt_group_no_answer_locution);
        }
        // query params
        if ($hunt_group_no_answer_number_country !== null) {
            $queryParams['huntGroup.noAnswerNumberCountry'] = ObjectSerializer::toQueryValue($hunt_group_no_answer_number_country);
        }
        // query params
        if ($hunt_group_no_answer_number_value !== null) {
            $queryParams['huntGroup.noAnswerNumberValue'] = ObjectSerializer::toQueryValue($hunt_group_no_answer_number_value);
        }
        // query params
        if ($hunt_group_no_answer_target_type !== null) {
            $queryParams['huntGroup.noAnswerTargetType'] = ObjectSerializer::toQueryValue($hunt_group_no_answer_target_type);
        }
        // query params
        if ($hunt_group_no_answer_voice_mail_user !== null) {
            $queryParams['huntGroup.noAnswerVoiceMailUser'] = ObjectSerializer::toQueryValue($hunt_group_no_answer_voice_mail_user);
        }
        // query params
        if ($hunt_group_prevent_missed_calls !== null) {
            $queryParams['huntGroup.preventMissedCalls'] = ObjectSerializer::toQueryValue($hunt_group_prevent_missed_calls);
        }
        // query params
        if ($hunt_group_ring_all_timeout !== null) {
            $queryParams['huntGroup.ringAllTimeout'] = ObjectSerializer::toQueryValue($hunt_group_ring_all_timeout);
        }
        // query params
        if ($hunt_group_strategy !== null) {
            $queryParams['huntGroup.strategy'] = ObjectSerializer::toQueryValue($hunt_group_strategy);
        }
        // query params
        if ($hunt_group2 !== null) {
            $queryParams['huntGroup[]'] = ObjectSerializer::toQueryValue($hunt_group2);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($name_ca !== null) {
            $queryParams['name.ca'] = ObjectSerializer::toQueryValue($name_ca);
        }
        // query params
        if ($name_en !== null) {
            $queryParams['name.en'] = ObjectSerializer::toQueryValue($name_en);
        }
        // query params
        if ($name_es !== null) {
            $queryParams['name.es'] = ObjectSerializer::toQueryValue($name_es);
        }
        // query params
        if ($name_it !== null) {
            $queryParams['name.it'] = ObjectSerializer::toQueryValue($name_it);
        }
        // query params
        if ($number_country !== null) {
            $queryParams['numberCountry'] = ObjectSerializer::toQueryValue($number_country);
        }
        // query params
        if ($number_country_code !== null) {
            $queryParams['numberCountry.code'] = ObjectSerializer::toQueryValue($number_country_code);
        }
        // query params
        if ($number_country_country_code !== null) {
            $queryParams['numberCountry.countryCode'] = ObjectSerializer::toQueryValue($number_country_country_code);
        }
        // query params
        if ($number_country2 !== null) {
            $queryParams['numberCountry[]'] = ObjectSerializer::toQueryValue($number_country2);
        }
        // query params
        if ($number_country_exists !== null) {
            $queryParams['numberCountry[exists]'] = ObjectSerializer::toQueryValue($number_country_exists);
        }
        // query params
        if ($number_value !== null) {
            $queryParams['numberValue'] = ObjectSerializer::toQueryValue($number_value);
        }
        // query params
        if ($number_value_end !== null) {
            $queryParams['numberValue[end]'] = ObjectSerializer::toQueryValue($number_value_end);
        }
        // query params
        if ($number_value_exact !== null) {
            $queryParams['numberValue[exact]'] = ObjectSerializer::toQueryValue($number_value_exact);
        }
        // query params
        if ($number_value_exists !== null) {
            $queryParams['numberValue[exists]'] = ObjectSerializer::toQueryValue($number_value_exists);
        }
        // query params
        if ($number_value_partial !== null) {
            $queryParams['numberValue[partial]'] = ObjectSerializer::toQueryValue($number_value_partial);
        }
        // query params
        if ($number_value_start !== null) {
            $queryParams['numberValue[start]'] = ObjectSerializer::toQueryValue($number_value_start);
        }
        // query params
        if ($priority !== null) {
            $queryParams['priority'] = ObjectSerializer::toQueryValue($priority);
        }
        // query params
        if ($priority_between !== null) {
            $queryParams['priority[between]'] = ObjectSerializer::toQueryValue($priority_between);
        }
        // query params
        if ($priority_exists !== null) {
            $queryParams['priority[exists]'] = ObjectSerializer::toQueryValue($priority_exists);
        }
        // query params
        if ($priority_gt !== null) {
            $queryParams['priority[gt]'] = ObjectSerializer::toQueryValue($priority_gt);
        }
        // query params
        if ($priority_gte !== null) {
            $queryParams['priority[gte]'] = ObjectSerializer::toQueryValue($priority_gte);
        }
        // query params
        if ($priority_lt !== null) {
            $queryParams['priority[lt]'] = ObjectSerializer::toQueryValue($priority_lt);
        }
        // query params
        if ($priority_lte !== null) {
            $queryParams['priority[lte]'] = ObjectSerializer::toQueryValue($priority_lte);
        }
        // query params
        if ($route_type !== null) {
            $queryParams['routeType'] = ObjectSerializer::toQueryValue($route_type);
        }
        // query params
        if ($route_type_end !== null) {
            $queryParams['routeType[end]'] = ObjectSerializer::toQueryValue($route_type_end);
        }
        // query params
        if ($route_type_exact !== null) {
            $queryParams['routeType[exact]'] = ObjectSerializer::toQueryValue($route_type_exact);
        }
        // query params
        if ($route_type_partial !== null) {
            $queryParams['routeType[partial]'] = ObjectSerializer::toQueryValue($route_type_partial);
        }
        // query params
        if ($route_type_start !== null) {
            $queryParams['routeType[start]'] = ObjectSerializer::toQueryValue($route_type_start);
        }
        // query params
        if ($timeout_time !== null) {
            $queryParams['timeoutTime'] = ObjectSerializer::toQueryValue($timeout_time);
        }
        // query params
        if ($timeout_time_between !== null) {
            $queryParams['timeoutTime[between]'] = ObjectSerializer::toQueryValue($timeout_time_between);
        }
        // query params
        if ($timeout_time_exists !== null) {
            $queryParams['timeoutTime[exists]'] = ObjectSerializer::toQueryValue($timeout_time_exists);
        }
        // query params
        if ($timeout_time_gt !== null) {
            $queryParams['timeoutTime[gt]'] = ObjectSerializer::toQueryValue($timeout_time_gt);
        }
        // query params
        if ($timeout_time_gte !== null) {
            $queryParams['timeoutTime[gte]'] = ObjectSerializer::toQueryValue($timeout_time_gte);
        }
        // query params
        if ($timeout_time_lt !== null) {
            $queryParams['timeoutTime[lt]'] = ObjectSerializer::toQueryValue($timeout_time_lt);
        }
        // query params
        if ($timeout_time_lte !== null) {
            $queryParams['timeoutTime[lte]'] = ObjectSerializer::toQueryValue($timeout_time_lte);
        }
        // query params
        if ($user !== null) {
            $queryParams['user'] = ObjectSerializer::toQueryValue($user);
        }
        // query params
        if ($user_active !== null) {
            $queryParams['user.active'] = ObjectSerializer::toQueryValue($user_active);
        }
        // query params
        if ($user_boss_assistant !== null) {
            $queryParams['user.bossAssistant'] = ObjectSerializer::toQueryValue($user_boss_assistant);
        }
        // query params
        if ($user_boss_assistant_white_list !== null) {
            $queryParams['user.bossAssistantWhiteList'] = ObjectSerializer::toQueryValue($user_boss_assistant_white_list);
        }
        // query params
        if ($user_call_acl !== null) {
            $queryParams['user.callAcl'] = ObjectSerializer::toQueryValue($user_call_acl);
        }
        // query params
        if ($user_do_not_disturb !== null) {
            $queryParams['user.doNotDisturb'] = ObjectSerializer::toQueryValue($user_do_not_disturb);
        }
        // query params
        if ($user_email !== null) {
            $queryParams['user.email'] = ObjectSerializer::toQueryValue($user_email);
        }
        // query params
        if ($user_extension !== null) {
            $queryParams['user.extension'] = ObjectSerializer::toQueryValue($user_extension);
        }
        // query params
        if ($user_external_ip_calls !== null) {
            $queryParams['user.externalIpCalls'] = ObjectSerializer::toQueryValue($user_external_ip_calls);
        }
        // query params
        if ($user_gs_qr_code !== null) {
            $queryParams['user.gsQRCode'] = ObjectSerializer::toQueryValue($user_gs_qr_code);
        }
        // query params
        if ($user_is_boss !== null) {
            $queryParams['user.isBoss'] = ObjectSerializer::toQueryValue($user_is_boss);
        }
        // query params
        if ($user_language !== null) {
            $queryParams['user.language'] = ObjectSerializer::toQueryValue($user_language);
        }
        // query params
        if ($user_lastname !== null) {
            $queryParams['user.lastname'] = ObjectSerializer::toQueryValue($user_lastname);
        }
        // query params
        if ($user_location !== null) {
            $queryParams['user.location'] = ObjectSerializer::toQueryValue($user_location);
        }
        // query params
        if ($user_max_calls !== null) {
            $queryParams['user.maxCalls'] = ObjectSerializer::toQueryValue($user_max_calls);
        }
        // query params
        if ($user_multi_contact !== null) {
            $queryParams['user.multiContact'] = ObjectSerializer::toQueryValue($user_multi_contact);
        }
        // query params
        if ($user_name !== null) {
            $queryParams['user.name'] = ObjectSerializer::toQueryValue($user_name);
        }
        // query params
        if ($user_outgoing_ddi !== null) {
            $queryParams['user.outgoingDdi'] = ObjectSerializer::toQueryValue($user_outgoing_ddi);
        }
        // query params
        if ($user_outgoing_ddi_rule !== null) {
            $queryParams['user.outgoingDdiRule'] = ObjectSerializer::toQueryValue($user_outgoing_ddi_rule);
        }
        // query params
        if ($user_pass !== null) {
            $queryParams['user.pass'] = ObjectSerializer::toQueryValue($user_pass);
        }
        // query params
        if ($user_reject_call_method !== null) {
            $queryParams['user.rejectCallMethod'] = ObjectSerializer::toQueryValue($user_reject_call_method);
        }
        // query params
        if ($user_terminal !== null) {
            $queryParams['user.terminal'] = ObjectSerializer::toQueryValue($user_terminal);
        }
        // query params
        if ($user_timezone !== null) {
            $queryParams['user.timezone'] = ObjectSerializer::toQueryValue($user_timezone);
        }
        // query params
        if ($user_transformation_rule_set !== null) {
            $queryParams['user.transformationRuleSet'] = ObjectSerializer::toQueryValue($user_transformation_rule_set);
        }
        // query params
        if ($user_voicemail_attach_sound !== null) {
            $queryParams['user.voicemailAttachSound'] = ObjectSerializer::toQueryValue($user_voicemail_attach_sound);
        }
        // query params
        if ($user_voicemail_enabled !== null) {
            $queryParams['user.voicemailEnabled'] = ObjectSerializer::toQueryValue($user_voicemail_enabled);
        }
        // query params
        if ($user_voicemail_locution !== null) {
            $queryParams['user.voicemailLocution'] = ObjectSerializer::toQueryValue($user_voicemail_locution);
        }
        // query params
        if ($user_voicemail_send_mail !== null) {
            $queryParams['user.voicemailSendMail'] = ObjectSerializer::toQueryValue($user_voicemail_send_mail);
        }
        // query params
        if ($user2 !== null) {
            $queryParams['user[]'] = ObjectSerializer::toQueryValue($user2);
        }
        // query params
        if ($user_exists !== null) {
            $queryParams['user[exists]'] = ObjectSerializer::toQueryValue($user_exists);
        }
        // query params
        if ($zone_ca !== null) {
            $queryParams['zone.ca'] = ObjectSerializer::toQueryValue($zone_ca);
        }
        // query params
        if ($zone_en !== null) {
            $queryParams['zone.en'] = ObjectSerializer::toQueryValue($zone_en);
        }
        // query params
        if ($zone_es !== null) {
            $queryParams['zone.es'] = ObjectSerializer::toQueryValue($zone_es);
        }
        // query params
        if ($zone_it !== null) {
            $queryParams['zone.it'] = ObjectSerializer::toQueryValue($zone_it);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_number_value !== null) {
            $queryParams['_order[numberValue]'] = ObjectSerializer::toQueryValue($_order_number_value);
        }
        // query params
        if ($_order_priority !== null) {
            $queryParams['_order[priority]'] = ObjectSerializer::toQueryValue($_order_priority);
        }
        // query params
        if ($_order_route_type !== null) {
            $queryParams['_order[routeType]'] = ObjectSerializer::toQueryValue($_order_route_type);
        }
        // query params
        if ($_order_timeout_time !== null) {
            $queryParams['_order[timeoutTime]'] = ObjectSerializer::toQueryValue($_order_timeout_time);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHuntGroupsRelUserItem
     *
     * Retrieves a HuntGroupsRelUser resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\HuntGroupsRelUserDetailed
     */
    public function getHuntGroupsRelUserItem($id)
    {
        list($response) = $this->getHuntGroupsRelUserItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getHuntGroupsRelUserItemWithHttpInfo
     *
     * Retrieves a HuntGroupsRelUser resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\HuntGroupsRelUserDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHuntGroupsRelUserItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\HuntGroupsRelUserDetailed';
        $request = $this->getHuntGroupsRelUserItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\HuntGroupsRelUserDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHuntGroupsRelUserItemAsync
     *
     * Retrieves a HuntGroupsRelUser resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHuntGroupsRelUserItemAsync($id)
    {
        return $this->getHuntGroupsRelUserItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHuntGroupsRelUserItemAsyncWithHttpInfo
     *
     * Retrieves a HuntGroupsRelUser resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHuntGroupsRelUserItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\HuntGroupsRelUserDetailed';
        $request = $this->getHuntGroupsRelUserItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHuntGroupsRelUserItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHuntGroupsRelUserItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getHuntGroupsRelUserItem'
            );
        }

        $resourcePath = '/hunt_groups_rel_users/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIvrCollection
     *
     * Retrieves the collection of Ivr resources.
     *
     * @param  bool $allow_extensions allow_extensions (optional)
     * @param  string $error_extension error_extension (optional)
     * @param  string $error_extension2 error_extension2 (optional)
     * @param  bool $error_extension_exists error_extension_exists (optional)
     * @param  string $error_locution error_locution (optional)
     * @param  string $error_locution2 error_locution2 (optional)
     * @param  bool $error_locution_exists error_locution_exists (optional)
     * @param  string $error_number_country error_number_country (optional)
     * @param  string $error_number_country2 error_number_country2 (optional)
     * @param  bool $error_number_country_exists error_number_country_exists (optional)
     * @param  string $error_number_value error_number_value (optional)
     * @param  string $error_number_value_end error_number_value_end (optional)
     * @param  string $error_number_value_exact error_number_value_exact (optional)
     * @param  bool $error_number_value_exists error_number_value_exists (optional)
     * @param  string $error_number_value_partial error_number_value_partial (optional)
     * @param  string $error_number_value_start error_number_value_start (optional)
     * @param  string $error_route_type error_route_type (optional)
     * @param  string $error_route_type_end error_route_type_end (optional)
     * @param  string $error_route_type_exact error_route_type_exact (optional)
     * @param  bool $error_route_type_exists error_route_type_exists (optional)
     * @param  string $error_route_type_partial error_route_type_partial (optional)
     * @param  string $error_route_type_start error_route_type_start (optional)
     * @param  string $error_voice_mail_user error_voice_mail_user (optional)
     * @param  string $error_voice_mail_user2 error_voice_mail_user2 (optional)
     * @param  bool $error_voice_mail_user_exists error_voice_mail_user_exists (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $name name (optional)
     * @param  string $name_end name_end (optional)
     * @param  string $name_exact name_exact (optional)
     * @param  string $name_partial name_partial (optional)
     * @param  string $name_start name_start (optional)
     * @param  string $no_input_extension no_input_extension (optional)
     * @param  string $no_input_extension2 no_input_extension2 (optional)
     * @param  bool $no_input_extension_exists no_input_extension_exists (optional)
     * @param  string $no_input_locution no_input_locution (optional)
     * @param  string $no_input_locution2 no_input_locution2 (optional)
     * @param  bool $no_input_locution_exists no_input_locution_exists (optional)
     * @param  string $no_input_number_country no_input_number_country (optional)
     * @param  string $no_input_number_country2 no_input_number_country2 (optional)
     * @param  bool $no_input_number_country_exists no_input_number_country_exists (optional)
     * @param  string $no_input_number_value no_input_number_value (optional)
     * @param  string $no_input_number_value_end no_input_number_value_end (optional)
     * @param  string $no_input_number_value_exact no_input_number_value_exact (optional)
     * @param  bool $no_input_number_value_exists no_input_number_value_exists (optional)
     * @param  string $no_input_number_value_partial no_input_number_value_partial (optional)
     * @param  string $no_input_number_value_start no_input_number_value_start (optional)
     * @param  string $no_input_route_type no_input_route_type (optional)
     * @param  string $no_input_route_type_end no_input_route_type_end (optional)
     * @param  string $no_input_route_type_exact no_input_route_type_exact (optional)
     * @param  bool $no_input_route_type_exists no_input_route_type_exists (optional)
     * @param  string $no_input_route_type_partial no_input_route_type_partial (optional)
     * @param  string $no_input_route_type_start no_input_route_type_start (optional)
     * @param  string $no_input_voice_mail_user no_input_voice_mail_user (optional)
     * @param  string $no_input_voice_mail_user2 no_input_voice_mail_user2 (optional)
     * @param  bool $no_input_voice_mail_user_exists no_input_voice_mail_user_exists (optional)
     * @param  string $success_locution success_locution (optional)
     * @param  string $success_locution2 success_locution2 (optional)
     * @param  bool $success_locution_exists success_locution_exists (optional)
     * @param  int $timeout timeout (optional)
     * @param  string $timeout_between timeout_between (optional)
     * @param  string $timeout_gt timeout_gt (optional)
     * @param  string $timeout_gte timeout_gte (optional)
     * @param  string $timeout_lt timeout_lt (optional)
     * @param  string $timeout_lte timeout_lte (optional)
     * @param  string $welcome_locution welcome_locution (optional)
     * @param  string $welcome_locution2 welcome_locution2 (optional)
     * @param  bool $welcome_locution_exists welcome_locution_exists (optional)
     * @param  string $_order_allow_extensions _order_allow_extensions (optional)
     * @param  string $_order_error_number_value _order_error_number_value (optional)
     * @param  string $_order_error_route_type _order_error_route_type (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_name _order_name (optional)
     * @param  string $_order_no_input_number_value _order_no_input_number_value (optional)
     * @param  string $_order_no_input_route_type _order_no_input_route_type (optional)
     * @param  string $_order_timeout _order_timeout (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\IvrCollection[]
     */
    public function getIvrCollection($allow_extensions = null, $error_extension = null, $error_extension2 = null, $error_extension_exists = null, $error_locution = null, $error_locution2 = null, $error_locution_exists = null, $error_number_country = null, $error_number_country2 = null, $error_number_country_exists = null, $error_number_value = null, $error_number_value_end = null, $error_number_value_exact = null, $error_number_value_exists = null, $error_number_value_partial = null, $error_number_value_start = null, $error_route_type = null, $error_route_type_end = null, $error_route_type_exact = null, $error_route_type_exists = null, $error_route_type_partial = null, $error_route_type_start = null, $error_voice_mail_user = null, $error_voice_mail_user2 = null, $error_voice_mail_user_exists = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $no_input_extension = null, $no_input_extension2 = null, $no_input_extension_exists = null, $no_input_locution = null, $no_input_locution2 = null, $no_input_locution_exists = null, $no_input_number_country = null, $no_input_number_country2 = null, $no_input_number_country_exists = null, $no_input_number_value = null, $no_input_number_value_end = null, $no_input_number_value_exact = null, $no_input_number_value_exists = null, $no_input_number_value_partial = null, $no_input_number_value_start = null, $no_input_route_type = null, $no_input_route_type_end = null, $no_input_route_type_exact = null, $no_input_route_type_exists = null, $no_input_route_type_partial = null, $no_input_route_type_start = null, $no_input_voice_mail_user = null, $no_input_voice_mail_user2 = null, $no_input_voice_mail_user_exists = null, $success_locution = null, $success_locution2 = null, $success_locution_exists = null, $timeout = null, $timeout_between = null, $timeout_gt = null, $timeout_gte = null, $timeout_lt = null, $timeout_lte = null, $welcome_locution = null, $welcome_locution2 = null, $welcome_locution_exists = null, $_order_allow_extensions = null, $_order_error_number_value = null, $_order_error_route_type = null, $_order_id = null, $_order_name = null, $_order_no_input_number_value = null, $_order_no_input_route_type = null, $_order_timeout = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getIvrCollectionWithHttpInfo($allow_extensions, $error_extension, $error_extension2, $error_extension_exists, $error_locution, $error_locution2, $error_locution_exists, $error_number_country, $error_number_country2, $error_number_country_exists, $error_number_value, $error_number_value_end, $error_number_value_exact, $error_number_value_exists, $error_number_value_partial, $error_number_value_start, $error_route_type, $error_route_type_end, $error_route_type_exact, $error_route_type_exists, $error_route_type_partial, $error_route_type_start, $error_voice_mail_user, $error_voice_mail_user2, $error_voice_mail_user_exists, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $no_input_extension, $no_input_extension2, $no_input_extension_exists, $no_input_locution, $no_input_locution2, $no_input_locution_exists, $no_input_number_country, $no_input_number_country2, $no_input_number_country_exists, $no_input_number_value, $no_input_number_value_end, $no_input_number_value_exact, $no_input_number_value_exists, $no_input_number_value_partial, $no_input_number_value_start, $no_input_route_type, $no_input_route_type_end, $no_input_route_type_exact, $no_input_route_type_exists, $no_input_route_type_partial, $no_input_route_type_start, $no_input_voice_mail_user, $no_input_voice_mail_user2, $no_input_voice_mail_user_exists, $success_locution, $success_locution2, $success_locution_exists, $timeout, $timeout_between, $timeout_gt, $timeout_gte, $timeout_lt, $timeout_lte, $welcome_locution, $welcome_locution2, $welcome_locution_exists, $_order_allow_extensions, $_order_error_number_value, $_order_error_route_type, $_order_id, $_order_name, $_order_no_input_number_value, $_order_no_input_route_type, $_order_timeout, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getIvrCollectionWithHttpInfo
     *
     * Retrieves the collection of Ivr resources.
     *
     * @param  bool $allow_extensions (optional)
     * @param  string $error_extension (optional)
     * @param  string $error_extension2 (optional)
     * @param  bool $error_extension_exists (optional)
     * @param  string $error_locution (optional)
     * @param  string $error_locution2 (optional)
     * @param  bool $error_locution_exists (optional)
     * @param  string $error_number_country (optional)
     * @param  string $error_number_country2 (optional)
     * @param  bool $error_number_country_exists (optional)
     * @param  string $error_number_value (optional)
     * @param  string $error_number_value_end (optional)
     * @param  string $error_number_value_exact (optional)
     * @param  bool $error_number_value_exists (optional)
     * @param  string $error_number_value_partial (optional)
     * @param  string $error_number_value_start (optional)
     * @param  string $error_route_type (optional)
     * @param  string $error_route_type_end (optional)
     * @param  string $error_route_type_exact (optional)
     * @param  bool $error_route_type_exists (optional)
     * @param  string $error_route_type_partial (optional)
     * @param  string $error_route_type_start (optional)
     * @param  string $error_voice_mail_user (optional)
     * @param  string $error_voice_mail_user2 (optional)
     * @param  bool $error_voice_mail_user_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $no_input_extension (optional)
     * @param  string $no_input_extension2 (optional)
     * @param  bool $no_input_extension_exists (optional)
     * @param  string $no_input_locution (optional)
     * @param  string $no_input_locution2 (optional)
     * @param  bool $no_input_locution_exists (optional)
     * @param  string $no_input_number_country (optional)
     * @param  string $no_input_number_country2 (optional)
     * @param  bool $no_input_number_country_exists (optional)
     * @param  string $no_input_number_value (optional)
     * @param  string $no_input_number_value_end (optional)
     * @param  string $no_input_number_value_exact (optional)
     * @param  bool $no_input_number_value_exists (optional)
     * @param  string $no_input_number_value_partial (optional)
     * @param  string $no_input_number_value_start (optional)
     * @param  string $no_input_route_type (optional)
     * @param  string $no_input_route_type_end (optional)
     * @param  string $no_input_route_type_exact (optional)
     * @param  bool $no_input_route_type_exists (optional)
     * @param  string $no_input_route_type_partial (optional)
     * @param  string $no_input_route_type_start (optional)
     * @param  string $no_input_voice_mail_user (optional)
     * @param  string $no_input_voice_mail_user2 (optional)
     * @param  bool $no_input_voice_mail_user_exists (optional)
     * @param  string $success_locution (optional)
     * @param  string $success_locution2 (optional)
     * @param  bool $success_locution_exists (optional)
     * @param  int $timeout (optional)
     * @param  string $timeout_between (optional)
     * @param  string $timeout_gt (optional)
     * @param  string $timeout_gte (optional)
     * @param  string $timeout_lt (optional)
     * @param  string $timeout_lte (optional)
     * @param  string $welcome_locution (optional)
     * @param  string $welcome_locution2 (optional)
     * @param  bool $welcome_locution_exists (optional)
     * @param  string $_order_allow_extensions (optional)
     * @param  string $_order_error_number_value (optional)
     * @param  string $_order_error_route_type (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_no_input_number_value (optional)
     * @param  string $_order_no_input_route_type (optional)
     * @param  string $_order_timeout (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\IvrCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getIvrCollectionWithHttpInfo($allow_extensions = null, $error_extension = null, $error_extension2 = null, $error_extension_exists = null, $error_locution = null, $error_locution2 = null, $error_locution_exists = null, $error_number_country = null, $error_number_country2 = null, $error_number_country_exists = null, $error_number_value = null, $error_number_value_end = null, $error_number_value_exact = null, $error_number_value_exists = null, $error_number_value_partial = null, $error_number_value_start = null, $error_route_type = null, $error_route_type_end = null, $error_route_type_exact = null, $error_route_type_exists = null, $error_route_type_partial = null, $error_route_type_start = null, $error_voice_mail_user = null, $error_voice_mail_user2 = null, $error_voice_mail_user_exists = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $no_input_extension = null, $no_input_extension2 = null, $no_input_extension_exists = null, $no_input_locution = null, $no_input_locution2 = null, $no_input_locution_exists = null, $no_input_number_country = null, $no_input_number_country2 = null, $no_input_number_country_exists = null, $no_input_number_value = null, $no_input_number_value_end = null, $no_input_number_value_exact = null, $no_input_number_value_exists = null, $no_input_number_value_partial = null, $no_input_number_value_start = null, $no_input_route_type = null, $no_input_route_type_end = null, $no_input_route_type_exact = null, $no_input_route_type_exists = null, $no_input_route_type_partial = null, $no_input_route_type_start = null, $no_input_voice_mail_user = null, $no_input_voice_mail_user2 = null, $no_input_voice_mail_user_exists = null, $success_locution = null, $success_locution2 = null, $success_locution_exists = null, $timeout = null, $timeout_between = null, $timeout_gt = null, $timeout_gte = null, $timeout_lt = null, $timeout_lte = null, $welcome_locution = null, $welcome_locution2 = null, $welcome_locution_exists = null, $_order_allow_extensions = null, $_order_error_number_value = null, $_order_error_route_type = null, $_order_id = null, $_order_name = null, $_order_no_input_number_value = null, $_order_no_input_route_type = null, $_order_timeout = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\IvrCollection[]';
        $request = $this->getIvrCollectionRequest($allow_extensions, $error_extension, $error_extension2, $error_extension_exists, $error_locution, $error_locution2, $error_locution_exists, $error_number_country, $error_number_country2, $error_number_country_exists, $error_number_value, $error_number_value_end, $error_number_value_exact, $error_number_value_exists, $error_number_value_partial, $error_number_value_start, $error_route_type, $error_route_type_end, $error_route_type_exact, $error_route_type_exists, $error_route_type_partial, $error_route_type_start, $error_voice_mail_user, $error_voice_mail_user2, $error_voice_mail_user_exists, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $no_input_extension, $no_input_extension2, $no_input_extension_exists, $no_input_locution, $no_input_locution2, $no_input_locution_exists, $no_input_number_country, $no_input_number_country2, $no_input_number_country_exists, $no_input_number_value, $no_input_number_value_end, $no_input_number_value_exact, $no_input_number_value_exists, $no_input_number_value_partial, $no_input_number_value_start, $no_input_route_type, $no_input_route_type_end, $no_input_route_type_exact, $no_input_route_type_exists, $no_input_route_type_partial, $no_input_route_type_start, $no_input_voice_mail_user, $no_input_voice_mail_user2, $no_input_voice_mail_user_exists, $success_locution, $success_locution2, $success_locution_exists, $timeout, $timeout_between, $timeout_gt, $timeout_gte, $timeout_lt, $timeout_lte, $welcome_locution, $welcome_locution2, $welcome_locution_exists, $_order_allow_extensions, $_order_error_number_value, $_order_error_route_type, $_order_id, $_order_name, $_order_no_input_number_value, $_order_no_input_route_type, $_order_timeout, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\IvrCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIvrCollectionAsync
     *
     * Retrieves the collection of Ivr resources.
     *
     * @param  bool $allow_extensions (optional)
     * @param  string $error_extension (optional)
     * @param  string $error_extension2 (optional)
     * @param  bool $error_extension_exists (optional)
     * @param  string $error_locution (optional)
     * @param  string $error_locution2 (optional)
     * @param  bool $error_locution_exists (optional)
     * @param  string $error_number_country (optional)
     * @param  string $error_number_country2 (optional)
     * @param  bool $error_number_country_exists (optional)
     * @param  string $error_number_value (optional)
     * @param  string $error_number_value_end (optional)
     * @param  string $error_number_value_exact (optional)
     * @param  bool $error_number_value_exists (optional)
     * @param  string $error_number_value_partial (optional)
     * @param  string $error_number_value_start (optional)
     * @param  string $error_route_type (optional)
     * @param  string $error_route_type_end (optional)
     * @param  string $error_route_type_exact (optional)
     * @param  bool $error_route_type_exists (optional)
     * @param  string $error_route_type_partial (optional)
     * @param  string $error_route_type_start (optional)
     * @param  string $error_voice_mail_user (optional)
     * @param  string $error_voice_mail_user2 (optional)
     * @param  bool $error_voice_mail_user_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $no_input_extension (optional)
     * @param  string $no_input_extension2 (optional)
     * @param  bool $no_input_extension_exists (optional)
     * @param  string $no_input_locution (optional)
     * @param  string $no_input_locution2 (optional)
     * @param  bool $no_input_locution_exists (optional)
     * @param  string $no_input_number_country (optional)
     * @param  string $no_input_number_country2 (optional)
     * @param  bool $no_input_number_country_exists (optional)
     * @param  string $no_input_number_value (optional)
     * @param  string $no_input_number_value_end (optional)
     * @param  string $no_input_number_value_exact (optional)
     * @param  bool $no_input_number_value_exists (optional)
     * @param  string $no_input_number_value_partial (optional)
     * @param  string $no_input_number_value_start (optional)
     * @param  string $no_input_route_type (optional)
     * @param  string $no_input_route_type_end (optional)
     * @param  string $no_input_route_type_exact (optional)
     * @param  bool $no_input_route_type_exists (optional)
     * @param  string $no_input_route_type_partial (optional)
     * @param  string $no_input_route_type_start (optional)
     * @param  string $no_input_voice_mail_user (optional)
     * @param  string $no_input_voice_mail_user2 (optional)
     * @param  bool $no_input_voice_mail_user_exists (optional)
     * @param  string $success_locution (optional)
     * @param  string $success_locution2 (optional)
     * @param  bool $success_locution_exists (optional)
     * @param  int $timeout (optional)
     * @param  string $timeout_between (optional)
     * @param  string $timeout_gt (optional)
     * @param  string $timeout_gte (optional)
     * @param  string $timeout_lt (optional)
     * @param  string $timeout_lte (optional)
     * @param  string $welcome_locution (optional)
     * @param  string $welcome_locution2 (optional)
     * @param  bool $welcome_locution_exists (optional)
     * @param  string $_order_allow_extensions (optional)
     * @param  string $_order_error_number_value (optional)
     * @param  string $_order_error_route_type (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_no_input_number_value (optional)
     * @param  string $_order_no_input_route_type (optional)
     * @param  string $_order_timeout (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIvrCollectionAsync($allow_extensions = null, $error_extension = null, $error_extension2 = null, $error_extension_exists = null, $error_locution = null, $error_locution2 = null, $error_locution_exists = null, $error_number_country = null, $error_number_country2 = null, $error_number_country_exists = null, $error_number_value = null, $error_number_value_end = null, $error_number_value_exact = null, $error_number_value_exists = null, $error_number_value_partial = null, $error_number_value_start = null, $error_route_type = null, $error_route_type_end = null, $error_route_type_exact = null, $error_route_type_exists = null, $error_route_type_partial = null, $error_route_type_start = null, $error_voice_mail_user = null, $error_voice_mail_user2 = null, $error_voice_mail_user_exists = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $no_input_extension = null, $no_input_extension2 = null, $no_input_extension_exists = null, $no_input_locution = null, $no_input_locution2 = null, $no_input_locution_exists = null, $no_input_number_country = null, $no_input_number_country2 = null, $no_input_number_country_exists = null, $no_input_number_value = null, $no_input_number_value_end = null, $no_input_number_value_exact = null, $no_input_number_value_exists = null, $no_input_number_value_partial = null, $no_input_number_value_start = null, $no_input_route_type = null, $no_input_route_type_end = null, $no_input_route_type_exact = null, $no_input_route_type_exists = null, $no_input_route_type_partial = null, $no_input_route_type_start = null, $no_input_voice_mail_user = null, $no_input_voice_mail_user2 = null, $no_input_voice_mail_user_exists = null, $success_locution = null, $success_locution2 = null, $success_locution_exists = null, $timeout = null, $timeout_between = null, $timeout_gt = null, $timeout_gte = null, $timeout_lt = null, $timeout_lte = null, $welcome_locution = null, $welcome_locution2 = null, $welcome_locution_exists = null, $_order_allow_extensions = null, $_order_error_number_value = null, $_order_error_route_type = null, $_order_id = null, $_order_name = null, $_order_no_input_number_value = null, $_order_no_input_route_type = null, $_order_timeout = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getIvrCollectionAsyncWithHttpInfo($allow_extensions, $error_extension, $error_extension2, $error_extension_exists, $error_locution, $error_locution2, $error_locution_exists, $error_number_country, $error_number_country2, $error_number_country_exists, $error_number_value, $error_number_value_end, $error_number_value_exact, $error_number_value_exists, $error_number_value_partial, $error_number_value_start, $error_route_type, $error_route_type_end, $error_route_type_exact, $error_route_type_exists, $error_route_type_partial, $error_route_type_start, $error_voice_mail_user, $error_voice_mail_user2, $error_voice_mail_user_exists, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $no_input_extension, $no_input_extension2, $no_input_extension_exists, $no_input_locution, $no_input_locution2, $no_input_locution_exists, $no_input_number_country, $no_input_number_country2, $no_input_number_country_exists, $no_input_number_value, $no_input_number_value_end, $no_input_number_value_exact, $no_input_number_value_exists, $no_input_number_value_partial, $no_input_number_value_start, $no_input_route_type, $no_input_route_type_end, $no_input_route_type_exact, $no_input_route_type_exists, $no_input_route_type_partial, $no_input_route_type_start, $no_input_voice_mail_user, $no_input_voice_mail_user2, $no_input_voice_mail_user_exists, $success_locution, $success_locution2, $success_locution_exists, $timeout, $timeout_between, $timeout_gt, $timeout_gte, $timeout_lt, $timeout_lte, $welcome_locution, $welcome_locution2, $welcome_locution_exists, $_order_allow_extensions, $_order_error_number_value, $_order_error_route_type, $_order_id, $_order_name, $_order_no_input_number_value, $_order_no_input_route_type, $_order_timeout, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIvrCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of Ivr resources.
     *
     * @param  bool $allow_extensions (optional)
     * @param  string $error_extension (optional)
     * @param  string $error_extension2 (optional)
     * @param  bool $error_extension_exists (optional)
     * @param  string $error_locution (optional)
     * @param  string $error_locution2 (optional)
     * @param  bool $error_locution_exists (optional)
     * @param  string $error_number_country (optional)
     * @param  string $error_number_country2 (optional)
     * @param  bool $error_number_country_exists (optional)
     * @param  string $error_number_value (optional)
     * @param  string $error_number_value_end (optional)
     * @param  string $error_number_value_exact (optional)
     * @param  bool $error_number_value_exists (optional)
     * @param  string $error_number_value_partial (optional)
     * @param  string $error_number_value_start (optional)
     * @param  string $error_route_type (optional)
     * @param  string $error_route_type_end (optional)
     * @param  string $error_route_type_exact (optional)
     * @param  bool $error_route_type_exists (optional)
     * @param  string $error_route_type_partial (optional)
     * @param  string $error_route_type_start (optional)
     * @param  string $error_voice_mail_user (optional)
     * @param  string $error_voice_mail_user2 (optional)
     * @param  bool $error_voice_mail_user_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $no_input_extension (optional)
     * @param  string $no_input_extension2 (optional)
     * @param  bool $no_input_extension_exists (optional)
     * @param  string $no_input_locution (optional)
     * @param  string $no_input_locution2 (optional)
     * @param  bool $no_input_locution_exists (optional)
     * @param  string $no_input_number_country (optional)
     * @param  string $no_input_number_country2 (optional)
     * @param  bool $no_input_number_country_exists (optional)
     * @param  string $no_input_number_value (optional)
     * @param  string $no_input_number_value_end (optional)
     * @param  string $no_input_number_value_exact (optional)
     * @param  bool $no_input_number_value_exists (optional)
     * @param  string $no_input_number_value_partial (optional)
     * @param  string $no_input_number_value_start (optional)
     * @param  string $no_input_route_type (optional)
     * @param  string $no_input_route_type_end (optional)
     * @param  string $no_input_route_type_exact (optional)
     * @param  bool $no_input_route_type_exists (optional)
     * @param  string $no_input_route_type_partial (optional)
     * @param  string $no_input_route_type_start (optional)
     * @param  string $no_input_voice_mail_user (optional)
     * @param  string $no_input_voice_mail_user2 (optional)
     * @param  bool $no_input_voice_mail_user_exists (optional)
     * @param  string $success_locution (optional)
     * @param  string $success_locution2 (optional)
     * @param  bool $success_locution_exists (optional)
     * @param  int $timeout (optional)
     * @param  string $timeout_between (optional)
     * @param  string $timeout_gt (optional)
     * @param  string $timeout_gte (optional)
     * @param  string $timeout_lt (optional)
     * @param  string $timeout_lte (optional)
     * @param  string $welcome_locution (optional)
     * @param  string $welcome_locution2 (optional)
     * @param  bool $welcome_locution_exists (optional)
     * @param  string $_order_allow_extensions (optional)
     * @param  string $_order_error_number_value (optional)
     * @param  string $_order_error_route_type (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_no_input_number_value (optional)
     * @param  string $_order_no_input_route_type (optional)
     * @param  string $_order_timeout (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIvrCollectionAsyncWithHttpInfo($allow_extensions = null, $error_extension = null, $error_extension2 = null, $error_extension_exists = null, $error_locution = null, $error_locution2 = null, $error_locution_exists = null, $error_number_country = null, $error_number_country2 = null, $error_number_country_exists = null, $error_number_value = null, $error_number_value_end = null, $error_number_value_exact = null, $error_number_value_exists = null, $error_number_value_partial = null, $error_number_value_start = null, $error_route_type = null, $error_route_type_end = null, $error_route_type_exact = null, $error_route_type_exists = null, $error_route_type_partial = null, $error_route_type_start = null, $error_voice_mail_user = null, $error_voice_mail_user2 = null, $error_voice_mail_user_exists = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $no_input_extension = null, $no_input_extension2 = null, $no_input_extension_exists = null, $no_input_locution = null, $no_input_locution2 = null, $no_input_locution_exists = null, $no_input_number_country = null, $no_input_number_country2 = null, $no_input_number_country_exists = null, $no_input_number_value = null, $no_input_number_value_end = null, $no_input_number_value_exact = null, $no_input_number_value_exists = null, $no_input_number_value_partial = null, $no_input_number_value_start = null, $no_input_route_type = null, $no_input_route_type_end = null, $no_input_route_type_exact = null, $no_input_route_type_exists = null, $no_input_route_type_partial = null, $no_input_route_type_start = null, $no_input_voice_mail_user = null, $no_input_voice_mail_user2 = null, $no_input_voice_mail_user_exists = null, $success_locution = null, $success_locution2 = null, $success_locution_exists = null, $timeout = null, $timeout_between = null, $timeout_gt = null, $timeout_gte = null, $timeout_lt = null, $timeout_lte = null, $welcome_locution = null, $welcome_locution2 = null, $welcome_locution_exists = null, $_order_allow_extensions = null, $_order_error_number_value = null, $_order_error_route_type = null, $_order_id = null, $_order_name = null, $_order_no_input_number_value = null, $_order_no_input_route_type = null, $_order_timeout = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\IvrCollection[]';
        $request = $this->getIvrCollectionRequest($allow_extensions, $error_extension, $error_extension2, $error_extension_exists, $error_locution, $error_locution2, $error_locution_exists, $error_number_country, $error_number_country2, $error_number_country_exists, $error_number_value, $error_number_value_end, $error_number_value_exact, $error_number_value_exists, $error_number_value_partial, $error_number_value_start, $error_route_type, $error_route_type_end, $error_route_type_exact, $error_route_type_exists, $error_route_type_partial, $error_route_type_start, $error_voice_mail_user, $error_voice_mail_user2, $error_voice_mail_user_exists, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $no_input_extension, $no_input_extension2, $no_input_extension_exists, $no_input_locution, $no_input_locution2, $no_input_locution_exists, $no_input_number_country, $no_input_number_country2, $no_input_number_country_exists, $no_input_number_value, $no_input_number_value_end, $no_input_number_value_exact, $no_input_number_value_exists, $no_input_number_value_partial, $no_input_number_value_start, $no_input_route_type, $no_input_route_type_end, $no_input_route_type_exact, $no_input_route_type_exists, $no_input_route_type_partial, $no_input_route_type_start, $no_input_voice_mail_user, $no_input_voice_mail_user2, $no_input_voice_mail_user_exists, $success_locution, $success_locution2, $success_locution_exists, $timeout, $timeout_between, $timeout_gt, $timeout_gte, $timeout_lt, $timeout_lte, $welcome_locution, $welcome_locution2, $welcome_locution_exists, $_order_allow_extensions, $_order_error_number_value, $_order_error_route_type, $_order_id, $_order_name, $_order_no_input_number_value, $_order_no_input_route_type, $_order_timeout, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIvrCollection'
     *
     * @param  bool $allow_extensions (optional)
     * @param  string $error_extension (optional)
     * @param  string $error_extension2 (optional)
     * @param  bool $error_extension_exists (optional)
     * @param  string $error_locution (optional)
     * @param  string $error_locution2 (optional)
     * @param  bool $error_locution_exists (optional)
     * @param  string $error_number_country (optional)
     * @param  string $error_number_country2 (optional)
     * @param  bool $error_number_country_exists (optional)
     * @param  string $error_number_value (optional)
     * @param  string $error_number_value_end (optional)
     * @param  string $error_number_value_exact (optional)
     * @param  bool $error_number_value_exists (optional)
     * @param  string $error_number_value_partial (optional)
     * @param  string $error_number_value_start (optional)
     * @param  string $error_route_type (optional)
     * @param  string $error_route_type_end (optional)
     * @param  string $error_route_type_exact (optional)
     * @param  bool $error_route_type_exists (optional)
     * @param  string $error_route_type_partial (optional)
     * @param  string $error_route_type_start (optional)
     * @param  string $error_voice_mail_user (optional)
     * @param  string $error_voice_mail_user2 (optional)
     * @param  bool $error_voice_mail_user_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $no_input_extension (optional)
     * @param  string $no_input_extension2 (optional)
     * @param  bool $no_input_extension_exists (optional)
     * @param  string $no_input_locution (optional)
     * @param  string $no_input_locution2 (optional)
     * @param  bool $no_input_locution_exists (optional)
     * @param  string $no_input_number_country (optional)
     * @param  string $no_input_number_country2 (optional)
     * @param  bool $no_input_number_country_exists (optional)
     * @param  string $no_input_number_value (optional)
     * @param  string $no_input_number_value_end (optional)
     * @param  string $no_input_number_value_exact (optional)
     * @param  bool $no_input_number_value_exists (optional)
     * @param  string $no_input_number_value_partial (optional)
     * @param  string $no_input_number_value_start (optional)
     * @param  string $no_input_route_type (optional)
     * @param  string $no_input_route_type_end (optional)
     * @param  string $no_input_route_type_exact (optional)
     * @param  bool $no_input_route_type_exists (optional)
     * @param  string $no_input_route_type_partial (optional)
     * @param  string $no_input_route_type_start (optional)
     * @param  string $no_input_voice_mail_user (optional)
     * @param  string $no_input_voice_mail_user2 (optional)
     * @param  bool $no_input_voice_mail_user_exists (optional)
     * @param  string $success_locution (optional)
     * @param  string $success_locution2 (optional)
     * @param  bool $success_locution_exists (optional)
     * @param  int $timeout (optional)
     * @param  string $timeout_between (optional)
     * @param  string $timeout_gt (optional)
     * @param  string $timeout_gte (optional)
     * @param  string $timeout_lt (optional)
     * @param  string $timeout_lte (optional)
     * @param  string $welcome_locution (optional)
     * @param  string $welcome_locution2 (optional)
     * @param  bool $welcome_locution_exists (optional)
     * @param  string $_order_allow_extensions (optional)
     * @param  string $_order_error_number_value (optional)
     * @param  string $_order_error_route_type (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_no_input_number_value (optional)
     * @param  string $_order_no_input_route_type (optional)
     * @param  string $_order_timeout (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getIvrCollectionRequest($allow_extensions = null, $error_extension = null, $error_extension2 = null, $error_extension_exists = null, $error_locution = null, $error_locution2 = null, $error_locution_exists = null, $error_number_country = null, $error_number_country2 = null, $error_number_country_exists = null, $error_number_value = null, $error_number_value_end = null, $error_number_value_exact = null, $error_number_value_exists = null, $error_number_value_partial = null, $error_number_value_start = null, $error_route_type = null, $error_route_type_end = null, $error_route_type_exact = null, $error_route_type_exists = null, $error_route_type_partial = null, $error_route_type_start = null, $error_voice_mail_user = null, $error_voice_mail_user2 = null, $error_voice_mail_user_exists = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $no_input_extension = null, $no_input_extension2 = null, $no_input_extension_exists = null, $no_input_locution = null, $no_input_locution2 = null, $no_input_locution_exists = null, $no_input_number_country = null, $no_input_number_country2 = null, $no_input_number_country_exists = null, $no_input_number_value = null, $no_input_number_value_end = null, $no_input_number_value_exact = null, $no_input_number_value_exists = null, $no_input_number_value_partial = null, $no_input_number_value_start = null, $no_input_route_type = null, $no_input_route_type_end = null, $no_input_route_type_exact = null, $no_input_route_type_exists = null, $no_input_route_type_partial = null, $no_input_route_type_start = null, $no_input_voice_mail_user = null, $no_input_voice_mail_user2 = null, $no_input_voice_mail_user_exists = null, $success_locution = null, $success_locution2 = null, $success_locution_exists = null, $timeout = null, $timeout_between = null, $timeout_gt = null, $timeout_gte = null, $timeout_lt = null, $timeout_lte = null, $welcome_locution = null, $welcome_locution2 = null, $welcome_locution_exists = null, $_order_allow_extensions = null, $_order_error_number_value = null, $_order_error_route_type = null, $_order_id = null, $_order_name = null, $_order_no_input_number_value = null, $_order_no_input_route_type = null, $_order_timeout = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/ivrs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($allow_extensions !== null) {
            $queryParams['allowExtensions'] = ObjectSerializer::toQueryValue($allow_extensions);
        }
        // query params
        if ($error_extension !== null) {
            $queryParams['errorExtension'] = ObjectSerializer::toQueryValue($error_extension);
        }
        // query params
        if ($error_extension2 !== null) {
            $queryParams['errorExtension[]'] = ObjectSerializer::toQueryValue($error_extension2);
        }
        // query params
        if ($error_extension_exists !== null) {
            $queryParams['errorExtension[exists]'] = ObjectSerializer::toQueryValue($error_extension_exists);
        }
        // query params
        if ($error_locution !== null) {
            $queryParams['errorLocution'] = ObjectSerializer::toQueryValue($error_locution);
        }
        // query params
        if ($error_locution2 !== null) {
            $queryParams['errorLocution[]'] = ObjectSerializer::toQueryValue($error_locution2);
        }
        // query params
        if ($error_locution_exists !== null) {
            $queryParams['errorLocution[exists]'] = ObjectSerializer::toQueryValue($error_locution_exists);
        }
        // query params
        if ($error_number_country !== null) {
            $queryParams['errorNumberCountry'] = ObjectSerializer::toQueryValue($error_number_country);
        }
        // query params
        if ($error_number_country2 !== null) {
            $queryParams['errorNumberCountry[]'] = ObjectSerializer::toQueryValue($error_number_country2);
        }
        // query params
        if ($error_number_country_exists !== null) {
            $queryParams['errorNumberCountry[exists]'] = ObjectSerializer::toQueryValue($error_number_country_exists);
        }
        // query params
        if ($error_number_value !== null) {
            $queryParams['errorNumberValue'] = ObjectSerializer::toQueryValue($error_number_value);
        }
        // query params
        if ($error_number_value_end !== null) {
            $queryParams['errorNumberValue[end]'] = ObjectSerializer::toQueryValue($error_number_value_end);
        }
        // query params
        if ($error_number_value_exact !== null) {
            $queryParams['errorNumberValue[exact]'] = ObjectSerializer::toQueryValue($error_number_value_exact);
        }
        // query params
        if ($error_number_value_exists !== null) {
            $queryParams['errorNumberValue[exists]'] = ObjectSerializer::toQueryValue($error_number_value_exists);
        }
        // query params
        if ($error_number_value_partial !== null) {
            $queryParams['errorNumberValue[partial]'] = ObjectSerializer::toQueryValue($error_number_value_partial);
        }
        // query params
        if ($error_number_value_start !== null) {
            $queryParams['errorNumberValue[start]'] = ObjectSerializer::toQueryValue($error_number_value_start);
        }
        // query params
        if ($error_route_type !== null) {
            $queryParams['errorRouteType'] = ObjectSerializer::toQueryValue($error_route_type);
        }
        // query params
        if ($error_route_type_end !== null) {
            $queryParams['errorRouteType[end]'] = ObjectSerializer::toQueryValue($error_route_type_end);
        }
        // query params
        if ($error_route_type_exact !== null) {
            $queryParams['errorRouteType[exact]'] = ObjectSerializer::toQueryValue($error_route_type_exact);
        }
        // query params
        if ($error_route_type_exists !== null) {
            $queryParams['errorRouteType[exists]'] = ObjectSerializer::toQueryValue($error_route_type_exists);
        }
        // query params
        if ($error_route_type_partial !== null) {
            $queryParams['errorRouteType[partial]'] = ObjectSerializer::toQueryValue($error_route_type_partial);
        }
        // query params
        if ($error_route_type_start !== null) {
            $queryParams['errorRouteType[start]'] = ObjectSerializer::toQueryValue($error_route_type_start);
        }
        // query params
        if ($error_voice_mail_user !== null) {
            $queryParams['errorVoiceMailUser'] = ObjectSerializer::toQueryValue($error_voice_mail_user);
        }
        // query params
        if ($error_voice_mail_user2 !== null) {
            $queryParams['errorVoiceMailUser[]'] = ObjectSerializer::toQueryValue($error_voice_mail_user2);
        }
        // query params
        if ($error_voice_mail_user_exists !== null) {
            $queryParams['errorVoiceMailUser[exists]'] = ObjectSerializer::toQueryValue($error_voice_mail_user_exists);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_end !== null) {
            $queryParams['name[end]'] = ObjectSerializer::toQueryValue($name_end);
        }
        // query params
        if ($name_exact !== null) {
            $queryParams['name[exact]'] = ObjectSerializer::toQueryValue($name_exact);
        }
        // query params
        if ($name_partial !== null) {
            $queryParams['name[partial]'] = ObjectSerializer::toQueryValue($name_partial);
        }
        // query params
        if ($name_start !== null) {
            $queryParams['name[start]'] = ObjectSerializer::toQueryValue($name_start);
        }
        // query params
        if ($no_input_extension !== null) {
            $queryParams['noInputExtension'] = ObjectSerializer::toQueryValue($no_input_extension);
        }
        // query params
        if ($no_input_extension2 !== null) {
            $queryParams['noInputExtension[]'] = ObjectSerializer::toQueryValue($no_input_extension2);
        }
        // query params
        if ($no_input_extension_exists !== null) {
            $queryParams['noInputExtension[exists]'] = ObjectSerializer::toQueryValue($no_input_extension_exists);
        }
        // query params
        if ($no_input_locution !== null) {
            $queryParams['noInputLocution'] = ObjectSerializer::toQueryValue($no_input_locution);
        }
        // query params
        if ($no_input_locution2 !== null) {
            $queryParams['noInputLocution[]'] = ObjectSerializer::toQueryValue($no_input_locution2);
        }
        // query params
        if ($no_input_locution_exists !== null) {
            $queryParams['noInputLocution[exists]'] = ObjectSerializer::toQueryValue($no_input_locution_exists);
        }
        // query params
        if ($no_input_number_country !== null) {
            $queryParams['noInputNumberCountry'] = ObjectSerializer::toQueryValue($no_input_number_country);
        }
        // query params
        if ($no_input_number_country2 !== null) {
            $queryParams['noInputNumberCountry[]'] = ObjectSerializer::toQueryValue($no_input_number_country2);
        }
        // query params
        if ($no_input_number_country_exists !== null) {
            $queryParams['noInputNumberCountry[exists]'] = ObjectSerializer::toQueryValue($no_input_number_country_exists);
        }
        // query params
        if ($no_input_number_value !== null) {
            $queryParams['noInputNumberValue'] = ObjectSerializer::toQueryValue($no_input_number_value);
        }
        // query params
        if ($no_input_number_value_end !== null) {
            $queryParams['noInputNumberValue[end]'] = ObjectSerializer::toQueryValue($no_input_number_value_end);
        }
        // query params
        if ($no_input_number_value_exact !== null) {
            $queryParams['noInputNumberValue[exact]'] = ObjectSerializer::toQueryValue($no_input_number_value_exact);
        }
        // query params
        if ($no_input_number_value_exists !== null) {
            $queryParams['noInputNumberValue[exists]'] = ObjectSerializer::toQueryValue($no_input_number_value_exists);
        }
        // query params
        if ($no_input_number_value_partial !== null) {
            $queryParams['noInputNumberValue[partial]'] = ObjectSerializer::toQueryValue($no_input_number_value_partial);
        }
        // query params
        if ($no_input_number_value_start !== null) {
            $queryParams['noInputNumberValue[start]'] = ObjectSerializer::toQueryValue($no_input_number_value_start);
        }
        // query params
        if ($no_input_route_type !== null) {
            $queryParams['noInputRouteType'] = ObjectSerializer::toQueryValue($no_input_route_type);
        }
        // query params
        if ($no_input_route_type_end !== null) {
            $queryParams['noInputRouteType[end]'] = ObjectSerializer::toQueryValue($no_input_route_type_end);
        }
        // query params
        if ($no_input_route_type_exact !== null) {
            $queryParams['noInputRouteType[exact]'] = ObjectSerializer::toQueryValue($no_input_route_type_exact);
        }
        // query params
        if ($no_input_route_type_exists !== null) {
            $queryParams['noInputRouteType[exists]'] = ObjectSerializer::toQueryValue($no_input_route_type_exists);
        }
        // query params
        if ($no_input_route_type_partial !== null) {
            $queryParams['noInputRouteType[partial]'] = ObjectSerializer::toQueryValue($no_input_route_type_partial);
        }
        // query params
        if ($no_input_route_type_start !== null) {
            $queryParams['noInputRouteType[start]'] = ObjectSerializer::toQueryValue($no_input_route_type_start);
        }
        // query params
        if ($no_input_voice_mail_user !== null) {
            $queryParams['noInputVoiceMailUser'] = ObjectSerializer::toQueryValue($no_input_voice_mail_user);
        }
        // query params
        if ($no_input_voice_mail_user2 !== null) {
            $queryParams['noInputVoiceMailUser[]'] = ObjectSerializer::toQueryValue($no_input_voice_mail_user2);
        }
        // query params
        if ($no_input_voice_mail_user_exists !== null) {
            $queryParams['noInputVoiceMailUser[exists]'] = ObjectSerializer::toQueryValue($no_input_voice_mail_user_exists);
        }
        // query params
        if ($success_locution !== null) {
            $queryParams['successLocution'] = ObjectSerializer::toQueryValue($success_locution);
        }
        // query params
        if ($success_locution2 !== null) {
            $queryParams['successLocution[]'] = ObjectSerializer::toQueryValue($success_locution2);
        }
        // query params
        if ($success_locution_exists !== null) {
            $queryParams['successLocution[exists]'] = ObjectSerializer::toQueryValue($success_locution_exists);
        }
        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = ObjectSerializer::toQueryValue($timeout);
        }
        // query params
        if ($timeout_between !== null) {
            $queryParams['timeout[between]'] = ObjectSerializer::toQueryValue($timeout_between);
        }
        // query params
        if ($timeout_gt !== null) {
            $queryParams['timeout[gt]'] = ObjectSerializer::toQueryValue($timeout_gt);
        }
        // query params
        if ($timeout_gte !== null) {
            $queryParams['timeout[gte]'] = ObjectSerializer::toQueryValue($timeout_gte);
        }
        // query params
        if ($timeout_lt !== null) {
            $queryParams['timeout[lt]'] = ObjectSerializer::toQueryValue($timeout_lt);
        }
        // query params
        if ($timeout_lte !== null) {
            $queryParams['timeout[lte]'] = ObjectSerializer::toQueryValue($timeout_lte);
        }
        // query params
        if ($welcome_locution !== null) {
            $queryParams['welcomeLocution'] = ObjectSerializer::toQueryValue($welcome_locution);
        }
        // query params
        if ($welcome_locution2 !== null) {
            $queryParams['welcomeLocution[]'] = ObjectSerializer::toQueryValue($welcome_locution2);
        }
        // query params
        if ($welcome_locution_exists !== null) {
            $queryParams['welcomeLocution[exists]'] = ObjectSerializer::toQueryValue($welcome_locution_exists);
        }
        // query params
        if ($_order_allow_extensions !== null) {
            $queryParams['_order[allowExtensions]'] = ObjectSerializer::toQueryValue($_order_allow_extensions);
        }
        // query params
        if ($_order_error_number_value !== null) {
            $queryParams['_order[errorNumberValue]'] = ObjectSerializer::toQueryValue($_order_error_number_value);
        }
        // query params
        if ($_order_error_route_type !== null) {
            $queryParams['_order[errorRouteType]'] = ObjectSerializer::toQueryValue($_order_error_route_type);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_name !== null) {
            $queryParams['_order[name]'] = ObjectSerializer::toQueryValue($_order_name);
        }
        // query params
        if ($_order_no_input_number_value !== null) {
            $queryParams['_order[noInputNumberValue]'] = ObjectSerializer::toQueryValue($_order_no_input_number_value);
        }
        // query params
        if ($_order_no_input_route_type !== null) {
            $queryParams['_order[noInputRouteType]'] = ObjectSerializer::toQueryValue($_order_no_input_route_type);
        }
        // query params
        if ($_order_timeout !== null) {
            $queryParams['_order[timeout]'] = ObjectSerializer::toQueryValue($_order_timeout);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIvrEntryCollection
     *
     * Retrieves the collection of IvrEntry resources.
     *
     * @param  string $conditional_route conditional_route (optional)
     * @param  string $conditional_route2 conditional_route2 (optional)
     * @param  bool $conditional_route_exists conditional_route_exists (optional)
     * @param  string $entry entry (optional)
     * @param  string $entry_end entry_end (optional)
     * @param  string $entry_exact entry_exact (optional)
     * @param  string $entry_partial entry_partial (optional)
     * @param  string $entry_start entry_start (optional)
     * @param  string $extension extension (optional)
     * @param  string $extension2 extension2 (optional)
     * @param  bool $extension_exists extension_exists (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $ivr ivr (optional)
     * @param  string $ivr2 ivr2 (optional)
     * @param  string $number_country number_country (optional)
     * @param  string $number_country2 number_country2 (optional)
     * @param  bool $number_country_exists number_country_exists (optional)
     * @param  string $number_value number_value (optional)
     * @param  string $number_value_end number_value_end (optional)
     * @param  string $number_value_exact number_value_exact (optional)
     * @param  bool $number_value_exists number_value_exists (optional)
     * @param  string $number_value_partial number_value_partial (optional)
     * @param  string $number_value_start number_value_start (optional)
     * @param  string $route_type route_type (optional)
     * @param  string $route_type_end route_type_end (optional)
     * @param  string $route_type_exact route_type_exact (optional)
     * @param  string $route_type_partial route_type_partial (optional)
     * @param  string $route_type_start route_type_start (optional)
     * @param  string $voice_mail_user voice_mail_user (optional)
     * @param  string $voice_mail_user2 voice_mail_user2 (optional)
     * @param  bool $voice_mail_user_exists voice_mail_user_exists (optional)
     * @param  string $welcome_locution welcome_locution (optional)
     * @param  string $welcome_locution2 welcome_locution2 (optional)
     * @param  bool $welcome_locution_exists welcome_locution_exists (optional)
     * @param  string $_order_entry _order_entry (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_number_value _order_number_value (optional)
     * @param  string $_order_route_type _order_route_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\IvrEntryCollection[]
     */
    public function getIvrEntryCollection($conditional_route = null, $conditional_route2 = null, $conditional_route_exists = null, $entry = null, $entry_end = null, $entry_exact = null, $entry_partial = null, $entry_start = null, $extension = null, $extension2 = null, $extension_exists = null, $id_exact = null, $ivr = null, $ivr2 = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $number_value = null, $number_value_end = null, $number_value_exact = null, $number_value_exists = null, $number_value_partial = null, $number_value_start = null, $route_type = null, $route_type_end = null, $route_type_exact = null, $route_type_partial = null, $route_type_start = null, $voice_mail_user = null, $voice_mail_user2 = null, $voice_mail_user_exists = null, $welcome_locution = null, $welcome_locution2 = null, $welcome_locution_exists = null, $_order_entry = null, $_order_id = null, $_order_number_value = null, $_order_route_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getIvrEntryCollectionWithHttpInfo($conditional_route, $conditional_route2, $conditional_route_exists, $entry, $entry_end, $entry_exact, $entry_partial, $entry_start, $extension, $extension2, $extension_exists, $id_exact, $ivr, $ivr2, $number_country, $number_country2, $number_country_exists, $number_value, $number_value_end, $number_value_exact, $number_value_exists, $number_value_partial, $number_value_start, $route_type, $route_type_end, $route_type_exact, $route_type_partial, $route_type_start, $voice_mail_user, $voice_mail_user2, $voice_mail_user_exists, $welcome_locution, $welcome_locution2, $welcome_locution_exists, $_order_entry, $_order_id, $_order_number_value, $_order_route_type, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getIvrEntryCollectionWithHttpInfo
     *
     * Retrieves the collection of IvrEntry resources.
     *
     * @param  string $conditional_route (optional)
     * @param  string $conditional_route2 (optional)
     * @param  bool $conditional_route_exists (optional)
     * @param  string $entry (optional)
     * @param  string $entry_end (optional)
     * @param  string $entry_exact (optional)
     * @param  string $entry_partial (optional)
     * @param  string $entry_start (optional)
     * @param  string $extension (optional)
     * @param  string $extension2 (optional)
     * @param  bool $extension_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $ivr (optional)
     * @param  string $ivr2 (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $number_value (optional)
     * @param  string $number_value_end (optional)
     * @param  string $number_value_exact (optional)
     * @param  bool $number_value_exists (optional)
     * @param  string $number_value_partial (optional)
     * @param  string $number_value_start (optional)
     * @param  string $route_type (optional)
     * @param  string $route_type_end (optional)
     * @param  string $route_type_exact (optional)
     * @param  string $route_type_partial (optional)
     * @param  string $route_type_start (optional)
     * @param  string $voice_mail_user (optional)
     * @param  string $voice_mail_user2 (optional)
     * @param  bool $voice_mail_user_exists (optional)
     * @param  string $welcome_locution (optional)
     * @param  string $welcome_locution2 (optional)
     * @param  bool $welcome_locution_exists (optional)
     * @param  string $_order_entry (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_number_value (optional)
     * @param  string $_order_route_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\IvrEntryCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getIvrEntryCollectionWithHttpInfo($conditional_route = null, $conditional_route2 = null, $conditional_route_exists = null, $entry = null, $entry_end = null, $entry_exact = null, $entry_partial = null, $entry_start = null, $extension = null, $extension2 = null, $extension_exists = null, $id_exact = null, $ivr = null, $ivr2 = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $number_value = null, $number_value_end = null, $number_value_exact = null, $number_value_exists = null, $number_value_partial = null, $number_value_start = null, $route_type = null, $route_type_end = null, $route_type_exact = null, $route_type_partial = null, $route_type_start = null, $voice_mail_user = null, $voice_mail_user2 = null, $voice_mail_user_exists = null, $welcome_locution = null, $welcome_locution2 = null, $welcome_locution_exists = null, $_order_entry = null, $_order_id = null, $_order_number_value = null, $_order_route_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\IvrEntryCollection[]';
        $request = $this->getIvrEntryCollectionRequest($conditional_route, $conditional_route2, $conditional_route_exists, $entry, $entry_end, $entry_exact, $entry_partial, $entry_start, $extension, $extension2, $extension_exists, $id_exact, $ivr, $ivr2, $number_country, $number_country2, $number_country_exists, $number_value, $number_value_end, $number_value_exact, $number_value_exists, $number_value_partial, $number_value_start, $route_type, $route_type_end, $route_type_exact, $route_type_partial, $route_type_start, $voice_mail_user, $voice_mail_user2, $voice_mail_user_exists, $welcome_locution, $welcome_locution2, $welcome_locution_exists, $_order_entry, $_order_id, $_order_number_value, $_order_route_type, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\IvrEntryCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIvrEntryCollectionAsync
     *
     * Retrieves the collection of IvrEntry resources.
     *
     * @param  string $conditional_route (optional)
     * @param  string $conditional_route2 (optional)
     * @param  bool $conditional_route_exists (optional)
     * @param  string $entry (optional)
     * @param  string $entry_end (optional)
     * @param  string $entry_exact (optional)
     * @param  string $entry_partial (optional)
     * @param  string $entry_start (optional)
     * @param  string $extension (optional)
     * @param  string $extension2 (optional)
     * @param  bool $extension_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $ivr (optional)
     * @param  string $ivr2 (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $number_value (optional)
     * @param  string $number_value_end (optional)
     * @param  string $number_value_exact (optional)
     * @param  bool $number_value_exists (optional)
     * @param  string $number_value_partial (optional)
     * @param  string $number_value_start (optional)
     * @param  string $route_type (optional)
     * @param  string $route_type_end (optional)
     * @param  string $route_type_exact (optional)
     * @param  string $route_type_partial (optional)
     * @param  string $route_type_start (optional)
     * @param  string $voice_mail_user (optional)
     * @param  string $voice_mail_user2 (optional)
     * @param  bool $voice_mail_user_exists (optional)
     * @param  string $welcome_locution (optional)
     * @param  string $welcome_locution2 (optional)
     * @param  bool $welcome_locution_exists (optional)
     * @param  string $_order_entry (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_number_value (optional)
     * @param  string $_order_route_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIvrEntryCollectionAsync($conditional_route = null, $conditional_route2 = null, $conditional_route_exists = null, $entry = null, $entry_end = null, $entry_exact = null, $entry_partial = null, $entry_start = null, $extension = null, $extension2 = null, $extension_exists = null, $id_exact = null, $ivr = null, $ivr2 = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $number_value = null, $number_value_end = null, $number_value_exact = null, $number_value_exists = null, $number_value_partial = null, $number_value_start = null, $route_type = null, $route_type_end = null, $route_type_exact = null, $route_type_partial = null, $route_type_start = null, $voice_mail_user = null, $voice_mail_user2 = null, $voice_mail_user_exists = null, $welcome_locution = null, $welcome_locution2 = null, $welcome_locution_exists = null, $_order_entry = null, $_order_id = null, $_order_number_value = null, $_order_route_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getIvrEntryCollectionAsyncWithHttpInfo($conditional_route, $conditional_route2, $conditional_route_exists, $entry, $entry_end, $entry_exact, $entry_partial, $entry_start, $extension, $extension2, $extension_exists, $id_exact, $ivr, $ivr2, $number_country, $number_country2, $number_country_exists, $number_value, $number_value_end, $number_value_exact, $number_value_exists, $number_value_partial, $number_value_start, $route_type, $route_type_end, $route_type_exact, $route_type_partial, $route_type_start, $voice_mail_user, $voice_mail_user2, $voice_mail_user_exists, $welcome_locution, $welcome_locution2, $welcome_locution_exists, $_order_entry, $_order_id, $_order_number_value, $_order_route_type, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIvrEntryCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of IvrEntry resources.
     *
     * @param  string $conditional_route (optional)
     * @param  string $conditional_route2 (optional)
     * @param  bool $conditional_route_exists (optional)
     * @param  string $entry (optional)
     * @param  string $entry_end (optional)
     * @param  string $entry_exact (optional)
     * @param  string $entry_partial (optional)
     * @param  string $entry_start (optional)
     * @param  string $extension (optional)
     * @param  string $extension2 (optional)
     * @param  bool $extension_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $ivr (optional)
     * @param  string $ivr2 (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $number_value (optional)
     * @param  string $number_value_end (optional)
     * @param  string $number_value_exact (optional)
     * @param  bool $number_value_exists (optional)
     * @param  string $number_value_partial (optional)
     * @param  string $number_value_start (optional)
     * @param  string $route_type (optional)
     * @param  string $route_type_end (optional)
     * @param  string $route_type_exact (optional)
     * @param  string $route_type_partial (optional)
     * @param  string $route_type_start (optional)
     * @param  string $voice_mail_user (optional)
     * @param  string $voice_mail_user2 (optional)
     * @param  bool $voice_mail_user_exists (optional)
     * @param  string $welcome_locution (optional)
     * @param  string $welcome_locution2 (optional)
     * @param  bool $welcome_locution_exists (optional)
     * @param  string $_order_entry (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_number_value (optional)
     * @param  string $_order_route_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIvrEntryCollectionAsyncWithHttpInfo($conditional_route = null, $conditional_route2 = null, $conditional_route_exists = null, $entry = null, $entry_end = null, $entry_exact = null, $entry_partial = null, $entry_start = null, $extension = null, $extension2 = null, $extension_exists = null, $id_exact = null, $ivr = null, $ivr2 = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $number_value = null, $number_value_end = null, $number_value_exact = null, $number_value_exists = null, $number_value_partial = null, $number_value_start = null, $route_type = null, $route_type_end = null, $route_type_exact = null, $route_type_partial = null, $route_type_start = null, $voice_mail_user = null, $voice_mail_user2 = null, $voice_mail_user_exists = null, $welcome_locution = null, $welcome_locution2 = null, $welcome_locution_exists = null, $_order_entry = null, $_order_id = null, $_order_number_value = null, $_order_route_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\IvrEntryCollection[]';
        $request = $this->getIvrEntryCollectionRequest($conditional_route, $conditional_route2, $conditional_route_exists, $entry, $entry_end, $entry_exact, $entry_partial, $entry_start, $extension, $extension2, $extension_exists, $id_exact, $ivr, $ivr2, $number_country, $number_country2, $number_country_exists, $number_value, $number_value_end, $number_value_exact, $number_value_exists, $number_value_partial, $number_value_start, $route_type, $route_type_end, $route_type_exact, $route_type_partial, $route_type_start, $voice_mail_user, $voice_mail_user2, $voice_mail_user_exists, $welcome_locution, $welcome_locution2, $welcome_locution_exists, $_order_entry, $_order_id, $_order_number_value, $_order_route_type, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIvrEntryCollection'
     *
     * @param  string $conditional_route (optional)
     * @param  string $conditional_route2 (optional)
     * @param  bool $conditional_route_exists (optional)
     * @param  string $entry (optional)
     * @param  string $entry_end (optional)
     * @param  string $entry_exact (optional)
     * @param  string $entry_partial (optional)
     * @param  string $entry_start (optional)
     * @param  string $extension (optional)
     * @param  string $extension2 (optional)
     * @param  bool $extension_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $ivr (optional)
     * @param  string $ivr2 (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $number_value (optional)
     * @param  string $number_value_end (optional)
     * @param  string $number_value_exact (optional)
     * @param  bool $number_value_exists (optional)
     * @param  string $number_value_partial (optional)
     * @param  string $number_value_start (optional)
     * @param  string $route_type (optional)
     * @param  string $route_type_end (optional)
     * @param  string $route_type_exact (optional)
     * @param  string $route_type_partial (optional)
     * @param  string $route_type_start (optional)
     * @param  string $voice_mail_user (optional)
     * @param  string $voice_mail_user2 (optional)
     * @param  bool $voice_mail_user_exists (optional)
     * @param  string $welcome_locution (optional)
     * @param  string $welcome_locution2 (optional)
     * @param  bool $welcome_locution_exists (optional)
     * @param  string $_order_entry (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_number_value (optional)
     * @param  string $_order_route_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getIvrEntryCollectionRequest($conditional_route = null, $conditional_route2 = null, $conditional_route_exists = null, $entry = null, $entry_end = null, $entry_exact = null, $entry_partial = null, $entry_start = null, $extension = null, $extension2 = null, $extension_exists = null, $id_exact = null, $ivr = null, $ivr2 = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $number_value = null, $number_value_end = null, $number_value_exact = null, $number_value_exists = null, $number_value_partial = null, $number_value_start = null, $route_type = null, $route_type_end = null, $route_type_exact = null, $route_type_partial = null, $route_type_start = null, $voice_mail_user = null, $voice_mail_user2 = null, $voice_mail_user_exists = null, $welcome_locution = null, $welcome_locution2 = null, $welcome_locution_exists = null, $_order_entry = null, $_order_id = null, $_order_number_value = null, $_order_route_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/ivr_entries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($conditional_route !== null) {
            $queryParams['conditionalRoute'] = ObjectSerializer::toQueryValue($conditional_route);
        }
        // query params
        if ($conditional_route2 !== null) {
            $queryParams['conditionalRoute[]'] = ObjectSerializer::toQueryValue($conditional_route2);
        }
        // query params
        if ($conditional_route_exists !== null) {
            $queryParams['conditionalRoute[exists]'] = ObjectSerializer::toQueryValue($conditional_route_exists);
        }
        // query params
        if ($entry !== null) {
            $queryParams['entry'] = ObjectSerializer::toQueryValue($entry);
        }
        // query params
        if ($entry_end !== null) {
            $queryParams['entry[end]'] = ObjectSerializer::toQueryValue($entry_end);
        }
        // query params
        if ($entry_exact !== null) {
            $queryParams['entry[exact]'] = ObjectSerializer::toQueryValue($entry_exact);
        }
        // query params
        if ($entry_partial !== null) {
            $queryParams['entry[partial]'] = ObjectSerializer::toQueryValue($entry_partial);
        }
        // query params
        if ($entry_start !== null) {
            $queryParams['entry[start]'] = ObjectSerializer::toQueryValue($entry_start);
        }
        // query params
        if ($extension !== null) {
            $queryParams['extension'] = ObjectSerializer::toQueryValue($extension);
        }
        // query params
        if ($extension2 !== null) {
            $queryParams['extension[]'] = ObjectSerializer::toQueryValue($extension2);
        }
        // query params
        if ($extension_exists !== null) {
            $queryParams['extension[exists]'] = ObjectSerializer::toQueryValue($extension_exists);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($ivr !== null) {
            $queryParams['ivr'] = ObjectSerializer::toQueryValue($ivr);
        }
        // query params
        if ($ivr2 !== null) {
            $queryParams['ivr[]'] = ObjectSerializer::toQueryValue($ivr2);
        }
        // query params
        if ($number_country !== null) {
            $queryParams['numberCountry'] = ObjectSerializer::toQueryValue($number_country);
        }
        // query params
        if ($number_country2 !== null) {
            $queryParams['numberCountry[]'] = ObjectSerializer::toQueryValue($number_country2);
        }
        // query params
        if ($number_country_exists !== null) {
            $queryParams['numberCountry[exists]'] = ObjectSerializer::toQueryValue($number_country_exists);
        }
        // query params
        if ($number_value !== null) {
            $queryParams['numberValue'] = ObjectSerializer::toQueryValue($number_value);
        }
        // query params
        if ($number_value_end !== null) {
            $queryParams['numberValue[end]'] = ObjectSerializer::toQueryValue($number_value_end);
        }
        // query params
        if ($number_value_exact !== null) {
            $queryParams['numberValue[exact]'] = ObjectSerializer::toQueryValue($number_value_exact);
        }
        // query params
        if ($number_value_exists !== null) {
            $queryParams['numberValue[exists]'] = ObjectSerializer::toQueryValue($number_value_exists);
        }
        // query params
        if ($number_value_partial !== null) {
            $queryParams['numberValue[partial]'] = ObjectSerializer::toQueryValue($number_value_partial);
        }
        // query params
        if ($number_value_start !== null) {
            $queryParams['numberValue[start]'] = ObjectSerializer::toQueryValue($number_value_start);
        }
        // query params
        if ($route_type !== null) {
            $queryParams['routeType'] = ObjectSerializer::toQueryValue($route_type);
        }
        // query params
        if ($route_type_end !== null) {
            $queryParams['routeType[end]'] = ObjectSerializer::toQueryValue($route_type_end);
        }
        // query params
        if ($route_type_exact !== null) {
            $queryParams['routeType[exact]'] = ObjectSerializer::toQueryValue($route_type_exact);
        }
        // query params
        if ($route_type_partial !== null) {
            $queryParams['routeType[partial]'] = ObjectSerializer::toQueryValue($route_type_partial);
        }
        // query params
        if ($route_type_start !== null) {
            $queryParams['routeType[start]'] = ObjectSerializer::toQueryValue($route_type_start);
        }
        // query params
        if ($voice_mail_user !== null) {
            $queryParams['voiceMailUser'] = ObjectSerializer::toQueryValue($voice_mail_user);
        }
        // query params
        if ($voice_mail_user2 !== null) {
            $queryParams['voiceMailUser[]'] = ObjectSerializer::toQueryValue($voice_mail_user2);
        }
        // query params
        if ($voice_mail_user_exists !== null) {
            $queryParams['voiceMailUser[exists]'] = ObjectSerializer::toQueryValue($voice_mail_user_exists);
        }
        // query params
        if ($welcome_locution !== null) {
            $queryParams['welcomeLocution'] = ObjectSerializer::toQueryValue($welcome_locution);
        }
        // query params
        if ($welcome_locution2 !== null) {
            $queryParams['welcomeLocution[]'] = ObjectSerializer::toQueryValue($welcome_locution2);
        }
        // query params
        if ($welcome_locution_exists !== null) {
            $queryParams['welcomeLocution[exists]'] = ObjectSerializer::toQueryValue($welcome_locution_exists);
        }
        // query params
        if ($_order_entry !== null) {
            $queryParams['_order[entry]'] = ObjectSerializer::toQueryValue($_order_entry);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_number_value !== null) {
            $queryParams['_order[numberValue]'] = ObjectSerializer::toQueryValue($_order_number_value);
        }
        // query params
        if ($_order_route_type !== null) {
            $queryParams['_order[routeType]'] = ObjectSerializer::toQueryValue($_order_route_type);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIvrEntryItem
     *
     * Retrieves a IvrEntry resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\IvrEntryDetailed
     */
    public function getIvrEntryItem($id)
    {
        list($response) = $this->getIvrEntryItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getIvrEntryItemWithHttpInfo
     *
     * Retrieves a IvrEntry resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\IvrEntryDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIvrEntryItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\IvrEntryDetailed';
        $request = $this->getIvrEntryItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\IvrEntryDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIvrEntryItemAsync
     *
     * Retrieves a IvrEntry resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIvrEntryItemAsync($id)
    {
        return $this->getIvrEntryItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIvrEntryItemAsyncWithHttpInfo
     *
     * Retrieves a IvrEntry resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIvrEntryItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\IvrEntryDetailed';
        $request = $this->getIvrEntryItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIvrEntryItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getIvrEntryItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getIvrEntryItem'
            );
        }

        $resourcePath = '/ivr_entries/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIvrExcludedExtensionCollection
     *
     * Retrieves the collection of IvrExcludedExtension resources.
     *
     * @param  string $extension extension (optional)
     * @param  int $extension_conditional_route extension_conditional_route (optional)
     * @param  int $extension_conference_room extension_conference_room (optional)
     * @param  string $extension_friend_value extension_friend_value (optional)
     * @param  int $extension_hunt_group extension_hunt_group (optional)
     * @param  int $extension_ivr extension_ivr (optional)
     * @param  string $extension_number extension_number (optional)
     * @param  int $extension_number_country extension_number_country (optional)
     * @param  string $extension_number_value extension_number_value (optional)
     * @param  int $extension_queue extension_queue (optional)
     * @param  string $extension_route_type extension_route_type (optional)
     * @param  int $extension_user extension_user (optional)
     * @param  string $extension2 extension2 (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $ivr ivr (optional)
     * @param  bool $ivr_allow_extensions ivr_allow_extensions (optional)
     * @param  int $ivr_error_extension ivr_error_extension (optional)
     * @param  int $ivr_error_locution ivr_error_locution (optional)
     * @param  int $ivr_error_number_country ivr_error_number_country (optional)
     * @param  string $ivr_error_number_value ivr_error_number_value (optional)
     * @param  string $ivr_error_route_type ivr_error_route_type (optional)
     * @param  int $ivr_error_voice_mail_user ivr_error_voice_mail_user (optional)
     * @param  int $ivr_max_digits ivr_max_digits (optional)
     * @param  string $ivr_name ivr_name (optional)
     * @param  int $ivr_no_input_extension ivr_no_input_extension (optional)
     * @param  int $ivr_no_input_locution ivr_no_input_locution (optional)
     * @param  int $ivr_no_input_number_country ivr_no_input_number_country (optional)
     * @param  string $ivr_no_input_number_value ivr_no_input_number_value (optional)
     * @param  string $ivr_no_input_route_type ivr_no_input_route_type (optional)
     * @param  int $ivr_no_input_voice_mail_user ivr_no_input_voice_mail_user (optional)
     * @param  int $ivr_success_locution ivr_success_locution (optional)
     * @param  int $ivr_timeout ivr_timeout (optional)
     * @param  int $ivr_welcome_locution ivr_welcome_locution (optional)
     * @param  string $ivr2 ivr2 (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\IvrExcludedExtensionDetailedCollection[]
     */
    public function getIvrExcludedExtensionCollection($extension = null, $extension_conditional_route = null, $extension_conference_room = null, $extension_friend_value = null, $extension_hunt_group = null, $extension_ivr = null, $extension_number = null, $extension_number_country = null, $extension_number_value = null, $extension_queue = null, $extension_route_type = null, $extension_user = null, $extension2 = null, $id_exact = null, $ivr = null, $ivr_allow_extensions = null, $ivr_error_extension = null, $ivr_error_locution = null, $ivr_error_number_country = null, $ivr_error_number_value = null, $ivr_error_route_type = null, $ivr_error_voice_mail_user = null, $ivr_max_digits = null, $ivr_name = null, $ivr_no_input_extension = null, $ivr_no_input_locution = null, $ivr_no_input_number_country = null, $ivr_no_input_number_value = null, $ivr_no_input_route_type = null, $ivr_no_input_voice_mail_user = null, $ivr_success_locution = null, $ivr_timeout = null, $ivr_welcome_locution = null, $ivr2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getIvrExcludedExtensionCollectionWithHttpInfo($extension, $extension_conditional_route, $extension_conference_room, $extension_friend_value, $extension_hunt_group, $extension_ivr, $extension_number, $extension_number_country, $extension_number_value, $extension_queue, $extension_route_type, $extension_user, $extension2, $id_exact, $ivr, $ivr_allow_extensions, $ivr_error_extension, $ivr_error_locution, $ivr_error_number_country, $ivr_error_number_value, $ivr_error_route_type, $ivr_error_voice_mail_user, $ivr_max_digits, $ivr_name, $ivr_no_input_extension, $ivr_no_input_locution, $ivr_no_input_number_country, $ivr_no_input_number_value, $ivr_no_input_route_type, $ivr_no_input_voice_mail_user, $ivr_success_locution, $ivr_timeout, $ivr_welcome_locution, $ivr2, $_order_id, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getIvrExcludedExtensionCollectionWithHttpInfo
     *
     * Retrieves the collection of IvrExcludedExtension resources.
     *
     * @param  string $extension (optional)
     * @param  int $extension_conditional_route (optional)
     * @param  int $extension_conference_room (optional)
     * @param  string $extension_friend_value (optional)
     * @param  int $extension_hunt_group (optional)
     * @param  int $extension_ivr (optional)
     * @param  string $extension_number (optional)
     * @param  int $extension_number_country (optional)
     * @param  string $extension_number_value (optional)
     * @param  int $extension_queue (optional)
     * @param  string $extension_route_type (optional)
     * @param  int $extension_user (optional)
     * @param  string $extension2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $ivr (optional)
     * @param  bool $ivr_allow_extensions (optional)
     * @param  int $ivr_error_extension (optional)
     * @param  int $ivr_error_locution (optional)
     * @param  int $ivr_error_number_country (optional)
     * @param  string $ivr_error_number_value (optional)
     * @param  string $ivr_error_route_type (optional)
     * @param  int $ivr_error_voice_mail_user (optional)
     * @param  int $ivr_max_digits (optional)
     * @param  string $ivr_name (optional)
     * @param  int $ivr_no_input_extension (optional)
     * @param  int $ivr_no_input_locution (optional)
     * @param  int $ivr_no_input_number_country (optional)
     * @param  string $ivr_no_input_number_value (optional)
     * @param  string $ivr_no_input_route_type (optional)
     * @param  int $ivr_no_input_voice_mail_user (optional)
     * @param  int $ivr_success_locution (optional)
     * @param  int $ivr_timeout (optional)
     * @param  int $ivr_welcome_locution (optional)
     * @param  string $ivr2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\IvrExcludedExtensionDetailedCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getIvrExcludedExtensionCollectionWithHttpInfo($extension = null, $extension_conditional_route = null, $extension_conference_room = null, $extension_friend_value = null, $extension_hunt_group = null, $extension_ivr = null, $extension_number = null, $extension_number_country = null, $extension_number_value = null, $extension_queue = null, $extension_route_type = null, $extension_user = null, $extension2 = null, $id_exact = null, $ivr = null, $ivr_allow_extensions = null, $ivr_error_extension = null, $ivr_error_locution = null, $ivr_error_number_country = null, $ivr_error_number_value = null, $ivr_error_route_type = null, $ivr_error_voice_mail_user = null, $ivr_max_digits = null, $ivr_name = null, $ivr_no_input_extension = null, $ivr_no_input_locution = null, $ivr_no_input_number_country = null, $ivr_no_input_number_value = null, $ivr_no_input_route_type = null, $ivr_no_input_voice_mail_user = null, $ivr_success_locution = null, $ivr_timeout = null, $ivr_welcome_locution = null, $ivr2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\IvrExcludedExtensionDetailedCollection[]';
        $request = $this->getIvrExcludedExtensionCollectionRequest($extension, $extension_conditional_route, $extension_conference_room, $extension_friend_value, $extension_hunt_group, $extension_ivr, $extension_number, $extension_number_country, $extension_number_value, $extension_queue, $extension_route_type, $extension_user, $extension2, $id_exact, $ivr, $ivr_allow_extensions, $ivr_error_extension, $ivr_error_locution, $ivr_error_number_country, $ivr_error_number_value, $ivr_error_route_type, $ivr_error_voice_mail_user, $ivr_max_digits, $ivr_name, $ivr_no_input_extension, $ivr_no_input_locution, $ivr_no_input_number_country, $ivr_no_input_number_value, $ivr_no_input_route_type, $ivr_no_input_voice_mail_user, $ivr_success_locution, $ivr_timeout, $ivr_welcome_locution, $ivr2, $_order_id, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\IvrExcludedExtensionDetailedCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIvrExcludedExtensionCollectionAsync
     *
     * Retrieves the collection of IvrExcludedExtension resources.
     *
     * @param  string $extension (optional)
     * @param  int $extension_conditional_route (optional)
     * @param  int $extension_conference_room (optional)
     * @param  string $extension_friend_value (optional)
     * @param  int $extension_hunt_group (optional)
     * @param  int $extension_ivr (optional)
     * @param  string $extension_number (optional)
     * @param  int $extension_number_country (optional)
     * @param  string $extension_number_value (optional)
     * @param  int $extension_queue (optional)
     * @param  string $extension_route_type (optional)
     * @param  int $extension_user (optional)
     * @param  string $extension2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $ivr (optional)
     * @param  bool $ivr_allow_extensions (optional)
     * @param  int $ivr_error_extension (optional)
     * @param  int $ivr_error_locution (optional)
     * @param  int $ivr_error_number_country (optional)
     * @param  string $ivr_error_number_value (optional)
     * @param  string $ivr_error_route_type (optional)
     * @param  int $ivr_error_voice_mail_user (optional)
     * @param  int $ivr_max_digits (optional)
     * @param  string $ivr_name (optional)
     * @param  int $ivr_no_input_extension (optional)
     * @param  int $ivr_no_input_locution (optional)
     * @param  int $ivr_no_input_number_country (optional)
     * @param  string $ivr_no_input_number_value (optional)
     * @param  string $ivr_no_input_route_type (optional)
     * @param  int $ivr_no_input_voice_mail_user (optional)
     * @param  int $ivr_success_locution (optional)
     * @param  int $ivr_timeout (optional)
     * @param  int $ivr_welcome_locution (optional)
     * @param  string $ivr2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIvrExcludedExtensionCollectionAsync($extension = null, $extension_conditional_route = null, $extension_conference_room = null, $extension_friend_value = null, $extension_hunt_group = null, $extension_ivr = null, $extension_number = null, $extension_number_country = null, $extension_number_value = null, $extension_queue = null, $extension_route_type = null, $extension_user = null, $extension2 = null, $id_exact = null, $ivr = null, $ivr_allow_extensions = null, $ivr_error_extension = null, $ivr_error_locution = null, $ivr_error_number_country = null, $ivr_error_number_value = null, $ivr_error_route_type = null, $ivr_error_voice_mail_user = null, $ivr_max_digits = null, $ivr_name = null, $ivr_no_input_extension = null, $ivr_no_input_locution = null, $ivr_no_input_number_country = null, $ivr_no_input_number_value = null, $ivr_no_input_route_type = null, $ivr_no_input_voice_mail_user = null, $ivr_success_locution = null, $ivr_timeout = null, $ivr_welcome_locution = null, $ivr2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getIvrExcludedExtensionCollectionAsyncWithHttpInfo($extension, $extension_conditional_route, $extension_conference_room, $extension_friend_value, $extension_hunt_group, $extension_ivr, $extension_number, $extension_number_country, $extension_number_value, $extension_queue, $extension_route_type, $extension_user, $extension2, $id_exact, $ivr, $ivr_allow_extensions, $ivr_error_extension, $ivr_error_locution, $ivr_error_number_country, $ivr_error_number_value, $ivr_error_route_type, $ivr_error_voice_mail_user, $ivr_max_digits, $ivr_name, $ivr_no_input_extension, $ivr_no_input_locution, $ivr_no_input_number_country, $ivr_no_input_number_value, $ivr_no_input_route_type, $ivr_no_input_voice_mail_user, $ivr_success_locution, $ivr_timeout, $ivr_welcome_locution, $ivr2, $_order_id, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIvrExcludedExtensionCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of IvrExcludedExtension resources.
     *
     * @param  string $extension (optional)
     * @param  int $extension_conditional_route (optional)
     * @param  int $extension_conference_room (optional)
     * @param  string $extension_friend_value (optional)
     * @param  int $extension_hunt_group (optional)
     * @param  int $extension_ivr (optional)
     * @param  string $extension_number (optional)
     * @param  int $extension_number_country (optional)
     * @param  string $extension_number_value (optional)
     * @param  int $extension_queue (optional)
     * @param  string $extension_route_type (optional)
     * @param  int $extension_user (optional)
     * @param  string $extension2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $ivr (optional)
     * @param  bool $ivr_allow_extensions (optional)
     * @param  int $ivr_error_extension (optional)
     * @param  int $ivr_error_locution (optional)
     * @param  int $ivr_error_number_country (optional)
     * @param  string $ivr_error_number_value (optional)
     * @param  string $ivr_error_route_type (optional)
     * @param  int $ivr_error_voice_mail_user (optional)
     * @param  int $ivr_max_digits (optional)
     * @param  string $ivr_name (optional)
     * @param  int $ivr_no_input_extension (optional)
     * @param  int $ivr_no_input_locution (optional)
     * @param  int $ivr_no_input_number_country (optional)
     * @param  string $ivr_no_input_number_value (optional)
     * @param  string $ivr_no_input_route_type (optional)
     * @param  int $ivr_no_input_voice_mail_user (optional)
     * @param  int $ivr_success_locution (optional)
     * @param  int $ivr_timeout (optional)
     * @param  int $ivr_welcome_locution (optional)
     * @param  string $ivr2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIvrExcludedExtensionCollectionAsyncWithHttpInfo($extension = null, $extension_conditional_route = null, $extension_conference_room = null, $extension_friend_value = null, $extension_hunt_group = null, $extension_ivr = null, $extension_number = null, $extension_number_country = null, $extension_number_value = null, $extension_queue = null, $extension_route_type = null, $extension_user = null, $extension2 = null, $id_exact = null, $ivr = null, $ivr_allow_extensions = null, $ivr_error_extension = null, $ivr_error_locution = null, $ivr_error_number_country = null, $ivr_error_number_value = null, $ivr_error_route_type = null, $ivr_error_voice_mail_user = null, $ivr_max_digits = null, $ivr_name = null, $ivr_no_input_extension = null, $ivr_no_input_locution = null, $ivr_no_input_number_country = null, $ivr_no_input_number_value = null, $ivr_no_input_route_type = null, $ivr_no_input_voice_mail_user = null, $ivr_success_locution = null, $ivr_timeout = null, $ivr_welcome_locution = null, $ivr2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\IvrExcludedExtensionDetailedCollection[]';
        $request = $this->getIvrExcludedExtensionCollectionRequest($extension, $extension_conditional_route, $extension_conference_room, $extension_friend_value, $extension_hunt_group, $extension_ivr, $extension_number, $extension_number_country, $extension_number_value, $extension_queue, $extension_route_type, $extension_user, $extension2, $id_exact, $ivr, $ivr_allow_extensions, $ivr_error_extension, $ivr_error_locution, $ivr_error_number_country, $ivr_error_number_value, $ivr_error_route_type, $ivr_error_voice_mail_user, $ivr_max_digits, $ivr_name, $ivr_no_input_extension, $ivr_no_input_locution, $ivr_no_input_number_country, $ivr_no_input_number_value, $ivr_no_input_route_type, $ivr_no_input_voice_mail_user, $ivr_success_locution, $ivr_timeout, $ivr_welcome_locution, $ivr2, $_order_id, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIvrExcludedExtensionCollection'
     *
     * @param  string $extension (optional)
     * @param  int $extension_conditional_route (optional)
     * @param  int $extension_conference_room (optional)
     * @param  string $extension_friend_value (optional)
     * @param  int $extension_hunt_group (optional)
     * @param  int $extension_ivr (optional)
     * @param  string $extension_number (optional)
     * @param  int $extension_number_country (optional)
     * @param  string $extension_number_value (optional)
     * @param  int $extension_queue (optional)
     * @param  string $extension_route_type (optional)
     * @param  int $extension_user (optional)
     * @param  string $extension2 (optional)
     * @param  int $id_exact (optional)
     * @param  string $ivr (optional)
     * @param  bool $ivr_allow_extensions (optional)
     * @param  int $ivr_error_extension (optional)
     * @param  int $ivr_error_locution (optional)
     * @param  int $ivr_error_number_country (optional)
     * @param  string $ivr_error_number_value (optional)
     * @param  string $ivr_error_route_type (optional)
     * @param  int $ivr_error_voice_mail_user (optional)
     * @param  int $ivr_max_digits (optional)
     * @param  string $ivr_name (optional)
     * @param  int $ivr_no_input_extension (optional)
     * @param  int $ivr_no_input_locution (optional)
     * @param  int $ivr_no_input_number_country (optional)
     * @param  string $ivr_no_input_number_value (optional)
     * @param  string $ivr_no_input_route_type (optional)
     * @param  int $ivr_no_input_voice_mail_user (optional)
     * @param  int $ivr_success_locution (optional)
     * @param  int $ivr_timeout (optional)
     * @param  int $ivr_welcome_locution (optional)
     * @param  string $ivr2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getIvrExcludedExtensionCollectionRequest($extension = null, $extension_conditional_route = null, $extension_conference_room = null, $extension_friend_value = null, $extension_hunt_group = null, $extension_ivr = null, $extension_number = null, $extension_number_country = null, $extension_number_value = null, $extension_queue = null, $extension_route_type = null, $extension_user = null, $extension2 = null, $id_exact = null, $ivr = null, $ivr_allow_extensions = null, $ivr_error_extension = null, $ivr_error_locution = null, $ivr_error_number_country = null, $ivr_error_number_value = null, $ivr_error_route_type = null, $ivr_error_voice_mail_user = null, $ivr_max_digits = null, $ivr_name = null, $ivr_no_input_extension = null, $ivr_no_input_locution = null, $ivr_no_input_number_country = null, $ivr_no_input_number_value = null, $ivr_no_input_route_type = null, $ivr_no_input_voice_mail_user = null, $ivr_success_locution = null, $ivr_timeout = null, $ivr_welcome_locution = null, $ivr2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/ivr_excluded_extensions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($extension !== null) {
            $queryParams['extension'] = ObjectSerializer::toQueryValue($extension);
        }
        // query params
        if ($extension_conditional_route !== null) {
            $queryParams['extension.conditionalRoute'] = ObjectSerializer::toQueryValue($extension_conditional_route);
        }
        // query params
        if ($extension_conference_room !== null) {
            $queryParams['extension.conferenceRoom'] = ObjectSerializer::toQueryValue($extension_conference_room);
        }
        // query params
        if ($extension_friend_value !== null) {
            $queryParams['extension.friendValue'] = ObjectSerializer::toQueryValue($extension_friend_value);
        }
        // query params
        if ($extension_hunt_group !== null) {
            $queryParams['extension.huntGroup'] = ObjectSerializer::toQueryValue($extension_hunt_group);
        }
        // query params
        if ($extension_ivr !== null) {
            $queryParams['extension.ivr'] = ObjectSerializer::toQueryValue($extension_ivr);
        }
        // query params
        if ($extension_number !== null) {
            $queryParams['extension.number'] = ObjectSerializer::toQueryValue($extension_number);
        }
        // query params
        if ($extension_number_country !== null) {
            $queryParams['extension.numberCountry'] = ObjectSerializer::toQueryValue($extension_number_country);
        }
        // query params
        if ($extension_number_value !== null) {
            $queryParams['extension.numberValue'] = ObjectSerializer::toQueryValue($extension_number_value);
        }
        // query params
        if ($extension_queue !== null) {
            $queryParams['extension.queue'] = ObjectSerializer::toQueryValue($extension_queue);
        }
        // query params
        if ($extension_route_type !== null) {
            $queryParams['extension.routeType'] = ObjectSerializer::toQueryValue($extension_route_type);
        }
        // query params
        if ($extension_user !== null) {
            $queryParams['extension.user'] = ObjectSerializer::toQueryValue($extension_user);
        }
        // query params
        if ($extension2 !== null) {
            $queryParams['extension[]'] = ObjectSerializer::toQueryValue($extension2);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($ivr !== null) {
            $queryParams['ivr'] = ObjectSerializer::toQueryValue($ivr);
        }
        // query params
        if ($ivr_allow_extensions !== null) {
            $queryParams['ivr.allowExtensions'] = ObjectSerializer::toQueryValue($ivr_allow_extensions);
        }
        // query params
        if ($ivr_error_extension !== null) {
            $queryParams['ivr.errorExtension'] = ObjectSerializer::toQueryValue($ivr_error_extension);
        }
        // query params
        if ($ivr_error_locution !== null) {
            $queryParams['ivr.errorLocution'] = ObjectSerializer::toQueryValue($ivr_error_locution);
        }
        // query params
        if ($ivr_error_number_country !== null) {
            $queryParams['ivr.errorNumberCountry'] = ObjectSerializer::toQueryValue($ivr_error_number_country);
        }
        // query params
        if ($ivr_error_number_value !== null) {
            $queryParams['ivr.errorNumberValue'] = ObjectSerializer::toQueryValue($ivr_error_number_value);
        }
        // query params
        if ($ivr_error_route_type !== null) {
            $queryParams['ivr.errorRouteType'] = ObjectSerializer::toQueryValue($ivr_error_route_type);
        }
        // query params
        if ($ivr_error_voice_mail_user !== null) {
            $queryParams['ivr.errorVoiceMailUser'] = ObjectSerializer::toQueryValue($ivr_error_voice_mail_user);
        }
        // query params
        if ($ivr_max_digits !== null) {
            $queryParams['ivr.maxDigits'] = ObjectSerializer::toQueryValue($ivr_max_digits);
        }
        // query params
        if ($ivr_name !== null) {
            $queryParams['ivr.name'] = ObjectSerializer::toQueryValue($ivr_name);
        }
        // query params
        if ($ivr_no_input_extension !== null) {
            $queryParams['ivr.noInputExtension'] = ObjectSerializer::toQueryValue($ivr_no_input_extension);
        }
        // query params
        if ($ivr_no_input_locution !== null) {
            $queryParams['ivr.noInputLocution'] = ObjectSerializer::toQueryValue($ivr_no_input_locution);
        }
        // query params
        if ($ivr_no_input_number_country !== null) {
            $queryParams['ivr.noInputNumberCountry'] = ObjectSerializer::toQueryValue($ivr_no_input_number_country);
        }
        // query params
        if ($ivr_no_input_number_value !== null) {
            $queryParams['ivr.noInputNumberValue'] = ObjectSerializer::toQueryValue($ivr_no_input_number_value);
        }
        // query params
        if ($ivr_no_input_route_type !== null) {
            $queryParams['ivr.noInputRouteType'] = ObjectSerializer::toQueryValue($ivr_no_input_route_type);
        }
        // query params
        if ($ivr_no_input_voice_mail_user !== null) {
            $queryParams['ivr.noInputVoiceMailUser'] = ObjectSerializer::toQueryValue($ivr_no_input_voice_mail_user);
        }
        // query params
        if ($ivr_success_locution !== null) {
            $queryParams['ivr.successLocution'] = ObjectSerializer::toQueryValue($ivr_success_locution);
        }
        // query params
        if ($ivr_timeout !== null) {
            $queryParams['ivr.timeout'] = ObjectSerializer::toQueryValue($ivr_timeout);
        }
        // query params
        if ($ivr_welcome_locution !== null) {
            $queryParams['ivr.welcomeLocution'] = ObjectSerializer::toQueryValue($ivr_welcome_locution);
        }
        // query params
        if ($ivr2 !== null) {
            $queryParams['ivr[]'] = ObjectSerializer::toQueryValue($ivr2);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIvrExcludedExtensionItem
     *
     * Retrieves a IvrExcludedExtension resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\IvrExcludedExtensionDetailed
     */
    public function getIvrExcludedExtensionItem($id)
    {
        list($response) = $this->getIvrExcludedExtensionItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getIvrExcludedExtensionItemWithHttpInfo
     *
     * Retrieves a IvrExcludedExtension resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\IvrExcludedExtensionDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIvrExcludedExtensionItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\IvrExcludedExtensionDetailed';
        $request = $this->getIvrExcludedExtensionItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\IvrExcludedExtensionDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIvrExcludedExtensionItemAsync
     *
     * Retrieves a IvrExcludedExtension resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIvrExcludedExtensionItemAsync($id)
    {
        return $this->getIvrExcludedExtensionItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIvrExcludedExtensionItemAsyncWithHttpInfo
     *
     * Retrieves a IvrExcludedExtension resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIvrExcludedExtensionItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\IvrExcludedExtensionDetailed';
        $request = $this->getIvrExcludedExtensionItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIvrExcludedExtensionItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getIvrExcludedExtensionItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getIvrExcludedExtensionItem'
            );
        }

        $resourcePath = '/ivr_excluded_extensions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIvrItem
     *
     * Retrieves a Ivr resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\IvrDetailed
     */
    public function getIvrItem($id)
    {
        list($response) = $this->getIvrItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getIvrItemWithHttpInfo
     *
     * Retrieves a Ivr resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\IvrDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIvrItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\IvrDetailed';
        $request = $this->getIvrItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\IvrDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIvrItemAsync
     *
     * Retrieves a Ivr resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIvrItemAsync($id)
    {
        return $this->getIvrItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIvrItemAsyncWithHttpInfo
     *
     * Retrieves a Ivr resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIvrItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\IvrDetailed';
        $request = $this->getIvrItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIvrItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getIvrItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getIvrItem'
            );
        }

        $resourcePath = '/ivrs/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLanguageCollection
     *
     * Retrieves the collection of Language resources.
     *
     * @param  int $id_exact id_exact (optional)
     * @param  string $iden iden (optional)
     * @param  string $iden_end iden_end (optional)
     * @param  string $iden_exact iden_exact (optional)
     * @param  string $iden_partial iden_partial (optional)
     * @param  string $iden_start iden_start (optional)
     * @param  string $name_ca name_ca (optional)
     * @param  string $name_ca_end name_ca_end (optional)
     * @param  string $name_ca_exact name_ca_exact (optional)
     * @param  string $name_ca_partial name_ca_partial (optional)
     * @param  string $name_ca_start name_ca_start (optional)
     * @param  string $name_en name_en (optional)
     * @param  string $name_en_end name_en_end (optional)
     * @param  string $name_en_exact name_en_exact (optional)
     * @param  string $name_en_partial name_en_partial (optional)
     * @param  string $name_en_start name_en_start (optional)
     * @param  string $name_es name_es (optional)
     * @param  string $name_es_end name_es_end (optional)
     * @param  string $name_es_exact name_es_exact (optional)
     * @param  string $name_es_partial name_es_partial (optional)
     * @param  string $name_es_start name_es_start (optional)
     * @param  string $name_it name_it (optional)
     * @param  string $name_it_end name_it_end (optional)
     * @param  string $name_it_exact name_it_exact (optional)
     * @param  string $name_it_partial name_it_partial (optional)
     * @param  string $name_it_start name_it_start (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_iden _order_iden (optional)
     * @param  string $_order_name_ca _order_name_ca (optional)
     * @param  string $_order_name_en _order_name_en (optional)
     * @param  string $_order_name_es _order_name_es (optional)
     * @param  string $_order_name_it _order_name_it (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\LanguageCollection[]
     */
    public function getLanguageCollection($id_exact = null, $iden = null, $iden_end = null, $iden_exact = null, $iden_partial = null, $iden_start = null, $name_ca = null, $name_ca_end = null, $name_ca_exact = null, $name_ca_partial = null, $name_ca_start = null, $name_en = null, $name_en_end = null, $name_en_exact = null, $name_en_partial = null, $name_en_start = null, $name_es = null, $name_es_end = null, $name_es_exact = null, $name_es_partial = null, $name_es_start = null, $name_it = null, $name_it_end = null, $name_it_exact = null, $name_it_partial = null, $name_it_start = null, $_order_id = null, $_order_iden = null, $_order_name_ca = null, $_order_name_en = null, $_order_name_es = null, $_order_name_it = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getLanguageCollectionWithHttpInfo($id_exact, $iden, $iden_end, $iden_exact, $iden_partial, $iden_start, $name_ca, $name_ca_end, $name_ca_exact, $name_ca_partial, $name_ca_start, $name_en, $name_en_end, $name_en_exact, $name_en_partial, $name_en_start, $name_es, $name_es_end, $name_es_exact, $name_es_partial, $name_es_start, $name_it, $name_it_end, $name_it_exact, $name_it_partial, $name_it_start, $_order_id, $_order_iden, $_order_name_ca, $_order_name_en, $_order_name_es, $_order_name_it, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getLanguageCollectionWithHttpInfo
     *
     * Retrieves the collection of Language resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $iden (optional)
     * @param  string $iden_end (optional)
     * @param  string $iden_exact (optional)
     * @param  string $iden_partial (optional)
     * @param  string $iden_start (optional)
     * @param  string $name_ca (optional)
     * @param  string $name_ca_end (optional)
     * @param  string $name_ca_exact (optional)
     * @param  string $name_ca_partial (optional)
     * @param  string $name_ca_start (optional)
     * @param  string $name_en (optional)
     * @param  string $name_en_end (optional)
     * @param  string $name_en_exact (optional)
     * @param  string $name_en_partial (optional)
     * @param  string $name_en_start (optional)
     * @param  string $name_es (optional)
     * @param  string $name_es_end (optional)
     * @param  string $name_es_exact (optional)
     * @param  string $name_es_partial (optional)
     * @param  string $name_es_start (optional)
     * @param  string $name_it (optional)
     * @param  string $name_it_end (optional)
     * @param  string $name_it_exact (optional)
     * @param  string $name_it_partial (optional)
     * @param  string $name_it_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_iden (optional)
     * @param  string $_order_name_ca (optional)
     * @param  string $_order_name_en (optional)
     * @param  string $_order_name_es (optional)
     * @param  string $_order_name_it (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\LanguageCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getLanguageCollectionWithHttpInfo($id_exact = null, $iden = null, $iden_end = null, $iden_exact = null, $iden_partial = null, $iden_start = null, $name_ca = null, $name_ca_end = null, $name_ca_exact = null, $name_ca_partial = null, $name_ca_start = null, $name_en = null, $name_en_end = null, $name_en_exact = null, $name_en_partial = null, $name_en_start = null, $name_es = null, $name_es_end = null, $name_es_exact = null, $name_es_partial = null, $name_es_start = null, $name_it = null, $name_it_end = null, $name_it_exact = null, $name_it_partial = null, $name_it_start = null, $_order_id = null, $_order_iden = null, $_order_name_ca = null, $_order_name_en = null, $_order_name_es = null, $_order_name_it = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\LanguageCollection[]';
        $request = $this->getLanguageCollectionRequest($id_exact, $iden, $iden_end, $iden_exact, $iden_partial, $iden_start, $name_ca, $name_ca_end, $name_ca_exact, $name_ca_partial, $name_ca_start, $name_en, $name_en_end, $name_en_exact, $name_en_partial, $name_en_start, $name_es, $name_es_end, $name_es_exact, $name_es_partial, $name_es_start, $name_it, $name_it_end, $name_it_exact, $name_it_partial, $name_it_start, $_order_id, $_order_iden, $_order_name_ca, $_order_name_en, $_order_name_es, $_order_name_it, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\LanguageCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLanguageCollectionAsync
     *
     * Retrieves the collection of Language resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $iden (optional)
     * @param  string $iden_end (optional)
     * @param  string $iden_exact (optional)
     * @param  string $iden_partial (optional)
     * @param  string $iden_start (optional)
     * @param  string $name_ca (optional)
     * @param  string $name_ca_end (optional)
     * @param  string $name_ca_exact (optional)
     * @param  string $name_ca_partial (optional)
     * @param  string $name_ca_start (optional)
     * @param  string $name_en (optional)
     * @param  string $name_en_end (optional)
     * @param  string $name_en_exact (optional)
     * @param  string $name_en_partial (optional)
     * @param  string $name_en_start (optional)
     * @param  string $name_es (optional)
     * @param  string $name_es_end (optional)
     * @param  string $name_es_exact (optional)
     * @param  string $name_es_partial (optional)
     * @param  string $name_es_start (optional)
     * @param  string $name_it (optional)
     * @param  string $name_it_end (optional)
     * @param  string $name_it_exact (optional)
     * @param  string $name_it_partial (optional)
     * @param  string $name_it_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_iden (optional)
     * @param  string $_order_name_ca (optional)
     * @param  string $_order_name_en (optional)
     * @param  string $_order_name_es (optional)
     * @param  string $_order_name_it (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLanguageCollectionAsync($id_exact = null, $iden = null, $iden_end = null, $iden_exact = null, $iden_partial = null, $iden_start = null, $name_ca = null, $name_ca_end = null, $name_ca_exact = null, $name_ca_partial = null, $name_ca_start = null, $name_en = null, $name_en_end = null, $name_en_exact = null, $name_en_partial = null, $name_en_start = null, $name_es = null, $name_es_end = null, $name_es_exact = null, $name_es_partial = null, $name_es_start = null, $name_it = null, $name_it_end = null, $name_it_exact = null, $name_it_partial = null, $name_it_start = null, $_order_id = null, $_order_iden = null, $_order_name_ca = null, $_order_name_en = null, $_order_name_es = null, $_order_name_it = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getLanguageCollectionAsyncWithHttpInfo($id_exact, $iden, $iden_end, $iden_exact, $iden_partial, $iden_start, $name_ca, $name_ca_end, $name_ca_exact, $name_ca_partial, $name_ca_start, $name_en, $name_en_end, $name_en_exact, $name_en_partial, $name_en_start, $name_es, $name_es_end, $name_es_exact, $name_es_partial, $name_es_start, $name_it, $name_it_end, $name_it_exact, $name_it_partial, $name_it_start, $_order_id, $_order_iden, $_order_name_ca, $_order_name_en, $_order_name_es, $_order_name_it, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLanguageCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of Language resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $iden (optional)
     * @param  string $iden_end (optional)
     * @param  string $iden_exact (optional)
     * @param  string $iden_partial (optional)
     * @param  string $iden_start (optional)
     * @param  string $name_ca (optional)
     * @param  string $name_ca_end (optional)
     * @param  string $name_ca_exact (optional)
     * @param  string $name_ca_partial (optional)
     * @param  string $name_ca_start (optional)
     * @param  string $name_en (optional)
     * @param  string $name_en_end (optional)
     * @param  string $name_en_exact (optional)
     * @param  string $name_en_partial (optional)
     * @param  string $name_en_start (optional)
     * @param  string $name_es (optional)
     * @param  string $name_es_end (optional)
     * @param  string $name_es_exact (optional)
     * @param  string $name_es_partial (optional)
     * @param  string $name_es_start (optional)
     * @param  string $name_it (optional)
     * @param  string $name_it_end (optional)
     * @param  string $name_it_exact (optional)
     * @param  string $name_it_partial (optional)
     * @param  string $name_it_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_iden (optional)
     * @param  string $_order_name_ca (optional)
     * @param  string $_order_name_en (optional)
     * @param  string $_order_name_es (optional)
     * @param  string $_order_name_it (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLanguageCollectionAsyncWithHttpInfo($id_exact = null, $iden = null, $iden_end = null, $iden_exact = null, $iden_partial = null, $iden_start = null, $name_ca = null, $name_ca_end = null, $name_ca_exact = null, $name_ca_partial = null, $name_ca_start = null, $name_en = null, $name_en_end = null, $name_en_exact = null, $name_en_partial = null, $name_en_start = null, $name_es = null, $name_es_end = null, $name_es_exact = null, $name_es_partial = null, $name_es_start = null, $name_it = null, $name_it_end = null, $name_it_exact = null, $name_it_partial = null, $name_it_start = null, $_order_id = null, $_order_iden = null, $_order_name_ca = null, $_order_name_en = null, $_order_name_es = null, $_order_name_it = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\LanguageCollection[]';
        $request = $this->getLanguageCollectionRequest($id_exact, $iden, $iden_end, $iden_exact, $iden_partial, $iden_start, $name_ca, $name_ca_end, $name_ca_exact, $name_ca_partial, $name_ca_start, $name_en, $name_en_end, $name_en_exact, $name_en_partial, $name_en_start, $name_es, $name_es_end, $name_es_exact, $name_es_partial, $name_es_start, $name_it, $name_it_end, $name_it_exact, $name_it_partial, $name_it_start, $_order_id, $_order_iden, $_order_name_ca, $_order_name_en, $_order_name_es, $_order_name_it, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLanguageCollection'
     *
     * @param  int $id_exact (optional)
     * @param  string $iden (optional)
     * @param  string $iden_end (optional)
     * @param  string $iden_exact (optional)
     * @param  string $iden_partial (optional)
     * @param  string $iden_start (optional)
     * @param  string $name_ca (optional)
     * @param  string $name_ca_end (optional)
     * @param  string $name_ca_exact (optional)
     * @param  string $name_ca_partial (optional)
     * @param  string $name_ca_start (optional)
     * @param  string $name_en (optional)
     * @param  string $name_en_end (optional)
     * @param  string $name_en_exact (optional)
     * @param  string $name_en_partial (optional)
     * @param  string $name_en_start (optional)
     * @param  string $name_es (optional)
     * @param  string $name_es_end (optional)
     * @param  string $name_es_exact (optional)
     * @param  string $name_es_partial (optional)
     * @param  string $name_es_start (optional)
     * @param  string $name_it (optional)
     * @param  string $name_it_end (optional)
     * @param  string $name_it_exact (optional)
     * @param  string $name_it_partial (optional)
     * @param  string $name_it_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_iden (optional)
     * @param  string $_order_name_ca (optional)
     * @param  string $_order_name_en (optional)
     * @param  string $_order_name_es (optional)
     * @param  string $_order_name_it (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLanguageCollectionRequest($id_exact = null, $iden = null, $iden_end = null, $iden_exact = null, $iden_partial = null, $iden_start = null, $name_ca = null, $name_ca_end = null, $name_ca_exact = null, $name_ca_partial = null, $name_ca_start = null, $name_en = null, $name_en_end = null, $name_en_exact = null, $name_en_partial = null, $name_en_start = null, $name_es = null, $name_es_end = null, $name_es_exact = null, $name_es_partial = null, $name_es_start = null, $name_it = null, $name_it_end = null, $name_it_exact = null, $name_it_partial = null, $name_it_start = null, $_order_id = null, $_order_iden = null, $_order_name_ca = null, $_order_name_en = null, $_order_name_es = null, $_order_name_it = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/languages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($iden !== null) {
            $queryParams['iden'] = ObjectSerializer::toQueryValue($iden);
        }
        // query params
        if ($iden_end !== null) {
            $queryParams['iden[end]'] = ObjectSerializer::toQueryValue($iden_end);
        }
        // query params
        if ($iden_exact !== null) {
            $queryParams['iden[exact]'] = ObjectSerializer::toQueryValue($iden_exact);
        }
        // query params
        if ($iden_partial !== null) {
            $queryParams['iden[partial]'] = ObjectSerializer::toQueryValue($iden_partial);
        }
        // query params
        if ($iden_start !== null) {
            $queryParams['iden[start]'] = ObjectSerializer::toQueryValue($iden_start);
        }
        // query params
        if ($name_ca !== null) {
            $queryParams['name.ca'] = ObjectSerializer::toQueryValue($name_ca);
        }
        // query params
        if ($name_ca_end !== null) {
            $queryParams['name.ca[end]'] = ObjectSerializer::toQueryValue($name_ca_end);
        }
        // query params
        if ($name_ca_exact !== null) {
            $queryParams['name.ca[exact]'] = ObjectSerializer::toQueryValue($name_ca_exact);
        }
        // query params
        if ($name_ca_partial !== null) {
            $queryParams['name.ca[partial]'] = ObjectSerializer::toQueryValue($name_ca_partial);
        }
        // query params
        if ($name_ca_start !== null) {
            $queryParams['name.ca[start]'] = ObjectSerializer::toQueryValue($name_ca_start);
        }
        // query params
        if ($name_en !== null) {
            $queryParams['name.en'] = ObjectSerializer::toQueryValue($name_en);
        }
        // query params
        if ($name_en_end !== null) {
            $queryParams['name.en[end]'] = ObjectSerializer::toQueryValue($name_en_end);
        }
        // query params
        if ($name_en_exact !== null) {
            $queryParams['name.en[exact]'] = ObjectSerializer::toQueryValue($name_en_exact);
        }
        // query params
        if ($name_en_partial !== null) {
            $queryParams['name.en[partial]'] = ObjectSerializer::toQueryValue($name_en_partial);
        }
        // query params
        if ($name_en_start !== null) {
            $queryParams['name.en[start]'] = ObjectSerializer::toQueryValue($name_en_start);
        }
        // query params
        if ($name_es !== null) {
            $queryParams['name.es'] = ObjectSerializer::toQueryValue($name_es);
        }
        // query params
        if ($name_es_end !== null) {
            $queryParams['name.es[end]'] = ObjectSerializer::toQueryValue($name_es_end);
        }
        // query params
        if ($name_es_exact !== null) {
            $queryParams['name.es[exact]'] = ObjectSerializer::toQueryValue($name_es_exact);
        }
        // query params
        if ($name_es_partial !== null) {
            $queryParams['name.es[partial]'] = ObjectSerializer::toQueryValue($name_es_partial);
        }
        // query params
        if ($name_es_start !== null) {
            $queryParams['name.es[start]'] = ObjectSerializer::toQueryValue($name_es_start);
        }
        // query params
        if ($name_it !== null) {
            $queryParams['name.it'] = ObjectSerializer::toQueryValue($name_it);
        }
        // query params
        if ($name_it_end !== null) {
            $queryParams['name.it[end]'] = ObjectSerializer::toQueryValue($name_it_end);
        }
        // query params
        if ($name_it_exact !== null) {
            $queryParams['name.it[exact]'] = ObjectSerializer::toQueryValue($name_it_exact);
        }
        // query params
        if ($name_it_partial !== null) {
            $queryParams['name.it[partial]'] = ObjectSerializer::toQueryValue($name_it_partial);
        }
        // query params
        if ($name_it_start !== null) {
            $queryParams['name.it[start]'] = ObjectSerializer::toQueryValue($name_it_start);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_iden !== null) {
            $queryParams['_order[iden]'] = ObjectSerializer::toQueryValue($_order_iden);
        }
        // query params
        if ($_order_name_ca !== null) {
            $queryParams['_order[name.ca]'] = ObjectSerializer::toQueryValue($_order_name_ca);
        }
        // query params
        if ($_order_name_en !== null) {
            $queryParams['_order[name.en]'] = ObjectSerializer::toQueryValue($_order_name_en);
        }
        // query params
        if ($_order_name_es !== null) {
            $queryParams['_order[name.es]'] = ObjectSerializer::toQueryValue($_order_name_es);
        }
        // query params
        if ($_order_name_it !== null) {
            $queryParams['_order[name.it]'] = ObjectSerializer::toQueryValue($_order_name_it);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLanguageItem
     *
     * Retrieves a Language resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\LanguageDetailed
     */
    public function getLanguageItem($id)
    {
        list($response) = $this->getLanguageItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getLanguageItemWithHttpInfo
     *
     * Retrieves a Language resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\LanguageDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLanguageItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\LanguageDetailed';
        $request = $this->getLanguageItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\LanguageDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLanguageItemAsync
     *
     * Retrieves a Language resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLanguageItemAsync($id)
    {
        return $this->getLanguageItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLanguageItemAsyncWithHttpInfo
     *
     * Retrieves a Language resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLanguageItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\LanguageDetailed';
        $request = $this->getLanguageItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLanguageItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLanguageItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getLanguageItem'
            );
        }

        $resourcePath = '/languages/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLocationCollection
     *
     * Retrieves the collection of Location resources.
     *
     * @param  int $id_exact id_exact (optional)
     * @param  string $name name (optional)
     * @param  string $name_end name_end (optional)
     * @param  string $name_exact name_exact (optional)
     * @param  string $name_partial name_partial (optional)
     * @param  string $name_start name_start (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_name _order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\LocationCollection[]
     */
    public function getLocationCollection($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getLocationCollectionWithHttpInfo($id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $_order_id, $_order_name, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getLocationCollectionWithHttpInfo
     *
     * Retrieves the collection of Location resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\LocationCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getLocationCollectionWithHttpInfo($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\LocationCollection[]';
        $request = $this->getLocationCollectionRequest($id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $_order_id, $_order_name, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\LocationCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLocationCollectionAsync
     *
     * Retrieves the collection of Location resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLocationCollectionAsync($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getLocationCollectionAsyncWithHttpInfo($id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $_order_id, $_order_name, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLocationCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of Location resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLocationCollectionAsyncWithHttpInfo($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\LocationCollection[]';
        $request = $this->getLocationCollectionRequest($id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $_order_id, $_order_name, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLocationCollection'
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLocationCollectionRequest($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/locations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_end !== null) {
            $queryParams['name[end]'] = ObjectSerializer::toQueryValue($name_end);
        }
        // query params
        if ($name_exact !== null) {
            $queryParams['name[exact]'] = ObjectSerializer::toQueryValue($name_exact);
        }
        // query params
        if ($name_partial !== null) {
            $queryParams['name[partial]'] = ObjectSerializer::toQueryValue($name_partial);
        }
        // query params
        if ($name_start !== null) {
            $queryParams['name[start]'] = ObjectSerializer::toQueryValue($name_start);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_name !== null) {
            $queryParams['_order[name]'] = ObjectSerializer::toQueryValue($_order_name);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLocationItem
     *
     * Retrieves a Location resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\LocationDetailed
     */
    public function getLocationItem($id)
    {
        list($response) = $this->getLocationItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getLocationItemWithHttpInfo
     *
     * Retrieves a Location resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\LocationDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLocationItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\LocationDetailed';
        $request = $this->getLocationItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\LocationDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLocationItemAsync
     *
     * Retrieves a Location resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLocationItemAsync($id)
    {
        return $this->getLocationItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLocationItemAsyncWithHttpInfo
     *
     * Retrieves a Location resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLocationItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\LocationDetailed';
        $request = $this->getLocationItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLocationItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLocationItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getLocationItem'
            );
        }

        $resourcePath = '/locations/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLocutionCollection
     *
     * Retrieves the collection of Locution resources.
     *
     * @param  int $id_exact id_exact (optional)
     * @param  string $name name (optional)
     * @param  string $name_end name_end (optional)
     * @param  string $name_exact name_exact (optional)
     * @param  string $name_partial name_partial (optional)
     * @param  string $name_start name_start (optional)
     * @param  string $original_file original_file (optional)
     * @param  string $original_file_base_name original_file_base_name (optional)
     * @param  string $original_file_base_name_end original_file_base_name_end (optional)
     * @param  string $original_file_base_name_exact original_file_base_name_exact (optional)
     * @param  bool $original_file_base_name_exists original_file_base_name_exists (optional)
     * @param  string $original_file_base_name_partial original_file_base_name_partial (optional)
     * @param  string $original_file_base_name_start original_file_base_name_start (optional)
     * @param  int $original_file_file_size original_file_file_size (optional)
     * @param  string $original_file_file_size_between original_file_file_size_between (optional)
     * @param  bool $original_file_file_size_exists original_file_file_size_exists (optional)
     * @param  string $original_file_file_size_gt original_file_file_size_gt (optional)
     * @param  string $original_file_file_size_gte original_file_file_size_gte (optional)
     * @param  string $original_file_file_size_lt original_file_file_size_lt (optional)
     * @param  string $original_file_file_size_lte original_file_file_size_lte (optional)
     * @param  string $original_file_mime_type original_file_mime_type (optional)
     * @param  string $original_file_mime_type_end original_file_mime_type_end (optional)
     * @param  string $original_file_mime_type_exact original_file_mime_type_exact (optional)
     * @param  bool $original_file_mime_type_exists original_file_mime_type_exists (optional)
     * @param  string $original_file_mime_type_partial original_file_mime_type_partial (optional)
     * @param  string $original_file_mime_type_start original_file_mime_type_start (optional)
     * @param  string $status status (optional)
     * @param  string $status_end status_end (optional)
     * @param  string $status_exact status_exact (optional)
     * @param  bool $status_exists status_exists (optional)
     * @param  string $status_partial status_partial (optional)
     * @param  string $status_start status_start (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_name _order_name (optional)
     * @param  string $_order_original_file_base_name _order_original_file_base_name (optional)
     * @param  string $_order_original_file_file_size _order_original_file_file_size (optional)
     * @param  string $_order_original_file_mime_type _order_original_file_mime_type (optional)
     * @param  string $_order_status _order_status (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\LocutionCollection[]
     */
    public function getLocutionCollection($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $original_file = null, $original_file_base_name = null, $original_file_base_name_end = null, $original_file_base_name_exact = null, $original_file_base_name_exists = null, $original_file_base_name_partial = null, $original_file_base_name_start = null, $original_file_file_size = null, $original_file_file_size_between = null, $original_file_file_size_exists = null, $original_file_file_size_gt = null, $original_file_file_size_gte = null, $original_file_file_size_lt = null, $original_file_file_size_lte = null, $original_file_mime_type = null, $original_file_mime_type_end = null, $original_file_mime_type_exact = null, $original_file_mime_type_exists = null, $original_file_mime_type_partial = null, $original_file_mime_type_start = null, $status = null, $status_end = null, $status_exact = null, $status_exists = null, $status_partial = null, $status_start = null, $_order_id = null, $_order_name = null, $_order_original_file_base_name = null, $_order_original_file_file_size = null, $_order_original_file_mime_type = null, $_order_status = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getLocutionCollectionWithHttpInfo($id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $original_file, $original_file_base_name, $original_file_base_name_end, $original_file_base_name_exact, $original_file_base_name_exists, $original_file_base_name_partial, $original_file_base_name_start, $original_file_file_size, $original_file_file_size_between, $original_file_file_size_exists, $original_file_file_size_gt, $original_file_file_size_gte, $original_file_file_size_lt, $original_file_file_size_lte, $original_file_mime_type, $original_file_mime_type_end, $original_file_mime_type_exact, $original_file_mime_type_exists, $original_file_mime_type_partial, $original_file_mime_type_start, $status, $status_end, $status_exact, $status_exists, $status_partial, $status_start, $_order_id, $_order_name, $_order_original_file_base_name, $_order_original_file_file_size, $_order_original_file_mime_type, $_order_status, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getLocutionCollectionWithHttpInfo
     *
     * Retrieves the collection of Locution resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $original_file (optional)
     * @param  string $original_file_base_name (optional)
     * @param  string $original_file_base_name_end (optional)
     * @param  string $original_file_base_name_exact (optional)
     * @param  bool $original_file_base_name_exists (optional)
     * @param  string $original_file_base_name_partial (optional)
     * @param  string $original_file_base_name_start (optional)
     * @param  int $original_file_file_size (optional)
     * @param  string $original_file_file_size_between (optional)
     * @param  bool $original_file_file_size_exists (optional)
     * @param  string $original_file_file_size_gt (optional)
     * @param  string $original_file_file_size_gte (optional)
     * @param  string $original_file_file_size_lt (optional)
     * @param  string $original_file_file_size_lte (optional)
     * @param  string $original_file_mime_type (optional)
     * @param  string $original_file_mime_type_end (optional)
     * @param  string $original_file_mime_type_exact (optional)
     * @param  bool $original_file_mime_type_exists (optional)
     * @param  string $original_file_mime_type_partial (optional)
     * @param  string $original_file_mime_type_start (optional)
     * @param  string $status (optional)
     * @param  string $status_end (optional)
     * @param  string $status_exact (optional)
     * @param  bool $status_exists (optional)
     * @param  string $status_partial (optional)
     * @param  string $status_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_original_file_base_name (optional)
     * @param  string $_order_original_file_file_size (optional)
     * @param  string $_order_original_file_mime_type (optional)
     * @param  string $_order_status (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\LocutionCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getLocutionCollectionWithHttpInfo($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $original_file = null, $original_file_base_name = null, $original_file_base_name_end = null, $original_file_base_name_exact = null, $original_file_base_name_exists = null, $original_file_base_name_partial = null, $original_file_base_name_start = null, $original_file_file_size = null, $original_file_file_size_between = null, $original_file_file_size_exists = null, $original_file_file_size_gt = null, $original_file_file_size_gte = null, $original_file_file_size_lt = null, $original_file_file_size_lte = null, $original_file_mime_type = null, $original_file_mime_type_end = null, $original_file_mime_type_exact = null, $original_file_mime_type_exists = null, $original_file_mime_type_partial = null, $original_file_mime_type_start = null, $status = null, $status_end = null, $status_exact = null, $status_exists = null, $status_partial = null, $status_start = null, $_order_id = null, $_order_name = null, $_order_original_file_base_name = null, $_order_original_file_file_size = null, $_order_original_file_mime_type = null, $_order_status = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\LocutionCollection[]';
        $request = $this->getLocutionCollectionRequest($id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $original_file, $original_file_base_name, $original_file_base_name_end, $original_file_base_name_exact, $original_file_base_name_exists, $original_file_base_name_partial, $original_file_base_name_start, $original_file_file_size, $original_file_file_size_between, $original_file_file_size_exists, $original_file_file_size_gt, $original_file_file_size_gte, $original_file_file_size_lt, $original_file_file_size_lte, $original_file_mime_type, $original_file_mime_type_end, $original_file_mime_type_exact, $original_file_mime_type_exists, $original_file_mime_type_partial, $original_file_mime_type_start, $status, $status_end, $status_exact, $status_exists, $status_partial, $status_start, $_order_id, $_order_name, $_order_original_file_base_name, $_order_original_file_file_size, $_order_original_file_mime_type, $_order_status, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\LocutionCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLocutionCollectionAsync
     *
     * Retrieves the collection of Locution resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $original_file (optional)
     * @param  string $original_file_base_name (optional)
     * @param  string $original_file_base_name_end (optional)
     * @param  string $original_file_base_name_exact (optional)
     * @param  bool $original_file_base_name_exists (optional)
     * @param  string $original_file_base_name_partial (optional)
     * @param  string $original_file_base_name_start (optional)
     * @param  int $original_file_file_size (optional)
     * @param  string $original_file_file_size_between (optional)
     * @param  bool $original_file_file_size_exists (optional)
     * @param  string $original_file_file_size_gt (optional)
     * @param  string $original_file_file_size_gte (optional)
     * @param  string $original_file_file_size_lt (optional)
     * @param  string $original_file_file_size_lte (optional)
     * @param  string $original_file_mime_type (optional)
     * @param  string $original_file_mime_type_end (optional)
     * @param  string $original_file_mime_type_exact (optional)
     * @param  bool $original_file_mime_type_exists (optional)
     * @param  string $original_file_mime_type_partial (optional)
     * @param  string $original_file_mime_type_start (optional)
     * @param  string $status (optional)
     * @param  string $status_end (optional)
     * @param  string $status_exact (optional)
     * @param  bool $status_exists (optional)
     * @param  string $status_partial (optional)
     * @param  string $status_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_original_file_base_name (optional)
     * @param  string $_order_original_file_file_size (optional)
     * @param  string $_order_original_file_mime_type (optional)
     * @param  string $_order_status (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLocutionCollectionAsync($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $original_file = null, $original_file_base_name = null, $original_file_base_name_end = null, $original_file_base_name_exact = null, $original_file_base_name_exists = null, $original_file_base_name_partial = null, $original_file_base_name_start = null, $original_file_file_size = null, $original_file_file_size_between = null, $original_file_file_size_exists = null, $original_file_file_size_gt = null, $original_file_file_size_gte = null, $original_file_file_size_lt = null, $original_file_file_size_lte = null, $original_file_mime_type = null, $original_file_mime_type_end = null, $original_file_mime_type_exact = null, $original_file_mime_type_exists = null, $original_file_mime_type_partial = null, $original_file_mime_type_start = null, $status = null, $status_end = null, $status_exact = null, $status_exists = null, $status_partial = null, $status_start = null, $_order_id = null, $_order_name = null, $_order_original_file_base_name = null, $_order_original_file_file_size = null, $_order_original_file_mime_type = null, $_order_status = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getLocutionCollectionAsyncWithHttpInfo($id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $original_file, $original_file_base_name, $original_file_base_name_end, $original_file_base_name_exact, $original_file_base_name_exists, $original_file_base_name_partial, $original_file_base_name_start, $original_file_file_size, $original_file_file_size_between, $original_file_file_size_exists, $original_file_file_size_gt, $original_file_file_size_gte, $original_file_file_size_lt, $original_file_file_size_lte, $original_file_mime_type, $original_file_mime_type_end, $original_file_mime_type_exact, $original_file_mime_type_exists, $original_file_mime_type_partial, $original_file_mime_type_start, $status, $status_end, $status_exact, $status_exists, $status_partial, $status_start, $_order_id, $_order_name, $_order_original_file_base_name, $_order_original_file_file_size, $_order_original_file_mime_type, $_order_status, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLocutionCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of Locution resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $original_file (optional)
     * @param  string $original_file_base_name (optional)
     * @param  string $original_file_base_name_end (optional)
     * @param  string $original_file_base_name_exact (optional)
     * @param  bool $original_file_base_name_exists (optional)
     * @param  string $original_file_base_name_partial (optional)
     * @param  string $original_file_base_name_start (optional)
     * @param  int $original_file_file_size (optional)
     * @param  string $original_file_file_size_between (optional)
     * @param  bool $original_file_file_size_exists (optional)
     * @param  string $original_file_file_size_gt (optional)
     * @param  string $original_file_file_size_gte (optional)
     * @param  string $original_file_file_size_lt (optional)
     * @param  string $original_file_file_size_lte (optional)
     * @param  string $original_file_mime_type (optional)
     * @param  string $original_file_mime_type_end (optional)
     * @param  string $original_file_mime_type_exact (optional)
     * @param  bool $original_file_mime_type_exists (optional)
     * @param  string $original_file_mime_type_partial (optional)
     * @param  string $original_file_mime_type_start (optional)
     * @param  string $status (optional)
     * @param  string $status_end (optional)
     * @param  string $status_exact (optional)
     * @param  bool $status_exists (optional)
     * @param  string $status_partial (optional)
     * @param  string $status_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_original_file_base_name (optional)
     * @param  string $_order_original_file_file_size (optional)
     * @param  string $_order_original_file_mime_type (optional)
     * @param  string $_order_status (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLocutionCollectionAsyncWithHttpInfo($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $original_file = null, $original_file_base_name = null, $original_file_base_name_end = null, $original_file_base_name_exact = null, $original_file_base_name_exists = null, $original_file_base_name_partial = null, $original_file_base_name_start = null, $original_file_file_size = null, $original_file_file_size_between = null, $original_file_file_size_exists = null, $original_file_file_size_gt = null, $original_file_file_size_gte = null, $original_file_file_size_lt = null, $original_file_file_size_lte = null, $original_file_mime_type = null, $original_file_mime_type_end = null, $original_file_mime_type_exact = null, $original_file_mime_type_exists = null, $original_file_mime_type_partial = null, $original_file_mime_type_start = null, $status = null, $status_end = null, $status_exact = null, $status_exists = null, $status_partial = null, $status_start = null, $_order_id = null, $_order_name = null, $_order_original_file_base_name = null, $_order_original_file_file_size = null, $_order_original_file_mime_type = null, $_order_status = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\LocutionCollection[]';
        $request = $this->getLocutionCollectionRequest($id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $original_file, $original_file_base_name, $original_file_base_name_end, $original_file_base_name_exact, $original_file_base_name_exists, $original_file_base_name_partial, $original_file_base_name_start, $original_file_file_size, $original_file_file_size_between, $original_file_file_size_exists, $original_file_file_size_gt, $original_file_file_size_gte, $original_file_file_size_lt, $original_file_file_size_lte, $original_file_mime_type, $original_file_mime_type_end, $original_file_mime_type_exact, $original_file_mime_type_exists, $original_file_mime_type_partial, $original_file_mime_type_start, $status, $status_end, $status_exact, $status_exists, $status_partial, $status_start, $_order_id, $_order_name, $_order_original_file_base_name, $_order_original_file_file_size, $_order_original_file_mime_type, $_order_status, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLocutionCollection'
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $original_file (optional)
     * @param  string $original_file_base_name (optional)
     * @param  string $original_file_base_name_end (optional)
     * @param  string $original_file_base_name_exact (optional)
     * @param  bool $original_file_base_name_exists (optional)
     * @param  string $original_file_base_name_partial (optional)
     * @param  string $original_file_base_name_start (optional)
     * @param  int $original_file_file_size (optional)
     * @param  string $original_file_file_size_between (optional)
     * @param  bool $original_file_file_size_exists (optional)
     * @param  string $original_file_file_size_gt (optional)
     * @param  string $original_file_file_size_gte (optional)
     * @param  string $original_file_file_size_lt (optional)
     * @param  string $original_file_file_size_lte (optional)
     * @param  string $original_file_mime_type (optional)
     * @param  string $original_file_mime_type_end (optional)
     * @param  string $original_file_mime_type_exact (optional)
     * @param  bool $original_file_mime_type_exists (optional)
     * @param  string $original_file_mime_type_partial (optional)
     * @param  string $original_file_mime_type_start (optional)
     * @param  string $status (optional)
     * @param  string $status_end (optional)
     * @param  string $status_exact (optional)
     * @param  bool $status_exists (optional)
     * @param  string $status_partial (optional)
     * @param  string $status_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_original_file_base_name (optional)
     * @param  string $_order_original_file_file_size (optional)
     * @param  string $_order_original_file_mime_type (optional)
     * @param  string $_order_status (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLocutionCollectionRequest($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $original_file = null, $original_file_base_name = null, $original_file_base_name_end = null, $original_file_base_name_exact = null, $original_file_base_name_exists = null, $original_file_base_name_partial = null, $original_file_base_name_start = null, $original_file_file_size = null, $original_file_file_size_between = null, $original_file_file_size_exists = null, $original_file_file_size_gt = null, $original_file_file_size_gte = null, $original_file_file_size_lt = null, $original_file_file_size_lte = null, $original_file_mime_type = null, $original_file_mime_type_end = null, $original_file_mime_type_exact = null, $original_file_mime_type_exists = null, $original_file_mime_type_partial = null, $original_file_mime_type_start = null, $status = null, $status_end = null, $status_exact = null, $status_exists = null, $status_partial = null, $status_start = null, $_order_id = null, $_order_name = null, $_order_original_file_base_name = null, $_order_original_file_file_size = null, $_order_original_file_mime_type = null, $_order_status = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/locutions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_end !== null) {
            $queryParams['name[end]'] = ObjectSerializer::toQueryValue($name_end);
        }
        // query params
        if ($name_exact !== null) {
            $queryParams['name[exact]'] = ObjectSerializer::toQueryValue($name_exact);
        }
        // query params
        if ($name_partial !== null) {
            $queryParams['name[partial]'] = ObjectSerializer::toQueryValue($name_partial);
        }
        // query params
        if ($name_start !== null) {
            $queryParams['name[start]'] = ObjectSerializer::toQueryValue($name_start);
        }
        // query params
        if ($original_file !== null) {
            $queryParams['originalFile'] = ObjectSerializer::toQueryValue($original_file);
        }
        // query params
        if ($original_file_base_name !== null) {
            $queryParams['originalFile.baseName'] = ObjectSerializer::toQueryValue($original_file_base_name);
        }
        // query params
        if ($original_file_base_name_end !== null) {
            $queryParams['originalFile.baseName[end]'] = ObjectSerializer::toQueryValue($original_file_base_name_end);
        }
        // query params
        if ($original_file_base_name_exact !== null) {
            $queryParams['originalFile.baseName[exact]'] = ObjectSerializer::toQueryValue($original_file_base_name_exact);
        }
        // query params
        if ($original_file_base_name_exists !== null) {
            $queryParams['originalFile.baseName[exists]'] = ObjectSerializer::toQueryValue($original_file_base_name_exists);
        }
        // query params
        if ($original_file_base_name_partial !== null) {
            $queryParams['originalFile.baseName[partial]'] = ObjectSerializer::toQueryValue($original_file_base_name_partial);
        }
        // query params
        if ($original_file_base_name_start !== null) {
            $queryParams['originalFile.baseName[start]'] = ObjectSerializer::toQueryValue($original_file_base_name_start);
        }
        // query params
        if ($original_file_file_size !== null) {
            $queryParams['originalFile.fileSize'] = ObjectSerializer::toQueryValue($original_file_file_size);
        }
        // query params
        if ($original_file_file_size_between !== null) {
            $queryParams['originalFile.fileSize[between]'] = ObjectSerializer::toQueryValue($original_file_file_size_between);
        }
        // query params
        if ($original_file_file_size_exists !== null) {
            $queryParams['originalFile.fileSize[exists]'] = ObjectSerializer::toQueryValue($original_file_file_size_exists);
        }
        // query params
        if ($original_file_file_size_gt !== null) {
            $queryParams['originalFile.fileSize[gt]'] = ObjectSerializer::toQueryValue($original_file_file_size_gt);
        }
        // query params
        if ($original_file_file_size_gte !== null) {
            $queryParams['originalFile.fileSize[gte]'] = ObjectSerializer::toQueryValue($original_file_file_size_gte);
        }
        // query params
        if ($original_file_file_size_lt !== null) {
            $queryParams['originalFile.fileSize[lt]'] = ObjectSerializer::toQueryValue($original_file_file_size_lt);
        }
        // query params
        if ($original_file_file_size_lte !== null) {
            $queryParams['originalFile.fileSize[lte]'] = ObjectSerializer::toQueryValue($original_file_file_size_lte);
        }
        // query params
        if ($original_file_mime_type !== null) {
            $queryParams['originalFile.mimeType'] = ObjectSerializer::toQueryValue($original_file_mime_type);
        }
        // query params
        if ($original_file_mime_type_end !== null) {
            $queryParams['originalFile.mimeType[end]'] = ObjectSerializer::toQueryValue($original_file_mime_type_end);
        }
        // query params
        if ($original_file_mime_type_exact !== null) {
            $queryParams['originalFile.mimeType[exact]'] = ObjectSerializer::toQueryValue($original_file_mime_type_exact);
        }
        // query params
        if ($original_file_mime_type_exists !== null) {
            $queryParams['originalFile.mimeType[exists]'] = ObjectSerializer::toQueryValue($original_file_mime_type_exists);
        }
        // query params
        if ($original_file_mime_type_partial !== null) {
            $queryParams['originalFile.mimeType[partial]'] = ObjectSerializer::toQueryValue($original_file_mime_type_partial);
        }
        // query params
        if ($original_file_mime_type_start !== null) {
            $queryParams['originalFile.mimeType[start]'] = ObjectSerializer::toQueryValue($original_file_mime_type_start);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($status_end !== null) {
            $queryParams['status[end]'] = ObjectSerializer::toQueryValue($status_end);
        }
        // query params
        if ($status_exact !== null) {
            $queryParams['status[exact]'] = ObjectSerializer::toQueryValue($status_exact);
        }
        // query params
        if ($status_exists !== null) {
            $queryParams['status[exists]'] = ObjectSerializer::toQueryValue($status_exists);
        }
        // query params
        if ($status_partial !== null) {
            $queryParams['status[partial]'] = ObjectSerializer::toQueryValue($status_partial);
        }
        // query params
        if ($status_start !== null) {
            $queryParams['status[start]'] = ObjectSerializer::toQueryValue($status_start);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_name !== null) {
            $queryParams['_order[name]'] = ObjectSerializer::toQueryValue($_order_name);
        }
        // query params
        if ($_order_original_file_base_name !== null) {
            $queryParams['_order[originalFile.baseName]'] = ObjectSerializer::toQueryValue($_order_original_file_base_name);
        }
        // query params
        if ($_order_original_file_file_size !== null) {
            $queryParams['_order[originalFile.fileSize]'] = ObjectSerializer::toQueryValue($_order_original_file_file_size);
        }
        // query params
        if ($_order_original_file_mime_type !== null) {
            $queryParams['_order[originalFile.mimeType]'] = ObjectSerializer::toQueryValue($_order_original_file_mime_type);
        }
        // query params
        if ($_order_status !== null) {
            $queryParams['_order[status]'] = ObjectSerializer::toQueryValue($_order_status);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLocutionItem
     *
     * Retrieves a Locution resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\LocutionDetailed
     */
    public function getLocutionItem($id)
    {
        list($response) = $this->getLocutionItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getLocutionItemWithHttpInfo
     *
     * Retrieves a Locution resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\LocutionDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLocutionItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\LocutionDetailed';
        $request = $this->getLocutionItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\LocutionDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLocutionItemAsync
     *
     * Retrieves a Locution resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLocutionItemAsync($id)
    {
        return $this->getLocutionItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLocutionItemAsyncWithHttpInfo
     *
     * Retrieves a Locution resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLocutionItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\LocutionDetailed';
        $request = $this->getLocutionItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLocutionItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLocutionItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getLocutionItem'
            );
        }

        $resourcePath = '/locutions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMatchListCollection
     *
     * Retrieves the collection of MatchList resources.
     *
     * @param  int $id_exact id_exact (optional)
     * @param  string $name name (optional)
     * @param  string $name_end name_end (optional)
     * @param  string $name_exact name_exact (optional)
     * @param  string $name_partial name_partial (optional)
     * @param  string $name_start name_start (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_name _order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\MatchListCollection[]
     */
    public function getMatchListCollection($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getMatchListCollectionWithHttpInfo($id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $_order_id, $_order_name, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getMatchListCollectionWithHttpInfo
     *
     * Retrieves the collection of MatchList resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\MatchListCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getMatchListCollectionWithHttpInfo($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\MatchListCollection[]';
        $request = $this->getMatchListCollectionRequest($id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $_order_id, $_order_name, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\MatchListCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMatchListCollectionAsync
     *
     * Retrieves the collection of MatchList resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMatchListCollectionAsync($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getMatchListCollectionAsyncWithHttpInfo($id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $_order_id, $_order_name, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMatchListCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of MatchList resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMatchListCollectionAsyncWithHttpInfo($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\MatchListCollection[]';
        $request = $this->getMatchListCollectionRequest($id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $_order_id, $_order_name, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMatchListCollection'
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMatchListCollectionRequest($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/match_lists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_end !== null) {
            $queryParams['name[end]'] = ObjectSerializer::toQueryValue($name_end);
        }
        // query params
        if ($name_exact !== null) {
            $queryParams['name[exact]'] = ObjectSerializer::toQueryValue($name_exact);
        }
        // query params
        if ($name_partial !== null) {
            $queryParams['name[partial]'] = ObjectSerializer::toQueryValue($name_partial);
        }
        // query params
        if ($name_start !== null) {
            $queryParams['name[start]'] = ObjectSerializer::toQueryValue($name_start);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_name !== null) {
            $queryParams['_order[name]'] = ObjectSerializer::toQueryValue($_order_name);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMatchListItem
     *
     * Retrieves a MatchList resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\MatchListDetailed
     */
    public function getMatchListItem($id)
    {
        list($response) = $this->getMatchListItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getMatchListItemWithHttpInfo
     *
     * Retrieves a MatchList resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\MatchListDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMatchListItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\MatchListDetailed';
        $request = $this->getMatchListItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\MatchListDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMatchListItemAsync
     *
     * Retrieves a MatchList resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMatchListItemAsync($id)
    {
        return $this->getMatchListItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMatchListItemAsyncWithHttpInfo
     *
     * Retrieves a MatchList resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMatchListItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\MatchListDetailed';
        $request = $this->getMatchListItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMatchListItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMatchListItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getMatchListItem'
            );
        }

        $resourcePath = '/match_lists/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMatchListPatternCollection
     *
     * Retrieves the collection of MatchListPattern resources.
     *
     * @param  string $description description (optional)
     * @param  string $description_end description_end (optional)
     * @param  string $description_exact description_exact (optional)
     * @param  bool $description_exists description_exists (optional)
     * @param  string $description_partial description_partial (optional)
     * @param  string $description_start description_start (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $match_list match_list (optional)
     * @param  string $match_list2 match_list2 (optional)
     * @param  string $number_country number_country (optional)
     * @param  string $number_country2 number_country2 (optional)
     * @param  bool $number_country_exists number_country_exists (optional)
     * @param  string $numbervalue numbervalue (optional)
     * @param  string $numbervalue_end numbervalue_end (optional)
     * @param  string $numbervalue_exact numbervalue_exact (optional)
     * @param  bool $numbervalue_exists numbervalue_exists (optional)
     * @param  string $numbervalue_partial numbervalue_partial (optional)
     * @param  string $numbervalue_start numbervalue_start (optional)
     * @param  string $regexp regexp (optional)
     * @param  string $regexp_end regexp_end (optional)
     * @param  string $regexp_exact regexp_exact (optional)
     * @param  bool $regexp_exists regexp_exists (optional)
     * @param  string $regexp_partial regexp_partial (optional)
     * @param  string $regexp_start regexp_start (optional)
     * @param  string $type type (optional)
     * @param  string $type_end type_end (optional)
     * @param  string $type_exact type_exact (optional)
     * @param  string $type_partial type_partial (optional)
     * @param  string $type_start type_start (optional)
     * @param  string $_order_description _order_description (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_numbervalue _order_numbervalue (optional)
     * @param  string $_order_regexp _order_regexp (optional)
     * @param  string $_order_type _order_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\MatchListPatternCollection[]
     */
    public function getMatchListPatternCollection($description = null, $description_end = null, $description_exact = null, $description_exists = null, $description_partial = null, $description_start = null, $id_exact = null, $match_list = null, $match_list2 = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $numbervalue = null, $numbervalue_end = null, $numbervalue_exact = null, $numbervalue_exists = null, $numbervalue_partial = null, $numbervalue_start = null, $regexp = null, $regexp_end = null, $regexp_exact = null, $regexp_exists = null, $regexp_partial = null, $regexp_start = null, $type = null, $type_end = null, $type_exact = null, $type_partial = null, $type_start = null, $_order_description = null, $_order_id = null, $_order_numbervalue = null, $_order_regexp = null, $_order_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getMatchListPatternCollectionWithHttpInfo($description, $description_end, $description_exact, $description_exists, $description_partial, $description_start, $id_exact, $match_list, $match_list2, $number_country, $number_country2, $number_country_exists, $numbervalue, $numbervalue_end, $numbervalue_exact, $numbervalue_exists, $numbervalue_partial, $numbervalue_start, $regexp, $regexp_end, $regexp_exact, $regexp_exists, $regexp_partial, $regexp_start, $type, $type_end, $type_exact, $type_partial, $type_start, $_order_description, $_order_id, $_order_numbervalue, $_order_regexp, $_order_type, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getMatchListPatternCollectionWithHttpInfo
     *
     * Retrieves the collection of MatchListPattern resources.
     *
     * @param  string $description (optional)
     * @param  string $description_end (optional)
     * @param  string $description_exact (optional)
     * @param  bool $description_exists (optional)
     * @param  string $description_partial (optional)
     * @param  string $description_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $match_list (optional)
     * @param  string $match_list2 (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $numbervalue (optional)
     * @param  string $numbervalue_end (optional)
     * @param  string $numbervalue_exact (optional)
     * @param  bool $numbervalue_exists (optional)
     * @param  string $numbervalue_partial (optional)
     * @param  string $numbervalue_start (optional)
     * @param  string $regexp (optional)
     * @param  string $regexp_end (optional)
     * @param  string $regexp_exact (optional)
     * @param  bool $regexp_exists (optional)
     * @param  string $regexp_partial (optional)
     * @param  string $regexp_start (optional)
     * @param  string $type (optional)
     * @param  string $type_end (optional)
     * @param  string $type_exact (optional)
     * @param  string $type_partial (optional)
     * @param  string $type_start (optional)
     * @param  string $_order_description (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_numbervalue (optional)
     * @param  string $_order_regexp (optional)
     * @param  string $_order_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\MatchListPatternCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getMatchListPatternCollectionWithHttpInfo($description = null, $description_end = null, $description_exact = null, $description_exists = null, $description_partial = null, $description_start = null, $id_exact = null, $match_list = null, $match_list2 = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $numbervalue = null, $numbervalue_end = null, $numbervalue_exact = null, $numbervalue_exists = null, $numbervalue_partial = null, $numbervalue_start = null, $regexp = null, $regexp_end = null, $regexp_exact = null, $regexp_exists = null, $regexp_partial = null, $regexp_start = null, $type = null, $type_end = null, $type_exact = null, $type_partial = null, $type_start = null, $_order_description = null, $_order_id = null, $_order_numbervalue = null, $_order_regexp = null, $_order_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\MatchListPatternCollection[]';
        $request = $this->getMatchListPatternCollectionRequest($description, $description_end, $description_exact, $description_exists, $description_partial, $description_start, $id_exact, $match_list, $match_list2, $number_country, $number_country2, $number_country_exists, $numbervalue, $numbervalue_end, $numbervalue_exact, $numbervalue_exists, $numbervalue_partial, $numbervalue_start, $regexp, $regexp_end, $regexp_exact, $regexp_exists, $regexp_partial, $regexp_start, $type, $type_end, $type_exact, $type_partial, $type_start, $_order_description, $_order_id, $_order_numbervalue, $_order_regexp, $_order_type, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\MatchListPatternCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMatchListPatternCollectionAsync
     *
     * Retrieves the collection of MatchListPattern resources.
     *
     * @param  string $description (optional)
     * @param  string $description_end (optional)
     * @param  string $description_exact (optional)
     * @param  bool $description_exists (optional)
     * @param  string $description_partial (optional)
     * @param  string $description_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $match_list (optional)
     * @param  string $match_list2 (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $numbervalue (optional)
     * @param  string $numbervalue_end (optional)
     * @param  string $numbervalue_exact (optional)
     * @param  bool $numbervalue_exists (optional)
     * @param  string $numbervalue_partial (optional)
     * @param  string $numbervalue_start (optional)
     * @param  string $regexp (optional)
     * @param  string $regexp_end (optional)
     * @param  string $regexp_exact (optional)
     * @param  bool $regexp_exists (optional)
     * @param  string $regexp_partial (optional)
     * @param  string $regexp_start (optional)
     * @param  string $type (optional)
     * @param  string $type_end (optional)
     * @param  string $type_exact (optional)
     * @param  string $type_partial (optional)
     * @param  string $type_start (optional)
     * @param  string $_order_description (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_numbervalue (optional)
     * @param  string $_order_regexp (optional)
     * @param  string $_order_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMatchListPatternCollectionAsync($description = null, $description_end = null, $description_exact = null, $description_exists = null, $description_partial = null, $description_start = null, $id_exact = null, $match_list = null, $match_list2 = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $numbervalue = null, $numbervalue_end = null, $numbervalue_exact = null, $numbervalue_exists = null, $numbervalue_partial = null, $numbervalue_start = null, $regexp = null, $regexp_end = null, $regexp_exact = null, $regexp_exists = null, $regexp_partial = null, $regexp_start = null, $type = null, $type_end = null, $type_exact = null, $type_partial = null, $type_start = null, $_order_description = null, $_order_id = null, $_order_numbervalue = null, $_order_regexp = null, $_order_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getMatchListPatternCollectionAsyncWithHttpInfo($description, $description_end, $description_exact, $description_exists, $description_partial, $description_start, $id_exact, $match_list, $match_list2, $number_country, $number_country2, $number_country_exists, $numbervalue, $numbervalue_end, $numbervalue_exact, $numbervalue_exists, $numbervalue_partial, $numbervalue_start, $regexp, $regexp_end, $regexp_exact, $regexp_exists, $regexp_partial, $regexp_start, $type, $type_end, $type_exact, $type_partial, $type_start, $_order_description, $_order_id, $_order_numbervalue, $_order_regexp, $_order_type, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMatchListPatternCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of MatchListPattern resources.
     *
     * @param  string $description (optional)
     * @param  string $description_end (optional)
     * @param  string $description_exact (optional)
     * @param  bool $description_exists (optional)
     * @param  string $description_partial (optional)
     * @param  string $description_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $match_list (optional)
     * @param  string $match_list2 (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $numbervalue (optional)
     * @param  string $numbervalue_end (optional)
     * @param  string $numbervalue_exact (optional)
     * @param  bool $numbervalue_exists (optional)
     * @param  string $numbervalue_partial (optional)
     * @param  string $numbervalue_start (optional)
     * @param  string $regexp (optional)
     * @param  string $regexp_end (optional)
     * @param  string $regexp_exact (optional)
     * @param  bool $regexp_exists (optional)
     * @param  string $regexp_partial (optional)
     * @param  string $regexp_start (optional)
     * @param  string $type (optional)
     * @param  string $type_end (optional)
     * @param  string $type_exact (optional)
     * @param  string $type_partial (optional)
     * @param  string $type_start (optional)
     * @param  string $_order_description (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_numbervalue (optional)
     * @param  string $_order_regexp (optional)
     * @param  string $_order_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMatchListPatternCollectionAsyncWithHttpInfo($description = null, $description_end = null, $description_exact = null, $description_exists = null, $description_partial = null, $description_start = null, $id_exact = null, $match_list = null, $match_list2 = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $numbervalue = null, $numbervalue_end = null, $numbervalue_exact = null, $numbervalue_exists = null, $numbervalue_partial = null, $numbervalue_start = null, $regexp = null, $regexp_end = null, $regexp_exact = null, $regexp_exists = null, $regexp_partial = null, $regexp_start = null, $type = null, $type_end = null, $type_exact = null, $type_partial = null, $type_start = null, $_order_description = null, $_order_id = null, $_order_numbervalue = null, $_order_regexp = null, $_order_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\MatchListPatternCollection[]';
        $request = $this->getMatchListPatternCollectionRequest($description, $description_end, $description_exact, $description_exists, $description_partial, $description_start, $id_exact, $match_list, $match_list2, $number_country, $number_country2, $number_country_exists, $numbervalue, $numbervalue_end, $numbervalue_exact, $numbervalue_exists, $numbervalue_partial, $numbervalue_start, $regexp, $regexp_end, $regexp_exact, $regexp_exists, $regexp_partial, $regexp_start, $type, $type_end, $type_exact, $type_partial, $type_start, $_order_description, $_order_id, $_order_numbervalue, $_order_regexp, $_order_type, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMatchListPatternCollection'
     *
     * @param  string $description (optional)
     * @param  string $description_end (optional)
     * @param  string $description_exact (optional)
     * @param  bool $description_exists (optional)
     * @param  string $description_partial (optional)
     * @param  string $description_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $match_list (optional)
     * @param  string $match_list2 (optional)
     * @param  string $number_country (optional)
     * @param  string $number_country2 (optional)
     * @param  bool $number_country_exists (optional)
     * @param  string $numbervalue (optional)
     * @param  string $numbervalue_end (optional)
     * @param  string $numbervalue_exact (optional)
     * @param  bool $numbervalue_exists (optional)
     * @param  string $numbervalue_partial (optional)
     * @param  string $numbervalue_start (optional)
     * @param  string $regexp (optional)
     * @param  string $regexp_end (optional)
     * @param  string $regexp_exact (optional)
     * @param  bool $regexp_exists (optional)
     * @param  string $regexp_partial (optional)
     * @param  string $regexp_start (optional)
     * @param  string $type (optional)
     * @param  string $type_end (optional)
     * @param  string $type_exact (optional)
     * @param  string $type_partial (optional)
     * @param  string $type_start (optional)
     * @param  string $_order_description (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_numbervalue (optional)
     * @param  string $_order_regexp (optional)
     * @param  string $_order_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMatchListPatternCollectionRequest($description = null, $description_end = null, $description_exact = null, $description_exists = null, $description_partial = null, $description_start = null, $id_exact = null, $match_list = null, $match_list2 = null, $number_country = null, $number_country2 = null, $number_country_exists = null, $numbervalue = null, $numbervalue_end = null, $numbervalue_exact = null, $numbervalue_exists = null, $numbervalue_partial = null, $numbervalue_start = null, $regexp = null, $regexp_end = null, $regexp_exact = null, $regexp_exists = null, $regexp_partial = null, $regexp_start = null, $type = null, $type_end = null, $type_exact = null, $type_partial = null, $type_start = null, $_order_description = null, $_order_id = null, $_order_numbervalue = null, $_order_regexp = null, $_order_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/match_list_patterns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($description !== null) {
            $queryParams['description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($description_end !== null) {
            $queryParams['description[end]'] = ObjectSerializer::toQueryValue($description_end);
        }
        // query params
        if ($description_exact !== null) {
            $queryParams['description[exact]'] = ObjectSerializer::toQueryValue($description_exact);
        }
        // query params
        if ($description_exists !== null) {
            $queryParams['description[exists]'] = ObjectSerializer::toQueryValue($description_exists);
        }
        // query params
        if ($description_partial !== null) {
            $queryParams['description[partial]'] = ObjectSerializer::toQueryValue($description_partial);
        }
        // query params
        if ($description_start !== null) {
            $queryParams['description[start]'] = ObjectSerializer::toQueryValue($description_start);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($match_list !== null) {
            $queryParams['matchList'] = ObjectSerializer::toQueryValue($match_list);
        }
        // query params
        if ($match_list2 !== null) {
            $queryParams['matchList[]'] = ObjectSerializer::toQueryValue($match_list2);
        }
        // query params
        if ($number_country !== null) {
            $queryParams['numberCountry'] = ObjectSerializer::toQueryValue($number_country);
        }
        // query params
        if ($number_country2 !== null) {
            $queryParams['numberCountry[]'] = ObjectSerializer::toQueryValue($number_country2);
        }
        // query params
        if ($number_country_exists !== null) {
            $queryParams['numberCountry[exists]'] = ObjectSerializer::toQueryValue($number_country_exists);
        }
        // query params
        if ($numbervalue !== null) {
            $queryParams['numbervalue'] = ObjectSerializer::toQueryValue($numbervalue);
        }
        // query params
        if ($numbervalue_end !== null) {
            $queryParams['numbervalue[end]'] = ObjectSerializer::toQueryValue($numbervalue_end);
        }
        // query params
        if ($numbervalue_exact !== null) {
            $queryParams['numbervalue[exact]'] = ObjectSerializer::toQueryValue($numbervalue_exact);
        }
        // query params
        if ($numbervalue_exists !== null) {
            $queryParams['numbervalue[exists]'] = ObjectSerializer::toQueryValue($numbervalue_exists);
        }
        // query params
        if ($numbervalue_partial !== null) {
            $queryParams['numbervalue[partial]'] = ObjectSerializer::toQueryValue($numbervalue_partial);
        }
        // query params
        if ($numbervalue_start !== null) {
            $queryParams['numbervalue[start]'] = ObjectSerializer::toQueryValue($numbervalue_start);
        }
        // query params
        if ($regexp !== null) {
            $queryParams['regexp'] = ObjectSerializer::toQueryValue($regexp);
        }
        // query params
        if ($regexp_end !== null) {
            $queryParams['regexp[end]'] = ObjectSerializer::toQueryValue($regexp_end);
        }
        // query params
        if ($regexp_exact !== null) {
            $queryParams['regexp[exact]'] = ObjectSerializer::toQueryValue($regexp_exact);
        }
        // query params
        if ($regexp_exists !== null) {
            $queryParams['regexp[exists]'] = ObjectSerializer::toQueryValue($regexp_exists);
        }
        // query params
        if ($regexp_partial !== null) {
            $queryParams['regexp[partial]'] = ObjectSerializer::toQueryValue($regexp_partial);
        }
        // query params
        if ($regexp_start !== null) {
            $queryParams['regexp[start]'] = ObjectSerializer::toQueryValue($regexp_start);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($type_end !== null) {
            $queryParams['type[end]'] = ObjectSerializer::toQueryValue($type_end);
        }
        // query params
        if ($type_exact !== null) {
            $queryParams['type[exact]'] = ObjectSerializer::toQueryValue($type_exact);
        }
        // query params
        if ($type_partial !== null) {
            $queryParams['type[partial]'] = ObjectSerializer::toQueryValue($type_partial);
        }
        // query params
        if ($type_start !== null) {
            $queryParams['type[start]'] = ObjectSerializer::toQueryValue($type_start);
        }
        // query params
        if ($_order_description !== null) {
            $queryParams['_order[description]'] = ObjectSerializer::toQueryValue($_order_description);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_numbervalue !== null) {
            $queryParams['_order[numbervalue]'] = ObjectSerializer::toQueryValue($_order_numbervalue);
        }
        // query params
        if ($_order_regexp !== null) {
            $queryParams['_order[regexp]'] = ObjectSerializer::toQueryValue($_order_regexp);
        }
        // query params
        if ($_order_type !== null) {
            $queryParams['_order[type]'] = ObjectSerializer::toQueryValue($_order_type);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMatchListPatternItem
     *
     * Retrieves a MatchListPattern resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\MatchListPatternDetailed
     */
    public function getMatchListPatternItem($id)
    {
        list($response) = $this->getMatchListPatternItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getMatchListPatternItemWithHttpInfo
     *
     * Retrieves a MatchListPattern resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\MatchListPatternDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMatchListPatternItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\MatchListPatternDetailed';
        $request = $this->getMatchListPatternItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\MatchListPatternDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMatchListPatternItemAsync
     *
     * Retrieves a MatchListPattern resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMatchListPatternItemAsync($id)
    {
        return $this->getMatchListPatternItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMatchListPatternItemAsyncWithHttpInfo
     *
     * Retrieves a MatchListPattern resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMatchListPatternItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\MatchListPatternDetailed';
        $request = $this->getMatchListPatternItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMatchListPatternItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMatchListPatternItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getMatchListPatternItem'
            );
        }

        $resourcePath = '/match_list_patterns/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMusicOnHoldCollection
     *
     * Retrieves the collection of MusicOnHold resources.
     *
     * @param  int $id_exact id_exact (optional)
     * @param  string $name name (optional)
     * @param  string $name_end name_end (optional)
     * @param  string $name_exact name_exact (optional)
     * @param  string $name_partial name_partial (optional)
     * @param  string $name_start name_start (optional)
     * @param  string $original_file_base_name original_file_base_name (optional)
     * @param  string $original_file_base_name_end original_file_base_name_end (optional)
     * @param  string $original_file_base_name_exact original_file_base_name_exact (optional)
     * @param  bool $original_file_base_name_exists original_file_base_name_exists (optional)
     * @param  string $original_file_base_name_partial original_file_base_name_partial (optional)
     * @param  string $original_file_base_name_start original_file_base_name_start (optional)
     * @param  int $original_file_file_size original_file_file_size (optional)
     * @param  string $original_file_file_size_between original_file_file_size_between (optional)
     * @param  bool $original_file_file_size_exists original_file_file_size_exists (optional)
     * @param  string $original_file_file_size_gt original_file_file_size_gt (optional)
     * @param  string $original_file_file_size_gte original_file_file_size_gte (optional)
     * @param  string $original_file_file_size_lt original_file_file_size_lt (optional)
     * @param  string $original_file_file_size_lte original_file_file_size_lte (optional)
     * @param  string $original_file_mime_type original_file_mime_type (optional)
     * @param  string $original_file_mime_type_end original_file_mime_type_end (optional)
     * @param  string $original_file_mime_type_exact original_file_mime_type_exact (optional)
     * @param  bool $original_file_mime_type_exists original_file_mime_type_exists (optional)
     * @param  string $original_file_mime_type_partial original_file_mime_type_partial (optional)
     * @param  string $original_file_mime_type_start original_file_mime_type_start (optional)
     * @param  string $status status (optional)
     * @param  string $status_end status_end (optional)
     * @param  string $status_exact status_exact (optional)
     * @param  bool $status_exists status_exists (optional)
     * @param  string $status_partial status_partial (optional)
     * @param  string $status_start status_start (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_name _order_name (optional)
     * @param  string $_order_original_file_base_name _order_original_file_base_name (optional)
     * @param  string $_order_original_file_file_size _order_original_file_file_size (optional)
     * @param  string $_order_original_file_mime_type _order_original_file_mime_type (optional)
     * @param  string $_order_status _order_status (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\MusicOnHoldCollection[]
     */
    public function getMusicOnHoldCollection($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $original_file_base_name = null, $original_file_base_name_end = null, $original_file_base_name_exact = null, $original_file_base_name_exists = null, $original_file_base_name_partial = null, $original_file_base_name_start = null, $original_file_file_size = null, $original_file_file_size_between = null, $original_file_file_size_exists = null, $original_file_file_size_gt = null, $original_file_file_size_gte = null, $original_file_file_size_lt = null, $original_file_file_size_lte = null, $original_file_mime_type = null, $original_file_mime_type_end = null, $original_file_mime_type_exact = null, $original_file_mime_type_exists = null, $original_file_mime_type_partial = null, $original_file_mime_type_start = null, $status = null, $status_end = null, $status_exact = null, $status_exists = null, $status_partial = null, $status_start = null, $_order_id = null, $_order_name = null, $_order_original_file_base_name = null, $_order_original_file_file_size = null, $_order_original_file_mime_type = null, $_order_status = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getMusicOnHoldCollectionWithHttpInfo($id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $original_file_base_name, $original_file_base_name_end, $original_file_base_name_exact, $original_file_base_name_exists, $original_file_base_name_partial, $original_file_base_name_start, $original_file_file_size, $original_file_file_size_between, $original_file_file_size_exists, $original_file_file_size_gt, $original_file_file_size_gte, $original_file_file_size_lt, $original_file_file_size_lte, $original_file_mime_type, $original_file_mime_type_end, $original_file_mime_type_exact, $original_file_mime_type_exists, $original_file_mime_type_partial, $original_file_mime_type_start, $status, $status_end, $status_exact, $status_exists, $status_partial, $status_start, $_order_id, $_order_name, $_order_original_file_base_name, $_order_original_file_file_size, $_order_original_file_mime_type, $_order_status, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getMusicOnHoldCollectionWithHttpInfo
     *
     * Retrieves the collection of MusicOnHold resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $original_file_base_name (optional)
     * @param  string $original_file_base_name_end (optional)
     * @param  string $original_file_base_name_exact (optional)
     * @param  bool $original_file_base_name_exists (optional)
     * @param  string $original_file_base_name_partial (optional)
     * @param  string $original_file_base_name_start (optional)
     * @param  int $original_file_file_size (optional)
     * @param  string $original_file_file_size_between (optional)
     * @param  bool $original_file_file_size_exists (optional)
     * @param  string $original_file_file_size_gt (optional)
     * @param  string $original_file_file_size_gte (optional)
     * @param  string $original_file_file_size_lt (optional)
     * @param  string $original_file_file_size_lte (optional)
     * @param  string $original_file_mime_type (optional)
     * @param  string $original_file_mime_type_end (optional)
     * @param  string $original_file_mime_type_exact (optional)
     * @param  bool $original_file_mime_type_exists (optional)
     * @param  string $original_file_mime_type_partial (optional)
     * @param  string $original_file_mime_type_start (optional)
     * @param  string $status (optional)
     * @param  string $status_end (optional)
     * @param  string $status_exact (optional)
     * @param  bool $status_exists (optional)
     * @param  string $status_partial (optional)
     * @param  string $status_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_original_file_base_name (optional)
     * @param  string $_order_original_file_file_size (optional)
     * @param  string $_order_original_file_mime_type (optional)
     * @param  string $_order_status (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\MusicOnHoldCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getMusicOnHoldCollectionWithHttpInfo($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $original_file_base_name = null, $original_file_base_name_end = null, $original_file_base_name_exact = null, $original_file_base_name_exists = null, $original_file_base_name_partial = null, $original_file_base_name_start = null, $original_file_file_size = null, $original_file_file_size_between = null, $original_file_file_size_exists = null, $original_file_file_size_gt = null, $original_file_file_size_gte = null, $original_file_file_size_lt = null, $original_file_file_size_lte = null, $original_file_mime_type = null, $original_file_mime_type_end = null, $original_file_mime_type_exact = null, $original_file_mime_type_exists = null, $original_file_mime_type_partial = null, $original_file_mime_type_start = null, $status = null, $status_end = null, $status_exact = null, $status_exists = null, $status_partial = null, $status_start = null, $_order_id = null, $_order_name = null, $_order_original_file_base_name = null, $_order_original_file_file_size = null, $_order_original_file_mime_type = null, $_order_status = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\MusicOnHoldCollection[]';
        $request = $this->getMusicOnHoldCollectionRequest($id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $original_file_base_name, $original_file_base_name_end, $original_file_base_name_exact, $original_file_base_name_exists, $original_file_base_name_partial, $original_file_base_name_start, $original_file_file_size, $original_file_file_size_between, $original_file_file_size_exists, $original_file_file_size_gt, $original_file_file_size_gte, $original_file_file_size_lt, $original_file_file_size_lte, $original_file_mime_type, $original_file_mime_type_end, $original_file_mime_type_exact, $original_file_mime_type_exists, $original_file_mime_type_partial, $original_file_mime_type_start, $status, $status_end, $status_exact, $status_exists, $status_partial, $status_start, $_order_id, $_order_name, $_order_original_file_base_name, $_order_original_file_file_size, $_order_original_file_mime_type, $_order_status, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\MusicOnHoldCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMusicOnHoldCollectionAsync
     *
     * Retrieves the collection of MusicOnHold resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $original_file_base_name (optional)
     * @param  string $original_file_base_name_end (optional)
     * @param  string $original_file_base_name_exact (optional)
     * @param  bool $original_file_base_name_exists (optional)
     * @param  string $original_file_base_name_partial (optional)
     * @param  string $original_file_base_name_start (optional)
     * @param  int $original_file_file_size (optional)
     * @param  string $original_file_file_size_between (optional)
     * @param  bool $original_file_file_size_exists (optional)
     * @param  string $original_file_file_size_gt (optional)
     * @param  string $original_file_file_size_gte (optional)
     * @param  string $original_file_file_size_lt (optional)
     * @param  string $original_file_file_size_lte (optional)
     * @param  string $original_file_mime_type (optional)
     * @param  string $original_file_mime_type_end (optional)
     * @param  string $original_file_mime_type_exact (optional)
     * @param  bool $original_file_mime_type_exists (optional)
     * @param  string $original_file_mime_type_partial (optional)
     * @param  string $original_file_mime_type_start (optional)
     * @param  string $status (optional)
     * @param  string $status_end (optional)
     * @param  string $status_exact (optional)
     * @param  bool $status_exists (optional)
     * @param  string $status_partial (optional)
     * @param  string $status_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_original_file_base_name (optional)
     * @param  string $_order_original_file_file_size (optional)
     * @param  string $_order_original_file_mime_type (optional)
     * @param  string $_order_status (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMusicOnHoldCollectionAsync($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $original_file_base_name = null, $original_file_base_name_end = null, $original_file_base_name_exact = null, $original_file_base_name_exists = null, $original_file_base_name_partial = null, $original_file_base_name_start = null, $original_file_file_size = null, $original_file_file_size_between = null, $original_file_file_size_exists = null, $original_file_file_size_gt = null, $original_file_file_size_gte = null, $original_file_file_size_lt = null, $original_file_file_size_lte = null, $original_file_mime_type = null, $original_file_mime_type_end = null, $original_file_mime_type_exact = null, $original_file_mime_type_exists = null, $original_file_mime_type_partial = null, $original_file_mime_type_start = null, $status = null, $status_end = null, $status_exact = null, $status_exists = null, $status_partial = null, $status_start = null, $_order_id = null, $_order_name = null, $_order_original_file_base_name = null, $_order_original_file_file_size = null, $_order_original_file_mime_type = null, $_order_status = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getMusicOnHoldCollectionAsyncWithHttpInfo($id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $original_file_base_name, $original_file_base_name_end, $original_file_base_name_exact, $original_file_base_name_exists, $original_file_base_name_partial, $original_file_base_name_start, $original_file_file_size, $original_file_file_size_between, $original_file_file_size_exists, $original_file_file_size_gt, $original_file_file_size_gte, $original_file_file_size_lt, $original_file_file_size_lte, $original_file_mime_type, $original_file_mime_type_end, $original_file_mime_type_exact, $original_file_mime_type_exists, $original_file_mime_type_partial, $original_file_mime_type_start, $status, $status_end, $status_exact, $status_exists, $status_partial, $status_start, $_order_id, $_order_name, $_order_original_file_base_name, $_order_original_file_file_size, $_order_original_file_mime_type, $_order_status, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMusicOnHoldCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of MusicOnHold resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $original_file_base_name (optional)
     * @param  string $original_file_base_name_end (optional)
     * @param  string $original_file_base_name_exact (optional)
     * @param  bool $original_file_base_name_exists (optional)
     * @param  string $original_file_base_name_partial (optional)
     * @param  string $original_file_base_name_start (optional)
     * @param  int $original_file_file_size (optional)
     * @param  string $original_file_file_size_between (optional)
     * @param  bool $original_file_file_size_exists (optional)
     * @param  string $original_file_file_size_gt (optional)
     * @param  string $original_file_file_size_gte (optional)
     * @param  string $original_file_file_size_lt (optional)
     * @param  string $original_file_file_size_lte (optional)
     * @param  string $original_file_mime_type (optional)
     * @param  string $original_file_mime_type_end (optional)
     * @param  string $original_file_mime_type_exact (optional)
     * @param  bool $original_file_mime_type_exists (optional)
     * @param  string $original_file_mime_type_partial (optional)
     * @param  string $original_file_mime_type_start (optional)
     * @param  string $status (optional)
     * @param  string $status_end (optional)
     * @param  string $status_exact (optional)
     * @param  bool $status_exists (optional)
     * @param  string $status_partial (optional)
     * @param  string $status_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_original_file_base_name (optional)
     * @param  string $_order_original_file_file_size (optional)
     * @param  string $_order_original_file_mime_type (optional)
     * @param  string $_order_status (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMusicOnHoldCollectionAsyncWithHttpInfo($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $original_file_base_name = null, $original_file_base_name_end = null, $original_file_base_name_exact = null, $original_file_base_name_exists = null, $original_file_base_name_partial = null, $original_file_base_name_start = null, $original_file_file_size = null, $original_file_file_size_between = null, $original_file_file_size_exists = null, $original_file_file_size_gt = null, $original_file_file_size_gte = null, $original_file_file_size_lt = null, $original_file_file_size_lte = null, $original_file_mime_type = null, $original_file_mime_type_end = null, $original_file_mime_type_exact = null, $original_file_mime_type_exists = null, $original_file_mime_type_partial = null, $original_file_mime_type_start = null, $status = null, $status_end = null, $status_exact = null, $status_exists = null, $status_partial = null, $status_start = null, $_order_id = null, $_order_name = null, $_order_original_file_base_name = null, $_order_original_file_file_size = null, $_order_original_file_mime_type = null, $_order_status = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\MusicOnHoldCollection[]';
        $request = $this->getMusicOnHoldCollectionRequest($id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $original_file_base_name, $original_file_base_name_end, $original_file_base_name_exact, $original_file_base_name_exists, $original_file_base_name_partial, $original_file_base_name_start, $original_file_file_size, $original_file_file_size_between, $original_file_file_size_exists, $original_file_file_size_gt, $original_file_file_size_gte, $original_file_file_size_lt, $original_file_file_size_lte, $original_file_mime_type, $original_file_mime_type_end, $original_file_mime_type_exact, $original_file_mime_type_exists, $original_file_mime_type_partial, $original_file_mime_type_start, $status, $status_end, $status_exact, $status_exists, $status_partial, $status_start, $_order_id, $_order_name, $_order_original_file_base_name, $_order_original_file_file_size, $_order_original_file_mime_type, $_order_status, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMusicOnHoldCollection'
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $original_file_base_name (optional)
     * @param  string $original_file_base_name_end (optional)
     * @param  string $original_file_base_name_exact (optional)
     * @param  bool $original_file_base_name_exists (optional)
     * @param  string $original_file_base_name_partial (optional)
     * @param  string $original_file_base_name_start (optional)
     * @param  int $original_file_file_size (optional)
     * @param  string $original_file_file_size_between (optional)
     * @param  bool $original_file_file_size_exists (optional)
     * @param  string $original_file_file_size_gt (optional)
     * @param  string $original_file_file_size_gte (optional)
     * @param  string $original_file_file_size_lt (optional)
     * @param  string $original_file_file_size_lte (optional)
     * @param  string $original_file_mime_type (optional)
     * @param  string $original_file_mime_type_end (optional)
     * @param  string $original_file_mime_type_exact (optional)
     * @param  bool $original_file_mime_type_exists (optional)
     * @param  string $original_file_mime_type_partial (optional)
     * @param  string $original_file_mime_type_start (optional)
     * @param  string $status (optional)
     * @param  string $status_end (optional)
     * @param  string $status_exact (optional)
     * @param  bool $status_exists (optional)
     * @param  string $status_partial (optional)
     * @param  string $status_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_original_file_base_name (optional)
     * @param  string $_order_original_file_file_size (optional)
     * @param  string $_order_original_file_mime_type (optional)
     * @param  string $_order_status (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMusicOnHoldCollectionRequest($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $original_file_base_name = null, $original_file_base_name_end = null, $original_file_base_name_exact = null, $original_file_base_name_exists = null, $original_file_base_name_partial = null, $original_file_base_name_start = null, $original_file_file_size = null, $original_file_file_size_between = null, $original_file_file_size_exists = null, $original_file_file_size_gt = null, $original_file_file_size_gte = null, $original_file_file_size_lt = null, $original_file_file_size_lte = null, $original_file_mime_type = null, $original_file_mime_type_end = null, $original_file_mime_type_exact = null, $original_file_mime_type_exists = null, $original_file_mime_type_partial = null, $original_file_mime_type_start = null, $status = null, $status_end = null, $status_exact = null, $status_exists = null, $status_partial = null, $status_start = null, $_order_id = null, $_order_name = null, $_order_original_file_base_name = null, $_order_original_file_file_size = null, $_order_original_file_mime_type = null, $_order_status = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/music_on_holds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_end !== null) {
            $queryParams['name[end]'] = ObjectSerializer::toQueryValue($name_end);
        }
        // query params
        if ($name_exact !== null) {
            $queryParams['name[exact]'] = ObjectSerializer::toQueryValue($name_exact);
        }
        // query params
        if ($name_partial !== null) {
            $queryParams['name[partial]'] = ObjectSerializer::toQueryValue($name_partial);
        }
        // query params
        if ($name_start !== null) {
            $queryParams['name[start]'] = ObjectSerializer::toQueryValue($name_start);
        }
        // query params
        if ($original_file_base_name !== null) {
            $queryParams['originalFile.baseName'] = ObjectSerializer::toQueryValue($original_file_base_name);
        }
        // query params
        if ($original_file_base_name_end !== null) {
            $queryParams['originalFile.baseName[end]'] = ObjectSerializer::toQueryValue($original_file_base_name_end);
        }
        // query params
        if ($original_file_base_name_exact !== null) {
            $queryParams['originalFile.baseName[exact]'] = ObjectSerializer::toQueryValue($original_file_base_name_exact);
        }
        // query params
        if ($original_file_base_name_exists !== null) {
            $queryParams['originalFile.baseName[exists]'] = ObjectSerializer::toQueryValue($original_file_base_name_exists);
        }
        // query params
        if ($original_file_base_name_partial !== null) {
            $queryParams['originalFile.baseName[partial]'] = ObjectSerializer::toQueryValue($original_file_base_name_partial);
        }
        // query params
        if ($original_file_base_name_start !== null) {
            $queryParams['originalFile.baseName[start]'] = ObjectSerializer::toQueryValue($original_file_base_name_start);
        }
        // query params
        if ($original_file_file_size !== null) {
            $queryParams['originalFile.fileSize'] = ObjectSerializer::toQueryValue($original_file_file_size);
        }
        // query params
        if ($original_file_file_size_between !== null) {
            $queryParams['originalFile.fileSize[between]'] = ObjectSerializer::toQueryValue($original_file_file_size_between);
        }
        // query params
        if ($original_file_file_size_exists !== null) {
            $queryParams['originalFile.fileSize[exists]'] = ObjectSerializer::toQueryValue($original_file_file_size_exists);
        }
        // query params
        if ($original_file_file_size_gt !== null) {
            $queryParams['originalFile.fileSize[gt]'] = ObjectSerializer::toQueryValue($original_file_file_size_gt);
        }
        // query params
        if ($original_file_file_size_gte !== null) {
            $queryParams['originalFile.fileSize[gte]'] = ObjectSerializer::toQueryValue($original_file_file_size_gte);
        }
        // query params
        if ($original_file_file_size_lt !== null) {
            $queryParams['originalFile.fileSize[lt]'] = ObjectSerializer::toQueryValue($original_file_file_size_lt);
        }
        // query params
        if ($original_file_file_size_lte !== null) {
            $queryParams['originalFile.fileSize[lte]'] = ObjectSerializer::toQueryValue($original_file_file_size_lte);
        }
        // query params
        if ($original_file_mime_type !== null) {
            $queryParams['originalFile.mimeType'] = ObjectSerializer::toQueryValue($original_file_mime_type);
        }
        // query params
        if ($original_file_mime_type_end !== null) {
            $queryParams['originalFile.mimeType[end]'] = ObjectSerializer::toQueryValue($original_file_mime_type_end);
        }
        // query params
        if ($original_file_mime_type_exact !== null) {
            $queryParams['originalFile.mimeType[exact]'] = ObjectSerializer::toQueryValue($original_file_mime_type_exact);
        }
        // query params
        if ($original_file_mime_type_exists !== null) {
            $queryParams['originalFile.mimeType[exists]'] = ObjectSerializer::toQueryValue($original_file_mime_type_exists);
        }
        // query params
        if ($original_file_mime_type_partial !== null) {
            $queryParams['originalFile.mimeType[partial]'] = ObjectSerializer::toQueryValue($original_file_mime_type_partial);
        }
        // query params
        if ($original_file_mime_type_start !== null) {
            $queryParams['originalFile.mimeType[start]'] = ObjectSerializer::toQueryValue($original_file_mime_type_start);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($status_end !== null) {
            $queryParams['status[end]'] = ObjectSerializer::toQueryValue($status_end);
        }
        // query params
        if ($status_exact !== null) {
            $queryParams['status[exact]'] = ObjectSerializer::toQueryValue($status_exact);
        }
        // query params
        if ($status_exists !== null) {
            $queryParams['status[exists]'] = ObjectSerializer::toQueryValue($status_exists);
        }
        // query params
        if ($status_partial !== null) {
            $queryParams['status[partial]'] = ObjectSerializer::toQueryValue($status_partial);
        }
        // query params
        if ($status_start !== null) {
            $queryParams['status[start]'] = ObjectSerializer::toQueryValue($status_start);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_name !== null) {
            $queryParams['_order[name]'] = ObjectSerializer::toQueryValue($_order_name);
        }
        // query params
        if ($_order_original_file_base_name !== null) {
            $queryParams['_order[originalFile.baseName]'] = ObjectSerializer::toQueryValue($_order_original_file_base_name);
        }
        // query params
        if ($_order_original_file_file_size !== null) {
            $queryParams['_order[originalFile.fileSize]'] = ObjectSerializer::toQueryValue($_order_original_file_file_size);
        }
        // query params
        if ($_order_original_file_mime_type !== null) {
            $queryParams['_order[originalFile.mimeType]'] = ObjectSerializer::toQueryValue($_order_original_file_mime_type);
        }
        // query params
        if ($_order_status !== null) {
            $queryParams['_order[status]'] = ObjectSerializer::toQueryValue($_order_status);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMusicOnHoldItem
     *
     * Retrieves a MusicOnHold resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\MusicOnHoldDetailed
     */
    public function getMusicOnHoldItem($id)
    {
        list($response) = $this->getMusicOnHoldItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getMusicOnHoldItemWithHttpInfo
     *
     * Retrieves a MusicOnHold resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\MusicOnHoldDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMusicOnHoldItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\MusicOnHoldDetailed';
        $request = $this->getMusicOnHoldItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\MusicOnHoldDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMusicOnHoldItemAsync
     *
     * Retrieves a MusicOnHold resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMusicOnHoldItemAsync($id)
    {
        return $this->getMusicOnHoldItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMusicOnHoldItemAsyncWithHttpInfo
     *
     * Retrieves a MusicOnHold resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMusicOnHoldItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\MusicOnHoldDetailed';
        $request = $this->getMusicOnHoldItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMusicOnHoldItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMusicOnHoldItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getMusicOnHoldItem'
            );
        }

        $resourcePath = '/music_on_holds/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMyRatingPlanPricesRatingPlanPricesCollection
     *
     * Retrieves the collection of RatingPlanPrices resources.
     *
     * @param  int $id Rating plan group Id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\RatingPlanPrices[]
     */
    public function getMyRatingPlanPricesRatingPlanPricesCollection($id)
    {
        list($response) = $this->getMyRatingPlanPricesRatingPlanPricesCollectionWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getMyRatingPlanPricesRatingPlanPricesCollectionWithHttpInfo
     *
     * Retrieves the collection of RatingPlanPrices resources.
     *
     * @param  int $id Rating plan group Id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\RatingPlanPrices[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getMyRatingPlanPricesRatingPlanPricesCollectionWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\RatingPlanPrices[]';
        $request = $this->getMyRatingPlanPricesRatingPlanPricesCollectionRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\RatingPlanPrices[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMyRatingPlanPricesRatingPlanPricesCollectionAsync
     *
     * Retrieves the collection of RatingPlanPrices resources.
     *
     * @param  int $id Rating plan group Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMyRatingPlanPricesRatingPlanPricesCollectionAsync($id)
    {
        return $this->getMyRatingPlanPricesRatingPlanPricesCollectionAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMyRatingPlanPricesRatingPlanPricesCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of RatingPlanPrices resources.
     *
     * @param  int $id Rating plan group Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMyRatingPlanPricesRatingPlanPricesCollectionAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\RatingPlanPrices[]';
        $request = $this->getMyRatingPlanPricesRatingPlanPricesCollectionRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMyRatingPlanPricesRatingPlanPricesCollection'
     *
     * @param  int $id Rating plan group Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMyRatingPlanPricesRatingPlanPricesCollectionRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getMyRatingPlanPricesRatingPlanPricesCollection'
            );
        }

        $resourcePath = '/rating_plan_groups/{id}/prices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/csv']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/csv'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOutgoingDdiRuleCollection
     *
     * Retrieves the collection of OutgoingDdiRule resources.
     *
     * @param  string $default_action default_action (optional)
     * @param  string $default_action_end default_action_end (optional)
     * @param  string $default_action_exact default_action_exact (optional)
     * @param  string $default_action_partial default_action_partial (optional)
     * @param  string $default_action_start default_action_start (optional)
     * @param  string $forced_ddi forced_ddi (optional)
     * @param  string $forced_ddi2 forced_ddi2 (optional)
     * @param  bool $forced_ddi_exists forced_ddi_exists (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $name name (optional)
     * @param  string $name_end name_end (optional)
     * @param  string $name_exact name_exact (optional)
     * @param  string $name_partial name_partial (optional)
     * @param  string $name_start name_start (optional)
     * @param  string $_order_default_action _order_default_action (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_name _order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\OutgoingDdiRuleCollection[]
     */
    public function getOutgoingDdiRuleCollection($default_action = null, $default_action_end = null, $default_action_exact = null, $default_action_partial = null, $default_action_start = null, $forced_ddi = null, $forced_ddi2 = null, $forced_ddi_exists = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_default_action = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getOutgoingDdiRuleCollectionWithHttpInfo($default_action, $default_action_end, $default_action_exact, $default_action_partial, $default_action_start, $forced_ddi, $forced_ddi2, $forced_ddi_exists, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $_order_default_action, $_order_id, $_order_name, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getOutgoingDdiRuleCollectionWithHttpInfo
     *
     * Retrieves the collection of OutgoingDdiRule resources.
     *
     * @param  string $default_action (optional)
     * @param  string $default_action_end (optional)
     * @param  string $default_action_exact (optional)
     * @param  string $default_action_partial (optional)
     * @param  string $default_action_start (optional)
     * @param  string $forced_ddi (optional)
     * @param  string $forced_ddi2 (optional)
     * @param  bool $forced_ddi_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $_order_default_action (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\OutgoingDdiRuleCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOutgoingDdiRuleCollectionWithHttpInfo($default_action = null, $default_action_end = null, $default_action_exact = null, $default_action_partial = null, $default_action_start = null, $forced_ddi = null, $forced_ddi2 = null, $forced_ddi_exists = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_default_action = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\OutgoingDdiRuleCollection[]';
        $request = $this->getOutgoingDdiRuleCollectionRequest($default_action, $default_action_end, $default_action_exact, $default_action_partial, $default_action_start, $forced_ddi, $forced_ddi2, $forced_ddi_exists, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $_order_default_action, $_order_id, $_order_name, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\OutgoingDdiRuleCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOutgoingDdiRuleCollectionAsync
     *
     * Retrieves the collection of OutgoingDdiRule resources.
     *
     * @param  string $default_action (optional)
     * @param  string $default_action_end (optional)
     * @param  string $default_action_exact (optional)
     * @param  string $default_action_partial (optional)
     * @param  string $default_action_start (optional)
     * @param  string $forced_ddi (optional)
     * @param  string $forced_ddi2 (optional)
     * @param  bool $forced_ddi_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $_order_default_action (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOutgoingDdiRuleCollectionAsync($default_action = null, $default_action_end = null, $default_action_exact = null, $default_action_partial = null, $default_action_start = null, $forced_ddi = null, $forced_ddi2 = null, $forced_ddi_exists = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_default_action = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getOutgoingDdiRuleCollectionAsyncWithHttpInfo($default_action, $default_action_end, $default_action_exact, $default_action_partial, $default_action_start, $forced_ddi, $forced_ddi2, $forced_ddi_exists, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $_order_default_action, $_order_id, $_order_name, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOutgoingDdiRuleCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of OutgoingDdiRule resources.
     *
     * @param  string $default_action (optional)
     * @param  string $default_action_end (optional)
     * @param  string $default_action_exact (optional)
     * @param  string $default_action_partial (optional)
     * @param  string $default_action_start (optional)
     * @param  string $forced_ddi (optional)
     * @param  string $forced_ddi2 (optional)
     * @param  bool $forced_ddi_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $_order_default_action (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOutgoingDdiRuleCollectionAsyncWithHttpInfo($default_action = null, $default_action_end = null, $default_action_exact = null, $default_action_partial = null, $default_action_start = null, $forced_ddi = null, $forced_ddi2 = null, $forced_ddi_exists = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_default_action = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\OutgoingDdiRuleCollection[]';
        $request = $this->getOutgoingDdiRuleCollectionRequest($default_action, $default_action_end, $default_action_exact, $default_action_partial, $default_action_start, $forced_ddi, $forced_ddi2, $forced_ddi_exists, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $_order_default_action, $_order_id, $_order_name, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOutgoingDdiRuleCollection'
     *
     * @param  string $default_action (optional)
     * @param  string $default_action_end (optional)
     * @param  string $default_action_exact (optional)
     * @param  string $default_action_partial (optional)
     * @param  string $default_action_start (optional)
     * @param  string $forced_ddi (optional)
     * @param  string $forced_ddi2 (optional)
     * @param  bool $forced_ddi_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $_order_default_action (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOutgoingDdiRuleCollectionRequest($default_action = null, $default_action_end = null, $default_action_exact = null, $default_action_partial = null, $default_action_start = null, $forced_ddi = null, $forced_ddi2 = null, $forced_ddi_exists = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_default_action = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/outgoing_ddi_rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($default_action !== null) {
            $queryParams['defaultAction'] = ObjectSerializer::toQueryValue($default_action);
        }
        // query params
        if ($default_action_end !== null) {
            $queryParams['defaultAction[end]'] = ObjectSerializer::toQueryValue($default_action_end);
        }
        // query params
        if ($default_action_exact !== null) {
            $queryParams['defaultAction[exact]'] = ObjectSerializer::toQueryValue($default_action_exact);
        }
        // query params
        if ($default_action_partial !== null) {
            $queryParams['defaultAction[partial]'] = ObjectSerializer::toQueryValue($default_action_partial);
        }
        // query params
        if ($default_action_start !== null) {
            $queryParams['defaultAction[start]'] = ObjectSerializer::toQueryValue($default_action_start);
        }
        // query params
        if ($forced_ddi !== null) {
            $queryParams['forcedDdi'] = ObjectSerializer::toQueryValue($forced_ddi);
        }
        // query params
        if ($forced_ddi2 !== null) {
            $queryParams['forcedDdi[]'] = ObjectSerializer::toQueryValue($forced_ddi2);
        }
        // query params
        if ($forced_ddi_exists !== null) {
            $queryParams['forcedDdi[exists]'] = ObjectSerializer::toQueryValue($forced_ddi_exists);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_end !== null) {
            $queryParams['name[end]'] = ObjectSerializer::toQueryValue($name_end);
        }
        // query params
        if ($name_exact !== null) {
            $queryParams['name[exact]'] = ObjectSerializer::toQueryValue($name_exact);
        }
        // query params
        if ($name_partial !== null) {
            $queryParams['name[partial]'] = ObjectSerializer::toQueryValue($name_partial);
        }
        // query params
        if ($name_start !== null) {
            $queryParams['name[start]'] = ObjectSerializer::toQueryValue($name_start);
        }
        // query params
        if ($_order_default_action !== null) {
            $queryParams['_order[defaultAction]'] = ObjectSerializer::toQueryValue($_order_default_action);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_name !== null) {
            $queryParams['_order[name]'] = ObjectSerializer::toQueryValue($_order_name);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOutgoingDdiRuleItem
     *
     * Retrieves a OutgoingDdiRule resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\OutgoingDdiRuleDetailed
     */
    public function getOutgoingDdiRuleItem($id)
    {
        list($response) = $this->getOutgoingDdiRuleItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getOutgoingDdiRuleItemWithHttpInfo
     *
     * Retrieves a OutgoingDdiRule resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\OutgoingDdiRuleDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOutgoingDdiRuleItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\OutgoingDdiRuleDetailed';
        $request = $this->getOutgoingDdiRuleItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\OutgoingDdiRuleDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOutgoingDdiRuleItemAsync
     *
     * Retrieves a OutgoingDdiRule resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOutgoingDdiRuleItemAsync($id)
    {
        return $this->getOutgoingDdiRuleItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOutgoingDdiRuleItemAsyncWithHttpInfo
     *
     * Retrieves a OutgoingDdiRule resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOutgoingDdiRuleItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\OutgoingDdiRuleDetailed';
        $request = $this->getOutgoingDdiRuleItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOutgoingDdiRuleItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOutgoingDdiRuleItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getOutgoingDdiRuleItem'
            );
        }

        $resourcePath = '/outgoing_ddi_rules/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOutgoingDdiRulesPatternCollection
     *
     * Retrieves the collection of OutgoingDdiRulesPattern resources.
     *
     * @param  string $action action (optional)
     * @param  string $action_end action_end (optional)
     * @param  string $action_exact action_exact (optional)
     * @param  string $action_partial action_partial (optional)
     * @param  string $action_start action_start (optional)
     * @param  string $forced_ddi forced_ddi (optional)
     * @param  int $forced_ddi_conditional_route forced_ddi_conditional_route (optional)
     * @param  int $forced_ddi_conference_room forced_ddi_conference_room (optional)
     * @param  int $forced_ddi_country forced_ddi_country (optional)
     * @param  string $forced_ddi_ddi forced_ddi_ddi (optional)
     * @param  string $forced_ddi_ddie164 forced_ddi_ddie164 (optional)
     * @param  string $forced_ddi_display_name forced_ddi_display_name (optional)
     * @param  int $forced_ddi_external_call_filter forced_ddi_external_call_filter (optional)
     * @param  int $forced_ddi_fax forced_ddi_fax (optional)
     * @param  string $forced_ddi_friend_value forced_ddi_friend_value (optional)
     * @param  int $forced_ddi_hunt_group forced_ddi_hunt_group (optional)
     * @param  int $forced_ddi_ivr forced_ddi_ivr (optional)
     * @param  int $forced_ddi_language forced_ddi_language (optional)
     * @param  int $forced_ddi_queue forced_ddi_queue (optional)
     * @param  string $forced_ddi_record_calls forced_ddi_record_calls (optional)
     * @param  int $forced_ddi_residential_device forced_ddi_residential_device (optional)
     * @param  int $forced_ddi_retail_account forced_ddi_retail_account (optional)
     * @param  string $forced_ddi_route_type forced_ddi_route_type (optional)
     * @param  int $forced_ddi_user forced_ddi_user (optional)
     * @param  string $forced_ddi2 forced_ddi2 (optional)
     * @param  bool $forced_ddi_exists forced_ddi_exists (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $match_list match_list (optional)
     * @param  string $match_list_name match_list_name (optional)
     * @param  string $match_list2 match_list2 (optional)
     * @param  bool $match_list_exists match_list_exists (optional)
     * @param  string $outgoing_ddi_rule outgoing_ddi_rule (optional)
     * @param  string $outgoing_ddi_rule_default_action outgoing_ddi_rule_default_action (optional)
     * @param  int $outgoing_ddi_rule_forced_ddi outgoing_ddi_rule_forced_ddi (optional)
     * @param  string $outgoing_ddi_rule_name outgoing_ddi_rule_name (optional)
     * @param  string $outgoing_ddi_rule2 outgoing_ddi_rule2 (optional)
     * @param  string $prefix prefix (optional)
     * @param  string $prefix_end prefix_end (optional)
     * @param  string $prefix_exact prefix_exact (optional)
     * @param  bool $prefix_exists prefix_exists (optional)
     * @param  string $prefix_partial prefix_partial (optional)
     * @param  string $prefix_start prefix_start (optional)
     * @param  int $priority priority (optional)
     * @param  string $priority_between priority_between (optional)
     * @param  string $priority_gt priority_gt (optional)
     * @param  string $priority_gte priority_gte (optional)
     * @param  string $priority_lt priority_lt (optional)
     * @param  string $priority_lte priority_lte (optional)
     * @param  string $type type (optional)
     * @param  string $type_end type_end (optional)
     * @param  string $type_exact type_exact (optional)
     * @param  string $type_partial type_partial (optional)
     * @param  string $type_start type_start (optional)
     * @param  string $_order_action _order_action (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_prefix _order_prefix (optional)
     * @param  string $_order_priority _order_priority (optional)
     * @param  string $_order_type _order_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\OutgoingDdiRulesPatternDetailedCollection[]
     */
    public function getOutgoingDdiRulesPatternCollection($action = null, $action_end = null, $action_exact = null, $action_partial = null, $action_start = null, $forced_ddi = null, $forced_ddi_conditional_route = null, $forced_ddi_conference_room = null, $forced_ddi_country = null, $forced_ddi_ddi = null, $forced_ddi_ddie164 = null, $forced_ddi_display_name = null, $forced_ddi_external_call_filter = null, $forced_ddi_fax = null, $forced_ddi_friend_value = null, $forced_ddi_hunt_group = null, $forced_ddi_ivr = null, $forced_ddi_language = null, $forced_ddi_queue = null, $forced_ddi_record_calls = null, $forced_ddi_residential_device = null, $forced_ddi_retail_account = null, $forced_ddi_route_type = null, $forced_ddi_user = null, $forced_ddi2 = null, $forced_ddi_exists = null, $id_exact = null, $match_list = null, $match_list_name = null, $match_list2 = null, $match_list_exists = null, $outgoing_ddi_rule = null, $outgoing_ddi_rule_default_action = null, $outgoing_ddi_rule_forced_ddi = null, $outgoing_ddi_rule_name = null, $outgoing_ddi_rule2 = null, $prefix = null, $prefix_end = null, $prefix_exact = null, $prefix_exists = null, $prefix_partial = null, $prefix_start = null, $priority = null, $priority_between = null, $priority_gt = null, $priority_gte = null, $priority_lt = null, $priority_lte = null, $type = null, $type_end = null, $type_exact = null, $type_partial = null, $type_start = null, $_order_action = null, $_order_id = null, $_order_prefix = null, $_order_priority = null, $_order_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getOutgoingDdiRulesPatternCollectionWithHttpInfo($action, $action_end, $action_exact, $action_partial, $action_start, $forced_ddi, $forced_ddi_conditional_route, $forced_ddi_conference_room, $forced_ddi_country, $forced_ddi_ddi, $forced_ddi_ddie164, $forced_ddi_display_name, $forced_ddi_external_call_filter, $forced_ddi_fax, $forced_ddi_friend_value, $forced_ddi_hunt_group, $forced_ddi_ivr, $forced_ddi_language, $forced_ddi_queue, $forced_ddi_record_calls, $forced_ddi_residential_device, $forced_ddi_retail_account, $forced_ddi_route_type, $forced_ddi_user, $forced_ddi2, $forced_ddi_exists, $id_exact, $match_list, $match_list_name, $match_list2, $match_list_exists, $outgoing_ddi_rule, $outgoing_ddi_rule_default_action, $outgoing_ddi_rule_forced_ddi, $outgoing_ddi_rule_name, $outgoing_ddi_rule2, $prefix, $prefix_end, $prefix_exact, $prefix_exists, $prefix_partial, $prefix_start, $priority, $priority_between, $priority_gt, $priority_gte, $priority_lt, $priority_lte, $type, $type_end, $type_exact, $type_partial, $type_start, $_order_action, $_order_id, $_order_prefix, $_order_priority, $_order_type, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getOutgoingDdiRulesPatternCollectionWithHttpInfo
     *
     * Retrieves the collection of OutgoingDdiRulesPattern resources.
     *
     * @param  string $action (optional)
     * @param  string $action_end (optional)
     * @param  string $action_exact (optional)
     * @param  string $action_partial (optional)
     * @param  string $action_start (optional)
     * @param  string $forced_ddi (optional)
     * @param  int $forced_ddi_conditional_route (optional)
     * @param  int $forced_ddi_conference_room (optional)
     * @param  int $forced_ddi_country (optional)
     * @param  string $forced_ddi_ddi (optional)
     * @param  string $forced_ddi_ddie164 (optional)
     * @param  string $forced_ddi_display_name (optional)
     * @param  int $forced_ddi_external_call_filter (optional)
     * @param  int $forced_ddi_fax (optional)
     * @param  string $forced_ddi_friend_value (optional)
     * @param  int $forced_ddi_hunt_group (optional)
     * @param  int $forced_ddi_ivr (optional)
     * @param  int $forced_ddi_language (optional)
     * @param  int $forced_ddi_queue (optional)
     * @param  string $forced_ddi_record_calls (optional)
     * @param  int $forced_ddi_residential_device (optional)
     * @param  int $forced_ddi_retail_account (optional)
     * @param  string $forced_ddi_route_type (optional)
     * @param  int $forced_ddi_user (optional)
     * @param  string $forced_ddi2 (optional)
     * @param  bool $forced_ddi_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $match_list (optional)
     * @param  string $match_list_name (optional)
     * @param  string $match_list2 (optional)
     * @param  bool $match_list_exists (optional)
     * @param  string $outgoing_ddi_rule (optional)
     * @param  string $outgoing_ddi_rule_default_action (optional)
     * @param  int $outgoing_ddi_rule_forced_ddi (optional)
     * @param  string $outgoing_ddi_rule_name (optional)
     * @param  string $outgoing_ddi_rule2 (optional)
     * @param  string $prefix (optional)
     * @param  string $prefix_end (optional)
     * @param  string $prefix_exact (optional)
     * @param  bool $prefix_exists (optional)
     * @param  string $prefix_partial (optional)
     * @param  string $prefix_start (optional)
     * @param  int $priority (optional)
     * @param  string $priority_between (optional)
     * @param  string $priority_gt (optional)
     * @param  string $priority_gte (optional)
     * @param  string $priority_lt (optional)
     * @param  string $priority_lte (optional)
     * @param  string $type (optional)
     * @param  string $type_end (optional)
     * @param  string $type_exact (optional)
     * @param  string $type_partial (optional)
     * @param  string $type_start (optional)
     * @param  string $_order_action (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_prefix (optional)
     * @param  string $_order_priority (optional)
     * @param  string $_order_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\OutgoingDdiRulesPatternDetailedCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOutgoingDdiRulesPatternCollectionWithHttpInfo($action = null, $action_end = null, $action_exact = null, $action_partial = null, $action_start = null, $forced_ddi = null, $forced_ddi_conditional_route = null, $forced_ddi_conference_room = null, $forced_ddi_country = null, $forced_ddi_ddi = null, $forced_ddi_ddie164 = null, $forced_ddi_display_name = null, $forced_ddi_external_call_filter = null, $forced_ddi_fax = null, $forced_ddi_friend_value = null, $forced_ddi_hunt_group = null, $forced_ddi_ivr = null, $forced_ddi_language = null, $forced_ddi_queue = null, $forced_ddi_record_calls = null, $forced_ddi_residential_device = null, $forced_ddi_retail_account = null, $forced_ddi_route_type = null, $forced_ddi_user = null, $forced_ddi2 = null, $forced_ddi_exists = null, $id_exact = null, $match_list = null, $match_list_name = null, $match_list2 = null, $match_list_exists = null, $outgoing_ddi_rule = null, $outgoing_ddi_rule_default_action = null, $outgoing_ddi_rule_forced_ddi = null, $outgoing_ddi_rule_name = null, $outgoing_ddi_rule2 = null, $prefix = null, $prefix_end = null, $prefix_exact = null, $prefix_exists = null, $prefix_partial = null, $prefix_start = null, $priority = null, $priority_between = null, $priority_gt = null, $priority_gte = null, $priority_lt = null, $priority_lte = null, $type = null, $type_end = null, $type_exact = null, $type_partial = null, $type_start = null, $_order_action = null, $_order_id = null, $_order_prefix = null, $_order_priority = null, $_order_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\OutgoingDdiRulesPatternDetailedCollection[]';
        $request = $this->getOutgoingDdiRulesPatternCollectionRequest($action, $action_end, $action_exact, $action_partial, $action_start, $forced_ddi, $forced_ddi_conditional_route, $forced_ddi_conference_room, $forced_ddi_country, $forced_ddi_ddi, $forced_ddi_ddie164, $forced_ddi_display_name, $forced_ddi_external_call_filter, $forced_ddi_fax, $forced_ddi_friend_value, $forced_ddi_hunt_group, $forced_ddi_ivr, $forced_ddi_language, $forced_ddi_queue, $forced_ddi_record_calls, $forced_ddi_residential_device, $forced_ddi_retail_account, $forced_ddi_route_type, $forced_ddi_user, $forced_ddi2, $forced_ddi_exists, $id_exact, $match_list, $match_list_name, $match_list2, $match_list_exists, $outgoing_ddi_rule, $outgoing_ddi_rule_default_action, $outgoing_ddi_rule_forced_ddi, $outgoing_ddi_rule_name, $outgoing_ddi_rule2, $prefix, $prefix_end, $prefix_exact, $prefix_exists, $prefix_partial, $prefix_start, $priority, $priority_between, $priority_gt, $priority_gte, $priority_lt, $priority_lte, $type, $type_end, $type_exact, $type_partial, $type_start, $_order_action, $_order_id, $_order_prefix, $_order_priority, $_order_type, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\OutgoingDdiRulesPatternDetailedCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOutgoingDdiRulesPatternCollectionAsync
     *
     * Retrieves the collection of OutgoingDdiRulesPattern resources.
     *
     * @param  string $action (optional)
     * @param  string $action_end (optional)
     * @param  string $action_exact (optional)
     * @param  string $action_partial (optional)
     * @param  string $action_start (optional)
     * @param  string $forced_ddi (optional)
     * @param  int $forced_ddi_conditional_route (optional)
     * @param  int $forced_ddi_conference_room (optional)
     * @param  int $forced_ddi_country (optional)
     * @param  string $forced_ddi_ddi (optional)
     * @param  string $forced_ddi_ddie164 (optional)
     * @param  string $forced_ddi_display_name (optional)
     * @param  int $forced_ddi_external_call_filter (optional)
     * @param  int $forced_ddi_fax (optional)
     * @param  string $forced_ddi_friend_value (optional)
     * @param  int $forced_ddi_hunt_group (optional)
     * @param  int $forced_ddi_ivr (optional)
     * @param  int $forced_ddi_language (optional)
     * @param  int $forced_ddi_queue (optional)
     * @param  string $forced_ddi_record_calls (optional)
     * @param  int $forced_ddi_residential_device (optional)
     * @param  int $forced_ddi_retail_account (optional)
     * @param  string $forced_ddi_route_type (optional)
     * @param  int $forced_ddi_user (optional)
     * @param  string $forced_ddi2 (optional)
     * @param  bool $forced_ddi_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $match_list (optional)
     * @param  string $match_list_name (optional)
     * @param  string $match_list2 (optional)
     * @param  bool $match_list_exists (optional)
     * @param  string $outgoing_ddi_rule (optional)
     * @param  string $outgoing_ddi_rule_default_action (optional)
     * @param  int $outgoing_ddi_rule_forced_ddi (optional)
     * @param  string $outgoing_ddi_rule_name (optional)
     * @param  string $outgoing_ddi_rule2 (optional)
     * @param  string $prefix (optional)
     * @param  string $prefix_end (optional)
     * @param  string $prefix_exact (optional)
     * @param  bool $prefix_exists (optional)
     * @param  string $prefix_partial (optional)
     * @param  string $prefix_start (optional)
     * @param  int $priority (optional)
     * @param  string $priority_between (optional)
     * @param  string $priority_gt (optional)
     * @param  string $priority_gte (optional)
     * @param  string $priority_lt (optional)
     * @param  string $priority_lte (optional)
     * @param  string $type (optional)
     * @param  string $type_end (optional)
     * @param  string $type_exact (optional)
     * @param  string $type_partial (optional)
     * @param  string $type_start (optional)
     * @param  string $_order_action (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_prefix (optional)
     * @param  string $_order_priority (optional)
     * @param  string $_order_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOutgoingDdiRulesPatternCollectionAsync($action = null, $action_end = null, $action_exact = null, $action_partial = null, $action_start = null, $forced_ddi = null, $forced_ddi_conditional_route = null, $forced_ddi_conference_room = null, $forced_ddi_country = null, $forced_ddi_ddi = null, $forced_ddi_ddie164 = null, $forced_ddi_display_name = null, $forced_ddi_external_call_filter = null, $forced_ddi_fax = null, $forced_ddi_friend_value = null, $forced_ddi_hunt_group = null, $forced_ddi_ivr = null, $forced_ddi_language = null, $forced_ddi_queue = null, $forced_ddi_record_calls = null, $forced_ddi_residential_device = null, $forced_ddi_retail_account = null, $forced_ddi_route_type = null, $forced_ddi_user = null, $forced_ddi2 = null, $forced_ddi_exists = null, $id_exact = null, $match_list = null, $match_list_name = null, $match_list2 = null, $match_list_exists = null, $outgoing_ddi_rule = null, $outgoing_ddi_rule_default_action = null, $outgoing_ddi_rule_forced_ddi = null, $outgoing_ddi_rule_name = null, $outgoing_ddi_rule2 = null, $prefix = null, $prefix_end = null, $prefix_exact = null, $prefix_exists = null, $prefix_partial = null, $prefix_start = null, $priority = null, $priority_between = null, $priority_gt = null, $priority_gte = null, $priority_lt = null, $priority_lte = null, $type = null, $type_end = null, $type_exact = null, $type_partial = null, $type_start = null, $_order_action = null, $_order_id = null, $_order_prefix = null, $_order_priority = null, $_order_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getOutgoingDdiRulesPatternCollectionAsyncWithHttpInfo($action, $action_end, $action_exact, $action_partial, $action_start, $forced_ddi, $forced_ddi_conditional_route, $forced_ddi_conference_room, $forced_ddi_country, $forced_ddi_ddi, $forced_ddi_ddie164, $forced_ddi_display_name, $forced_ddi_external_call_filter, $forced_ddi_fax, $forced_ddi_friend_value, $forced_ddi_hunt_group, $forced_ddi_ivr, $forced_ddi_language, $forced_ddi_queue, $forced_ddi_record_calls, $forced_ddi_residential_device, $forced_ddi_retail_account, $forced_ddi_route_type, $forced_ddi_user, $forced_ddi2, $forced_ddi_exists, $id_exact, $match_list, $match_list_name, $match_list2, $match_list_exists, $outgoing_ddi_rule, $outgoing_ddi_rule_default_action, $outgoing_ddi_rule_forced_ddi, $outgoing_ddi_rule_name, $outgoing_ddi_rule2, $prefix, $prefix_end, $prefix_exact, $prefix_exists, $prefix_partial, $prefix_start, $priority, $priority_between, $priority_gt, $priority_gte, $priority_lt, $priority_lte, $type, $type_end, $type_exact, $type_partial, $type_start, $_order_action, $_order_id, $_order_prefix, $_order_priority, $_order_type, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOutgoingDdiRulesPatternCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of OutgoingDdiRulesPattern resources.
     *
     * @param  string $action (optional)
     * @param  string $action_end (optional)
     * @param  string $action_exact (optional)
     * @param  string $action_partial (optional)
     * @param  string $action_start (optional)
     * @param  string $forced_ddi (optional)
     * @param  int $forced_ddi_conditional_route (optional)
     * @param  int $forced_ddi_conference_room (optional)
     * @param  int $forced_ddi_country (optional)
     * @param  string $forced_ddi_ddi (optional)
     * @param  string $forced_ddi_ddie164 (optional)
     * @param  string $forced_ddi_display_name (optional)
     * @param  int $forced_ddi_external_call_filter (optional)
     * @param  int $forced_ddi_fax (optional)
     * @param  string $forced_ddi_friend_value (optional)
     * @param  int $forced_ddi_hunt_group (optional)
     * @param  int $forced_ddi_ivr (optional)
     * @param  int $forced_ddi_language (optional)
     * @param  int $forced_ddi_queue (optional)
     * @param  string $forced_ddi_record_calls (optional)
     * @param  int $forced_ddi_residential_device (optional)
     * @param  int $forced_ddi_retail_account (optional)
     * @param  string $forced_ddi_route_type (optional)
     * @param  int $forced_ddi_user (optional)
     * @param  string $forced_ddi2 (optional)
     * @param  bool $forced_ddi_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $match_list (optional)
     * @param  string $match_list_name (optional)
     * @param  string $match_list2 (optional)
     * @param  bool $match_list_exists (optional)
     * @param  string $outgoing_ddi_rule (optional)
     * @param  string $outgoing_ddi_rule_default_action (optional)
     * @param  int $outgoing_ddi_rule_forced_ddi (optional)
     * @param  string $outgoing_ddi_rule_name (optional)
     * @param  string $outgoing_ddi_rule2 (optional)
     * @param  string $prefix (optional)
     * @param  string $prefix_end (optional)
     * @param  string $prefix_exact (optional)
     * @param  bool $prefix_exists (optional)
     * @param  string $prefix_partial (optional)
     * @param  string $prefix_start (optional)
     * @param  int $priority (optional)
     * @param  string $priority_between (optional)
     * @param  string $priority_gt (optional)
     * @param  string $priority_gte (optional)
     * @param  string $priority_lt (optional)
     * @param  string $priority_lte (optional)
     * @param  string $type (optional)
     * @param  string $type_end (optional)
     * @param  string $type_exact (optional)
     * @param  string $type_partial (optional)
     * @param  string $type_start (optional)
     * @param  string $_order_action (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_prefix (optional)
     * @param  string $_order_priority (optional)
     * @param  string $_order_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOutgoingDdiRulesPatternCollectionAsyncWithHttpInfo($action = null, $action_end = null, $action_exact = null, $action_partial = null, $action_start = null, $forced_ddi = null, $forced_ddi_conditional_route = null, $forced_ddi_conference_room = null, $forced_ddi_country = null, $forced_ddi_ddi = null, $forced_ddi_ddie164 = null, $forced_ddi_display_name = null, $forced_ddi_external_call_filter = null, $forced_ddi_fax = null, $forced_ddi_friend_value = null, $forced_ddi_hunt_group = null, $forced_ddi_ivr = null, $forced_ddi_language = null, $forced_ddi_queue = null, $forced_ddi_record_calls = null, $forced_ddi_residential_device = null, $forced_ddi_retail_account = null, $forced_ddi_route_type = null, $forced_ddi_user = null, $forced_ddi2 = null, $forced_ddi_exists = null, $id_exact = null, $match_list = null, $match_list_name = null, $match_list2 = null, $match_list_exists = null, $outgoing_ddi_rule = null, $outgoing_ddi_rule_default_action = null, $outgoing_ddi_rule_forced_ddi = null, $outgoing_ddi_rule_name = null, $outgoing_ddi_rule2 = null, $prefix = null, $prefix_end = null, $prefix_exact = null, $prefix_exists = null, $prefix_partial = null, $prefix_start = null, $priority = null, $priority_between = null, $priority_gt = null, $priority_gte = null, $priority_lt = null, $priority_lte = null, $type = null, $type_end = null, $type_exact = null, $type_partial = null, $type_start = null, $_order_action = null, $_order_id = null, $_order_prefix = null, $_order_priority = null, $_order_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\OutgoingDdiRulesPatternDetailedCollection[]';
        $request = $this->getOutgoingDdiRulesPatternCollectionRequest($action, $action_end, $action_exact, $action_partial, $action_start, $forced_ddi, $forced_ddi_conditional_route, $forced_ddi_conference_room, $forced_ddi_country, $forced_ddi_ddi, $forced_ddi_ddie164, $forced_ddi_display_name, $forced_ddi_external_call_filter, $forced_ddi_fax, $forced_ddi_friend_value, $forced_ddi_hunt_group, $forced_ddi_ivr, $forced_ddi_language, $forced_ddi_queue, $forced_ddi_record_calls, $forced_ddi_residential_device, $forced_ddi_retail_account, $forced_ddi_route_type, $forced_ddi_user, $forced_ddi2, $forced_ddi_exists, $id_exact, $match_list, $match_list_name, $match_list2, $match_list_exists, $outgoing_ddi_rule, $outgoing_ddi_rule_default_action, $outgoing_ddi_rule_forced_ddi, $outgoing_ddi_rule_name, $outgoing_ddi_rule2, $prefix, $prefix_end, $prefix_exact, $prefix_exists, $prefix_partial, $prefix_start, $priority, $priority_between, $priority_gt, $priority_gte, $priority_lt, $priority_lte, $type, $type_end, $type_exact, $type_partial, $type_start, $_order_action, $_order_id, $_order_prefix, $_order_priority, $_order_type, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOutgoingDdiRulesPatternCollection'
     *
     * @param  string $action (optional)
     * @param  string $action_end (optional)
     * @param  string $action_exact (optional)
     * @param  string $action_partial (optional)
     * @param  string $action_start (optional)
     * @param  string $forced_ddi (optional)
     * @param  int $forced_ddi_conditional_route (optional)
     * @param  int $forced_ddi_conference_room (optional)
     * @param  int $forced_ddi_country (optional)
     * @param  string $forced_ddi_ddi (optional)
     * @param  string $forced_ddi_ddie164 (optional)
     * @param  string $forced_ddi_display_name (optional)
     * @param  int $forced_ddi_external_call_filter (optional)
     * @param  int $forced_ddi_fax (optional)
     * @param  string $forced_ddi_friend_value (optional)
     * @param  int $forced_ddi_hunt_group (optional)
     * @param  int $forced_ddi_ivr (optional)
     * @param  int $forced_ddi_language (optional)
     * @param  int $forced_ddi_queue (optional)
     * @param  string $forced_ddi_record_calls (optional)
     * @param  int $forced_ddi_residential_device (optional)
     * @param  int $forced_ddi_retail_account (optional)
     * @param  string $forced_ddi_route_type (optional)
     * @param  int $forced_ddi_user (optional)
     * @param  string $forced_ddi2 (optional)
     * @param  bool $forced_ddi_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $match_list (optional)
     * @param  string $match_list_name (optional)
     * @param  string $match_list2 (optional)
     * @param  bool $match_list_exists (optional)
     * @param  string $outgoing_ddi_rule (optional)
     * @param  string $outgoing_ddi_rule_default_action (optional)
     * @param  int $outgoing_ddi_rule_forced_ddi (optional)
     * @param  string $outgoing_ddi_rule_name (optional)
     * @param  string $outgoing_ddi_rule2 (optional)
     * @param  string $prefix (optional)
     * @param  string $prefix_end (optional)
     * @param  string $prefix_exact (optional)
     * @param  bool $prefix_exists (optional)
     * @param  string $prefix_partial (optional)
     * @param  string $prefix_start (optional)
     * @param  int $priority (optional)
     * @param  string $priority_between (optional)
     * @param  string $priority_gt (optional)
     * @param  string $priority_gte (optional)
     * @param  string $priority_lt (optional)
     * @param  string $priority_lte (optional)
     * @param  string $type (optional)
     * @param  string $type_end (optional)
     * @param  string $type_exact (optional)
     * @param  string $type_partial (optional)
     * @param  string $type_start (optional)
     * @param  string $_order_action (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_prefix (optional)
     * @param  string $_order_priority (optional)
     * @param  string $_order_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOutgoingDdiRulesPatternCollectionRequest($action = null, $action_end = null, $action_exact = null, $action_partial = null, $action_start = null, $forced_ddi = null, $forced_ddi_conditional_route = null, $forced_ddi_conference_room = null, $forced_ddi_country = null, $forced_ddi_ddi = null, $forced_ddi_ddie164 = null, $forced_ddi_display_name = null, $forced_ddi_external_call_filter = null, $forced_ddi_fax = null, $forced_ddi_friend_value = null, $forced_ddi_hunt_group = null, $forced_ddi_ivr = null, $forced_ddi_language = null, $forced_ddi_queue = null, $forced_ddi_record_calls = null, $forced_ddi_residential_device = null, $forced_ddi_retail_account = null, $forced_ddi_route_type = null, $forced_ddi_user = null, $forced_ddi2 = null, $forced_ddi_exists = null, $id_exact = null, $match_list = null, $match_list_name = null, $match_list2 = null, $match_list_exists = null, $outgoing_ddi_rule = null, $outgoing_ddi_rule_default_action = null, $outgoing_ddi_rule_forced_ddi = null, $outgoing_ddi_rule_name = null, $outgoing_ddi_rule2 = null, $prefix = null, $prefix_end = null, $prefix_exact = null, $prefix_exists = null, $prefix_partial = null, $prefix_start = null, $priority = null, $priority_between = null, $priority_gt = null, $priority_gte = null, $priority_lt = null, $priority_lte = null, $type = null, $type_end = null, $type_exact = null, $type_partial = null, $type_start = null, $_order_action = null, $_order_id = null, $_order_prefix = null, $_order_priority = null, $_order_type = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/outgoing_ddi_rules_patterns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($action !== null) {
            $queryParams['action'] = ObjectSerializer::toQueryValue($action);
        }
        // query params
        if ($action_end !== null) {
            $queryParams['action[end]'] = ObjectSerializer::toQueryValue($action_end);
        }
        // query params
        if ($action_exact !== null) {
            $queryParams['action[exact]'] = ObjectSerializer::toQueryValue($action_exact);
        }
        // query params
        if ($action_partial !== null) {
            $queryParams['action[partial]'] = ObjectSerializer::toQueryValue($action_partial);
        }
        // query params
        if ($action_start !== null) {
            $queryParams['action[start]'] = ObjectSerializer::toQueryValue($action_start);
        }
        // query params
        if ($forced_ddi !== null) {
            $queryParams['forcedDdi'] = ObjectSerializer::toQueryValue($forced_ddi);
        }
        // query params
        if ($forced_ddi_conditional_route !== null) {
            $queryParams['forcedDdi.conditionalRoute'] = ObjectSerializer::toQueryValue($forced_ddi_conditional_route);
        }
        // query params
        if ($forced_ddi_conference_room !== null) {
            $queryParams['forcedDdi.conferenceRoom'] = ObjectSerializer::toQueryValue($forced_ddi_conference_room);
        }
        // query params
        if ($forced_ddi_country !== null) {
            $queryParams['forcedDdi.country'] = ObjectSerializer::toQueryValue($forced_ddi_country);
        }
        // query params
        if ($forced_ddi_ddi !== null) {
            $queryParams['forcedDdi.ddi'] = ObjectSerializer::toQueryValue($forced_ddi_ddi);
        }
        // query params
        if ($forced_ddi_ddie164 !== null) {
            $queryParams['forcedDdi.ddie164'] = ObjectSerializer::toQueryValue($forced_ddi_ddie164);
        }
        // query params
        if ($forced_ddi_display_name !== null) {
            $queryParams['forcedDdi.displayName'] = ObjectSerializer::toQueryValue($forced_ddi_display_name);
        }
        // query params
        if ($forced_ddi_external_call_filter !== null) {
            $queryParams['forcedDdi.externalCallFilter'] = ObjectSerializer::toQueryValue($forced_ddi_external_call_filter);
        }
        // query params
        if ($forced_ddi_fax !== null) {
            $queryParams['forcedDdi.fax'] = ObjectSerializer::toQueryValue($forced_ddi_fax);
        }
        // query params
        if ($forced_ddi_friend_value !== null) {
            $queryParams['forcedDdi.friendValue'] = ObjectSerializer::toQueryValue($forced_ddi_friend_value);
        }
        // query params
        if ($forced_ddi_hunt_group !== null) {
            $queryParams['forcedDdi.huntGroup'] = ObjectSerializer::toQueryValue($forced_ddi_hunt_group);
        }
        // query params
        if ($forced_ddi_ivr !== null) {
            $queryParams['forcedDdi.ivr'] = ObjectSerializer::toQueryValue($forced_ddi_ivr);
        }
        // query params
        if ($forced_ddi_language !== null) {
            $queryParams['forcedDdi.language'] = ObjectSerializer::toQueryValue($forced_ddi_language);
        }
        // query params
        if ($forced_ddi_queue !== null) {
            $queryParams['forcedDdi.queue'] = ObjectSerializer::toQueryValue($forced_ddi_queue);
        }
        // query params
        if ($forced_ddi_record_calls !== null) {
            $queryParams['forcedDdi.recordCalls'] = ObjectSerializer::toQueryValue($forced_ddi_record_calls);
        }
        // query params
        if ($forced_ddi_residential_device !== null) {
            $queryParams['forcedDdi.residentialDevice'] = ObjectSerializer::toQueryValue($forced_ddi_residential_device);
        }
        // query params
        if ($forced_ddi_retail_account !== null) {
            $queryParams['forcedDdi.retailAccount'] = ObjectSerializer::toQueryValue($forced_ddi_retail_account);
        }
        // query params
        if ($forced_ddi_route_type !== null) {
            $queryParams['forcedDdi.routeType'] = ObjectSerializer::toQueryValue($forced_ddi_route_type);
        }
        // query params
        if ($forced_ddi_user !== null) {
            $queryParams['forcedDdi.user'] = ObjectSerializer::toQueryValue($forced_ddi_user);
        }
        // query params
        if ($forced_ddi2 !== null) {
            $queryParams['forcedDdi[]'] = ObjectSerializer::toQueryValue($forced_ddi2);
        }
        // query params
        if ($forced_ddi_exists !== null) {
            $queryParams['forcedDdi[exists]'] = ObjectSerializer::toQueryValue($forced_ddi_exists);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($match_list !== null) {
            $queryParams['matchList'] = ObjectSerializer::toQueryValue($match_list);
        }
        // query params
        if ($match_list_name !== null) {
            $queryParams['matchList.name'] = ObjectSerializer::toQueryValue($match_list_name);
        }
        // query params
        if ($match_list2 !== null) {
            $queryParams['matchList[]'] = ObjectSerializer::toQueryValue($match_list2);
        }
        // query params
        if ($match_list_exists !== null) {
            $queryParams['matchList[exists]'] = ObjectSerializer::toQueryValue($match_list_exists);
        }
        // query params
        if ($outgoing_ddi_rule !== null) {
            $queryParams['outgoingDdiRule'] = ObjectSerializer::toQueryValue($outgoing_ddi_rule);
        }
        // query params
        if ($outgoing_ddi_rule_default_action !== null) {
            $queryParams['outgoingDdiRule.defaultAction'] = ObjectSerializer::toQueryValue($outgoing_ddi_rule_default_action);
        }
        // query params
        if ($outgoing_ddi_rule_forced_ddi !== null) {
            $queryParams['outgoingDdiRule.forcedDdi'] = ObjectSerializer::toQueryValue($outgoing_ddi_rule_forced_ddi);
        }
        // query params
        if ($outgoing_ddi_rule_name !== null) {
            $queryParams['outgoingDdiRule.name'] = ObjectSerializer::toQueryValue($outgoing_ddi_rule_name);
        }
        // query params
        if ($outgoing_ddi_rule2 !== null) {
            $queryParams['outgoingDdiRule[]'] = ObjectSerializer::toQueryValue($outgoing_ddi_rule2);
        }
        // query params
        if ($prefix !== null) {
            $queryParams['prefix'] = ObjectSerializer::toQueryValue($prefix);
        }
        // query params
        if ($prefix_end !== null) {
            $queryParams['prefix[end]'] = ObjectSerializer::toQueryValue($prefix_end);
        }
        // query params
        if ($prefix_exact !== null) {
            $queryParams['prefix[exact]'] = ObjectSerializer::toQueryValue($prefix_exact);
        }
        // query params
        if ($prefix_exists !== null) {
            $queryParams['prefix[exists]'] = ObjectSerializer::toQueryValue($prefix_exists);
        }
        // query params
        if ($prefix_partial !== null) {
            $queryParams['prefix[partial]'] = ObjectSerializer::toQueryValue($prefix_partial);
        }
        // query params
        if ($prefix_start !== null) {
            $queryParams['prefix[start]'] = ObjectSerializer::toQueryValue($prefix_start);
        }
        // query params
        if ($priority !== null) {
            $queryParams['priority'] = ObjectSerializer::toQueryValue($priority);
        }
        // query params
        if ($priority_between !== null) {
            $queryParams['priority[between]'] = ObjectSerializer::toQueryValue($priority_between);
        }
        // query params
        if ($priority_gt !== null) {
            $queryParams['priority[gt]'] = ObjectSerializer::toQueryValue($priority_gt);
        }
        // query params
        if ($priority_gte !== null) {
            $queryParams['priority[gte]'] = ObjectSerializer::toQueryValue($priority_gte);
        }
        // query params
        if ($priority_lt !== null) {
            $queryParams['priority[lt]'] = ObjectSerializer::toQueryValue($priority_lt);
        }
        // query params
        if ($priority_lte !== null) {
            $queryParams['priority[lte]'] = ObjectSerializer::toQueryValue($priority_lte);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($type_end !== null) {
            $queryParams['type[end]'] = ObjectSerializer::toQueryValue($type_end);
        }
        // query params
        if ($type_exact !== null) {
            $queryParams['type[exact]'] = ObjectSerializer::toQueryValue($type_exact);
        }
        // query params
        if ($type_partial !== null) {
            $queryParams['type[partial]'] = ObjectSerializer::toQueryValue($type_partial);
        }
        // query params
        if ($type_start !== null) {
            $queryParams['type[start]'] = ObjectSerializer::toQueryValue($type_start);
        }
        // query params
        if ($_order_action !== null) {
            $queryParams['_order[action]'] = ObjectSerializer::toQueryValue($_order_action);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_prefix !== null) {
            $queryParams['_order[prefix]'] = ObjectSerializer::toQueryValue($_order_prefix);
        }
        // query params
        if ($_order_priority !== null) {
            $queryParams['_order[priority]'] = ObjectSerializer::toQueryValue($_order_priority);
        }
        // query params
        if ($_order_type !== null) {
            $queryParams['_order[type]'] = ObjectSerializer::toQueryValue($_order_type);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOutgoingDdiRulesPatternItem
     *
     * Retrieves a OutgoingDdiRulesPattern resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\OutgoingDdiRulesPatternDetailed
     */
    public function getOutgoingDdiRulesPatternItem($id)
    {
        list($response) = $this->getOutgoingDdiRulesPatternItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getOutgoingDdiRulesPatternItemWithHttpInfo
     *
     * Retrieves a OutgoingDdiRulesPattern resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\OutgoingDdiRulesPatternDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOutgoingDdiRulesPatternItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\OutgoingDdiRulesPatternDetailed';
        $request = $this->getOutgoingDdiRulesPatternItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\OutgoingDdiRulesPatternDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOutgoingDdiRulesPatternItemAsync
     *
     * Retrieves a OutgoingDdiRulesPattern resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOutgoingDdiRulesPatternItemAsync($id)
    {
        return $this->getOutgoingDdiRulesPatternItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOutgoingDdiRulesPatternItemAsyncWithHttpInfo
     *
     * Retrieves a OutgoingDdiRulesPattern resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOutgoingDdiRulesPatternItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\OutgoingDdiRulesPatternDetailed';
        $request = $this->getOutgoingDdiRulesPatternItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOutgoingDdiRulesPatternItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOutgoingDdiRulesPatternItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getOutgoingDdiRulesPatternItem'
            );
        }

        $resourcePath = '/outgoing_ddi_rules_patterns/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPickUpGroupCollection
     *
     * Retrieves the collection of PickUpGroup resources.
     *
     * @param  int $id_exact id_exact (optional)
     * @param  string $name name (optional)
     * @param  string $name_end name_end (optional)
     * @param  string $name_exact name_exact (optional)
     * @param  string $name_partial name_partial (optional)
     * @param  string $name_start name_start (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_name _order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\PickUpGroupCollection[]
     */
    public function getPickUpGroupCollection($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getPickUpGroupCollectionWithHttpInfo($id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $_order_id, $_order_name, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getPickUpGroupCollectionWithHttpInfo
     *
     * Retrieves the collection of PickUpGroup resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\PickUpGroupCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPickUpGroupCollectionWithHttpInfo($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\PickUpGroupCollection[]';
        $request = $this->getPickUpGroupCollectionRequest($id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $_order_id, $_order_name, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\PickUpGroupCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPickUpGroupCollectionAsync
     *
     * Retrieves the collection of PickUpGroup resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPickUpGroupCollectionAsync($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getPickUpGroupCollectionAsyncWithHttpInfo($id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $_order_id, $_order_name, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPickUpGroupCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of PickUpGroup resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPickUpGroupCollectionAsyncWithHttpInfo($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\PickUpGroupCollection[]';
        $request = $this->getPickUpGroupCollectionRequest($id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $_order_id, $_order_name, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPickUpGroupCollection'
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPickUpGroupCollectionRequest($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/pick_up_groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_end !== null) {
            $queryParams['name[end]'] = ObjectSerializer::toQueryValue($name_end);
        }
        // query params
        if ($name_exact !== null) {
            $queryParams['name[exact]'] = ObjectSerializer::toQueryValue($name_exact);
        }
        // query params
        if ($name_partial !== null) {
            $queryParams['name[partial]'] = ObjectSerializer::toQueryValue($name_partial);
        }
        // query params
        if ($name_start !== null) {
            $queryParams['name[start]'] = ObjectSerializer::toQueryValue($name_start);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_name !== null) {
            $queryParams['_order[name]'] = ObjectSerializer::toQueryValue($_order_name);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPickUpGroupItem
     *
     * Retrieves a PickUpGroup resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\PickUpGroupDetailed
     */
    public function getPickUpGroupItem($id)
    {
        list($response) = $this->getPickUpGroupItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getPickUpGroupItemWithHttpInfo
     *
     * Retrieves a PickUpGroup resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\PickUpGroupDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPickUpGroupItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\PickUpGroupDetailed';
        $request = $this->getPickUpGroupItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\PickUpGroupDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPickUpGroupItemAsync
     *
     * Retrieves a PickUpGroup resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPickUpGroupItemAsync($id)
    {
        return $this->getPickUpGroupItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPickUpGroupItemAsyncWithHttpInfo
     *
     * Retrieves a PickUpGroup resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPickUpGroupItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\PickUpGroupDetailed';
        $request = $this->getPickUpGroupItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPickUpGroupItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPickUpGroupItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getPickUpGroupItem'
            );
        }

        $resourcePath = '/pick_up_groups/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPickUpRelUserCollection
     *
     * Retrieves the collection of PickUpRelUser resources.
     *
     * @param  int $id_exact id_exact (optional)
     * @param  string $pick_up_group pick_up_group (optional)
     * @param  string $pick_up_group_name pick_up_group_name (optional)
     * @param  string $pick_up_group2 pick_up_group2 (optional)
     * @param  string $user user (optional)
     * @param  bool $user_active user_active (optional)
     * @param  int $user_boss_assistant user_boss_assistant (optional)
     * @param  int $user_boss_assistant_white_list user_boss_assistant_white_list (optional)
     * @param  int $user_call_acl user_call_acl (optional)
     * @param  bool $user_do_not_disturb user_do_not_disturb (optional)
     * @param  string $user_email user_email (optional)
     * @param  int $user_extension user_extension (optional)
     * @param  string $user_external_ip_calls user_external_ip_calls (optional)
     * @param  bool $user_gs_qr_code user_gs_qr_code (optional)
     * @param  bool $user_is_boss user_is_boss (optional)
     * @param  int $user_language user_language (optional)
     * @param  string $user_lastname user_lastname (optional)
     * @param  int $user_location user_location (optional)
     * @param  int $user_max_calls user_max_calls (optional)
     * @param  bool $user_multi_contact user_multi_contact (optional)
     * @param  string $user_name user_name (optional)
     * @param  int $user_outgoing_ddi user_outgoing_ddi (optional)
     * @param  int $user_outgoing_ddi_rule user_outgoing_ddi_rule (optional)
     * @param  string $user_pass user_pass (optional)
     * @param  string $user_reject_call_method user_reject_call_method (optional)
     * @param  int $user_terminal user_terminal (optional)
     * @param  int $user_timezone user_timezone (optional)
     * @param  int $user_transformation_rule_set user_transformation_rule_set (optional)
     * @param  bool $user_voicemail_attach_sound user_voicemail_attach_sound (optional)
     * @param  bool $user_voicemail_enabled user_voicemail_enabled (optional)
     * @param  int $user_voicemail_locution user_voicemail_locution (optional)
     * @param  bool $user_voicemail_send_mail user_voicemail_send_mail (optional)
     * @param  string $user2 user2 (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\PickUpRelUserDetailedCollection[]
     */
    public function getPickUpRelUserCollection($id_exact = null, $pick_up_group = null, $pick_up_group_name = null, $pick_up_group2 = null, $user = null, $user_active = null, $user_boss_assistant = null, $user_boss_assistant_white_list = null, $user_call_acl = null, $user_do_not_disturb = null, $user_email = null, $user_extension = null, $user_external_ip_calls = null, $user_gs_qr_code = null, $user_is_boss = null, $user_language = null, $user_lastname = null, $user_location = null, $user_max_calls = null, $user_multi_contact = null, $user_name = null, $user_outgoing_ddi = null, $user_outgoing_ddi_rule = null, $user_pass = null, $user_reject_call_method = null, $user_terminal = null, $user_timezone = null, $user_transformation_rule_set = null, $user_voicemail_attach_sound = null, $user_voicemail_enabled = null, $user_voicemail_locution = null, $user_voicemail_send_mail = null, $user2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getPickUpRelUserCollectionWithHttpInfo($id_exact, $pick_up_group, $pick_up_group_name, $pick_up_group2, $user, $user_active, $user_boss_assistant, $user_boss_assistant_white_list, $user_call_acl, $user_do_not_disturb, $user_email, $user_extension, $user_external_ip_calls, $user_gs_qr_code, $user_is_boss, $user_language, $user_lastname, $user_location, $user_max_calls, $user_multi_contact, $user_name, $user_outgoing_ddi, $user_outgoing_ddi_rule, $user_pass, $user_reject_call_method, $user_terminal, $user_timezone, $user_transformation_rule_set, $user_voicemail_attach_sound, $user_voicemail_enabled, $user_voicemail_locution, $user_voicemail_send_mail, $user2, $_order_id, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getPickUpRelUserCollectionWithHttpInfo
     *
     * Retrieves the collection of PickUpRelUser resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $pick_up_group (optional)
     * @param  string $pick_up_group_name (optional)
     * @param  string $pick_up_group2 (optional)
     * @param  string $user (optional)
     * @param  bool $user_active (optional)
     * @param  int $user_boss_assistant (optional)
     * @param  int $user_boss_assistant_white_list (optional)
     * @param  int $user_call_acl (optional)
     * @param  bool $user_do_not_disturb (optional)
     * @param  string $user_email (optional)
     * @param  int $user_extension (optional)
     * @param  string $user_external_ip_calls (optional)
     * @param  bool $user_gs_qr_code (optional)
     * @param  bool $user_is_boss (optional)
     * @param  int $user_language (optional)
     * @param  string $user_lastname (optional)
     * @param  int $user_location (optional)
     * @param  int $user_max_calls (optional)
     * @param  bool $user_multi_contact (optional)
     * @param  string $user_name (optional)
     * @param  int $user_outgoing_ddi (optional)
     * @param  int $user_outgoing_ddi_rule (optional)
     * @param  string $user_pass (optional)
     * @param  string $user_reject_call_method (optional)
     * @param  int $user_terminal (optional)
     * @param  int $user_timezone (optional)
     * @param  int $user_transformation_rule_set (optional)
     * @param  bool $user_voicemail_attach_sound (optional)
     * @param  bool $user_voicemail_enabled (optional)
     * @param  int $user_voicemail_locution (optional)
     * @param  bool $user_voicemail_send_mail (optional)
     * @param  string $user2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\PickUpRelUserDetailedCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPickUpRelUserCollectionWithHttpInfo($id_exact = null, $pick_up_group = null, $pick_up_group_name = null, $pick_up_group2 = null, $user = null, $user_active = null, $user_boss_assistant = null, $user_boss_assistant_white_list = null, $user_call_acl = null, $user_do_not_disturb = null, $user_email = null, $user_extension = null, $user_external_ip_calls = null, $user_gs_qr_code = null, $user_is_boss = null, $user_language = null, $user_lastname = null, $user_location = null, $user_max_calls = null, $user_multi_contact = null, $user_name = null, $user_outgoing_ddi = null, $user_outgoing_ddi_rule = null, $user_pass = null, $user_reject_call_method = null, $user_terminal = null, $user_timezone = null, $user_transformation_rule_set = null, $user_voicemail_attach_sound = null, $user_voicemail_enabled = null, $user_voicemail_locution = null, $user_voicemail_send_mail = null, $user2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\PickUpRelUserDetailedCollection[]';
        $request = $this->getPickUpRelUserCollectionRequest($id_exact, $pick_up_group, $pick_up_group_name, $pick_up_group2, $user, $user_active, $user_boss_assistant, $user_boss_assistant_white_list, $user_call_acl, $user_do_not_disturb, $user_email, $user_extension, $user_external_ip_calls, $user_gs_qr_code, $user_is_boss, $user_language, $user_lastname, $user_location, $user_max_calls, $user_multi_contact, $user_name, $user_outgoing_ddi, $user_outgoing_ddi_rule, $user_pass, $user_reject_call_method, $user_terminal, $user_timezone, $user_transformation_rule_set, $user_voicemail_attach_sound, $user_voicemail_enabled, $user_voicemail_locution, $user_voicemail_send_mail, $user2, $_order_id, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\PickUpRelUserDetailedCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPickUpRelUserCollectionAsync
     *
     * Retrieves the collection of PickUpRelUser resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $pick_up_group (optional)
     * @param  string $pick_up_group_name (optional)
     * @param  string $pick_up_group2 (optional)
     * @param  string $user (optional)
     * @param  bool $user_active (optional)
     * @param  int $user_boss_assistant (optional)
     * @param  int $user_boss_assistant_white_list (optional)
     * @param  int $user_call_acl (optional)
     * @param  bool $user_do_not_disturb (optional)
     * @param  string $user_email (optional)
     * @param  int $user_extension (optional)
     * @param  string $user_external_ip_calls (optional)
     * @param  bool $user_gs_qr_code (optional)
     * @param  bool $user_is_boss (optional)
     * @param  int $user_language (optional)
     * @param  string $user_lastname (optional)
     * @param  int $user_location (optional)
     * @param  int $user_max_calls (optional)
     * @param  bool $user_multi_contact (optional)
     * @param  string $user_name (optional)
     * @param  int $user_outgoing_ddi (optional)
     * @param  int $user_outgoing_ddi_rule (optional)
     * @param  string $user_pass (optional)
     * @param  string $user_reject_call_method (optional)
     * @param  int $user_terminal (optional)
     * @param  int $user_timezone (optional)
     * @param  int $user_transformation_rule_set (optional)
     * @param  bool $user_voicemail_attach_sound (optional)
     * @param  bool $user_voicemail_enabled (optional)
     * @param  int $user_voicemail_locution (optional)
     * @param  bool $user_voicemail_send_mail (optional)
     * @param  string $user2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPickUpRelUserCollectionAsync($id_exact = null, $pick_up_group = null, $pick_up_group_name = null, $pick_up_group2 = null, $user = null, $user_active = null, $user_boss_assistant = null, $user_boss_assistant_white_list = null, $user_call_acl = null, $user_do_not_disturb = null, $user_email = null, $user_extension = null, $user_external_ip_calls = null, $user_gs_qr_code = null, $user_is_boss = null, $user_language = null, $user_lastname = null, $user_location = null, $user_max_calls = null, $user_multi_contact = null, $user_name = null, $user_outgoing_ddi = null, $user_outgoing_ddi_rule = null, $user_pass = null, $user_reject_call_method = null, $user_terminal = null, $user_timezone = null, $user_transformation_rule_set = null, $user_voicemail_attach_sound = null, $user_voicemail_enabled = null, $user_voicemail_locution = null, $user_voicemail_send_mail = null, $user2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getPickUpRelUserCollectionAsyncWithHttpInfo($id_exact, $pick_up_group, $pick_up_group_name, $pick_up_group2, $user, $user_active, $user_boss_assistant, $user_boss_assistant_white_list, $user_call_acl, $user_do_not_disturb, $user_email, $user_extension, $user_external_ip_calls, $user_gs_qr_code, $user_is_boss, $user_language, $user_lastname, $user_location, $user_max_calls, $user_multi_contact, $user_name, $user_outgoing_ddi, $user_outgoing_ddi_rule, $user_pass, $user_reject_call_method, $user_terminal, $user_timezone, $user_transformation_rule_set, $user_voicemail_attach_sound, $user_voicemail_enabled, $user_voicemail_locution, $user_voicemail_send_mail, $user2, $_order_id, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPickUpRelUserCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of PickUpRelUser resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $pick_up_group (optional)
     * @param  string $pick_up_group_name (optional)
     * @param  string $pick_up_group2 (optional)
     * @param  string $user (optional)
     * @param  bool $user_active (optional)
     * @param  int $user_boss_assistant (optional)
     * @param  int $user_boss_assistant_white_list (optional)
     * @param  int $user_call_acl (optional)
     * @param  bool $user_do_not_disturb (optional)
     * @param  string $user_email (optional)
     * @param  int $user_extension (optional)
     * @param  string $user_external_ip_calls (optional)
     * @param  bool $user_gs_qr_code (optional)
     * @param  bool $user_is_boss (optional)
     * @param  int $user_language (optional)
     * @param  string $user_lastname (optional)
     * @param  int $user_location (optional)
     * @param  int $user_max_calls (optional)
     * @param  bool $user_multi_contact (optional)
     * @param  string $user_name (optional)
     * @param  int $user_outgoing_ddi (optional)
     * @param  int $user_outgoing_ddi_rule (optional)
     * @param  string $user_pass (optional)
     * @param  string $user_reject_call_method (optional)
     * @param  int $user_terminal (optional)
     * @param  int $user_timezone (optional)
     * @param  int $user_transformation_rule_set (optional)
     * @param  bool $user_voicemail_attach_sound (optional)
     * @param  bool $user_voicemail_enabled (optional)
     * @param  int $user_voicemail_locution (optional)
     * @param  bool $user_voicemail_send_mail (optional)
     * @param  string $user2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPickUpRelUserCollectionAsyncWithHttpInfo($id_exact = null, $pick_up_group = null, $pick_up_group_name = null, $pick_up_group2 = null, $user = null, $user_active = null, $user_boss_assistant = null, $user_boss_assistant_white_list = null, $user_call_acl = null, $user_do_not_disturb = null, $user_email = null, $user_extension = null, $user_external_ip_calls = null, $user_gs_qr_code = null, $user_is_boss = null, $user_language = null, $user_lastname = null, $user_location = null, $user_max_calls = null, $user_multi_contact = null, $user_name = null, $user_outgoing_ddi = null, $user_outgoing_ddi_rule = null, $user_pass = null, $user_reject_call_method = null, $user_terminal = null, $user_timezone = null, $user_transformation_rule_set = null, $user_voicemail_attach_sound = null, $user_voicemail_enabled = null, $user_voicemail_locution = null, $user_voicemail_send_mail = null, $user2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\PickUpRelUserDetailedCollection[]';
        $request = $this->getPickUpRelUserCollectionRequest($id_exact, $pick_up_group, $pick_up_group_name, $pick_up_group2, $user, $user_active, $user_boss_assistant, $user_boss_assistant_white_list, $user_call_acl, $user_do_not_disturb, $user_email, $user_extension, $user_external_ip_calls, $user_gs_qr_code, $user_is_boss, $user_language, $user_lastname, $user_location, $user_max_calls, $user_multi_contact, $user_name, $user_outgoing_ddi, $user_outgoing_ddi_rule, $user_pass, $user_reject_call_method, $user_terminal, $user_timezone, $user_transformation_rule_set, $user_voicemail_attach_sound, $user_voicemail_enabled, $user_voicemail_locution, $user_voicemail_send_mail, $user2, $_order_id, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPickUpRelUserCollection'
     *
     * @param  int $id_exact (optional)
     * @param  string $pick_up_group (optional)
     * @param  string $pick_up_group_name (optional)
     * @param  string $pick_up_group2 (optional)
     * @param  string $user (optional)
     * @param  bool $user_active (optional)
     * @param  int $user_boss_assistant (optional)
     * @param  int $user_boss_assistant_white_list (optional)
     * @param  int $user_call_acl (optional)
     * @param  bool $user_do_not_disturb (optional)
     * @param  string $user_email (optional)
     * @param  int $user_extension (optional)
     * @param  string $user_external_ip_calls (optional)
     * @param  bool $user_gs_qr_code (optional)
     * @param  bool $user_is_boss (optional)
     * @param  int $user_language (optional)
     * @param  string $user_lastname (optional)
     * @param  int $user_location (optional)
     * @param  int $user_max_calls (optional)
     * @param  bool $user_multi_contact (optional)
     * @param  string $user_name (optional)
     * @param  int $user_outgoing_ddi (optional)
     * @param  int $user_outgoing_ddi_rule (optional)
     * @param  string $user_pass (optional)
     * @param  string $user_reject_call_method (optional)
     * @param  int $user_terminal (optional)
     * @param  int $user_timezone (optional)
     * @param  int $user_transformation_rule_set (optional)
     * @param  bool $user_voicemail_attach_sound (optional)
     * @param  bool $user_voicemail_enabled (optional)
     * @param  int $user_voicemail_locution (optional)
     * @param  bool $user_voicemail_send_mail (optional)
     * @param  string $user2 (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPickUpRelUserCollectionRequest($id_exact = null, $pick_up_group = null, $pick_up_group_name = null, $pick_up_group2 = null, $user = null, $user_active = null, $user_boss_assistant = null, $user_boss_assistant_white_list = null, $user_call_acl = null, $user_do_not_disturb = null, $user_email = null, $user_extension = null, $user_external_ip_calls = null, $user_gs_qr_code = null, $user_is_boss = null, $user_language = null, $user_lastname = null, $user_location = null, $user_max_calls = null, $user_multi_contact = null, $user_name = null, $user_outgoing_ddi = null, $user_outgoing_ddi_rule = null, $user_pass = null, $user_reject_call_method = null, $user_terminal = null, $user_timezone = null, $user_transformation_rule_set = null, $user_voicemail_attach_sound = null, $user_voicemail_enabled = null, $user_voicemail_locution = null, $user_voicemail_send_mail = null, $user2 = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/pick_up_rel_users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($pick_up_group !== null) {
            $queryParams['pickUpGroup'] = ObjectSerializer::toQueryValue($pick_up_group);
        }
        // query params
        if ($pick_up_group_name !== null) {
            $queryParams['pickUpGroup.name'] = ObjectSerializer::toQueryValue($pick_up_group_name);
        }
        // query params
        if ($pick_up_group2 !== null) {
            $queryParams['pickUpGroup[]'] = ObjectSerializer::toQueryValue($pick_up_group2);
        }
        // query params
        if ($user !== null) {
            $queryParams['user'] = ObjectSerializer::toQueryValue($user);
        }
        // query params
        if ($user_active !== null) {
            $queryParams['user.active'] = ObjectSerializer::toQueryValue($user_active);
        }
        // query params
        if ($user_boss_assistant !== null) {
            $queryParams['user.bossAssistant'] = ObjectSerializer::toQueryValue($user_boss_assistant);
        }
        // query params
        if ($user_boss_assistant_white_list !== null) {
            $queryParams['user.bossAssistantWhiteList'] = ObjectSerializer::toQueryValue($user_boss_assistant_white_list);
        }
        // query params
        if ($user_call_acl !== null) {
            $queryParams['user.callAcl'] = ObjectSerializer::toQueryValue($user_call_acl);
        }
        // query params
        if ($user_do_not_disturb !== null) {
            $queryParams['user.doNotDisturb'] = ObjectSerializer::toQueryValue($user_do_not_disturb);
        }
        // query params
        if ($user_email !== null) {
            $queryParams['user.email'] = ObjectSerializer::toQueryValue($user_email);
        }
        // query params
        if ($user_extension !== null) {
            $queryParams['user.extension'] = ObjectSerializer::toQueryValue($user_extension);
        }
        // query params
        if ($user_external_ip_calls !== null) {
            $queryParams['user.externalIpCalls'] = ObjectSerializer::toQueryValue($user_external_ip_calls);
        }
        // query params
        if ($user_gs_qr_code !== null) {
            $queryParams['user.gsQRCode'] = ObjectSerializer::toQueryValue($user_gs_qr_code);
        }
        // query params
        if ($user_is_boss !== null) {
            $queryParams['user.isBoss'] = ObjectSerializer::toQueryValue($user_is_boss);
        }
        // query params
        if ($user_language !== null) {
            $queryParams['user.language'] = ObjectSerializer::toQueryValue($user_language);
        }
        // query params
        if ($user_lastname !== null) {
            $queryParams['user.lastname'] = ObjectSerializer::toQueryValue($user_lastname);
        }
        // query params
        if ($user_location !== null) {
            $queryParams['user.location'] = ObjectSerializer::toQueryValue($user_location);
        }
        // query params
        if ($user_max_calls !== null) {
            $queryParams['user.maxCalls'] = ObjectSerializer::toQueryValue($user_max_calls);
        }
        // query params
        if ($user_multi_contact !== null) {
            $queryParams['user.multiContact'] = ObjectSerializer::toQueryValue($user_multi_contact);
        }
        // query params
        if ($user_name !== null) {
            $queryParams['user.name'] = ObjectSerializer::toQueryValue($user_name);
        }
        // query params
        if ($user_outgoing_ddi !== null) {
            $queryParams['user.outgoingDdi'] = ObjectSerializer::toQueryValue($user_outgoing_ddi);
        }
        // query params
        if ($user_outgoing_ddi_rule !== null) {
            $queryParams['user.outgoingDdiRule'] = ObjectSerializer::toQueryValue($user_outgoing_ddi_rule);
        }
        // query params
        if ($user_pass !== null) {
            $queryParams['user.pass'] = ObjectSerializer::toQueryValue($user_pass);
        }
        // query params
        if ($user_reject_call_method !== null) {
            $queryParams['user.rejectCallMethod'] = ObjectSerializer::toQueryValue($user_reject_call_method);
        }
        // query params
        if ($user_terminal !== null) {
            $queryParams['user.terminal'] = ObjectSerializer::toQueryValue($user_terminal);
        }
        // query params
        if ($user_timezone !== null) {
            $queryParams['user.timezone'] = ObjectSerializer::toQueryValue($user_timezone);
        }
        // query params
        if ($user_transformation_rule_set !== null) {
            $queryParams['user.transformationRuleSet'] = ObjectSerializer::toQueryValue($user_transformation_rule_set);
        }
        // query params
        if ($user_voicemail_attach_sound !== null) {
            $queryParams['user.voicemailAttachSound'] = ObjectSerializer::toQueryValue($user_voicemail_attach_sound);
        }
        // query params
        if ($user_voicemail_enabled !== null) {
            $queryParams['user.voicemailEnabled'] = ObjectSerializer::toQueryValue($user_voicemail_enabled);
        }
        // query params
        if ($user_voicemail_locution !== null) {
            $queryParams['user.voicemailLocution'] = ObjectSerializer::toQueryValue($user_voicemail_locution);
        }
        // query params
        if ($user_voicemail_send_mail !== null) {
            $queryParams['user.voicemailSendMail'] = ObjectSerializer::toQueryValue($user_voicemail_send_mail);
        }
        // query params
        if ($user2 !== null) {
            $queryParams['user[]'] = ObjectSerializer::toQueryValue($user2);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPickUpRelUserItem
     *
     * Retrieves a PickUpRelUser resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\PickUpRelUserDetailed
     */
    public function getPickUpRelUserItem($id)
    {
        list($response) = $this->getPickUpRelUserItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getPickUpRelUserItemWithHttpInfo
     *
     * Retrieves a PickUpRelUser resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\PickUpRelUserDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPickUpRelUserItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\PickUpRelUserDetailed';
        $request = $this->getPickUpRelUserItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\PickUpRelUserDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPickUpRelUserItemAsync
     *
     * Retrieves a PickUpRelUser resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPickUpRelUserItemAsync($id)
    {
        return $this->getPickUpRelUserItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPickUpRelUserItemAsyncWithHttpInfo
     *
     * Retrieves a PickUpRelUser resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPickUpRelUserItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\PickUpRelUserDetailed';
        $request = $this->getPickUpRelUserItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPickUpRelUserItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPickUpRelUserItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getPickUpRelUserItem'
            );
        }

        $resourcePath = '/pick_up_rel_users/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQueueCollection
     *
     * Retrieves the collection of Queue resources.
     *
     * @param  string $full_extension full_extension (optional)
     * @param  string $full_extension2 full_extension2 (optional)
     * @param  bool $full_extension_exists full_extension_exists (optional)
     * @param  string $full_locution full_locution (optional)
     * @param  string $full_locution2 full_locution2 (optional)
     * @param  bool $full_locution_exists full_locution_exists (optional)
     * @param  string $full_number_country full_number_country (optional)
     * @param  string $full_number_country2 full_number_country2 (optional)
     * @param  bool $full_number_country_exists full_number_country_exists (optional)
     * @param  string $full_voice_mail_user full_voice_mail_user (optional)
     * @param  string $full_voice_mail_user2 full_voice_mail_user2 (optional)
     * @param  bool $full_voice_mail_user_exists full_voice_mail_user_exists (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  int $max_wait_time max_wait_time (optional)
     * @param  string $max_wait_time_between max_wait_time_between (optional)
     * @param  bool $max_wait_time_exists max_wait_time_exists (optional)
     * @param  string $max_wait_time_gt max_wait_time_gt (optional)
     * @param  string $max_wait_time_gte max_wait_time_gte (optional)
     * @param  string $max_wait_time_lt max_wait_time_lt (optional)
     * @param  string $max_wait_time_lte max_wait_time_lte (optional)
     * @param  int $maxlen maxlen (optional)
     * @param  string $maxlen_between maxlen_between (optional)
     * @param  bool $maxlen_exists maxlen_exists (optional)
     * @param  string $maxlen_gt maxlen_gt (optional)
     * @param  string $maxlen_gte maxlen_gte (optional)
     * @param  string $maxlen_lt maxlen_lt (optional)
     * @param  string $maxlen_lte maxlen_lte (optional)
     * @param  int $member_call_rest member_call_rest (optional)
     * @param  string $member_call_rest_between member_call_rest_between (optional)
     * @param  bool $member_call_rest_exists member_call_rest_exists (optional)
     * @param  string $member_call_rest_gt member_call_rest_gt (optional)
     * @param  string $member_call_rest_gte member_call_rest_gte (optional)
     * @param  string $member_call_rest_lt member_call_rest_lt (optional)
     * @param  string $member_call_rest_lte member_call_rest_lte (optional)
     * @param  int $member_call_timeout member_call_timeout (optional)
     * @param  string $member_call_timeout_between member_call_timeout_between (optional)
     * @param  bool $member_call_timeout_exists member_call_timeout_exists (optional)
     * @param  string $member_call_timeout_gt member_call_timeout_gt (optional)
     * @param  string $member_call_timeout_gte member_call_timeout_gte (optional)
     * @param  string $member_call_timeout_lt member_call_timeout_lt (optional)
     * @param  string $member_call_timeout_lte member_call_timeout_lte (optional)
     * @param  string $name name (optional)
     * @param  string $name_end name_end (optional)
     * @param  string $name_exact name_exact (optional)
     * @param  bool $name_exists name_exists (optional)
     * @param  string $name_partial name_partial (optional)
     * @param  string $name_start name_start (optional)
     * @param  string $periodic_announce_locution periodic_announce_locution (optional)
     * @param  string $periodic_announce_locution2 periodic_announce_locution2 (optional)
     * @param  bool $periodic_announce_locution_exists periodic_announce_locution_exists (optional)
     * @param  string $strategy strategy (optional)
     * @param  string $strategy_end strategy_end (optional)
     * @param  string $strategy_exact strategy_exact (optional)
     * @param  bool $strategy_exists strategy_exists (optional)
     * @param  string $strategy_partial strategy_partial (optional)
     * @param  string $strategy_start strategy_start (optional)
     * @param  string $timeout_extension timeout_extension (optional)
     * @param  string $timeout_extension2 timeout_extension2 (optional)
     * @param  bool $timeout_extension_exists timeout_extension_exists (optional)
     * @param  string $timeout_locution timeout_locution (optional)
     * @param  string $timeout_locution2 timeout_locution2 (optional)
     * @param  bool $timeout_locution_exists timeout_locution_exists (optional)
     * @param  string $timeout_number_country timeout_number_country (optional)
     * @param  string $timeout_number_country2 timeout_number_country2 (optional)
     * @param  bool $timeout_number_country_exists timeout_number_country_exists (optional)
     * @param  string $timeout_voice_mail_user timeout_voice_mail_user (optional)
     * @param  string $timeout_voice_mail_user2 timeout_voice_mail_user2 (optional)
     * @param  bool $timeout_voice_mail_user_exists timeout_voice_mail_user_exists (optional)
     * @param  int $weight weight (optional)
     * @param  string $weight_between weight_between (optional)
     * @param  bool $weight_exists weight_exists (optional)
     * @param  string $weight_gt weight_gt (optional)
     * @param  string $weight_gte weight_gte (optional)
     * @param  string $weight_lt weight_lt (optional)
     * @param  string $weight_lte weight_lte (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_max_wait_time _order_max_wait_time (optional)
     * @param  string $_order_maxlen _order_maxlen (optional)
     * @param  string $_order_member_call_rest _order_member_call_rest (optional)
     * @param  string $_order_member_call_timeout _order_member_call_timeout (optional)
     * @param  string $_order_name _order_name (optional)
     * @param  string $_order_strategy _order_strategy (optional)
     * @param  string $_order_weight _order_weight (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\QueueCollection[]
     */
    public function getQueueCollection($full_extension = null, $full_extension2 = null, $full_extension_exists = null, $full_locution = null, $full_locution2 = null, $full_locution_exists = null, $full_number_country = null, $full_number_country2 = null, $full_number_country_exists = null, $full_voice_mail_user = null, $full_voice_mail_user2 = null, $full_voice_mail_user_exists = null, $id_exact = null, $max_wait_time = null, $max_wait_time_between = null, $max_wait_time_exists = null, $max_wait_time_gt = null, $max_wait_time_gte = null, $max_wait_time_lt = null, $max_wait_time_lte = null, $maxlen = null, $maxlen_between = null, $maxlen_exists = null, $maxlen_gt = null, $maxlen_gte = null, $maxlen_lt = null, $maxlen_lte = null, $member_call_rest = null, $member_call_rest_between = null, $member_call_rest_exists = null, $member_call_rest_gt = null, $member_call_rest_gte = null, $member_call_rest_lt = null, $member_call_rest_lte = null, $member_call_timeout = null, $member_call_timeout_between = null, $member_call_timeout_exists = null, $member_call_timeout_gt = null, $member_call_timeout_gte = null, $member_call_timeout_lt = null, $member_call_timeout_lte = null, $name = null, $name_end = null, $name_exact = null, $name_exists = null, $name_partial = null, $name_start = null, $periodic_announce_locution = null, $periodic_announce_locution2 = null, $periodic_announce_locution_exists = null, $strategy = null, $strategy_end = null, $strategy_exact = null, $strategy_exists = null, $strategy_partial = null, $strategy_start = null, $timeout_extension = null, $timeout_extension2 = null, $timeout_extension_exists = null, $timeout_locution = null, $timeout_locution2 = null, $timeout_locution_exists = null, $timeout_number_country = null, $timeout_number_country2 = null, $timeout_number_country_exists = null, $timeout_voice_mail_user = null, $timeout_voice_mail_user2 = null, $timeout_voice_mail_user_exists = null, $weight = null, $weight_between = null, $weight_exists = null, $weight_gt = null, $weight_gte = null, $weight_lt = null, $weight_lte = null, $_order_id = null, $_order_max_wait_time = null, $_order_maxlen = null, $_order_member_call_rest = null, $_order_member_call_timeout = null, $_order_name = null, $_order_strategy = null, $_order_weight = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getQueueCollectionWithHttpInfo($full_extension, $full_extension2, $full_extension_exists, $full_locution, $full_locution2, $full_locution_exists, $full_number_country, $full_number_country2, $full_number_country_exists, $full_voice_mail_user, $full_voice_mail_user2, $full_voice_mail_user_exists, $id_exact, $max_wait_time, $max_wait_time_between, $max_wait_time_exists, $max_wait_time_gt, $max_wait_time_gte, $max_wait_time_lt, $max_wait_time_lte, $maxlen, $maxlen_between, $maxlen_exists, $maxlen_gt, $maxlen_gte, $maxlen_lt, $maxlen_lte, $member_call_rest, $member_call_rest_between, $member_call_rest_exists, $member_call_rest_gt, $member_call_rest_gte, $member_call_rest_lt, $member_call_rest_lte, $member_call_timeout, $member_call_timeout_between, $member_call_timeout_exists, $member_call_timeout_gt, $member_call_timeout_gte, $member_call_timeout_lt, $member_call_timeout_lte, $name, $name_end, $name_exact, $name_exists, $name_partial, $name_start, $periodic_announce_locution, $periodic_announce_locution2, $periodic_announce_locution_exists, $strategy, $strategy_end, $strategy_exact, $strategy_exists, $strategy_partial, $strategy_start, $timeout_extension, $timeout_extension2, $timeout_extension_exists, $timeout_locution, $timeout_locution2, $timeout_locution_exists, $timeout_number_country, $timeout_number_country2, $timeout_number_country_exists, $timeout_voice_mail_user, $timeout_voice_mail_user2, $timeout_voice_mail_user_exists, $weight, $weight_between, $weight_exists, $weight_gt, $weight_gte, $weight_lt, $weight_lte, $_order_id, $_order_max_wait_time, $_order_maxlen, $_order_member_call_rest, $_order_member_call_timeout, $_order_name, $_order_strategy, $_order_weight, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getQueueCollectionWithHttpInfo
     *
     * Retrieves the collection of Queue resources.
     *
     * @param  string $full_extension (optional)
     * @param  string $full_extension2 (optional)
     * @param  bool $full_extension_exists (optional)
     * @param  string $full_locution (optional)
     * @param  string $full_locution2 (optional)
     * @param  bool $full_locution_exists (optional)
     * @param  string $full_number_country (optional)
     * @param  string $full_number_country2 (optional)
     * @param  bool $full_number_country_exists (optional)
     * @param  string $full_voice_mail_user (optional)
     * @param  string $full_voice_mail_user2 (optional)
     * @param  bool $full_voice_mail_user_exists (optional)
     * @param  int $id_exact (optional)
     * @param  int $max_wait_time (optional)
     * @param  string $max_wait_time_between (optional)
     * @param  bool $max_wait_time_exists (optional)
     * @param  string $max_wait_time_gt (optional)
     * @param  string $max_wait_time_gte (optional)
     * @param  string $max_wait_time_lt (optional)
     * @param  string $max_wait_time_lte (optional)
     * @param  int $maxlen (optional)
     * @param  string $maxlen_between (optional)
     * @param  bool $maxlen_exists (optional)
     * @param  string $maxlen_gt (optional)
     * @param  string $maxlen_gte (optional)
     * @param  string $maxlen_lt (optional)
     * @param  string $maxlen_lte (optional)
     * @param  int $member_call_rest (optional)
     * @param  string $member_call_rest_between (optional)
     * @param  bool $member_call_rest_exists (optional)
     * @param  string $member_call_rest_gt (optional)
     * @param  string $member_call_rest_gte (optional)
     * @param  string $member_call_rest_lt (optional)
     * @param  string $member_call_rest_lte (optional)
     * @param  int $member_call_timeout (optional)
     * @param  string $member_call_timeout_between (optional)
     * @param  bool $member_call_timeout_exists (optional)
     * @param  string $member_call_timeout_gt (optional)
     * @param  string $member_call_timeout_gte (optional)
     * @param  string $member_call_timeout_lt (optional)
     * @param  string $member_call_timeout_lte (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  bool $name_exists (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $periodic_announce_locution (optional)
     * @param  string $periodic_announce_locution2 (optional)
     * @param  bool $periodic_announce_locution_exists (optional)
     * @param  string $strategy (optional)
     * @param  string $strategy_end (optional)
     * @param  string $strategy_exact (optional)
     * @param  bool $strategy_exists (optional)
     * @param  string $strategy_partial (optional)
     * @param  string $strategy_start (optional)
     * @param  string $timeout_extension (optional)
     * @param  string $timeout_extension2 (optional)
     * @param  bool $timeout_extension_exists (optional)
     * @param  string $timeout_locution (optional)
     * @param  string $timeout_locution2 (optional)
     * @param  bool $timeout_locution_exists (optional)
     * @param  string $timeout_number_country (optional)
     * @param  string $timeout_number_country2 (optional)
     * @param  bool $timeout_number_country_exists (optional)
     * @param  string $timeout_voice_mail_user (optional)
     * @param  string $timeout_voice_mail_user2 (optional)
     * @param  bool $timeout_voice_mail_user_exists (optional)
     * @param  int $weight (optional)
     * @param  string $weight_between (optional)
     * @param  bool $weight_exists (optional)
     * @param  string $weight_gt (optional)
     * @param  string $weight_gte (optional)
     * @param  string $weight_lt (optional)
     * @param  string $weight_lte (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_max_wait_time (optional)
     * @param  string $_order_maxlen (optional)
     * @param  string $_order_member_call_rest (optional)
     * @param  string $_order_member_call_timeout (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_strategy (optional)
     * @param  string $_order_weight (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\QueueCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getQueueCollectionWithHttpInfo($full_extension = null, $full_extension2 = null, $full_extension_exists = null, $full_locution = null, $full_locution2 = null, $full_locution_exists = null, $full_number_country = null, $full_number_country2 = null, $full_number_country_exists = null, $full_voice_mail_user = null, $full_voice_mail_user2 = null, $full_voice_mail_user_exists = null, $id_exact = null, $max_wait_time = null, $max_wait_time_between = null, $max_wait_time_exists = null, $max_wait_time_gt = null, $max_wait_time_gte = null, $max_wait_time_lt = null, $max_wait_time_lte = null, $maxlen = null, $maxlen_between = null, $maxlen_exists = null, $maxlen_gt = null, $maxlen_gte = null, $maxlen_lt = null, $maxlen_lte = null, $member_call_rest = null, $member_call_rest_between = null, $member_call_rest_exists = null, $member_call_rest_gt = null, $member_call_rest_gte = null, $member_call_rest_lt = null, $member_call_rest_lte = null, $member_call_timeout = null, $member_call_timeout_between = null, $member_call_timeout_exists = null, $member_call_timeout_gt = null, $member_call_timeout_gte = null, $member_call_timeout_lt = null, $member_call_timeout_lte = null, $name = null, $name_end = null, $name_exact = null, $name_exists = null, $name_partial = null, $name_start = null, $periodic_announce_locution = null, $periodic_announce_locution2 = null, $periodic_announce_locution_exists = null, $strategy = null, $strategy_end = null, $strategy_exact = null, $strategy_exists = null, $strategy_partial = null, $strategy_start = null, $timeout_extension = null, $timeout_extension2 = null, $timeout_extension_exists = null, $timeout_locution = null, $timeout_locution2 = null, $timeout_locution_exists = null, $timeout_number_country = null, $timeout_number_country2 = null, $timeout_number_country_exists = null, $timeout_voice_mail_user = null, $timeout_voice_mail_user2 = null, $timeout_voice_mail_user_exists = null, $weight = null, $weight_between = null, $weight_exists = null, $weight_gt = null, $weight_gte = null, $weight_lt = null, $weight_lte = null, $_order_id = null, $_order_max_wait_time = null, $_order_maxlen = null, $_order_member_call_rest = null, $_order_member_call_timeout = null, $_order_name = null, $_order_strategy = null, $_order_weight = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\QueueCollection[]';
        $request = $this->getQueueCollectionRequest($full_extension, $full_extension2, $full_extension_exists, $full_locution, $full_locution2, $full_locution_exists, $full_number_country, $full_number_country2, $full_number_country_exists, $full_voice_mail_user, $full_voice_mail_user2, $full_voice_mail_user_exists, $id_exact, $max_wait_time, $max_wait_time_between, $max_wait_time_exists, $max_wait_time_gt, $max_wait_time_gte, $max_wait_time_lt, $max_wait_time_lte, $maxlen, $maxlen_between, $maxlen_exists, $maxlen_gt, $maxlen_gte, $maxlen_lt, $maxlen_lte, $member_call_rest, $member_call_rest_between, $member_call_rest_exists, $member_call_rest_gt, $member_call_rest_gte, $member_call_rest_lt, $member_call_rest_lte, $member_call_timeout, $member_call_timeout_between, $member_call_timeout_exists, $member_call_timeout_gt, $member_call_timeout_gte, $member_call_timeout_lt, $member_call_timeout_lte, $name, $name_end, $name_exact, $name_exists, $name_partial, $name_start, $periodic_announce_locution, $periodic_announce_locution2, $periodic_announce_locution_exists, $strategy, $strategy_end, $strategy_exact, $strategy_exists, $strategy_partial, $strategy_start, $timeout_extension, $timeout_extension2, $timeout_extension_exists, $timeout_locution, $timeout_locution2, $timeout_locution_exists, $timeout_number_country, $timeout_number_country2, $timeout_number_country_exists, $timeout_voice_mail_user, $timeout_voice_mail_user2, $timeout_voice_mail_user_exists, $weight, $weight_between, $weight_exists, $weight_gt, $weight_gte, $weight_lt, $weight_lte, $_order_id, $_order_max_wait_time, $_order_maxlen, $_order_member_call_rest, $_order_member_call_timeout, $_order_name, $_order_strategy, $_order_weight, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\QueueCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQueueCollectionAsync
     *
     * Retrieves the collection of Queue resources.
     *
     * @param  string $full_extension (optional)
     * @param  string $full_extension2 (optional)
     * @param  bool $full_extension_exists (optional)
     * @param  string $full_locution (optional)
     * @param  string $full_locution2 (optional)
     * @param  bool $full_locution_exists (optional)
     * @param  string $full_number_country (optional)
     * @param  string $full_number_country2 (optional)
     * @param  bool $full_number_country_exists (optional)
     * @param  string $full_voice_mail_user (optional)
     * @param  string $full_voice_mail_user2 (optional)
     * @param  bool $full_voice_mail_user_exists (optional)
     * @param  int $id_exact (optional)
     * @param  int $max_wait_time (optional)
     * @param  string $max_wait_time_between (optional)
     * @param  bool $max_wait_time_exists (optional)
     * @param  string $max_wait_time_gt (optional)
     * @param  string $max_wait_time_gte (optional)
     * @param  string $max_wait_time_lt (optional)
     * @param  string $max_wait_time_lte (optional)
     * @param  int $maxlen (optional)
     * @param  string $maxlen_between (optional)
     * @param  bool $maxlen_exists (optional)
     * @param  string $maxlen_gt (optional)
     * @param  string $maxlen_gte (optional)
     * @param  string $maxlen_lt (optional)
     * @param  string $maxlen_lte (optional)
     * @param  int $member_call_rest (optional)
     * @param  string $member_call_rest_between (optional)
     * @param  bool $member_call_rest_exists (optional)
     * @param  string $member_call_rest_gt (optional)
     * @param  string $member_call_rest_gte (optional)
     * @param  string $member_call_rest_lt (optional)
     * @param  string $member_call_rest_lte (optional)
     * @param  int $member_call_timeout (optional)
     * @param  string $member_call_timeout_between (optional)
     * @param  bool $member_call_timeout_exists (optional)
     * @param  string $member_call_timeout_gt (optional)
     * @param  string $member_call_timeout_gte (optional)
     * @param  string $member_call_timeout_lt (optional)
     * @param  string $member_call_timeout_lte (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  bool $name_exists (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $periodic_announce_locution (optional)
     * @param  string $periodic_announce_locution2 (optional)
     * @param  bool $periodic_announce_locution_exists (optional)
     * @param  string $strategy (optional)
     * @param  string $strategy_end (optional)
     * @param  string $strategy_exact (optional)
     * @param  bool $strategy_exists (optional)
     * @param  string $strategy_partial (optional)
     * @param  string $strategy_start (optional)
     * @param  string $timeout_extension (optional)
     * @param  string $timeout_extension2 (optional)
     * @param  bool $timeout_extension_exists (optional)
     * @param  string $timeout_locution (optional)
     * @param  string $timeout_locution2 (optional)
     * @param  bool $timeout_locution_exists (optional)
     * @param  string $timeout_number_country (optional)
     * @param  string $timeout_number_country2 (optional)
     * @param  bool $timeout_number_country_exists (optional)
     * @param  string $timeout_voice_mail_user (optional)
     * @param  string $timeout_voice_mail_user2 (optional)
     * @param  bool $timeout_voice_mail_user_exists (optional)
     * @param  int $weight (optional)
     * @param  string $weight_between (optional)
     * @param  bool $weight_exists (optional)
     * @param  string $weight_gt (optional)
     * @param  string $weight_gte (optional)
     * @param  string $weight_lt (optional)
     * @param  string $weight_lte (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_max_wait_time (optional)
     * @param  string $_order_maxlen (optional)
     * @param  string $_order_member_call_rest (optional)
     * @param  string $_order_member_call_timeout (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_strategy (optional)
     * @param  string $_order_weight (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQueueCollectionAsync($full_extension = null, $full_extension2 = null, $full_extension_exists = null, $full_locution = null, $full_locution2 = null, $full_locution_exists = null, $full_number_country = null, $full_number_country2 = null, $full_number_country_exists = null, $full_voice_mail_user = null, $full_voice_mail_user2 = null, $full_voice_mail_user_exists = null, $id_exact = null, $max_wait_time = null, $max_wait_time_between = null, $max_wait_time_exists = null, $max_wait_time_gt = null, $max_wait_time_gte = null, $max_wait_time_lt = null, $max_wait_time_lte = null, $maxlen = null, $maxlen_between = null, $maxlen_exists = null, $maxlen_gt = null, $maxlen_gte = null, $maxlen_lt = null, $maxlen_lte = null, $member_call_rest = null, $member_call_rest_between = null, $member_call_rest_exists = null, $member_call_rest_gt = null, $member_call_rest_gte = null, $member_call_rest_lt = null, $member_call_rest_lte = null, $member_call_timeout = null, $member_call_timeout_between = null, $member_call_timeout_exists = null, $member_call_timeout_gt = null, $member_call_timeout_gte = null, $member_call_timeout_lt = null, $member_call_timeout_lte = null, $name = null, $name_end = null, $name_exact = null, $name_exists = null, $name_partial = null, $name_start = null, $periodic_announce_locution = null, $periodic_announce_locution2 = null, $periodic_announce_locution_exists = null, $strategy = null, $strategy_end = null, $strategy_exact = null, $strategy_exists = null, $strategy_partial = null, $strategy_start = null, $timeout_extension = null, $timeout_extension2 = null, $timeout_extension_exists = null, $timeout_locution = null, $timeout_locution2 = null, $timeout_locution_exists = null, $timeout_number_country = null, $timeout_number_country2 = null, $timeout_number_country_exists = null, $timeout_voice_mail_user = null, $timeout_voice_mail_user2 = null, $timeout_voice_mail_user_exists = null, $weight = null, $weight_between = null, $weight_exists = null, $weight_gt = null, $weight_gte = null, $weight_lt = null, $weight_lte = null, $_order_id = null, $_order_max_wait_time = null, $_order_maxlen = null, $_order_member_call_rest = null, $_order_member_call_timeout = null, $_order_name = null, $_order_strategy = null, $_order_weight = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getQueueCollectionAsyncWithHttpInfo($full_extension, $full_extension2, $full_extension_exists, $full_locution, $full_locution2, $full_locution_exists, $full_number_country, $full_number_country2, $full_number_country_exists, $full_voice_mail_user, $full_voice_mail_user2, $full_voice_mail_user_exists, $id_exact, $max_wait_time, $max_wait_time_between, $max_wait_time_exists, $max_wait_time_gt, $max_wait_time_gte, $max_wait_time_lt, $max_wait_time_lte, $maxlen, $maxlen_between, $maxlen_exists, $maxlen_gt, $maxlen_gte, $maxlen_lt, $maxlen_lte, $member_call_rest, $member_call_rest_between, $member_call_rest_exists, $member_call_rest_gt, $member_call_rest_gte, $member_call_rest_lt, $member_call_rest_lte, $member_call_timeout, $member_call_timeout_between, $member_call_timeout_exists, $member_call_timeout_gt, $member_call_timeout_gte, $member_call_timeout_lt, $member_call_timeout_lte, $name, $name_end, $name_exact, $name_exists, $name_partial, $name_start, $periodic_announce_locution, $periodic_announce_locution2, $periodic_announce_locution_exists, $strategy, $strategy_end, $strategy_exact, $strategy_exists, $strategy_partial, $strategy_start, $timeout_extension, $timeout_extension2, $timeout_extension_exists, $timeout_locution, $timeout_locution2, $timeout_locution_exists, $timeout_number_country, $timeout_number_country2, $timeout_number_country_exists, $timeout_voice_mail_user, $timeout_voice_mail_user2, $timeout_voice_mail_user_exists, $weight, $weight_between, $weight_exists, $weight_gt, $weight_gte, $weight_lt, $weight_lte, $_order_id, $_order_max_wait_time, $_order_maxlen, $_order_member_call_rest, $_order_member_call_timeout, $_order_name, $_order_strategy, $_order_weight, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQueueCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of Queue resources.
     *
     * @param  string $full_extension (optional)
     * @param  string $full_extension2 (optional)
     * @param  bool $full_extension_exists (optional)
     * @param  string $full_locution (optional)
     * @param  string $full_locution2 (optional)
     * @param  bool $full_locution_exists (optional)
     * @param  string $full_number_country (optional)
     * @param  string $full_number_country2 (optional)
     * @param  bool $full_number_country_exists (optional)
     * @param  string $full_voice_mail_user (optional)
     * @param  string $full_voice_mail_user2 (optional)
     * @param  bool $full_voice_mail_user_exists (optional)
     * @param  int $id_exact (optional)
     * @param  int $max_wait_time (optional)
     * @param  string $max_wait_time_between (optional)
     * @param  bool $max_wait_time_exists (optional)
     * @param  string $max_wait_time_gt (optional)
     * @param  string $max_wait_time_gte (optional)
     * @param  string $max_wait_time_lt (optional)
     * @param  string $max_wait_time_lte (optional)
     * @param  int $maxlen (optional)
     * @param  string $maxlen_between (optional)
     * @param  bool $maxlen_exists (optional)
     * @param  string $maxlen_gt (optional)
     * @param  string $maxlen_gte (optional)
     * @param  string $maxlen_lt (optional)
     * @param  string $maxlen_lte (optional)
     * @param  int $member_call_rest (optional)
     * @param  string $member_call_rest_between (optional)
     * @param  bool $member_call_rest_exists (optional)
     * @param  string $member_call_rest_gt (optional)
     * @param  string $member_call_rest_gte (optional)
     * @param  string $member_call_rest_lt (optional)
     * @param  string $member_call_rest_lte (optional)
     * @param  int $member_call_timeout (optional)
     * @param  string $member_call_timeout_between (optional)
     * @param  bool $member_call_timeout_exists (optional)
     * @param  string $member_call_timeout_gt (optional)
     * @param  string $member_call_timeout_gte (optional)
     * @param  string $member_call_timeout_lt (optional)
     * @param  string $member_call_timeout_lte (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  bool $name_exists (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $periodic_announce_locution (optional)
     * @param  string $periodic_announce_locution2 (optional)
     * @param  bool $periodic_announce_locution_exists (optional)
     * @param  string $strategy (optional)
     * @param  string $strategy_end (optional)
     * @param  string $strategy_exact (optional)
     * @param  bool $strategy_exists (optional)
     * @param  string $strategy_partial (optional)
     * @param  string $strategy_start (optional)
     * @param  string $timeout_extension (optional)
     * @param  string $timeout_extension2 (optional)
     * @param  bool $timeout_extension_exists (optional)
     * @param  string $timeout_locution (optional)
     * @param  string $timeout_locution2 (optional)
     * @param  bool $timeout_locution_exists (optional)
     * @param  string $timeout_number_country (optional)
     * @param  string $timeout_number_country2 (optional)
     * @param  bool $timeout_number_country_exists (optional)
     * @param  string $timeout_voice_mail_user (optional)
     * @param  string $timeout_voice_mail_user2 (optional)
     * @param  bool $timeout_voice_mail_user_exists (optional)
     * @param  int $weight (optional)
     * @param  string $weight_between (optional)
     * @param  bool $weight_exists (optional)
     * @param  string $weight_gt (optional)
     * @param  string $weight_gte (optional)
     * @param  string $weight_lt (optional)
     * @param  string $weight_lte (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_max_wait_time (optional)
     * @param  string $_order_maxlen (optional)
     * @param  string $_order_member_call_rest (optional)
     * @param  string $_order_member_call_timeout (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_strategy (optional)
     * @param  string $_order_weight (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQueueCollectionAsyncWithHttpInfo($full_extension = null, $full_extension2 = null, $full_extension_exists = null, $full_locution = null, $full_locution2 = null, $full_locution_exists = null, $full_number_country = null, $full_number_country2 = null, $full_number_country_exists = null, $full_voice_mail_user = null, $full_voice_mail_user2 = null, $full_voice_mail_user_exists = null, $id_exact = null, $max_wait_time = null, $max_wait_time_between = null, $max_wait_time_exists = null, $max_wait_time_gt = null, $max_wait_time_gte = null, $max_wait_time_lt = null, $max_wait_time_lte = null, $maxlen = null, $maxlen_between = null, $maxlen_exists = null, $maxlen_gt = null, $maxlen_gte = null, $maxlen_lt = null, $maxlen_lte = null, $member_call_rest = null, $member_call_rest_between = null, $member_call_rest_exists = null, $member_call_rest_gt = null, $member_call_rest_gte = null, $member_call_rest_lt = null, $member_call_rest_lte = null, $member_call_timeout = null, $member_call_timeout_between = null, $member_call_timeout_exists = null, $member_call_timeout_gt = null, $member_call_timeout_gte = null, $member_call_timeout_lt = null, $member_call_timeout_lte = null, $name = null, $name_end = null, $name_exact = null, $name_exists = null, $name_partial = null, $name_start = null, $periodic_announce_locution = null, $periodic_announce_locution2 = null, $periodic_announce_locution_exists = null, $strategy = null, $strategy_end = null, $strategy_exact = null, $strategy_exists = null, $strategy_partial = null, $strategy_start = null, $timeout_extension = null, $timeout_extension2 = null, $timeout_extension_exists = null, $timeout_locution = null, $timeout_locution2 = null, $timeout_locution_exists = null, $timeout_number_country = null, $timeout_number_country2 = null, $timeout_number_country_exists = null, $timeout_voice_mail_user = null, $timeout_voice_mail_user2 = null, $timeout_voice_mail_user_exists = null, $weight = null, $weight_between = null, $weight_exists = null, $weight_gt = null, $weight_gte = null, $weight_lt = null, $weight_lte = null, $_order_id = null, $_order_max_wait_time = null, $_order_maxlen = null, $_order_member_call_rest = null, $_order_member_call_timeout = null, $_order_name = null, $_order_strategy = null, $_order_weight = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\QueueCollection[]';
        $request = $this->getQueueCollectionRequest($full_extension, $full_extension2, $full_extension_exists, $full_locution, $full_locution2, $full_locution_exists, $full_number_country, $full_number_country2, $full_number_country_exists, $full_voice_mail_user, $full_voice_mail_user2, $full_voice_mail_user_exists, $id_exact, $max_wait_time, $max_wait_time_between, $max_wait_time_exists, $max_wait_time_gt, $max_wait_time_gte, $max_wait_time_lt, $max_wait_time_lte, $maxlen, $maxlen_between, $maxlen_exists, $maxlen_gt, $maxlen_gte, $maxlen_lt, $maxlen_lte, $member_call_rest, $member_call_rest_between, $member_call_rest_exists, $member_call_rest_gt, $member_call_rest_gte, $member_call_rest_lt, $member_call_rest_lte, $member_call_timeout, $member_call_timeout_between, $member_call_timeout_exists, $member_call_timeout_gt, $member_call_timeout_gte, $member_call_timeout_lt, $member_call_timeout_lte, $name, $name_end, $name_exact, $name_exists, $name_partial, $name_start, $periodic_announce_locution, $periodic_announce_locution2, $periodic_announce_locution_exists, $strategy, $strategy_end, $strategy_exact, $strategy_exists, $strategy_partial, $strategy_start, $timeout_extension, $timeout_extension2, $timeout_extension_exists, $timeout_locution, $timeout_locution2, $timeout_locution_exists, $timeout_number_country, $timeout_number_country2, $timeout_number_country_exists, $timeout_voice_mail_user, $timeout_voice_mail_user2, $timeout_voice_mail_user_exists, $weight, $weight_between, $weight_exists, $weight_gt, $weight_gte, $weight_lt, $weight_lte, $_order_id, $_order_max_wait_time, $_order_maxlen, $_order_member_call_rest, $_order_member_call_timeout, $_order_name, $_order_strategy, $_order_weight, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQueueCollection'
     *
     * @param  string $full_extension (optional)
     * @param  string $full_extension2 (optional)
     * @param  bool $full_extension_exists (optional)
     * @param  string $full_locution (optional)
     * @param  string $full_locution2 (optional)
     * @param  bool $full_locution_exists (optional)
     * @param  string $full_number_country (optional)
     * @param  string $full_number_country2 (optional)
     * @param  bool $full_number_country_exists (optional)
     * @param  string $full_voice_mail_user (optional)
     * @param  string $full_voice_mail_user2 (optional)
     * @param  bool $full_voice_mail_user_exists (optional)
     * @param  int $id_exact (optional)
     * @param  int $max_wait_time (optional)
     * @param  string $max_wait_time_between (optional)
     * @param  bool $max_wait_time_exists (optional)
     * @param  string $max_wait_time_gt (optional)
     * @param  string $max_wait_time_gte (optional)
     * @param  string $max_wait_time_lt (optional)
     * @param  string $max_wait_time_lte (optional)
     * @param  int $maxlen (optional)
     * @param  string $maxlen_between (optional)
     * @param  bool $maxlen_exists (optional)
     * @param  string $maxlen_gt (optional)
     * @param  string $maxlen_gte (optional)
     * @param  string $maxlen_lt (optional)
     * @param  string $maxlen_lte (optional)
     * @param  int $member_call_rest (optional)
     * @param  string $member_call_rest_between (optional)
     * @param  bool $member_call_rest_exists (optional)
     * @param  string $member_call_rest_gt (optional)
     * @param  string $member_call_rest_gte (optional)
     * @param  string $member_call_rest_lt (optional)
     * @param  string $member_call_rest_lte (optional)
     * @param  int $member_call_timeout (optional)
     * @param  string $member_call_timeout_between (optional)
     * @param  bool $member_call_timeout_exists (optional)
     * @param  string $member_call_timeout_gt (optional)
     * @param  string $member_call_timeout_gte (optional)
     * @param  string $member_call_timeout_lt (optional)
     * @param  string $member_call_timeout_lte (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  bool $name_exists (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $periodic_announce_locution (optional)
     * @param  string $periodic_announce_locution2 (optional)
     * @param  bool $periodic_announce_locution_exists (optional)
     * @param  string $strategy (optional)
     * @param  string $strategy_end (optional)
     * @param  string $strategy_exact (optional)
     * @param  bool $strategy_exists (optional)
     * @param  string $strategy_partial (optional)
     * @param  string $strategy_start (optional)
     * @param  string $timeout_extension (optional)
     * @param  string $timeout_extension2 (optional)
     * @param  bool $timeout_extension_exists (optional)
     * @param  string $timeout_locution (optional)
     * @param  string $timeout_locution2 (optional)
     * @param  bool $timeout_locution_exists (optional)
     * @param  string $timeout_number_country (optional)
     * @param  string $timeout_number_country2 (optional)
     * @param  bool $timeout_number_country_exists (optional)
     * @param  string $timeout_voice_mail_user (optional)
     * @param  string $timeout_voice_mail_user2 (optional)
     * @param  bool $timeout_voice_mail_user_exists (optional)
     * @param  int $weight (optional)
     * @param  string $weight_between (optional)
     * @param  bool $weight_exists (optional)
     * @param  string $weight_gt (optional)
     * @param  string $weight_gte (optional)
     * @param  string $weight_lt (optional)
     * @param  string $weight_lte (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_max_wait_time (optional)
     * @param  string $_order_maxlen (optional)
     * @param  string $_order_member_call_rest (optional)
     * @param  string $_order_member_call_timeout (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_strategy (optional)
     * @param  string $_order_weight (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQueueCollectionRequest($full_extension = null, $full_extension2 = null, $full_extension_exists = null, $full_locution = null, $full_locution2 = null, $full_locution_exists = null, $full_number_country = null, $full_number_country2 = null, $full_number_country_exists = null, $full_voice_mail_user = null, $full_voice_mail_user2 = null, $full_voice_mail_user_exists = null, $id_exact = null, $max_wait_time = null, $max_wait_time_between = null, $max_wait_time_exists = null, $max_wait_time_gt = null, $max_wait_time_gte = null, $max_wait_time_lt = null, $max_wait_time_lte = null, $maxlen = null, $maxlen_between = null, $maxlen_exists = null, $maxlen_gt = null, $maxlen_gte = null, $maxlen_lt = null, $maxlen_lte = null, $member_call_rest = null, $member_call_rest_between = null, $member_call_rest_exists = null, $member_call_rest_gt = null, $member_call_rest_gte = null, $member_call_rest_lt = null, $member_call_rest_lte = null, $member_call_timeout = null, $member_call_timeout_between = null, $member_call_timeout_exists = null, $member_call_timeout_gt = null, $member_call_timeout_gte = null, $member_call_timeout_lt = null, $member_call_timeout_lte = null, $name = null, $name_end = null, $name_exact = null, $name_exists = null, $name_partial = null, $name_start = null, $periodic_announce_locution = null, $periodic_announce_locution2 = null, $periodic_announce_locution_exists = null, $strategy = null, $strategy_end = null, $strategy_exact = null, $strategy_exists = null, $strategy_partial = null, $strategy_start = null, $timeout_extension = null, $timeout_extension2 = null, $timeout_extension_exists = null, $timeout_locution = null, $timeout_locution2 = null, $timeout_locution_exists = null, $timeout_number_country = null, $timeout_number_country2 = null, $timeout_number_country_exists = null, $timeout_voice_mail_user = null, $timeout_voice_mail_user2 = null, $timeout_voice_mail_user_exists = null, $weight = null, $weight_between = null, $weight_exists = null, $weight_gt = null, $weight_gte = null, $weight_lt = null, $weight_lte = null, $_order_id = null, $_order_max_wait_time = null, $_order_maxlen = null, $_order_member_call_rest = null, $_order_member_call_timeout = null, $_order_name = null, $_order_strategy = null, $_order_weight = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/queues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($full_extension !== null) {
            $queryParams['fullExtension'] = ObjectSerializer::toQueryValue($full_extension);
        }
        // query params
        if ($full_extension2 !== null) {
            $queryParams['fullExtension[]'] = ObjectSerializer::toQueryValue($full_extension2);
        }
        // query params
        if ($full_extension_exists !== null) {
            $queryParams['fullExtension[exists]'] = ObjectSerializer::toQueryValue($full_extension_exists);
        }
        // query params
        if ($full_locution !== null) {
            $queryParams['fullLocution'] = ObjectSerializer::toQueryValue($full_locution);
        }
        // query params
        if ($full_locution2 !== null) {
            $queryParams['fullLocution[]'] = ObjectSerializer::toQueryValue($full_locution2);
        }
        // query params
        if ($full_locution_exists !== null) {
            $queryParams['fullLocution[exists]'] = ObjectSerializer::toQueryValue($full_locution_exists);
        }
        // query params
        if ($full_number_country !== null) {
            $queryParams['fullNumberCountry'] = ObjectSerializer::toQueryValue($full_number_country);
        }
        // query params
        if ($full_number_country2 !== null) {
            $queryParams['fullNumberCountry[]'] = ObjectSerializer::toQueryValue($full_number_country2);
        }
        // query params
        if ($full_number_country_exists !== null) {
            $queryParams['fullNumberCountry[exists]'] = ObjectSerializer::toQueryValue($full_number_country_exists);
        }
        // query params
        if ($full_voice_mail_user !== null) {
            $queryParams['fullVoiceMailUser'] = ObjectSerializer::toQueryValue($full_voice_mail_user);
        }
        // query params
        if ($full_voice_mail_user2 !== null) {
            $queryParams['fullVoiceMailUser[]'] = ObjectSerializer::toQueryValue($full_voice_mail_user2);
        }
        // query params
        if ($full_voice_mail_user_exists !== null) {
            $queryParams['fullVoiceMailUser[exists]'] = ObjectSerializer::toQueryValue($full_voice_mail_user_exists);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($max_wait_time !== null) {
            $queryParams['maxWaitTime'] = ObjectSerializer::toQueryValue($max_wait_time);
        }
        // query params
        if ($max_wait_time_between !== null) {
            $queryParams['maxWaitTime[between]'] = ObjectSerializer::toQueryValue($max_wait_time_between);
        }
        // query params
        if ($max_wait_time_exists !== null) {
            $queryParams['maxWaitTime[exists]'] = ObjectSerializer::toQueryValue($max_wait_time_exists);
        }
        // query params
        if ($max_wait_time_gt !== null) {
            $queryParams['maxWaitTime[gt]'] = ObjectSerializer::toQueryValue($max_wait_time_gt);
        }
        // query params
        if ($max_wait_time_gte !== null) {
            $queryParams['maxWaitTime[gte]'] = ObjectSerializer::toQueryValue($max_wait_time_gte);
        }
        // query params
        if ($max_wait_time_lt !== null) {
            $queryParams['maxWaitTime[lt]'] = ObjectSerializer::toQueryValue($max_wait_time_lt);
        }
        // query params
        if ($max_wait_time_lte !== null) {
            $queryParams['maxWaitTime[lte]'] = ObjectSerializer::toQueryValue($max_wait_time_lte);
        }
        // query params
        if ($maxlen !== null) {
            $queryParams['maxlen'] = ObjectSerializer::toQueryValue($maxlen);
        }
        // query params
        if ($maxlen_between !== null) {
            $queryParams['maxlen[between]'] = ObjectSerializer::toQueryValue($maxlen_between);
        }
        // query params
        if ($maxlen_exists !== null) {
            $queryParams['maxlen[exists]'] = ObjectSerializer::toQueryValue($maxlen_exists);
        }
        // query params
        if ($maxlen_gt !== null) {
            $queryParams['maxlen[gt]'] = ObjectSerializer::toQueryValue($maxlen_gt);
        }
        // query params
        if ($maxlen_gte !== null) {
            $queryParams['maxlen[gte]'] = ObjectSerializer::toQueryValue($maxlen_gte);
        }
        // query params
        if ($maxlen_lt !== null) {
            $queryParams['maxlen[lt]'] = ObjectSerializer::toQueryValue($maxlen_lt);
        }
        // query params
        if ($maxlen_lte !== null) {
            $queryParams['maxlen[lte]'] = ObjectSerializer::toQueryValue($maxlen_lte);
        }
        // query params
        if ($member_call_rest !== null) {
            $queryParams['memberCallRest'] = ObjectSerializer::toQueryValue($member_call_rest);
        }
        // query params
        if ($member_call_rest_between !== null) {
            $queryParams['memberCallRest[between]'] = ObjectSerializer::toQueryValue($member_call_rest_between);
        }
        // query params
        if ($member_call_rest_exists !== null) {
            $queryParams['memberCallRest[exists]'] = ObjectSerializer::toQueryValue($member_call_rest_exists);
        }
        // query params
        if ($member_call_rest_gt !== null) {
            $queryParams['memberCallRest[gt]'] = ObjectSerializer::toQueryValue($member_call_rest_gt);
        }
        // query params
        if ($member_call_rest_gte !== null) {
            $queryParams['memberCallRest[gte]'] = ObjectSerializer::toQueryValue($member_call_rest_gte);
        }
        // query params
        if ($member_call_rest_lt !== null) {
            $queryParams['memberCallRest[lt]'] = ObjectSerializer::toQueryValue($member_call_rest_lt);
        }
        // query params
        if ($member_call_rest_lte !== null) {
            $queryParams['memberCallRest[lte]'] = ObjectSerializer::toQueryValue($member_call_rest_lte);
        }
        // query params
        if ($member_call_timeout !== null) {
            $queryParams['memberCallTimeout'] = ObjectSerializer::toQueryValue($member_call_timeout);
        }
        // query params
        if ($member_call_timeout_between !== null) {
            $queryParams['memberCallTimeout[between]'] = ObjectSerializer::toQueryValue($member_call_timeout_between);
        }
        // query params
        if ($member_call_timeout_exists !== null) {
            $queryParams['memberCallTimeout[exists]'] = ObjectSerializer::toQueryValue($member_call_timeout_exists);
        }
        // query params
        if ($member_call_timeout_gt !== null) {
            $queryParams['memberCallTimeout[gt]'] = ObjectSerializer::toQueryValue($member_call_timeout_gt);
        }
        // query params
        if ($member_call_timeout_gte !== null) {
            $queryParams['memberCallTimeout[gte]'] = ObjectSerializer::toQueryValue($member_call_timeout_gte);
        }
        // query params
        if ($member_call_timeout_lt !== null) {
            $queryParams['memberCallTimeout[lt]'] = ObjectSerializer::toQueryValue($member_call_timeout_lt);
        }
        // query params
        if ($member_call_timeout_lte !== null) {
            $queryParams['memberCallTimeout[lte]'] = ObjectSerializer::toQueryValue($member_call_timeout_lte);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_end !== null) {
            $queryParams['name[end]'] = ObjectSerializer::toQueryValue($name_end);
        }
        // query params
        if ($name_exact !== null) {
            $queryParams['name[exact]'] = ObjectSerializer::toQueryValue($name_exact);
        }
        // query params
        if ($name_exists !== null) {
            $queryParams['name[exists]'] = ObjectSerializer::toQueryValue($name_exists);
        }
        // query params
        if ($name_partial !== null) {
            $queryParams['name[partial]'] = ObjectSerializer::toQueryValue($name_partial);
        }
        // query params
        if ($name_start !== null) {
            $queryParams['name[start]'] = ObjectSerializer::toQueryValue($name_start);
        }
        // query params
        if ($periodic_announce_locution !== null) {
            $queryParams['periodicAnnounceLocution'] = ObjectSerializer::toQueryValue($periodic_announce_locution);
        }
        // query params
        if ($periodic_announce_locution2 !== null) {
            $queryParams['periodicAnnounceLocution[]'] = ObjectSerializer::toQueryValue($periodic_announce_locution2);
        }
        // query params
        if ($periodic_announce_locution_exists !== null) {
            $queryParams['periodicAnnounceLocution[exists]'] = ObjectSerializer::toQueryValue($periodic_announce_locution_exists);
        }
        // query params
        if ($strategy !== null) {
            $queryParams['strategy'] = ObjectSerializer::toQueryValue($strategy);
        }
        // query params
        if ($strategy_end !== null) {
            $queryParams['strategy[end]'] = ObjectSerializer::toQueryValue($strategy_end);
        }
        // query params
        if ($strategy_exact !== null) {
            $queryParams['strategy[exact]'] = ObjectSerializer::toQueryValue($strategy_exact);
        }
        // query params
        if ($strategy_exists !== null) {
            $queryParams['strategy[exists]'] = ObjectSerializer::toQueryValue($strategy_exists);
        }
        // query params
        if ($strategy_partial !== null) {
            $queryParams['strategy[partial]'] = ObjectSerializer::toQueryValue($strategy_partial);
        }
        // query params
        if ($strategy_start !== null) {
            $queryParams['strategy[start]'] = ObjectSerializer::toQueryValue($strategy_start);
        }
        // query params
        if ($timeout_extension !== null) {
            $queryParams['timeoutExtension'] = ObjectSerializer::toQueryValue($timeout_extension);
        }
        // query params
        if ($timeout_extension2 !== null) {
            $queryParams['timeoutExtension[]'] = ObjectSerializer::toQueryValue($timeout_extension2);
        }
        // query params
        if ($timeout_extension_exists !== null) {
            $queryParams['timeoutExtension[exists]'] = ObjectSerializer::toQueryValue($timeout_extension_exists);
        }
        // query params
        if ($timeout_locution !== null) {
            $queryParams['timeoutLocution'] = ObjectSerializer::toQueryValue($timeout_locution);
        }
        // query params
        if ($timeout_locution2 !== null) {
            $queryParams['timeoutLocution[]'] = ObjectSerializer::toQueryValue($timeout_locution2);
        }
        // query params
        if ($timeout_locution_exists !== null) {
            $queryParams['timeoutLocution[exists]'] = ObjectSerializer::toQueryValue($timeout_locution_exists);
        }
        // query params
        if ($timeout_number_country !== null) {
            $queryParams['timeoutNumberCountry'] = ObjectSerializer::toQueryValue($timeout_number_country);
        }
        // query params
        if ($timeout_number_country2 !== null) {
            $queryParams['timeoutNumberCountry[]'] = ObjectSerializer::toQueryValue($timeout_number_country2);
        }
        // query params
        if ($timeout_number_country_exists !== null) {
            $queryParams['timeoutNumberCountry[exists]'] = ObjectSerializer::toQueryValue($timeout_number_country_exists);
        }
        // query params
        if ($timeout_voice_mail_user !== null) {
            $queryParams['timeoutVoiceMailUser'] = ObjectSerializer::toQueryValue($timeout_voice_mail_user);
        }
        // query params
        if ($timeout_voice_mail_user2 !== null) {
            $queryParams['timeoutVoiceMailUser[]'] = ObjectSerializer::toQueryValue($timeout_voice_mail_user2);
        }
        // query params
        if ($timeout_voice_mail_user_exists !== null) {
            $queryParams['timeoutVoiceMailUser[exists]'] = ObjectSerializer::toQueryValue($timeout_voice_mail_user_exists);
        }
        // query params
        if ($weight !== null) {
            $queryParams['weight'] = ObjectSerializer::toQueryValue($weight);
        }
        // query params
        if ($weight_between !== null) {
            $queryParams['weight[between]'] = ObjectSerializer::toQueryValue($weight_between);
        }
        // query params
        if ($weight_exists !== null) {
            $queryParams['weight[exists]'] = ObjectSerializer::toQueryValue($weight_exists);
        }
        // query params
        if ($weight_gt !== null) {
            $queryParams['weight[gt]'] = ObjectSerializer::toQueryValue($weight_gt);
        }
        // query params
        if ($weight_gte !== null) {
            $queryParams['weight[gte]'] = ObjectSerializer::toQueryValue($weight_gte);
        }
        // query params
        if ($weight_lt !== null) {
            $queryParams['weight[lt]'] = ObjectSerializer::toQueryValue($weight_lt);
        }
        // query params
        if ($weight_lte !== null) {
            $queryParams['weight[lte]'] = ObjectSerializer::toQueryValue($weight_lte);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_max_wait_time !== null) {
            $queryParams['_order[maxWaitTime]'] = ObjectSerializer::toQueryValue($_order_max_wait_time);
        }
        // query params
        if ($_order_maxlen !== null) {
            $queryParams['_order[maxlen]'] = ObjectSerializer::toQueryValue($_order_maxlen);
        }
        // query params
        if ($_order_member_call_rest !== null) {
            $queryParams['_order[memberCallRest]'] = ObjectSerializer::toQueryValue($_order_member_call_rest);
        }
        // query params
        if ($_order_member_call_timeout !== null) {
            $queryParams['_order[memberCallTimeout]'] = ObjectSerializer::toQueryValue($_order_member_call_timeout);
        }
        // query params
        if ($_order_name !== null) {
            $queryParams['_order[name]'] = ObjectSerializer::toQueryValue($_order_name);
        }
        // query params
        if ($_order_strategy !== null) {
            $queryParams['_order[strategy]'] = ObjectSerializer::toQueryValue($_order_strategy);
        }
        // query params
        if ($_order_weight !== null) {
            $queryParams['_order[weight]'] = ObjectSerializer::toQueryValue($_order_weight);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQueueItem
     *
     * Retrieves a Queue resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\QueueDetailed
     */
    public function getQueueItem($id)
    {
        list($response) = $this->getQueueItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getQueueItemWithHttpInfo
     *
     * Retrieves a Queue resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\QueueDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQueueItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\QueueDetailed';
        $request = $this->getQueueItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\QueueDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQueueItemAsync
     *
     * Retrieves a Queue resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQueueItemAsync($id)
    {
        return $this->getQueueItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQueueItemAsyncWithHttpInfo
     *
     * Retrieves a Queue resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQueueItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\QueueDetailed';
        $request = $this->getQueueItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQueueItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQueueItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getQueueItem'
            );
        }

        $resourcePath = '/queues/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQueueMemberCollection
     *
     * Retrieves the collection of QueueMember resources.
     *
     * @param  int $id_exact id_exact (optional)
     * @param  int $penalty penalty (optional)
     * @param  string $penalty_between penalty_between (optional)
     * @param  bool $penalty_exists penalty_exists (optional)
     * @param  string $penalty_gt penalty_gt (optional)
     * @param  string $penalty_gte penalty_gte (optional)
     * @param  string $penalty_lt penalty_lt (optional)
     * @param  string $penalty_lte penalty_lte (optional)
     * @param  string $queue queue (optional)
     * @param  int $queue_full_extension queue_full_extension (optional)
     * @param  int $queue_full_locution queue_full_locution (optional)
     * @param  int $queue_full_number_country queue_full_number_country (optional)
     * @param  string $queue_full_number_value queue_full_number_value (optional)
     * @param  string $queue_full_target_type queue_full_target_type (optional)
     * @param  int $queue_full_voice_mail_user queue_full_voice_mail_user (optional)
     * @param  int $queue_max_wait_time queue_max_wait_time (optional)
     * @param  int $queue_maxlen queue_maxlen (optional)
     * @param  int $queue_member_call_rest queue_member_call_rest (optional)
     * @param  int $queue_member_call_timeout queue_member_call_timeout (optional)
     * @param  string $queue_name queue_name (optional)
     * @param  int $queue_periodic_announce_frequency queue_periodic_announce_frequency (optional)
     * @param  int $queue_periodic_announce_locution queue_periodic_announce_locution (optional)
     * @param  int $queue_prevent_missed_calls queue_prevent_missed_calls (optional)
     * @param  string $queue_strategy queue_strategy (optional)
     * @param  int $queue_timeout_extension queue_timeout_extension (optional)
     * @param  int $queue_timeout_locution queue_timeout_locution (optional)
     * @param  int $queue_timeout_number_country queue_timeout_number_country (optional)
     * @param  string $queue_timeout_number_value queue_timeout_number_value (optional)
     * @param  string $queue_timeout_target_type queue_timeout_target_type (optional)
     * @param  int $queue_timeout_voice_mail_user queue_timeout_voice_mail_user (optional)
     * @param  int $queue_weight queue_weight (optional)
     * @param  string $queue2 queue2 (optional)
     * @param  string $user user (optional)
     * @param  bool $user_active user_active (optional)
     * @param  int $user_boss_assistant user_boss_assistant (optional)
     * @param  int $user_boss_assistant_white_list user_boss_assistant_white_list (optional)
     * @param  int $user_call_acl user_call_acl (optional)
     * @param  bool $user_do_not_disturb user_do_not_disturb (optional)
     * @param  string $user_email user_email (optional)
     * @param  int $user_extension user_extension (optional)
     * @param  string $user_external_ip_calls user_external_ip_calls (optional)
     * @param  bool $user_gs_qr_code user_gs_qr_code (optional)
     * @param  bool $user_is_boss user_is_boss (optional)
     * @param  int $user_language user_language (optional)
     * @param  string $user_lastname user_lastname (optional)
     * @param  int $user_location user_location (optional)
     * @param  int $user_max_calls user_max_calls (optional)
     * @param  bool $user_multi_contact user_multi_contact (optional)
     * @param  string $user_name user_name (optional)
     * @param  int $user_outgoing_ddi user_outgoing_ddi (optional)
     * @param  int $user_outgoing_ddi_rule user_outgoing_ddi_rule (optional)
     * @param  string $user_pass user_pass (optional)
     * @param  string $user_reject_call_method user_reject_call_method (optional)
     * @param  int $user_terminal user_terminal (optional)
     * @param  int $user_timezone user_timezone (optional)
     * @param  int $user_transformation_rule_set user_transformation_rule_set (optional)
     * @param  bool $user_voicemail_attach_sound user_voicemail_attach_sound (optional)
     * @param  bool $user_voicemail_enabled user_voicemail_enabled (optional)
     * @param  int $user_voicemail_locution user_voicemail_locution (optional)
     * @param  bool $user_voicemail_send_mail user_voicemail_send_mail (optional)
     * @param  string $user2 user2 (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_penalty _order_penalty (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\QueueMemberDetailedCollection[]
     */
    public function getQueueMemberCollection($id_exact = null, $penalty = null, $penalty_between = null, $penalty_exists = null, $penalty_gt = null, $penalty_gte = null, $penalty_lt = null, $penalty_lte = null, $queue = null, $queue_full_extension = null, $queue_full_locution = null, $queue_full_number_country = null, $queue_full_number_value = null, $queue_full_target_type = null, $queue_full_voice_mail_user = null, $queue_max_wait_time = null, $queue_maxlen = null, $queue_member_call_rest = null, $queue_member_call_timeout = null, $queue_name = null, $queue_periodic_announce_frequency = null, $queue_periodic_announce_locution = null, $queue_prevent_missed_calls = null, $queue_strategy = null, $queue_timeout_extension = null, $queue_timeout_locution = null, $queue_timeout_number_country = null, $queue_timeout_number_value = null, $queue_timeout_target_type = null, $queue_timeout_voice_mail_user = null, $queue_weight = null, $queue2 = null, $user = null, $user_active = null, $user_boss_assistant = null, $user_boss_assistant_white_list = null, $user_call_acl = null, $user_do_not_disturb = null, $user_email = null, $user_extension = null, $user_external_ip_calls = null, $user_gs_qr_code = null, $user_is_boss = null, $user_language = null, $user_lastname = null, $user_location = null, $user_max_calls = null, $user_multi_contact = null, $user_name = null, $user_outgoing_ddi = null, $user_outgoing_ddi_rule = null, $user_pass = null, $user_reject_call_method = null, $user_terminal = null, $user_timezone = null, $user_transformation_rule_set = null, $user_voicemail_attach_sound = null, $user_voicemail_enabled = null, $user_voicemail_locution = null, $user_voicemail_send_mail = null, $user2 = null, $_order_id = null, $_order_penalty = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getQueueMemberCollectionWithHttpInfo($id_exact, $penalty, $penalty_between, $penalty_exists, $penalty_gt, $penalty_gte, $penalty_lt, $penalty_lte, $queue, $queue_full_extension, $queue_full_locution, $queue_full_number_country, $queue_full_number_value, $queue_full_target_type, $queue_full_voice_mail_user, $queue_max_wait_time, $queue_maxlen, $queue_member_call_rest, $queue_member_call_timeout, $queue_name, $queue_periodic_announce_frequency, $queue_periodic_announce_locution, $queue_prevent_missed_calls, $queue_strategy, $queue_timeout_extension, $queue_timeout_locution, $queue_timeout_number_country, $queue_timeout_number_value, $queue_timeout_target_type, $queue_timeout_voice_mail_user, $queue_weight, $queue2, $user, $user_active, $user_boss_assistant, $user_boss_assistant_white_list, $user_call_acl, $user_do_not_disturb, $user_email, $user_extension, $user_external_ip_calls, $user_gs_qr_code, $user_is_boss, $user_language, $user_lastname, $user_location, $user_max_calls, $user_multi_contact, $user_name, $user_outgoing_ddi, $user_outgoing_ddi_rule, $user_pass, $user_reject_call_method, $user_terminal, $user_timezone, $user_transformation_rule_set, $user_voicemail_attach_sound, $user_voicemail_enabled, $user_voicemail_locution, $user_voicemail_send_mail, $user2, $_order_id, $_order_penalty, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getQueueMemberCollectionWithHttpInfo
     *
     * Retrieves the collection of QueueMember resources.
     *
     * @param  int $id_exact (optional)
     * @param  int $penalty (optional)
     * @param  string $penalty_between (optional)
     * @param  bool $penalty_exists (optional)
     * @param  string $penalty_gt (optional)
     * @param  string $penalty_gte (optional)
     * @param  string $penalty_lt (optional)
     * @param  string $penalty_lte (optional)
     * @param  string $queue (optional)
     * @param  int $queue_full_extension (optional)
     * @param  int $queue_full_locution (optional)
     * @param  int $queue_full_number_country (optional)
     * @param  string $queue_full_number_value (optional)
     * @param  string $queue_full_target_type (optional)
     * @param  int $queue_full_voice_mail_user (optional)
     * @param  int $queue_max_wait_time (optional)
     * @param  int $queue_maxlen (optional)
     * @param  int $queue_member_call_rest (optional)
     * @param  int $queue_member_call_timeout (optional)
     * @param  string $queue_name (optional)
     * @param  int $queue_periodic_announce_frequency (optional)
     * @param  int $queue_periodic_announce_locution (optional)
     * @param  int $queue_prevent_missed_calls (optional)
     * @param  string $queue_strategy (optional)
     * @param  int $queue_timeout_extension (optional)
     * @param  int $queue_timeout_locution (optional)
     * @param  int $queue_timeout_number_country (optional)
     * @param  string $queue_timeout_number_value (optional)
     * @param  string $queue_timeout_target_type (optional)
     * @param  int $queue_timeout_voice_mail_user (optional)
     * @param  int $queue_weight (optional)
     * @param  string $queue2 (optional)
     * @param  string $user (optional)
     * @param  bool $user_active (optional)
     * @param  int $user_boss_assistant (optional)
     * @param  int $user_boss_assistant_white_list (optional)
     * @param  int $user_call_acl (optional)
     * @param  bool $user_do_not_disturb (optional)
     * @param  string $user_email (optional)
     * @param  int $user_extension (optional)
     * @param  string $user_external_ip_calls (optional)
     * @param  bool $user_gs_qr_code (optional)
     * @param  bool $user_is_boss (optional)
     * @param  int $user_language (optional)
     * @param  string $user_lastname (optional)
     * @param  int $user_location (optional)
     * @param  int $user_max_calls (optional)
     * @param  bool $user_multi_contact (optional)
     * @param  string $user_name (optional)
     * @param  int $user_outgoing_ddi (optional)
     * @param  int $user_outgoing_ddi_rule (optional)
     * @param  string $user_pass (optional)
     * @param  string $user_reject_call_method (optional)
     * @param  int $user_terminal (optional)
     * @param  int $user_timezone (optional)
     * @param  int $user_transformation_rule_set (optional)
     * @param  bool $user_voicemail_attach_sound (optional)
     * @param  bool $user_voicemail_enabled (optional)
     * @param  int $user_voicemail_locution (optional)
     * @param  bool $user_voicemail_send_mail (optional)
     * @param  string $user2 (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_penalty (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\QueueMemberDetailedCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getQueueMemberCollectionWithHttpInfo($id_exact = null, $penalty = null, $penalty_between = null, $penalty_exists = null, $penalty_gt = null, $penalty_gte = null, $penalty_lt = null, $penalty_lte = null, $queue = null, $queue_full_extension = null, $queue_full_locution = null, $queue_full_number_country = null, $queue_full_number_value = null, $queue_full_target_type = null, $queue_full_voice_mail_user = null, $queue_max_wait_time = null, $queue_maxlen = null, $queue_member_call_rest = null, $queue_member_call_timeout = null, $queue_name = null, $queue_periodic_announce_frequency = null, $queue_periodic_announce_locution = null, $queue_prevent_missed_calls = null, $queue_strategy = null, $queue_timeout_extension = null, $queue_timeout_locution = null, $queue_timeout_number_country = null, $queue_timeout_number_value = null, $queue_timeout_target_type = null, $queue_timeout_voice_mail_user = null, $queue_weight = null, $queue2 = null, $user = null, $user_active = null, $user_boss_assistant = null, $user_boss_assistant_white_list = null, $user_call_acl = null, $user_do_not_disturb = null, $user_email = null, $user_extension = null, $user_external_ip_calls = null, $user_gs_qr_code = null, $user_is_boss = null, $user_language = null, $user_lastname = null, $user_location = null, $user_max_calls = null, $user_multi_contact = null, $user_name = null, $user_outgoing_ddi = null, $user_outgoing_ddi_rule = null, $user_pass = null, $user_reject_call_method = null, $user_terminal = null, $user_timezone = null, $user_transformation_rule_set = null, $user_voicemail_attach_sound = null, $user_voicemail_enabled = null, $user_voicemail_locution = null, $user_voicemail_send_mail = null, $user2 = null, $_order_id = null, $_order_penalty = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\QueueMemberDetailedCollection[]';
        $request = $this->getQueueMemberCollectionRequest($id_exact, $penalty, $penalty_between, $penalty_exists, $penalty_gt, $penalty_gte, $penalty_lt, $penalty_lte, $queue, $queue_full_extension, $queue_full_locution, $queue_full_number_country, $queue_full_number_value, $queue_full_target_type, $queue_full_voice_mail_user, $queue_max_wait_time, $queue_maxlen, $queue_member_call_rest, $queue_member_call_timeout, $queue_name, $queue_periodic_announce_frequency, $queue_periodic_announce_locution, $queue_prevent_missed_calls, $queue_strategy, $queue_timeout_extension, $queue_timeout_locution, $queue_timeout_number_country, $queue_timeout_number_value, $queue_timeout_target_type, $queue_timeout_voice_mail_user, $queue_weight, $queue2, $user, $user_active, $user_boss_assistant, $user_boss_assistant_white_list, $user_call_acl, $user_do_not_disturb, $user_email, $user_extension, $user_external_ip_calls, $user_gs_qr_code, $user_is_boss, $user_language, $user_lastname, $user_location, $user_max_calls, $user_multi_contact, $user_name, $user_outgoing_ddi, $user_outgoing_ddi_rule, $user_pass, $user_reject_call_method, $user_terminal, $user_timezone, $user_transformation_rule_set, $user_voicemail_attach_sound, $user_voicemail_enabled, $user_voicemail_locution, $user_voicemail_send_mail, $user2, $_order_id, $_order_penalty, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\QueueMemberDetailedCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQueueMemberCollectionAsync
     *
     * Retrieves the collection of QueueMember resources.
     *
     * @param  int $id_exact (optional)
     * @param  int $penalty (optional)
     * @param  string $penalty_between (optional)
     * @param  bool $penalty_exists (optional)
     * @param  string $penalty_gt (optional)
     * @param  string $penalty_gte (optional)
     * @param  string $penalty_lt (optional)
     * @param  string $penalty_lte (optional)
     * @param  string $queue (optional)
     * @param  int $queue_full_extension (optional)
     * @param  int $queue_full_locution (optional)
     * @param  int $queue_full_number_country (optional)
     * @param  string $queue_full_number_value (optional)
     * @param  string $queue_full_target_type (optional)
     * @param  int $queue_full_voice_mail_user (optional)
     * @param  int $queue_max_wait_time (optional)
     * @param  int $queue_maxlen (optional)
     * @param  int $queue_member_call_rest (optional)
     * @param  int $queue_member_call_timeout (optional)
     * @param  string $queue_name (optional)
     * @param  int $queue_periodic_announce_frequency (optional)
     * @param  int $queue_periodic_announce_locution (optional)
     * @param  int $queue_prevent_missed_calls (optional)
     * @param  string $queue_strategy (optional)
     * @param  int $queue_timeout_extension (optional)
     * @param  int $queue_timeout_locution (optional)
     * @param  int $queue_timeout_number_country (optional)
     * @param  string $queue_timeout_number_value (optional)
     * @param  string $queue_timeout_target_type (optional)
     * @param  int $queue_timeout_voice_mail_user (optional)
     * @param  int $queue_weight (optional)
     * @param  string $queue2 (optional)
     * @param  string $user (optional)
     * @param  bool $user_active (optional)
     * @param  int $user_boss_assistant (optional)
     * @param  int $user_boss_assistant_white_list (optional)
     * @param  int $user_call_acl (optional)
     * @param  bool $user_do_not_disturb (optional)
     * @param  string $user_email (optional)
     * @param  int $user_extension (optional)
     * @param  string $user_external_ip_calls (optional)
     * @param  bool $user_gs_qr_code (optional)
     * @param  bool $user_is_boss (optional)
     * @param  int $user_language (optional)
     * @param  string $user_lastname (optional)
     * @param  int $user_location (optional)
     * @param  int $user_max_calls (optional)
     * @param  bool $user_multi_contact (optional)
     * @param  string $user_name (optional)
     * @param  int $user_outgoing_ddi (optional)
     * @param  int $user_outgoing_ddi_rule (optional)
     * @param  string $user_pass (optional)
     * @param  string $user_reject_call_method (optional)
     * @param  int $user_terminal (optional)
     * @param  int $user_timezone (optional)
     * @param  int $user_transformation_rule_set (optional)
     * @param  bool $user_voicemail_attach_sound (optional)
     * @param  bool $user_voicemail_enabled (optional)
     * @param  int $user_voicemail_locution (optional)
     * @param  bool $user_voicemail_send_mail (optional)
     * @param  string $user2 (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_penalty (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQueueMemberCollectionAsync($id_exact = null, $penalty = null, $penalty_between = null, $penalty_exists = null, $penalty_gt = null, $penalty_gte = null, $penalty_lt = null, $penalty_lte = null, $queue = null, $queue_full_extension = null, $queue_full_locution = null, $queue_full_number_country = null, $queue_full_number_value = null, $queue_full_target_type = null, $queue_full_voice_mail_user = null, $queue_max_wait_time = null, $queue_maxlen = null, $queue_member_call_rest = null, $queue_member_call_timeout = null, $queue_name = null, $queue_periodic_announce_frequency = null, $queue_periodic_announce_locution = null, $queue_prevent_missed_calls = null, $queue_strategy = null, $queue_timeout_extension = null, $queue_timeout_locution = null, $queue_timeout_number_country = null, $queue_timeout_number_value = null, $queue_timeout_target_type = null, $queue_timeout_voice_mail_user = null, $queue_weight = null, $queue2 = null, $user = null, $user_active = null, $user_boss_assistant = null, $user_boss_assistant_white_list = null, $user_call_acl = null, $user_do_not_disturb = null, $user_email = null, $user_extension = null, $user_external_ip_calls = null, $user_gs_qr_code = null, $user_is_boss = null, $user_language = null, $user_lastname = null, $user_location = null, $user_max_calls = null, $user_multi_contact = null, $user_name = null, $user_outgoing_ddi = null, $user_outgoing_ddi_rule = null, $user_pass = null, $user_reject_call_method = null, $user_terminal = null, $user_timezone = null, $user_transformation_rule_set = null, $user_voicemail_attach_sound = null, $user_voicemail_enabled = null, $user_voicemail_locution = null, $user_voicemail_send_mail = null, $user2 = null, $_order_id = null, $_order_penalty = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getQueueMemberCollectionAsyncWithHttpInfo($id_exact, $penalty, $penalty_between, $penalty_exists, $penalty_gt, $penalty_gte, $penalty_lt, $penalty_lte, $queue, $queue_full_extension, $queue_full_locution, $queue_full_number_country, $queue_full_number_value, $queue_full_target_type, $queue_full_voice_mail_user, $queue_max_wait_time, $queue_maxlen, $queue_member_call_rest, $queue_member_call_timeout, $queue_name, $queue_periodic_announce_frequency, $queue_periodic_announce_locution, $queue_prevent_missed_calls, $queue_strategy, $queue_timeout_extension, $queue_timeout_locution, $queue_timeout_number_country, $queue_timeout_number_value, $queue_timeout_target_type, $queue_timeout_voice_mail_user, $queue_weight, $queue2, $user, $user_active, $user_boss_assistant, $user_boss_assistant_white_list, $user_call_acl, $user_do_not_disturb, $user_email, $user_extension, $user_external_ip_calls, $user_gs_qr_code, $user_is_boss, $user_language, $user_lastname, $user_location, $user_max_calls, $user_multi_contact, $user_name, $user_outgoing_ddi, $user_outgoing_ddi_rule, $user_pass, $user_reject_call_method, $user_terminal, $user_timezone, $user_transformation_rule_set, $user_voicemail_attach_sound, $user_voicemail_enabled, $user_voicemail_locution, $user_voicemail_send_mail, $user2, $_order_id, $_order_penalty, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQueueMemberCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of QueueMember resources.
     *
     * @param  int $id_exact (optional)
     * @param  int $penalty (optional)
     * @param  string $penalty_between (optional)
     * @param  bool $penalty_exists (optional)
     * @param  string $penalty_gt (optional)
     * @param  string $penalty_gte (optional)
     * @param  string $penalty_lt (optional)
     * @param  string $penalty_lte (optional)
     * @param  string $queue (optional)
     * @param  int $queue_full_extension (optional)
     * @param  int $queue_full_locution (optional)
     * @param  int $queue_full_number_country (optional)
     * @param  string $queue_full_number_value (optional)
     * @param  string $queue_full_target_type (optional)
     * @param  int $queue_full_voice_mail_user (optional)
     * @param  int $queue_max_wait_time (optional)
     * @param  int $queue_maxlen (optional)
     * @param  int $queue_member_call_rest (optional)
     * @param  int $queue_member_call_timeout (optional)
     * @param  string $queue_name (optional)
     * @param  int $queue_periodic_announce_frequency (optional)
     * @param  int $queue_periodic_announce_locution (optional)
     * @param  int $queue_prevent_missed_calls (optional)
     * @param  string $queue_strategy (optional)
     * @param  int $queue_timeout_extension (optional)
     * @param  int $queue_timeout_locution (optional)
     * @param  int $queue_timeout_number_country (optional)
     * @param  string $queue_timeout_number_value (optional)
     * @param  string $queue_timeout_target_type (optional)
     * @param  int $queue_timeout_voice_mail_user (optional)
     * @param  int $queue_weight (optional)
     * @param  string $queue2 (optional)
     * @param  string $user (optional)
     * @param  bool $user_active (optional)
     * @param  int $user_boss_assistant (optional)
     * @param  int $user_boss_assistant_white_list (optional)
     * @param  int $user_call_acl (optional)
     * @param  bool $user_do_not_disturb (optional)
     * @param  string $user_email (optional)
     * @param  int $user_extension (optional)
     * @param  string $user_external_ip_calls (optional)
     * @param  bool $user_gs_qr_code (optional)
     * @param  bool $user_is_boss (optional)
     * @param  int $user_language (optional)
     * @param  string $user_lastname (optional)
     * @param  int $user_location (optional)
     * @param  int $user_max_calls (optional)
     * @param  bool $user_multi_contact (optional)
     * @param  string $user_name (optional)
     * @param  int $user_outgoing_ddi (optional)
     * @param  int $user_outgoing_ddi_rule (optional)
     * @param  string $user_pass (optional)
     * @param  string $user_reject_call_method (optional)
     * @param  int $user_terminal (optional)
     * @param  int $user_timezone (optional)
     * @param  int $user_transformation_rule_set (optional)
     * @param  bool $user_voicemail_attach_sound (optional)
     * @param  bool $user_voicemail_enabled (optional)
     * @param  int $user_voicemail_locution (optional)
     * @param  bool $user_voicemail_send_mail (optional)
     * @param  string $user2 (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_penalty (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQueueMemberCollectionAsyncWithHttpInfo($id_exact = null, $penalty = null, $penalty_between = null, $penalty_exists = null, $penalty_gt = null, $penalty_gte = null, $penalty_lt = null, $penalty_lte = null, $queue = null, $queue_full_extension = null, $queue_full_locution = null, $queue_full_number_country = null, $queue_full_number_value = null, $queue_full_target_type = null, $queue_full_voice_mail_user = null, $queue_max_wait_time = null, $queue_maxlen = null, $queue_member_call_rest = null, $queue_member_call_timeout = null, $queue_name = null, $queue_periodic_announce_frequency = null, $queue_periodic_announce_locution = null, $queue_prevent_missed_calls = null, $queue_strategy = null, $queue_timeout_extension = null, $queue_timeout_locution = null, $queue_timeout_number_country = null, $queue_timeout_number_value = null, $queue_timeout_target_type = null, $queue_timeout_voice_mail_user = null, $queue_weight = null, $queue2 = null, $user = null, $user_active = null, $user_boss_assistant = null, $user_boss_assistant_white_list = null, $user_call_acl = null, $user_do_not_disturb = null, $user_email = null, $user_extension = null, $user_external_ip_calls = null, $user_gs_qr_code = null, $user_is_boss = null, $user_language = null, $user_lastname = null, $user_location = null, $user_max_calls = null, $user_multi_contact = null, $user_name = null, $user_outgoing_ddi = null, $user_outgoing_ddi_rule = null, $user_pass = null, $user_reject_call_method = null, $user_terminal = null, $user_timezone = null, $user_transformation_rule_set = null, $user_voicemail_attach_sound = null, $user_voicemail_enabled = null, $user_voicemail_locution = null, $user_voicemail_send_mail = null, $user2 = null, $_order_id = null, $_order_penalty = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\QueueMemberDetailedCollection[]';
        $request = $this->getQueueMemberCollectionRequest($id_exact, $penalty, $penalty_between, $penalty_exists, $penalty_gt, $penalty_gte, $penalty_lt, $penalty_lte, $queue, $queue_full_extension, $queue_full_locution, $queue_full_number_country, $queue_full_number_value, $queue_full_target_type, $queue_full_voice_mail_user, $queue_max_wait_time, $queue_maxlen, $queue_member_call_rest, $queue_member_call_timeout, $queue_name, $queue_periodic_announce_frequency, $queue_periodic_announce_locution, $queue_prevent_missed_calls, $queue_strategy, $queue_timeout_extension, $queue_timeout_locution, $queue_timeout_number_country, $queue_timeout_number_value, $queue_timeout_target_type, $queue_timeout_voice_mail_user, $queue_weight, $queue2, $user, $user_active, $user_boss_assistant, $user_boss_assistant_white_list, $user_call_acl, $user_do_not_disturb, $user_email, $user_extension, $user_external_ip_calls, $user_gs_qr_code, $user_is_boss, $user_language, $user_lastname, $user_location, $user_max_calls, $user_multi_contact, $user_name, $user_outgoing_ddi, $user_outgoing_ddi_rule, $user_pass, $user_reject_call_method, $user_terminal, $user_timezone, $user_transformation_rule_set, $user_voicemail_attach_sound, $user_voicemail_enabled, $user_voicemail_locution, $user_voicemail_send_mail, $user2, $_order_id, $_order_penalty, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQueueMemberCollection'
     *
     * @param  int $id_exact (optional)
     * @param  int $penalty (optional)
     * @param  string $penalty_between (optional)
     * @param  bool $penalty_exists (optional)
     * @param  string $penalty_gt (optional)
     * @param  string $penalty_gte (optional)
     * @param  string $penalty_lt (optional)
     * @param  string $penalty_lte (optional)
     * @param  string $queue (optional)
     * @param  int $queue_full_extension (optional)
     * @param  int $queue_full_locution (optional)
     * @param  int $queue_full_number_country (optional)
     * @param  string $queue_full_number_value (optional)
     * @param  string $queue_full_target_type (optional)
     * @param  int $queue_full_voice_mail_user (optional)
     * @param  int $queue_max_wait_time (optional)
     * @param  int $queue_maxlen (optional)
     * @param  int $queue_member_call_rest (optional)
     * @param  int $queue_member_call_timeout (optional)
     * @param  string $queue_name (optional)
     * @param  int $queue_periodic_announce_frequency (optional)
     * @param  int $queue_periodic_announce_locution (optional)
     * @param  int $queue_prevent_missed_calls (optional)
     * @param  string $queue_strategy (optional)
     * @param  int $queue_timeout_extension (optional)
     * @param  int $queue_timeout_locution (optional)
     * @param  int $queue_timeout_number_country (optional)
     * @param  string $queue_timeout_number_value (optional)
     * @param  string $queue_timeout_target_type (optional)
     * @param  int $queue_timeout_voice_mail_user (optional)
     * @param  int $queue_weight (optional)
     * @param  string $queue2 (optional)
     * @param  string $user (optional)
     * @param  bool $user_active (optional)
     * @param  int $user_boss_assistant (optional)
     * @param  int $user_boss_assistant_white_list (optional)
     * @param  int $user_call_acl (optional)
     * @param  bool $user_do_not_disturb (optional)
     * @param  string $user_email (optional)
     * @param  int $user_extension (optional)
     * @param  string $user_external_ip_calls (optional)
     * @param  bool $user_gs_qr_code (optional)
     * @param  bool $user_is_boss (optional)
     * @param  int $user_language (optional)
     * @param  string $user_lastname (optional)
     * @param  int $user_location (optional)
     * @param  int $user_max_calls (optional)
     * @param  bool $user_multi_contact (optional)
     * @param  string $user_name (optional)
     * @param  int $user_outgoing_ddi (optional)
     * @param  int $user_outgoing_ddi_rule (optional)
     * @param  string $user_pass (optional)
     * @param  string $user_reject_call_method (optional)
     * @param  int $user_terminal (optional)
     * @param  int $user_timezone (optional)
     * @param  int $user_transformation_rule_set (optional)
     * @param  bool $user_voicemail_attach_sound (optional)
     * @param  bool $user_voicemail_enabled (optional)
     * @param  int $user_voicemail_locution (optional)
     * @param  bool $user_voicemail_send_mail (optional)
     * @param  string $user2 (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_penalty (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQueueMemberCollectionRequest($id_exact = null, $penalty = null, $penalty_between = null, $penalty_exists = null, $penalty_gt = null, $penalty_gte = null, $penalty_lt = null, $penalty_lte = null, $queue = null, $queue_full_extension = null, $queue_full_locution = null, $queue_full_number_country = null, $queue_full_number_value = null, $queue_full_target_type = null, $queue_full_voice_mail_user = null, $queue_max_wait_time = null, $queue_maxlen = null, $queue_member_call_rest = null, $queue_member_call_timeout = null, $queue_name = null, $queue_periodic_announce_frequency = null, $queue_periodic_announce_locution = null, $queue_prevent_missed_calls = null, $queue_strategy = null, $queue_timeout_extension = null, $queue_timeout_locution = null, $queue_timeout_number_country = null, $queue_timeout_number_value = null, $queue_timeout_target_type = null, $queue_timeout_voice_mail_user = null, $queue_weight = null, $queue2 = null, $user = null, $user_active = null, $user_boss_assistant = null, $user_boss_assistant_white_list = null, $user_call_acl = null, $user_do_not_disturb = null, $user_email = null, $user_extension = null, $user_external_ip_calls = null, $user_gs_qr_code = null, $user_is_boss = null, $user_language = null, $user_lastname = null, $user_location = null, $user_max_calls = null, $user_multi_contact = null, $user_name = null, $user_outgoing_ddi = null, $user_outgoing_ddi_rule = null, $user_pass = null, $user_reject_call_method = null, $user_terminal = null, $user_timezone = null, $user_transformation_rule_set = null, $user_voicemail_attach_sound = null, $user_voicemail_enabled = null, $user_voicemail_locution = null, $user_voicemail_send_mail = null, $user2 = null, $_order_id = null, $_order_penalty = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/queue_members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($penalty !== null) {
            $queryParams['penalty'] = ObjectSerializer::toQueryValue($penalty);
        }
        // query params
        if ($penalty_between !== null) {
            $queryParams['penalty[between]'] = ObjectSerializer::toQueryValue($penalty_between);
        }
        // query params
        if ($penalty_exists !== null) {
            $queryParams['penalty[exists]'] = ObjectSerializer::toQueryValue($penalty_exists);
        }
        // query params
        if ($penalty_gt !== null) {
            $queryParams['penalty[gt]'] = ObjectSerializer::toQueryValue($penalty_gt);
        }
        // query params
        if ($penalty_gte !== null) {
            $queryParams['penalty[gte]'] = ObjectSerializer::toQueryValue($penalty_gte);
        }
        // query params
        if ($penalty_lt !== null) {
            $queryParams['penalty[lt]'] = ObjectSerializer::toQueryValue($penalty_lt);
        }
        // query params
        if ($penalty_lte !== null) {
            $queryParams['penalty[lte]'] = ObjectSerializer::toQueryValue($penalty_lte);
        }
        // query params
        if ($queue !== null) {
            $queryParams['queue'] = ObjectSerializer::toQueryValue($queue);
        }
        // query params
        if ($queue_full_extension !== null) {
            $queryParams['queue.fullExtension'] = ObjectSerializer::toQueryValue($queue_full_extension);
        }
        // query params
        if ($queue_full_locution !== null) {
            $queryParams['queue.fullLocution'] = ObjectSerializer::toQueryValue($queue_full_locution);
        }
        // query params
        if ($queue_full_number_country !== null) {
            $queryParams['queue.fullNumberCountry'] = ObjectSerializer::toQueryValue($queue_full_number_country);
        }
        // query params
        if ($queue_full_number_value !== null) {
            $queryParams['queue.fullNumberValue'] = ObjectSerializer::toQueryValue($queue_full_number_value);
        }
        // query params
        if ($queue_full_target_type !== null) {
            $queryParams['queue.fullTargetType'] = ObjectSerializer::toQueryValue($queue_full_target_type);
        }
        // query params
        if ($queue_full_voice_mail_user !== null) {
            $queryParams['queue.fullVoiceMailUser'] = ObjectSerializer::toQueryValue($queue_full_voice_mail_user);
        }
        // query params
        if ($queue_max_wait_time !== null) {
            $queryParams['queue.maxWaitTime'] = ObjectSerializer::toQueryValue($queue_max_wait_time);
        }
        // query params
        if ($queue_maxlen !== null) {
            $queryParams['queue.maxlen'] = ObjectSerializer::toQueryValue($queue_maxlen);
        }
        // query params
        if ($queue_member_call_rest !== null) {
            $queryParams['queue.memberCallRest'] = ObjectSerializer::toQueryValue($queue_member_call_rest);
        }
        // query params
        if ($queue_member_call_timeout !== null) {
            $queryParams['queue.memberCallTimeout'] = ObjectSerializer::toQueryValue($queue_member_call_timeout);
        }
        // query params
        if ($queue_name !== null) {
            $queryParams['queue.name'] = ObjectSerializer::toQueryValue($queue_name);
        }
        // query params
        if ($queue_periodic_announce_frequency !== null) {
            $queryParams['queue.periodicAnnounceFrequency'] = ObjectSerializer::toQueryValue($queue_periodic_announce_frequency);
        }
        // query params
        if ($queue_periodic_announce_locution !== null) {
            $queryParams['queue.periodicAnnounceLocution'] = ObjectSerializer::toQueryValue($queue_periodic_announce_locution);
        }
        // query params
        if ($queue_prevent_missed_calls !== null) {
            $queryParams['queue.preventMissedCalls'] = ObjectSerializer::toQueryValue($queue_prevent_missed_calls);
        }
        // query params
        if ($queue_strategy !== null) {
            $queryParams['queue.strategy'] = ObjectSerializer::toQueryValue($queue_strategy);
        }
        // query params
        if ($queue_timeout_extension !== null) {
            $queryParams['queue.timeoutExtension'] = ObjectSerializer::toQueryValue($queue_timeout_extension);
        }
        // query params
        if ($queue_timeout_locution !== null) {
            $queryParams['queue.timeoutLocution'] = ObjectSerializer::toQueryValue($queue_timeout_locution);
        }
        // query params
        if ($queue_timeout_number_country !== null) {
            $queryParams['queue.timeoutNumberCountry'] = ObjectSerializer::toQueryValue($queue_timeout_number_country);
        }
        // query params
        if ($queue_timeout_number_value !== null) {
            $queryParams['queue.timeoutNumberValue'] = ObjectSerializer::toQueryValue($queue_timeout_number_value);
        }
        // query params
        if ($queue_timeout_target_type !== null) {
            $queryParams['queue.timeoutTargetType'] = ObjectSerializer::toQueryValue($queue_timeout_target_type);
        }
        // query params
        if ($queue_timeout_voice_mail_user !== null) {
            $queryParams['queue.timeoutVoiceMailUser'] = ObjectSerializer::toQueryValue($queue_timeout_voice_mail_user);
        }
        // query params
        if ($queue_weight !== null) {
            $queryParams['queue.weight'] = ObjectSerializer::toQueryValue($queue_weight);
        }
        // query params
        if ($queue2 !== null) {
            $queryParams['queue[]'] = ObjectSerializer::toQueryValue($queue2);
        }
        // query params
        if ($user !== null) {
            $queryParams['user'] = ObjectSerializer::toQueryValue($user);
        }
        // query params
        if ($user_active !== null) {
            $queryParams['user.active'] = ObjectSerializer::toQueryValue($user_active);
        }
        // query params
        if ($user_boss_assistant !== null) {
            $queryParams['user.bossAssistant'] = ObjectSerializer::toQueryValue($user_boss_assistant);
        }
        // query params
        if ($user_boss_assistant_white_list !== null) {
            $queryParams['user.bossAssistantWhiteList'] = ObjectSerializer::toQueryValue($user_boss_assistant_white_list);
        }
        // query params
        if ($user_call_acl !== null) {
            $queryParams['user.callAcl'] = ObjectSerializer::toQueryValue($user_call_acl);
        }
        // query params
        if ($user_do_not_disturb !== null) {
            $queryParams['user.doNotDisturb'] = ObjectSerializer::toQueryValue($user_do_not_disturb);
        }
        // query params
        if ($user_email !== null) {
            $queryParams['user.email'] = ObjectSerializer::toQueryValue($user_email);
        }
        // query params
        if ($user_extension !== null) {
            $queryParams['user.extension'] = ObjectSerializer::toQueryValue($user_extension);
        }
        // query params
        if ($user_external_ip_calls !== null) {
            $queryParams['user.externalIpCalls'] = ObjectSerializer::toQueryValue($user_external_ip_calls);
        }
        // query params
        if ($user_gs_qr_code !== null) {
            $queryParams['user.gsQRCode'] = ObjectSerializer::toQueryValue($user_gs_qr_code);
        }
        // query params
        if ($user_is_boss !== null) {
            $queryParams['user.isBoss'] = ObjectSerializer::toQueryValue($user_is_boss);
        }
        // query params
        if ($user_language !== null) {
            $queryParams['user.language'] = ObjectSerializer::toQueryValue($user_language);
        }
        // query params
        if ($user_lastname !== null) {
            $queryParams['user.lastname'] = ObjectSerializer::toQueryValue($user_lastname);
        }
        // query params
        if ($user_location !== null) {
            $queryParams['user.location'] = ObjectSerializer::toQueryValue($user_location);
        }
        // query params
        if ($user_max_calls !== null) {
            $queryParams['user.maxCalls'] = ObjectSerializer::toQueryValue($user_max_calls);
        }
        // query params
        if ($user_multi_contact !== null) {
            $queryParams['user.multiContact'] = ObjectSerializer::toQueryValue($user_multi_contact);
        }
        // query params
        if ($user_name !== null) {
            $queryParams['user.name'] = ObjectSerializer::toQueryValue($user_name);
        }
        // query params
        if ($user_outgoing_ddi !== null) {
            $queryParams['user.outgoingDdi'] = ObjectSerializer::toQueryValue($user_outgoing_ddi);
        }
        // query params
        if ($user_outgoing_ddi_rule !== null) {
            $queryParams['user.outgoingDdiRule'] = ObjectSerializer::toQueryValue($user_outgoing_ddi_rule);
        }
        // query params
        if ($user_pass !== null) {
            $queryParams['user.pass'] = ObjectSerializer::toQueryValue($user_pass);
        }
        // query params
        if ($user_reject_call_method !== null) {
            $queryParams['user.rejectCallMethod'] = ObjectSerializer::toQueryValue($user_reject_call_method);
        }
        // query params
        if ($user_terminal !== null) {
            $queryParams['user.terminal'] = ObjectSerializer::toQueryValue($user_terminal);
        }
        // query params
        if ($user_timezone !== null) {
            $queryParams['user.timezone'] = ObjectSerializer::toQueryValue($user_timezone);
        }
        // query params
        if ($user_transformation_rule_set !== null) {
            $queryParams['user.transformationRuleSet'] = ObjectSerializer::toQueryValue($user_transformation_rule_set);
        }
        // query params
        if ($user_voicemail_attach_sound !== null) {
            $queryParams['user.voicemailAttachSound'] = ObjectSerializer::toQueryValue($user_voicemail_attach_sound);
        }
        // query params
        if ($user_voicemail_enabled !== null) {
            $queryParams['user.voicemailEnabled'] = ObjectSerializer::toQueryValue($user_voicemail_enabled);
        }
        // query params
        if ($user_voicemail_locution !== null) {
            $queryParams['user.voicemailLocution'] = ObjectSerializer::toQueryValue($user_voicemail_locution);
        }
        // query params
        if ($user_voicemail_send_mail !== null) {
            $queryParams['user.voicemailSendMail'] = ObjectSerializer::toQueryValue($user_voicemail_send_mail);
        }
        // query params
        if ($user2 !== null) {
            $queryParams['user[]'] = ObjectSerializer::toQueryValue($user2);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_penalty !== null) {
            $queryParams['_order[penalty]'] = ObjectSerializer::toQueryValue($_order_penalty);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQueueMemberItem
     *
     * Retrieves a QueueMember resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\QueueMemberDetailed
     */
    public function getQueueMemberItem($id)
    {
        list($response) = $this->getQueueMemberItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getQueueMemberItemWithHttpInfo
     *
     * Retrieves a QueueMember resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\QueueMemberDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQueueMemberItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\QueueMemberDetailed';
        $request = $this->getQueueMemberItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\QueueMemberDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQueueMemberItemAsync
     *
     * Retrieves a QueueMember resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQueueMemberItemAsync($id)
    {
        return $this->getQueueMemberItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQueueMemberItemAsyncWithHttpInfo
     *
     * Retrieves a QueueMember resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQueueMemberItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\QueueMemberDetailed';
        $request = $this->getQueueMemberItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQueueMemberItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQueueMemberItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getQueueMemberItem'
            );
        }

        $resourcePath = '/queue_members/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRatingPlanGroupCollection
     *
     * Retrieves the collection of RatingPlanGroup resources.
     *
     * @param  int $id_exact id_exact (optional)
     * @param  string $name name (optional)
     * @param  string $name_ca name_ca (optional)
     * @param  string $name_ca_end name_ca_end (optional)
     * @param  string $name_ca_exact name_ca_exact (optional)
     * @param  string $name_ca_partial name_ca_partial (optional)
     * @param  string $name_ca_start name_ca_start (optional)
     * @param  string $name_en name_en (optional)
     * @param  string $name_en_end name_en_end (optional)
     * @param  string $name_en_exact name_en_exact (optional)
     * @param  string $name_en_partial name_en_partial (optional)
     * @param  string $name_en_start name_en_start (optional)
     * @param  string $name_es name_es (optional)
     * @param  string $name_es_end name_es_end (optional)
     * @param  string $name_es_exact name_es_exact (optional)
     * @param  string $name_es_partial name_es_partial (optional)
     * @param  string $name_es_start name_es_start (optional)
     * @param  string $name_it name_it (optional)
     * @param  string $name_it_end name_it_end (optional)
     * @param  string $name_it_exact name_it_exact (optional)
     * @param  string $name_it_partial name_it_partial (optional)
     * @param  string $name_it_start name_it_start (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_name_ca _order_name_ca (optional)
     * @param  string $_order_name_en _order_name_en (optional)
     * @param  string $_order_name_es _order_name_es (optional)
     * @param  string $_order_name_it _order_name_it (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\RatingPlanGroupCollection[]
     */
    public function getRatingPlanGroupCollection($id_exact = null, $name = null, $name_ca = null, $name_ca_end = null, $name_ca_exact = null, $name_ca_partial = null, $name_ca_start = null, $name_en = null, $name_en_end = null, $name_en_exact = null, $name_en_partial = null, $name_en_start = null, $name_es = null, $name_es_end = null, $name_es_exact = null, $name_es_partial = null, $name_es_start = null, $name_it = null, $name_it_end = null, $name_it_exact = null, $name_it_partial = null, $name_it_start = null, $_order_id = null, $_order_name_ca = null, $_order_name_en = null, $_order_name_es = null, $_order_name_it = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getRatingPlanGroupCollectionWithHttpInfo($id_exact, $name, $name_ca, $name_ca_end, $name_ca_exact, $name_ca_partial, $name_ca_start, $name_en, $name_en_end, $name_en_exact, $name_en_partial, $name_en_start, $name_es, $name_es_end, $name_es_exact, $name_es_partial, $name_es_start, $name_it, $name_it_end, $name_it_exact, $name_it_partial, $name_it_start, $_order_id, $_order_name_ca, $_order_name_en, $_order_name_es, $_order_name_it, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getRatingPlanGroupCollectionWithHttpInfo
     *
     * Retrieves the collection of RatingPlanGroup resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_ca (optional)
     * @param  string $name_ca_end (optional)
     * @param  string $name_ca_exact (optional)
     * @param  string $name_ca_partial (optional)
     * @param  string $name_ca_start (optional)
     * @param  string $name_en (optional)
     * @param  string $name_en_end (optional)
     * @param  string $name_en_exact (optional)
     * @param  string $name_en_partial (optional)
     * @param  string $name_en_start (optional)
     * @param  string $name_es (optional)
     * @param  string $name_es_end (optional)
     * @param  string $name_es_exact (optional)
     * @param  string $name_es_partial (optional)
     * @param  string $name_es_start (optional)
     * @param  string $name_it (optional)
     * @param  string $name_it_end (optional)
     * @param  string $name_it_exact (optional)
     * @param  string $name_it_partial (optional)
     * @param  string $name_it_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name_ca (optional)
     * @param  string $_order_name_en (optional)
     * @param  string $_order_name_es (optional)
     * @param  string $_order_name_it (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\RatingPlanGroupCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getRatingPlanGroupCollectionWithHttpInfo($id_exact = null, $name = null, $name_ca = null, $name_ca_end = null, $name_ca_exact = null, $name_ca_partial = null, $name_ca_start = null, $name_en = null, $name_en_end = null, $name_en_exact = null, $name_en_partial = null, $name_en_start = null, $name_es = null, $name_es_end = null, $name_es_exact = null, $name_es_partial = null, $name_es_start = null, $name_it = null, $name_it_end = null, $name_it_exact = null, $name_it_partial = null, $name_it_start = null, $_order_id = null, $_order_name_ca = null, $_order_name_en = null, $_order_name_es = null, $_order_name_it = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\RatingPlanGroupCollection[]';
        $request = $this->getRatingPlanGroupCollectionRequest($id_exact, $name, $name_ca, $name_ca_end, $name_ca_exact, $name_ca_partial, $name_ca_start, $name_en, $name_en_end, $name_en_exact, $name_en_partial, $name_en_start, $name_es, $name_es_end, $name_es_exact, $name_es_partial, $name_es_start, $name_it, $name_it_end, $name_it_exact, $name_it_partial, $name_it_start, $_order_id, $_order_name_ca, $_order_name_en, $_order_name_es, $_order_name_it, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\RatingPlanGroupCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRatingPlanGroupCollectionAsync
     *
     * Retrieves the collection of RatingPlanGroup resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_ca (optional)
     * @param  string $name_ca_end (optional)
     * @param  string $name_ca_exact (optional)
     * @param  string $name_ca_partial (optional)
     * @param  string $name_ca_start (optional)
     * @param  string $name_en (optional)
     * @param  string $name_en_end (optional)
     * @param  string $name_en_exact (optional)
     * @param  string $name_en_partial (optional)
     * @param  string $name_en_start (optional)
     * @param  string $name_es (optional)
     * @param  string $name_es_end (optional)
     * @param  string $name_es_exact (optional)
     * @param  string $name_es_partial (optional)
     * @param  string $name_es_start (optional)
     * @param  string $name_it (optional)
     * @param  string $name_it_end (optional)
     * @param  string $name_it_exact (optional)
     * @param  string $name_it_partial (optional)
     * @param  string $name_it_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name_ca (optional)
     * @param  string $_order_name_en (optional)
     * @param  string $_order_name_es (optional)
     * @param  string $_order_name_it (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRatingPlanGroupCollectionAsync($id_exact = null, $name = null, $name_ca = null, $name_ca_end = null, $name_ca_exact = null, $name_ca_partial = null, $name_ca_start = null, $name_en = null, $name_en_end = null, $name_en_exact = null, $name_en_partial = null, $name_en_start = null, $name_es = null, $name_es_end = null, $name_es_exact = null, $name_es_partial = null, $name_es_start = null, $name_it = null, $name_it_end = null, $name_it_exact = null, $name_it_partial = null, $name_it_start = null, $_order_id = null, $_order_name_ca = null, $_order_name_en = null, $_order_name_es = null, $_order_name_it = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getRatingPlanGroupCollectionAsyncWithHttpInfo($id_exact, $name, $name_ca, $name_ca_end, $name_ca_exact, $name_ca_partial, $name_ca_start, $name_en, $name_en_end, $name_en_exact, $name_en_partial, $name_en_start, $name_es, $name_es_end, $name_es_exact, $name_es_partial, $name_es_start, $name_it, $name_it_end, $name_it_exact, $name_it_partial, $name_it_start, $_order_id, $_order_name_ca, $_order_name_en, $_order_name_es, $_order_name_it, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRatingPlanGroupCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of RatingPlanGroup resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_ca (optional)
     * @param  string $name_ca_end (optional)
     * @param  string $name_ca_exact (optional)
     * @param  string $name_ca_partial (optional)
     * @param  string $name_ca_start (optional)
     * @param  string $name_en (optional)
     * @param  string $name_en_end (optional)
     * @param  string $name_en_exact (optional)
     * @param  string $name_en_partial (optional)
     * @param  string $name_en_start (optional)
     * @param  string $name_es (optional)
     * @param  string $name_es_end (optional)
     * @param  string $name_es_exact (optional)
     * @param  string $name_es_partial (optional)
     * @param  string $name_es_start (optional)
     * @param  string $name_it (optional)
     * @param  string $name_it_end (optional)
     * @param  string $name_it_exact (optional)
     * @param  string $name_it_partial (optional)
     * @param  string $name_it_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name_ca (optional)
     * @param  string $_order_name_en (optional)
     * @param  string $_order_name_es (optional)
     * @param  string $_order_name_it (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRatingPlanGroupCollectionAsyncWithHttpInfo($id_exact = null, $name = null, $name_ca = null, $name_ca_end = null, $name_ca_exact = null, $name_ca_partial = null, $name_ca_start = null, $name_en = null, $name_en_end = null, $name_en_exact = null, $name_en_partial = null, $name_en_start = null, $name_es = null, $name_es_end = null, $name_es_exact = null, $name_es_partial = null, $name_es_start = null, $name_it = null, $name_it_end = null, $name_it_exact = null, $name_it_partial = null, $name_it_start = null, $_order_id = null, $_order_name_ca = null, $_order_name_en = null, $_order_name_es = null, $_order_name_it = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\RatingPlanGroupCollection[]';
        $request = $this->getRatingPlanGroupCollectionRequest($id_exact, $name, $name_ca, $name_ca_end, $name_ca_exact, $name_ca_partial, $name_ca_start, $name_en, $name_en_end, $name_en_exact, $name_en_partial, $name_en_start, $name_es, $name_es_end, $name_es_exact, $name_es_partial, $name_es_start, $name_it, $name_it_end, $name_it_exact, $name_it_partial, $name_it_start, $_order_id, $_order_name_ca, $_order_name_en, $_order_name_es, $_order_name_it, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRatingPlanGroupCollection'
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_ca (optional)
     * @param  string $name_ca_end (optional)
     * @param  string $name_ca_exact (optional)
     * @param  string $name_ca_partial (optional)
     * @param  string $name_ca_start (optional)
     * @param  string $name_en (optional)
     * @param  string $name_en_end (optional)
     * @param  string $name_en_exact (optional)
     * @param  string $name_en_partial (optional)
     * @param  string $name_en_start (optional)
     * @param  string $name_es (optional)
     * @param  string $name_es_end (optional)
     * @param  string $name_es_exact (optional)
     * @param  string $name_es_partial (optional)
     * @param  string $name_es_start (optional)
     * @param  string $name_it (optional)
     * @param  string $name_it_end (optional)
     * @param  string $name_it_exact (optional)
     * @param  string $name_it_partial (optional)
     * @param  string $name_it_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name_ca (optional)
     * @param  string $_order_name_en (optional)
     * @param  string $_order_name_es (optional)
     * @param  string $_order_name_it (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getRatingPlanGroupCollectionRequest($id_exact = null, $name = null, $name_ca = null, $name_ca_end = null, $name_ca_exact = null, $name_ca_partial = null, $name_ca_start = null, $name_en = null, $name_en_end = null, $name_en_exact = null, $name_en_partial = null, $name_en_start = null, $name_es = null, $name_es_end = null, $name_es_exact = null, $name_es_partial = null, $name_es_start = null, $name_it = null, $name_it_end = null, $name_it_exact = null, $name_it_partial = null, $name_it_start = null, $_order_id = null, $_order_name_ca = null, $_order_name_en = null, $_order_name_es = null, $_order_name_it = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/rating_plan_groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_ca !== null) {
            $queryParams['name.ca'] = ObjectSerializer::toQueryValue($name_ca);
        }
        // query params
        if ($name_ca_end !== null) {
            $queryParams['name.ca[end]'] = ObjectSerializer::toQueryValue($name_ca_end);
        }
        // query params
        if ($name_ca_exact !== null) {
            $queryParams['name.ca[exact]'] = ObjectSerializer::toQueryValue($name_ca_exact);
        }
        // query params
        if ($name_ca_partial !== null) {
            $queryParams['name.ca[partial]'] = ObjectSerializer::toQueryValue($name_ca_partial);
        }
        // query params
        if ($name_ca_start !== null) {
            $queryParams['name.ca[start]'] = ObjectSerializer::toQueryValue($name_ca_start);
        }
        // query params
        if ($name_en !== null) {
            $queryParams['name.en'] = ObjectSerializer::toQueryValue($name_en);
        }
        // query params
        if ($name_en_end !== null) {
            $queryParams['name.en[end]'] = ObjectSerializer::toQueryValue($name_en_end);
        }
        // query params
        if ($name_en_exact !== null) {
            $queryParams['name.en[exact]'] = ObjectSerializer::toQueryValue($name_en_exact);
        }
        // query params
        if ($name_en_partial !== null) {
            $queryParams['name.en[partial]'] = ObjectSerializer::toQueryValue($name_en_partial);
        }
        // query params
        if ($name_en_start !== null) {
            $queryParams['name.en[start]'] = ObjectSerializer::toQueryValue($name_en_start);
        }
        // query params
        if ($name_es !== null) {
            $queryParams['name.es'] = ObjectSerializer::toQueryValue($name_es);
        }
        // query params
        if ($name_es_end !== null) {
            $queryParams['name.es[end]'] = ObjectSerializer::toQueryValue($name_es_end);
        }
        // query params
        if ($name_es_exact !== null) {
            $queryParams['name.es[exact]'] = ObjectSerializer::toQueryValue($name_es_exact);
        }
        // query params
        if ($name_es_partial !== null) {
            $queryParams['name.es[partial]'] = ObjectSerializer::toQueryValue($name_es_partial);
        }
        // query params
        if ($name_es_start !== null) {
            $queryParams['name.es[start]'] = ObjectSerializer::toQueryValue($name_es_start);
        }
        // query params
        if ($name_it !== null) {
            $queryParams['name.it'] = ObjectSerializer::toQueryValue($name_it);
        }
        // query params
        if ($name_it_end !== null) {
            $queryParams['name.it[end]'] = ObjectSerializer::toQueryValue($name_it_end);
        }
        // query params
        if ($name_it_exact !== null) {
            $queryParams['name.it[exact]'] = ObjectSerializer::toQueryValue($name_it_exact);
        }
        // query params
        if ($name_it_partial !== null) {
            $queryParams['name.it[partial]'] = ObjectSerializer::toQueryValue($name_it_partial);
        }
        // query params
        if ($name_it_start !== null) {
            $queryParams['name.it[start]'] = ObjectSerializer::toQueryValue($name_it_start);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_name_ca !== null) {
            $queryParams['_order[name.ca]'] = ObjectSerializer::toQueryValue($_order_name_ca);
        }
        // query params
        if ($_order_name_en !== null) {
            $queryParams['_order[name.en]'] = ObjectSerializer::toQueryValue($_order_name_en);
        }
        // query params
        if ($_order_name_es !== null) {
            $queryParams['_order[name.es]'] = ObjectSerializer::toQueryValue($_order_name_es);
        }
        // query params
        if ($_order_name_it !== null) {
            $queryParams['_order[name.it]'] = ObjectSerializer::toQueryValue($_order_name_it);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRatingPlanGroupItem
     *
     * Retrieves a RatingPlanGroup resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\RatingPlanGroupDetailed
     */
    public function getRatingPlanGroupItem($id)
    {
        list($response) = $this->getRatingPlanGroupItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getRatingPlanGroupItemWithHttpInfo
     *
     * Retrieves a RatingPlanGroup resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\RatingPlanGroupDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRatingPlanGroupItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\RatingPlanGroupDetailed';
        $request = $this->getRatingPlanGroupItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\RatingPlanGroupDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRatingPlanGroupItemAsync
     *
     * Retrieves a RatingPlanGroup resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRatingPlanGroupItemAsync($id)
    {
        return $this->getRatingPlanGroupItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRatingPlanGroupItemAsyncWithHttpInfo
     *
     * Retrieves a RatingPlanGroup resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRatingPlanGroupItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\RatingPlanGroupDetailed';
        $request = $this->getRatingPlanGroupItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRatingPlanGroupItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getRatingPlanGroupItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getRatingPlanGroupItem'
            );
        }

        $resourcePath = '/rating_plan_groups/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRatingProfileCollection
     *
     * Retrieves the collection of RatingProfile resources.
     *
     * @param  string $activation_time activation_time (optional)
     * @param  string $activation_time_after activation_time_after (optional)
     * @param  string $activation_time_before activation_time_before (optional)
     * @param  string $activation_time_start activation_time_start (optional)
     * @param  string $activation_time_strictly_after activation_time_strictly_after (optional)
     * @param  string $activation_time_strictly_before activation_time_strictly_before (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $rating_plan_group rating_plan_group (optional)
     * @param  string $rating_plan_group2 rating_plan_group2 (optional)
     * @param  string $routing_tag routing_tag (optional)
     * @param  string $routing_tag2 routing_tag2 (optional)
     * @param  bool $routing_tag_exists routing_tag_exists (optional)
     * @param  string $_order_activation_time _order_activation_time (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\RatingProfileCollection[]
     */
    public function getRatingProfileCollection($activation_time = null, $activation_time_after = null, $activation_time_before = null, $activation_time_start = null, $activation_time_strictly_after = null, $activation_time_strictly_before = null, $id_exact = null, $rating_plan_group = null, $rating_plan_group2 = null, $routing_tag = null, $routing_tag2 = null, $routing_tag_exists = null, $_order_activation_time = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null, $_timezone = null)
    {
        list($response) = $this->getRatingProfileCollectionWithHttpInfo($activation_time, $activation_time_after, $activation_time_before, $activation_time_start, $activation_time_strictly_after, $activation_time_strictly_before, $id_exact, $rating_plan_group, $rating_plan_group2, $routing_tag, $routing_tag2, $routing_tag_exists, $_order_activation_time, $_order_id, $_items_per_page, $_page, $_properties, $_timezone);
        return $response;
    }

    /**
     * Operation getRatingProfileCollectionWithHttpInfo
     *
     * Retrieves the collection of RatingProfile resources.
     *
     * @param  string $activation_time (optional)
     * @param  string $activation_time_after (optional)
     * @param  string $activation_time_before (optional)
     * @param  string $activation_time_start (optional)
     * @param  string $activation_time_strictly_after (optional)
     * @param  string $activation_time_strictly_before (optional)
     * @param  int $id_exact (optional)
     * @param  string $rating_plan_group (optional)
     * @param  string $rating_plan_group2 (optional)
     * @param  string $routing_tag (optional)
     * @param  string $routing_tag2 (optional)
     * @param  bool $routing_tag_exists (optional)
     * @param  string $_order_activation_time (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\RatingProfileCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getRatingProfileCollectionWithHttpInfo($activation_time = null, $activation_time_after = null, $activation_time_before = null, $activation_time_start = null, $activation_time_strictly_after = null, $activation_time_strictly_before = null, $id_exact = null, $rating_plan_group = null, $rating_plan_group2 = null, $routing_tag = null, $routing_tag2 = null, $routing_tag_exists = null, $_order_activation_time = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\RatingProfileCollection[]';
        $request = $this->getRatingProfileCollectionRequest($activation_time, $activation_time_after, $activation_time_before, $activation_time_start, $activation_time_strictly_after, $activation_time_strictly_before, $id_exact, $rating_plan_group, $rating_plan_group2, $routing_tag, $routing_tag2, $routing_tag_exists, $_order_activation_time, $_order_id, $_items_per_page, $_page, $_properties, $_timezone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\RatingProfileCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRatingProfileCollectionAsync
     *
     * Retrieves the collection of RatingProfile resources.
     *
     * @param  string $activation_time (optional)
     * @param  string $activation_time_after (optional)
     * @param  string $activation_time_before (optional)
     * @param  string $activation_time_start (optional)
     * @param  string $activation_time_strictly_after (optional)
     * @param  string $activation_time_strictly_before (optional)
     * @param  int $id_exact (optional)
     * @param  string $rating_plan_group (optional)
     * @param  string $rating_plan_group2 (optional)
     * @param  string $routing_tag (optional)
     * @param  string $routing_tag2 (optional)
     * @param  bool $routing_tag_exists (optional)
     * @param  string $_order_activation_time (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRatingProfileCollectionAsync($activation_time = null, $activation_time_after = null, $activation_time_before = null, $activation_time_start = null, $activation_time_strictly_after = null, $activation_time_strictly_before = null, $id_exact = null, $rating_plan_group = null, $rating_plan_group2 = null, $routing_tag = null, $routing_tag2 = null, $routing_tag_exists = null, $_order_activation_time = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null, $_timezone = null)
    {
        return $this->getRatingProfileCollectionAsyncWithHttpInfo($activation_time, $activation_time_after, $activation_time_before, $activation_time_start, $activation_time_strictly_after, $activation_time_strictly_before, $id_exact, $rating_plan_group, $rating_plan_group2, $routing_tag, $routing_tag2, $routing_tag_exists, $_order_activation_time, $_order_id, $_items_per_page, $_page, $_properties, $_timezone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRatingProfileCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of RatingProfile resources.
     *
     * @param  string $activation_time (optional)
     * @param  string $activation_time_after (optional)
     * @param  string $activation_time_before (optional)
     * @param  string $activation_time_start (optional)
     * @param  string $activation_time_strictly_after (optional)
     * @param  string $activation_time_strictly_before (optional)
     * @param  int $id_exact (optional)
     * @param  string $rating_plan_group (optional)
     * @param  string $rating_plan_group2 (optional)
     * @param  string $routing_tag (optional)
     * @param  string $routing_tag2 (optional)
     * @param  bool $routing_tag_exists (optional)
     * @param  string $_order_activation_time (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRatingProfileCollectionAsyncWithHttpInfo($activation_time = null, $activation_time_after = null, $activation_time_before = null, $activation_time_start = null, $activation_time_strictly_after = null, $activation_time_strictly_before = null, $id_exact = null, $rating_plan_group = null, $rating_plan_group2 = null, $routing_tag = null, $routing_tag2 = null, $routing_tag_exists = null, $_order_activation_time = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\RatingProfileCollection[]';
        $request = $this->getRatingProfileCollectionRequest($activation_time, $activation_time_after, $activation_time_before, $activation_time_start, $activation_time_strictly_after, $activation_time_strictly_before, $id_exact, $rating_plan_group, $rating_plan_group2, $routing_tag, $routing_tag2, $routing_tag_exists, $_order_activation_time, $_order_id, $_items_per_page, $_page, $_properties, $_timezone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRatingProfileCollection'
     *
     * @param  string $activation_time (optional)
     * @param  string $activation_time_after (optional)
     * @param  string $activation_time_before (optional)
     * @param  string $activation_time_start (optional)
     * @param  string $activation_time_strictly_after (optional)
     * @param  string $activation_time_strictly_before (optional)
     * @param  int $id_exact (optional)
     * @param  string $rating_plan_group (optional)
     * @param  string $rating_plan_group2 (optional)
     * @param  string $routing_tag (optional)
     * @param  string $routing_tag2 (optional)
     * @param  bool $routing_tag_exists (optional)
     * @param  string $_order_activation_time (optional)
     * @param  string $_order_id (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getRatingProfileCollectionRequest($activation_time = null, $activation_time_after = null, $activation_time_before = null, $activation_time_start = null, $activation_time_strictly_after = null, $activation_time_strictly_before = null, $id_exact = null, $rating_plan_group = null, $rating_plan_group2 = null, $routing_tag = null, $routing_tag2 = null, $routing_tag_exists = null, $_order_activation_time = null, $_order_id = null, $_items_per_page = null, $_page = null, $_properties = null, $_timezone = null)
    {

        $resourcePath = '/rating_profiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($activation_time !== null) {
            $queryParams['activationTime'] = ObjectSerializer::toQueryValue($activation_time);
        }
        // query params
        if ($activation_time_after !== null) {
            $queryParams['activationTime[after]'] = ObjectSerializer::toQueryValue($activation_time_after);
        }
        // query params
        if ($activation_time_before !== null) {
            $queryParams['activationTime[before]'] = ObjectSerializer::toQueryValue($activation_time_before);
        }
        // query params
        if ($activation_time_start !== null) {
            $queryParams['activationTime[start]'] = ObjectSerializer::toQueryValue($activation_time_start);
        }
        // query params
        if ($activation_time_strictly_after !== null) {
            $queryParams['activationTime[strictly_after]'] = ObjectSerializer::toQueryValue($activation_time_strictly_after);
        }
        // query params
        if ($activation_time_strictly_before !== null) {
            $queryParams['activationTime[strictly_before]'] = ObjectSerializer::toQueryValue($activation_time_strictly_before);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($rating_plan_group !== null) {
            $queryParams['ratingPlanGroup'] = ObjectSerializer::toQueryValue($rating_plan_group);
        }
        // query params
        if ($rating_plan_group2 !== null) {
            $queryParams['ratingPlanGroup[]'] = ObjectSerializer::toQueryValue($rating_plan_group2);
        }
        // query params
        if ($routing_tag !== null) {
            $queryParams['routingTag'] = ObjectSerializer::toQueryValue($routing_tag);
        }
        // query params
        if ($routing_tag2 !== null) {
            $queryParams['routingTag[]'] = ObjectSerializer::toQueryValue($routing_tag2);
        }
        // query params
        if ($routing_tag_exists !== null) {
            $queryParams['routingTag[exists]'] = ObjectSerializer::toQueryValue($routing_tag_exists);
        }
        // query params
        if ($_order_activation_time !== null) {
            $queryParams['_order[activationTime]'] = ObjectSerializer::toQueryValue($_order_activation_time);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }
        // query params
        if ($_timezone !== null) {
            $queryParams['_timezone'] = ObjectSerializer::toQueryValue($_timezone);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRatingProfileItem
     *
     * Retrieves a RatingProfile resource.
     *
     * @param  string $id id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\RatingProfileDetailed
     */
    public function getRatingProfileItem($id, $_timezone = null)
    {
        list($response) = $this->getRatingProfileItemWithHttpInfo($id, $_timezone);
        return $response;
    }

    /**
     * Operation getRatingProfileItemWithHttpInfo
     *
     * Retrieves a RatingProfile resource.
     *
     * @param  string $id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\RatingProfileDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRatingProfileItemWithHttpInfo($id, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\RatingProfileDetailed';
        $request = $this->getRatingProfileItemRequest($id, $_timezone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\RatingProfileDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRatingProfileItemAsync
     *
     * Retrieves a RatingProfile resource.
     *
     * @param  string $id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRatingProfileItemAsync($id, $_timezone = null)
    {
        return $this->getRatingProfileItemAsyncWithHttpInfo($id, $_timezone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRatingProfileItemAsyncWithHttpInfo
     *
     * Retrieves a RatingProfile resource.
     *
     * @param  string $id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRatingProfileItemAsyncWithHttpInfo($id, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\RatingProfileDetailed';
        $request = $this->getRatingProfileItemRequest($id, $_timezone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRatingProfileItem'
     *
     * @param  string $id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getRatingProfileItemRequest($id, $_timezone = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getRatingProfileItem'
            );
        }

        $resourcePath = '/rating_profiles/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_timezone !== null) {
            $queryParams['_timezone'] = ObjectSerializer::toQueryValue($_timezone);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRecordingCollection
     *
     * Retrieves the collection of Recording resources.
     *
     * @param  string $calldate calldate (optional)
     * @param  string $calldate_after calldate_after (optional)
     * @param  string $calldate_before calldate_before (optional)
     * @param  string $calldate_start calldate_start (optional)
     * @param  string $calldate_strictly_after calldate_strictly_after (optional)
     * @param  string $calldate_strictly_before calldate_strictly_before (optional)
     * @param  string $callee callee (optional)
     * @param  string $callee_end callee_end (optional)
     * @param  string $callee_exact callee_exact (optional)
     * @param  bool $callee_exists callee_exists (optional)
     * @param  string $callee_partial callee_partial (optional)
     * @param  string $callee_start callee_start (optional)
     * @param  string $caller caller (optional)
     * @param  string $caller_end caller_end (optional)
     * @param  string $caller_exact caller_exact (optional)
     * @param  bool $caller_exists caller_exists (optional)
     * @param  string $caller_partial caller_partial (optional)
     * @param  string $caller_start caller_start (optional)
     * @param  string $callid callid (optional)
     * @param  string $callid_end callid_end (optional)
     * @param  string $callid_exact callid_exact (optional)
     * @param  bool $callid_exists callid_exists (optional)
     * @param  string $callid_partial callid_partial (optional)
     * @param  string $callid_start callid_start (optional)
     * @param  float $duration duration (optional)
     * @param  string $duration_between duration_between (optional)
     * @param  string $duration_gt duration_gt (optional)
     * @param  string $duration_gte duration_gte (optional)
     * @param  string $duration_lt duration_lt (optional)
     * @param  string $duration_lte duration_lte (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $recorder recorder (optional)
     * @param  string $recorder_end recorder_end (optional)
     * @param  string $recorder_exact recorder_exact (optional)
     * @param  bool $recorder_exists recorder_exists (optional)
     * @param  string $recorder_partial recorder_partial (optional)
     * @param  string $recorder_start recorder_start (optional)
     * @param  string $type type (optional)
     * @param  string $type_end type_end (optional)
     * @param  string $type_exact type_exact (optional)
     * @param  string $type_partial type_partial (optional)
     * @param  string $type_start type_start (optional)
     * @param  string $_order_calldate _order_calldate (optional)
     * @param  string $_order_callee _order_callee (optional)
     * @param  string $_order_caller _order_caller (optional)
     * @param  string $_order_callid _order_callid (optional)
     * @param  string $_order_duration _order_duration (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_recorder _order_recorder (optional)
     * @param  string $_order_type _order_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\RecordingCollection[]
     */
    public function getRecordingCollection($calldate = null, $calldate_after = null, $calldate_before = null, $calldate_start = null, $calldate_strictly_after = null, $calldate_strictly_before = null, $callee = null, $callee_end = null, $callee_exact = null, $callee_exists = null, $callee_partial = null, $callee_start = null, $caller = null, $caller_end = null, $caller_exact = null, $caller_exists = null, $caller_partial = null, $caller_start = null, $callid = null, $callid_end = null, $callid_exact = null, $callid_exists = null, $callid_partial = null, $callid_start = null, $duration = null, $duration_between = null, $duration_gt = null, $duration_gte = null, $duration_lt = null, $duration_lte = null, $id_exact = null, $recorder = null, $recorder_end = null, $recorder_exact = null, $recorder_exists = null, $recorder_partial = null, $recorder_start = null, $type = null, $type_end = null, $type_exact = null, $type_partial = null, $type_start = null, $_order_calldate = null, $_order_callee = null, $_order_caller = null, $_order_callid = null, $_order_duration = null, $_order_id = null, $_order_recorder = null, $_order_type = null, $_items_per_page = null, $_page = null, $_properties = null, $_timezone = null)
    {
        list($response) = $this->getRecordingCollectionWithHttpInfo($calldate, $calldate_after, $calldate_before, $calldate_start, $calldate_strictly_after, $calldate_strictly_before, $callee, $callee_end, $callee_exact, $callee_exists, $callee_partial, $callee_start, $caller, $caller_end, $caller_exact, $caller_exists, $caller_partial, $caller_start, $callid, $callid_end, $callid_exact, $callid_exists, $callid_partial, $callid_start, $duration, $duration_between, $duration_gt, $duration_gte, $duration_lt, $duration_lte, $id_exact, $recorder, $recorder_end, $recorder_exact, $recorder_exists, $recorder_partial, $recorder_start, $type, $type_end, $type_exact, $type_partial, $type_start, $_order_calldate, $_order_callee, $_order_caller, $_order_callid, $_order_duration, $_order_id, $_order_recorder, $_order_type, $_items_per_page, $_page, $_properties, $_timezone);
        return $response;
    }

    /**
     * Operation getRecordingCollectionWithHttpInfo
     *
     * Retrieves the collection of Recording resources.
     *
     * @param  string $calldate (optional)
     * @param  string $calldate_after (optional)
     * @param  string $calldate_before (optional)
     * @param  string $calldate_start (optional)
     * @param  string $calldate_strictly_after (optional)
     * @param  string $calldate_strictly_before (optional)
     * @param  string $callee (optional)
     * @param  string $callee_end (optional)
     * @param  string $callee_exact (optional)
     * @param  bool $callee_exists (optional)
     * @param  string $callee_partial (optional)
     * @param  string $callee_start (optional)
     * @param  string $caller (optional)
     * @param  string $caller_end (optional)
     * @param  string $caller_exact (optional)
     * @param  bool $caller_exists (optional)
     * @param  string $caller_partial (optional)
     * @param  string $caller_start (optional)
     * @param  string $callid (optional)
     * @param  string $callid_end (optional)
     * @param  string $callid_exact (optional)
     * @param  bool $callid_exists (optional)
     * @param  string $callid_partial (optional)
     * @param  string $callid_start (optional)
     * @param  float $duration (optional)
     * @param  string $duration_between (optional)
     * @param  string $duration_gt (optional)
     * @param  string $duration_gte (optional)
     * @param  string $duration_lt (optional)
     * @param  string $duration_lte (optional)
     * @param  int $id_exact (optional)
     * @param  string $recorder (optional)
     * @param  string $recorder_end (optional)
     * @param  string $recorder_exact (optional)
     * @param  bool $recorder_exists (optional)
     * @param  string $recorder_partial (optional)
     * @param  string $recorder_start (optional)
     * @param  string $type (optional)
     * @param  string $type_end (optional)
     * @param  string $type_exact (optional)
     * @param  string $type_partial (optional)
     * @param  string $type_start (optional)
     * @param  string $_order_calldate (optional)
     * @param  string $_order_callee (optional)
     * @param  string $_order_caller (optional)
     * @param  string $_order_callid (optional)
     * @param  string $_order_duration (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_recorder (optional)
     * @param  string $_order_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\RecordingCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getRecordingCollectionWithHttpInfo($calldate = null, $calldate_after = null, $calldate_before = null, $calldate_start = null, $calldate_strictly_after = null, $calldate_strictly_before = null, $callee = null, $callee_end = null, $callee_exact = null, $callee_exists = null, $callee_partial = null, $callee_start = null, $caller = null, $caller_end = null, $caller_exact = null, $caller_exists = null, $caller_partial = null, $caller_start = null, $callid = null, $callid_end = null, $callid_exact = null, $callid_exists = null, $callid_partial = null, $callid_start = null, $duration = null, $duration_between = null, $duration_gt = null, $duration_gte = null, $duration_lt = null, $duration_lte = null, $id_exact = null, $recorder = null, $recorder_end = null, $recorder_exact = null, $recorder_exists = null, $recorder_partial = null, $recorder_start = null, $type = null, $type_end = null, $type_exact = null, $type_partial = null, $type_start = null, $_order_calldate = null, $_order_callee = null, $_order_caller = null, $_order_callid = null, $_order_duration = null, $_order_id = null, $_order_recorder = null, $_order_type = null, $_items_per_page = null, $_page = null, $_properties = null, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\RecordingCollection[]';
        $request = $this->getRecordingCollectionRequest($calldate, $calldate_after, $calldate_before, $calldate_start, $calldate_strictly_after, $calldate_strictly_before, $callee, $callee_end, $callee_exact, $callee_exists, $callee_partial, $callee_start, $caller, $caller_end, $caller_exact, $caller_exists, $caller_partial, $caller_start, $callid, $callid_end, $callid_exact, $callid_exists, $callid_partial, $callid_start, $duration, $duration_between, $duration_gt, $duration_gte, $duration_lt, $duration_lte, $id_exact, $recorder, $recorder_end, $recorder_exact, $recorder_exists, $recorder_partial, $recorder_start, $type, $type_end, $type_exact, $type_partial, $type_start, $_order_calldate, $_order_callee, $_order_caller, $_order_callid, $_order_duration, $_order_id, $_order_recorder, $_order_type, $_items_per_page, $_page, $_properties, $_timezone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\RecordingCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRecordingCollectionAsync
     *
     * Retrieves the collection of Recording resources.
     *
     * @param  string $calldate (optional)
     * @param  string $calldate_after (optional)
     * @param  string $calldate_before (optional)
     * @param  string $calldate_start (optional)
     * @param  string $calldate_strictly_after (optional)
     * @param  string $calldate_strictly_before (optional)
     * @param  string $callee (optional)
     * @param  string $callee_end (optional)
     * @param  string $callee_exact (optional)
     * @param  bool $callee_exists (optional)
     * @param  string $callee_partial (optional)
     * @param  string $callee_start (optional)
     * @param  string $caller (optional)
     * @param  string $caller_end (optional)
     * @param  string $caller_exact (optional)
     * @param  bool $caller_exists (optional)
     * @param  string $caller_partial (optional)
     * @param  string $caller_start (optional)
     * @param  string $callid (optional)
     * @param  string $callid_end (optional)
     * @param  string $callid_exact (optional)
     * @param  bool $callid_exists (optional)
     * @param  string $callid_partial (optional)
     * @param  string $callid_start (optional)
     * @param  float $duration (optional)
     * @param  string $duration_between (optional)
     * @param  string $duration_gt (optional)
     * @param  string $duration_gte (optional)
     * @param  string $duration_lt (optional)
     * @param  string $duration_lte (optional)
     * @param  int $id_exact (optional)
     * @param  string $recorder (optional)
     * @param  string $recorder_end (optional)
     * @param  string $recorder_exact (optional)
     * @param  bool $recorder_exists (optional)
     * @param  string $recorder_partial (optional)
     * @param  string $recorder_start (optional)
     * @param  string $type (optional)
     * @param  string $type_end (optional)
     * @param  string $type_exact (optional)
     * @param  string $type_partial (optional)
     * @param  string $type_start (optional)
     * @param  string $_order_calldate (optional)
     * @param  string $_order_callee (optional)
     * @param  string $_order_caller (optional)
     * @param  string $_order_callid (optional)
     * @param  string $_order_duration (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_recorder (optional)
     * @param  string $_order_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRecordingCollectionAsync($calldate = null, $calldate_after = null, $calldate_before = null, $calldate_start = null, $calldate_strictly_after = null, $calldate_strictly_before = null, $callee = null, $callee_end = null, $callee_exact = null, $callee_exists = null, $callee_partial = null, $callee_start = null, $caller = null, $caller_end = null, $caller_exact = null, $caller_exists = null, $caller_partial = null, $caller_start = null, $callid = null, $callid_end = null, $callid_exact = null, $callid_exists = null, $callid_partial = null, $callid_start = null, $duration = null, $duration_between = null, $duration_gt = null, $duration_gte = null, $duration_lt = null, $duration_lte = null, $id_exact = null, $recorder = null, $recorder_end = null, $recorder_exact = null, $recorder_exists = null, $recorder_partial = null, $recorder_start = null, $type = null, $type_end = null, $type_exact = null, $type_partial = null, $type_start = null, $_order_calldate = null, $_order_callee = null, $_order_caller = null, $_order_callid = null, $_order_duration = null, $_order_id = null, $_order_recorder = null, $_order_type = null, $_items_per_page = null, $_page = null, $_properties = null, $_timezone = null)
    {
        return $this->getRecordingCollectionAsyncWithHttpInfo($calldate, $calldate_after, $calldate_before, $calldate_start, $calldate_strictly_after, $calldate_strictly_before, $callee, $callee_end, $callee_exact, $callee_exists, $callee_partial, $callee_start, $caller, $caller_end, $caller_exact, $caller_exists, $caller_partial, $caller_start, $callid, $callid_end, $callid_exact, $callid_exists, $callid_partial, $callid_start, $duration, $duration_between, $duration_gt, $duration_gte, $duration_lt, $duration_lte, $id_exact, $recorder, $recorder_end, $recorder_exact, $recorder_exists, $recorder_partial, $recorder_start, $type, $type_end, $type_exact, $type_partial, $type_start, $_order_calldate, $_order_callee, $_order_caller, $_order_callid, $_order_duration, $_order_id, $_order_recorder, $_order_type, $_items_per_page, $_page, $_properties, $_timezone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRecordingCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of Recording resources.
     *
     * @param  string $calldate (optional)
     * @param  string $calldate_after (optional)
     * @param  string $calldate_before (optional)
     * @param  string $calldate_start (optional)
     * @param  string $calldate_strictly_after (optional)
     * @param  string $calldate_strictly_before (optional)
     * @param  string $callee (optional)
     * @param  string $callee_end (optional)
     * @param  string $callee_exact (optional)
     * @param  bool $callee_exists (optional)
     * @param  string $callee_partial (optional)
     * @param  string $callee_start (optional)
     * @param  string $caller (optional)
     * @param  string $caller_end (optional)
     * @param  string $caller_exact (optional)
     * @param  bool $caller_exists (optional)
     * @param  string $caller_partial (optional)
     * @param  string $caller_start (optional)
     * @param  string $callid (optional)
     * @param  string $callid_end (optional)
     * @param  string $callid_exact (optional)
     * @param  bool $callid_exists (optional)
     * @param  string $callid_partial (optional)
     * @param  string $callid_start (optional)
     * @param  float $duration (optional)
     * @param  string $duration_between (optional)
     * @param  string $duration_gt (optional)
     * @param  string $duration_gte (optional)
     * @param  string $duration_lt (optional)
     * @param  string $duration_lte (optional)
     * @param  int $id_exact (optional)
     * @param  string $recorder (optional)
     * @param  string $recorder_end (optional)
     * @param  string $recorder_exact (optional)
     * @param  bool $recorder_exists (optional)
     * @param  string $recorder_partial (optional)
     * @param  string $recorder_start (optional)
     * @param  string $type (optional)
     * @param  string $type_end (optional)
     * @param  string $type_exact (optional)
     * @param  string $type_partial (optional)
     * @param  string $type_start (optional)
     * @param  string $_order_calldate (optional)
     * @param  string $_order_callee (optional)
     * @param  string $_order_caller (optional)
     * @param  string $_order_callid (optional)
     * @param  string $_order_duration (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_recorder (optional)
     * @param  string $_order_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRecordingCollectionAsyncWithHttpInfo($calldate = null, $calldate_after = null, $calldate_before = null, $calldate_start = null, $calldate_strictly_after = null, $calldate_strictly_before = null, $callee = null, $callee_end = null, $callee_exact = null, $callee_exists = null, $callee_partial = null, $callee_start = null, $caller = null, $caller_end = null, $caller_exact = null, $caller_exists = null, $caller_partial = null, $caller_start = null, $callid = null, $callid_end = null, $callid_exact = null, $callid_exists = null, $callid_partial = null, $callid_start = null, $duration = null, $duration_between = null, $duration_gt = null, $duration_gte = null, $duration_lt = null, $duration_lte = null, $id_exact = null, $recorder = null, $recorder_end = null, $recorder_exact = null, $recorder_exists = null, $recorder_partial = null, $recorder_start = null, $type = null, $type_end = null, $type_exact = null, $type_partial = null, $type_start = null, $_order_calldate = null, $_order_callee = null, $_order_caller = null, $_order_callid = null, $_order_duration = null, $_order_id = null, $_order_recorder = null, $_order_type = null, $_items_per_page = null, $_page = null, $_properties = null, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\RecordingCollection[]';
        $request = $this->getRecordingCollectionRequest($calldate, $calldate_after, $calldate_before, $calldate_start, $calldate_strictly_after, $calldate_strictly_before, $callee, $callee_end, $callee_exact, $callee_exists, $callee_partial, $callee_start, $caller, $caller_end, $caller_exact, $caller_exists, $caller_partial, $caller_start, $callid, $callid_end, $callid_exact, $callid_exists, $callid_partial, $callid_start, $duration, $duration_between, $duration_gt, $duration_gte, $duration_lt, $duration_lte, $id_exact, $recorder, $recorder_end, $recorder_exact, $recorder_exists, $recorder_partial, $recorder_start, $type, $type_end, $type_exact, $type_partial, $type_start, $_order_calldate, $_order_callee, $_order_caller, $_order_callid, $_order_duration, $_order_id, $_order_recorder, $_order_type, $_items_per_page, $_page, $_properties, $_timezone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRecordingCollection'
     *
     * @param  string $calldate (optional)
     * @param  string $calldate_after (optional)
     * @param  string $calldate_before (optional)
     * @param  string $calldate_start (optional)
     * @param  string $calldate_strictly_after (optional)
     * @param  string $calldate_strictly_before (optional)
     * @param  string $callee (optional)
     * @param  string $callee_end (optional)
     * @param  string $callee_exact (optional)
     * @param  bool $callee_exists (optional)
     * @param  string $callee_partial (optional)
     * @param  string $callee_start (optional)
     * @param  string $caller (optional)
     * @param  string $caller_end (optional)
     * @param  string $caller_exact (optional)
     * @param  bool $caller_exists (optional)
     * @param  string $caller_partial (optional)
     * @param  string $caller_start (optional)
     * @param  string $callid (optional)
     * @param  string $callid_end (optional)
     * @param  string $callid_exact (optional)
     * @param  bool $callid_exists (optional)
     * @param  string $callid_partial (optional)
     * @param  string $callid_start (optional)
     * @param  float $duration (optional)
     * @param  string $duration_between (optional)
     * @param  string $duration_gt (optional)
     * @param  string $duration_gte (optional)
     * @param  string $duration_lt (optional)
     * @param  string $duration_lte (optional)
     * @param  int $id_exact (optional)
     * @param  string $recorder (optional)
     * @param  string $recorder_end (optional)
     * @param  string $recorder_exact (optional)
     * @param  bool $recorder_exists (optional)
     * @param  string $recorder_partial (optional)
     * @param  string $recorder_start (optional)
     * @param  string $type (optional)
     * @param  string $type_end (optional)
     * @param  string $type_exact (optional)
     * @param  string $type_partial (optional)
     * @param  string $type_start (optional)
     * @param  string $_order_calldate (optional)
     * @param  string $_order_callee (optional)
     * @param  string $_order_caller (optional)
     * @param  string $_order_callid (optional)
     * @param  string $_order_duration (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_recorder (optional)
     * @param  string $_order_type (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getRecordingCollectionRequest($calldate = null, $calldate_after = null, $calldate_before = null, $calldate_start = null, $calldate_strictly_after = null, $calldate_strictly_before = null, $callee = null, $callee_end = null, $callee_exact = null, $callee_exists = null, $callee_partial = null, $callee_start = null, $caller = null, $caller_end = null, $caller_exact = null, $caller_exists = null, $caller_partial = null, $caller_start = null, $callid = null, $callid_end = null, $callid_exact = null, $callid_exists = null, $callid_partial = null, $callid_start = null, $duration = null, $duration_between = null, $duration_gt = null, $duration_gte = null, $duration_lt = null, $duration_lte = null, $id_exact = null, $recorder = null, $recorder_end = null, $recorder_exact = null, $recorder_exists = null, $recorder_partial = null, $recorder_start = null, $type = null, $type_end = null, $type_exact = null, $type_partial = null, $type_start = null, $_order_calldate = null, $_order_callee = null, $_order_caller = null, $_order_callid = null, $_order_duration = null, $_order_id = null, $_order_recorder = null, $_order_type = null, $_items_per_page = null, $_page = null, $_properties = null, $_timezone = null)
    {

        $resourcePath = '/recordings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($calldate !== null) {
            $queryParams['calldate'] = ObjectSerializer::toQueryValue($calldate);
        }
        // query params
        if ($calldate_after !== null) {
            $queryParams['calldate[after]'] = ObjectSerializer::toQueryValue($calldate_after);
        }
        // query params
        if ($calldate_before !== null) {
            $queryParams['calldate[before]'] = ObjectSerializer::toQueryValue($calldate_before);
        }
        // query params
        if ($calldate_start !== null) {
            $queryParams['calldate[start]'] = ObjectSerializer::toQueryValue($calldate_start);
        }
        // query params
        if ($calldate_strictly_after !== null) {
            $queryParams['calldate[strictly_after]'] = ObjectSerializer::toQueryValue($calldate_strictly_after);
        }
        // query params
        if ($calldate_strictly_before !== null) {
            $queryParams['calldate[strictly_before]'] = ObjectSerializer::toQueryValue($calldate_strictly_before);
        }
        // query params
        if ($callee !== null) {
            $queryParams['callee'] = ObjectSerializer::toQueryValue($callee);
        }
        // query params
        if ($callee_end !== null) {
            $queryParams['callee[end]'] = ObjectSerializer::toQueryValue($callee_end);
        }
        // query params
        if ($callee_exact !== null) {
            $queryParams['callee[exact]'] = ObjectSerializer::toQueryValue($callee_exact);
        }
        // query params
        if ($callee_exists !== null) {
            $queryParams['callee[exists]'] = ObjectSerializer::toQueryValue($callee_exists);
        }
        // query params
        if ($callee_partial !== null) {
            $queryParams['callee[partial]'] = ObjectSerializer::toQueryValue($callee_partial);
        }
        // query params
        if ($callee_start !== null) {
            $queryParams['callee[start]'] = ObjectSerializer::toQueryValue($callee_start);
        }
        // query params
        if ($caller !== null) {
            $queryParams['caller'] = ObjectSerializer::toQueryValue($caller);
        }
        // query params
        if ($caller_end !== null) {
            $queryParams['caller[end]'] = ObjectSerializer::toQueryValue($caller_end);
        }
        // query params
        if ($caller_exact !== null) {
            $queryParams['caller[exact]'] = ObjectSerializer::toQueryValue($caller_exact);
        }
        // query params
        if ($caller_exists !== null) {
            $queryParams['caller[exists]'] = ObjectSerializer::toQueryValue($caller_exists);
        }
        // query params
        if ($caller_partial !== null) {
            $queryParams['caller[partial]'] = ObjectSerializer::toQueryValue($caller_partial);
        }
        // query params
        if ($caller_start !== null) {
            $queryParams['caller[start]'] = ObjectSerializer::toQueryValue($caller_start);
        }
        // query params
        if ($callid !== null) {
            $queryParams['callid'] = ObjectSerializer::toQueryValue($callid);
        }
        // query params
        if ($callid_end !== null) {
            $queryParams['callid[end]'] = ObjectSerializer::toQueryValue($callid_end);
        }
        // query params
        if ($callid_exact !== null) {
            $queryParams['callid[exact]'] = ObjectSerializer::toQueryValue($callid_exact);
        }
        // query params
        if ($callid_exists !== null) {
            $queryParams['callid[exists]'] = ObjectSerializer::toQueryValue($callid_exists);
        }
        // query params
        if ($callid_partial !== null) {
            $queryParams['callid[partial]'] = ObjectSerializer::toQueryValue($callid_partial);
        }
        // query params
        if ($callid_start !== null) {
            $queryParams['callid[start]'] = ObjectSerializer::toQueryValue($callid_start);
        }
        // query params
        if ($duration !== null) {
            $queryParams['duration'] = ObjectSerializer::toQueryValue($duration);
        }
        // query params
        if ($duration_between !== null) {
            $queryParams['duration[between]'] = ObjectSerializer::toQueryValue($duration_between);
        }
        // query params
        if ($duration_gt !== null) {
            $queryParams['duration[gt]'] = ObjectSerializer::toQueryValue($duration_gt);
        }
        // query params
        if ($duration_gte !== null) {
            $queryParams['duration[gte]'] = ObjectSerializer::toQueryValue($duration_gte);
        }
        // query params
        if ($duration_lt !== null) {
            $queryParams['duration[lt]'] = ObjectSerializer::toQueryValue($duration_lt);
        }
        // query params
        if ($duration_lte !== null) {
            $queryParams['duration[lte]'] = ObjectSerializer::toQueryValue($duration_lte);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($recorder !== null) {
            $queryParams['recorder'] = ObjectSerializer::toQueryValue($recorder);
        }
        // query params
        if ($recorder_end !== null) {
            $queryParams['recorder[end]'] = ObjectSerializer::toQueryValue($recorder_end);
        }
        // query params
        if ($recorder_exact !== null) {
            $queryParams['recorder[exact]'] = ObjectSerializer::toQueryValue($recorder_exact);
        }
        // query params
        if ($recorder_exists !== null) {
            $queryParams['recorder[exists]'] = ObjectSerializer::toQueryValue($recorder_exists);
        }
        // query params
        if ($recorder_partial !== null) {
            $queryParams['recorder[partial]'] = ObjectSerializer::toQueryValue($recorder_partial);
        }
        // query params
        if ($recorder_start !== null) {
            $queryParams['recorder[start]'] = ObjectSerializer::toQueryValue($recorder_start);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($type_end !== null) {
            $queryParams['type[end]'] = ObjectSerializer::toQueryValue($type_end);
        }
        // query params
        if ($type_exact !== null) {
            $queryParams['type[exact]'] = ObjectSerializer::toQueryValue($type_exact);
        }
        // query params
        if ($type_partial !== null) {
            $queryParams['type[partial]'] = ObjectSerializer::toQueryValue($type_partial);
        }
        // query params
        if ($type_start !== null) {
            $queryParams['type[start]'] = ObjectSerializer::toQueryValue($type_start);
        }
        // query params
        if ($_order_calldate !== null) {
            $queryParams['_order[calldate]'] = ObjectSerializer::toQueryValue($_order_calldate);
        }
        // query params
        if ($_order_callee !== null) {
            $queryParams['_order[callee]'] = ObjectSerializer::toQueryValue($_order_callee);
        }
        // query params
        if ($_order_caller !== null) {
            $queryParams['_order[caller]'] = ObjectSerializer::toQueryValue($_order_caller);
        }
        // query params
        if ($_order_callid !== null) {
            $queryParams['_order[callid]'] = ObjectSerializer::toQueryValue($_order_callid);
        }
        // query params
        if ($_order_duration !== null) {
            $queryParams['_order[duration]'] = ObjectSerializer::toQueryValue($_order_duration);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_recorder !== null) {
            $queryParams['_order[recorder]'] = ObjectSerializer::toQueryValue($_order_recorder);
        }
        // query params
        if ($_order_type !== null) {
            $queryParams['_order[type]'] = ObjectSerializer::toQueryValue($_order_type);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }
        // query params
        if ($_timezone !== null) {
            $queryParams['_timezone'] = ObjectSerializer::toQueryValue($_timezone);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRecordingItem
     *
     * Retrieves a Recording resource.
     *
     * @param  string $id id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\RecordingDetailed
     */
    public function getRecordingItem($id, $_timezone = null)
    {
        list($response) = $this->getRecordingItemWithHttpInfo($id, $_timezone);
        return $response;
    }

    /**
     * Operation getRecordingItemWithHttpInfo
     *
     * Retrieves a Recording resource.
     *
     * @param  string $id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\RecordingDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRecordingItemWithHttpInfo($id, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\RecordingDetailed';
        $request = $this->getRecordingItemRequest($id, $_timezone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\RecordingDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRecordingItemAsync
     *
     * Retrieves a Recording resource.
     *
     * @param  string $id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRecordingItemAsync($id, $_timezone = null)
    {
        return $this->getRecordingItemAsyncWithHttpInfo($id, $_timezone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRecordingItemAsyncWithHttpInfo
     *
     * Retrieves a Recording resource.
     *
     * @param  string $id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRecordingItemAsyncWithHttpInfo($id, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\RecordingDetailed';
        $request = $this->getRecordingItemRequest($id, $_timezone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRecordingItem'
     *
     * @param  string $id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getRecordingItemRequest($id, $_timezone = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getRecordingItem'
            );
        }

        $resourcePath = '/recordings/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_timezone !== null) {
            $queryParams['_timezone'] = ObjectSerializer::toQueryValue($_timezone);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getResidentialDeviceCollection
     *
     * Retrieves the collection of ResidentialDevice resources.
     *
     * @param  int $id_exact id_exact (optional)
     * @param  string $language language (optional)
     * @param  string $language2 language2 (optional)
     * @param  bool $language_exists language_exists (optional)
     * @param  string $name name (optional)
     * @param  string $name_end name_end (optional)
     * @param  string $name_exact name_exact (optional)
     * @param  string $name_partial name_partial (optional)
     * @param  string $name_start name_start (optional)
     * @param  string $outgoing_ddi outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists outgoing_ddi_exists (optional)
     * @param  string $transformation_rule_set transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists transformation_rule_set_exists (optional)
     * @param  string $transport transport (optional)
     * @param  string $transport_end transport_end (optional)
     * @param  string $transport_exact transport_exact (optional)
     * @param  bool $transport_exists transport_exists (optional)
     * @param  string $transport_partial transport_partial (optional)
     * @param  string $transport_start transport_start (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_name _order_name (optional)
     * @param  string $_order_transport _order_transport (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ResidentialDeviceCollection[]
     */
    public function getResidentialDeviceCollection($id_exact = null, $language = null, $language2 = null, $language_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $transport = null, $transport_end = null, $transport_exact = null, $transport_exists = null, $transport_partial = null, $transport_start = null, $_order_id = null, $_order_name = null, $_order_transport = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getResidentialDeviceCollectionWithHttpInfo($id_exact, $language, $language2, $language_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $outgoing_ddi, $outgoing_ddi2, $outgoing_ddi_exists, $transformation_rule_set, $transformation_rule_set2, $transformation_rule_set_exists, $transport, $transport_end, $transport_exact, $transport_exists, $transport_partial, $transport_start, $_order_id, $_order_name, $_order_transport, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getResidentialDeviceCollectionWithHttpInfo
     *
     * Retrieves the collection of ResidentialDevice resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $language (optional)
     * @param  string $language2 (optional)
     * @param  bool $language_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  string $transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists (optional)
     * @param  string $transport (optional)
     * @param  string $transport_end (optional)
     * @param  string $transport_exact (optional)
     * @param  bool $transport_exists (optional)
     * @param  string $transport_partial (optional)
     * @param  string $transport_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_transport (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ResidentialDeviceCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getResidentialDeviceCollectionWithHttpInfo($id_exact = null, $language = null, $language2 = null, $language_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $transport = null, $transport_end = null, $transport_exact = null, $transport_exists = null, $transport_partial = null, $transport_start = null, $_order_id = null, $_order_name = null, $_order_transport = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ResidentialDeviceCollection[]';
        $request = $this->getResidentialDeviceCollectionRequest($id_exact, $language, $language2, $language_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $outgoing_ddi, $outgoing_ddi2, $outgoing_ddi_exists, $transformation_rule_set, $transformation_rule_set2, $transformation_rule_set_exists, $transport, $transport_end, $transport_exact, $transport_exists, $transport_partial, $transport_start, $_order_id, $_order_name, $_order_transport, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ResidentialDeviceCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getResidentialDeviceCollectionAsync
     *
     * Retrieves the collection of ResidentialDevice resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $language (optional)
     * @param  string $language2 (optional)
     * @param  bool $language_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  string $transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists (optional)
     * @param  string $transport (optional)
     * @param  string $transport_end (optional)
     * @param  string $transport_exact (optional)
     * @param  bool $transport_exists (optional)
     * @param  string $transport_partial (optional)
     * @param  string $transport_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_transport (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getResidentialDeviceCollectionAsync($id_exact = null, $language = null, $language2 = null, $language_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $transport = null, $transport_end = null, $transport_exact = null, $transport_exists = null, $transport_partial = null, $transport_start = null, $_order_id = null, $_order_name = null, $_order_transport = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getResidentialDeviceCollectionAsyncWithHttpInfo($id_exact, $language, $language2, $language_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $outgoing_ddi, $outgoing_ddi2, $outgoing_ddi_exists, $transformation_rule_set, $transformation_rule_set2, $transformation_rule_set_exists, $transport, $transport_end, $transport_exact, $transport_exists, $transport_partial, $transport_start, $_order_id, $_order_name, $_order_transport, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getResidentialDeviceCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of ResidentialDevice resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $language (optional)
     * @param  string $language2 (optional)
     * @param  bool $language_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  string $transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists (optional)
     * @param  string $transport (optional)
     * @param  string $transport_end (optional)
     * @param  string $transport_exact (optional)
     * @param  bool $transport_exists (optional)
     * @param  string $transport_partial (optional)
     * @param  string $transport_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_transport (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getResidentialDeviceCollectionAsyncWithHttpInfo($id_exact = null, $language = null, $language2 = null, $language_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $transport = null, $transport_end = null, $transport_exact = null, $transport_exists = null, $transport_partial = null, $transport_start = null, $_order_id = null, $_order_name = null, $_order_transport = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ResidentialDeviceCollection[]';
        $request = $this->getResidentialDeviceCollectionRequest($id_exact, $language, $language2, $language_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $outgoing_ddi, $outgoing_ddi2, $outgoing_ddi_exists, $transformation_rule_set, $transformation_rule_set2, $transformation_rule_set_exists, $transport, $transport_end, $transport_exact, $transport_exists, $transport_partial, $transport_start, $_order_id, $_order_name, $_order_transport, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getResidentialDeviceCollection'
     *
     * @param  int $id_exact (optional)
     * @param  string $language (optional)
     * @param  string $language2 (optional)
     * @param  bool $language_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  string $transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists (optional)
     * @param  string $transport (optional)
     * @param  string $transport_end (optional)
     * @param  string $transport_exact (optional)
     * @param  bool $transport_exists (optional)
     * @param  string $transport_partial (optional)
     * @param  string $transport_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_transport (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getResidentialDeviceCollectionRequest($id_exact = null, $language = null, $language2 = null, $language_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $transport = null, $transport_end = null, $transport_exact = null, $transport_exists = null, $transport_partial = null, $transport_start = null, $_order_id = null, $_order_name = null, $_order_transport = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/residential_devices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($language2 !== null) {
            $queryParams['language[]'] = ObjectSerializer::toQueryValue($language2);
        }
        // query params
        if ($language_exists !== null) {
            $queryParams['language[exists]'] = ObjectSerializer::toQueryValue($language_exists);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_end !== null) {
            $queryParams['name[end]'] = ObjectSerializer::toQueryValue($name_end);
        }
        // query params
        if ($name_exact !== null) {
            $queryParams['name[exact]'] = ObjectSerializer::toQueryValue($name_exact);
        }
        // query params
        if ($name_partial !== null) {
            $queryParams['name[partial]'] = ObjectSerializer::toQueryValue($name_partial);
        }
        // query params
        if ($name_start !== null) {
            $queryParams['name[start]'] = ObjectSerializer::toQueryValue($name_start);
        }
        // query params
        if ($outgoing_ddi !== null) {
            $queryParams['outgoingDdi'] = ObjectSerializer::toQueryValue($outgoing_ddi);
        }
        // query params
        if ($outgoing_ddi2 !== null) {
            $queryParams['outgoingDdi[]'] = ObjectSerializer::toQueryValue($outgoing_ddi2);
        }
        // query params
        if ($outgoing_ddi_exists !== null) {
            $queryParams['outgoingDdi[exists]'] = ObjectSerializer::toQueryValue($outgoing_ddi_exists);
        }
        // query params
        if ($transformation_rule_set !== null) {
            $queryParams['transformationRuleSet'] = ObjectSerializer::toQueryValue($transformation_rule_set);
        }
        // query params
        if ($transformation_rule_set2 !== null) {
            $queryParams['transformationRuleSet[]'] = ObjectSerializer::toQueryValue($transformation_rule_set2);
        }
        // query params
        if ($transformation_rule_set_exists !== null) {
            $queryParams['transformationRuleSet[exists]'] = ObjectSerializer::toQueryValue($transformation_rule_set_exists);
        }
        // query params
        if ($transport !== null) {
            $queryParams['transport'] = ObjectSerializer::toQueryValue($transport);
        }
        // query params
        if ($transport_end !== null) {
            $queryParams['transport[end]'] = ObjectSerializer::toQueryValue($transport_end);
        }
        // query params
        if ($transport_exact !== null) {
            $queryParams['transport[exact]'] = ObjectSerializer::toQueryValue($transport_exact);
        }
        // query params
        if ($transport_exists !== null) {
            $queryParams['transport[exists]'] = ObjectSerializer::toQueryValue($transport_exists);
        }
        // query params
        if ($transport_partial !== null) {
            $queryParams['transport[partial]'] = ObjectSerializer::toQueryValue($transport_partial);
        }
        // query params
        if ($transport_start !== null) {
            $queryParams['transport[start]'] = ObjectSerializer::toQueryValue($transport_start);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_name !== null) {
            $queryParams['_order[name]'] = ObjectSerializer::toQueryValue($_order_name);
        }
        // query params
        if ($_order_transport !== null) {
            $queryParams['_order[transport]'] = ObjectSerializer::toQueryValue($_order_transport);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getResidentialDeviceItem
     *
     * Retrieves a ResidentialDevice resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ResidentialDeviceDetailed
     */
    public function getResidentialDeviceItem($id)
    {
        list($response) = $this->getResidentialDeviceItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getResidentialDeviceItemWithHttpInfo
     *
     * Retrieves a ResidentialDevice resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ResidentialDeviceDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getResidentialDeviceItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ResidentialDeviceDetailed';
        $request = $this->getResidentialDeviceItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ResidentialDeviceDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getResidentialDeviceItemAsync
     *
     * Retrieves a ResidentialDevice resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getResidentialDeviceItemAsync($id)
    {
        return $this->getResidentialDeviceItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getResidentialDeviceItemAsyncWithHttpInfo
     *
     * Retrieves a ResidentialDevice resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getResidentialDeviceItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ResidentialDeviceDetailed';
        $request = $this->getResidentialDeviceItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getResidentialDeviceItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getResidentialDeviceItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getResidentialDeviceItem'
            );
        }

        $resourcePath = '/residential_devices/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRetailAccountCollection
     *
     * Retrieves the collection of RetailAccount resources.
     *
     * @param  int $id_exact id_exact (optional)
     * @param  string $name name (optional)
     * @param  string $name_end name_end (optional)
     * @param  string $name_exact name_exact (optional)
     * @param  string $name_partial name_partial (optional)
     * @param  string $name_start name_start (optional)
     * @param  string $outgoing_ddi outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists outgoing_ddi_exists (optional)
     * @param  string $transformation_rule_set transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists transformation_rule_set_exists (optional)
     * @param  string $transport transport (optional)
     * @param  string $transport_end transport_end (optional)
     * @param  string $transport_exact transport_exact (optional)
     * @param  bool $transport_exists transport_exists (optional)
     * @param  string $transport_partial transport_partial (optional)
     * @param  string $transport_start transport_start (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_name _order_name (optional)
     * @param  string $_order_transport _order_transport (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\RetailAccountCollection[]
     */
    public function getRetailAccountCollection($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $transport = null, $transport_end = null, $transport_exact = null, $transport_exists = null, $transport_partial = null, $transport_start = null, $_order_id = null, $_order_name = null, $_order_transport = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getRetailAccountCollectionWithHttpInfo($id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $outgoing_ddi, $outgoing_ddi2, $outgoing_ddi_exists, $transformation_rule_set, $transformation_rule_set2, $transformation_rule_set_exists, $transport, $transport_end, $transport_exact, $transport_exists, $transport_partial, $transport_start, $_order_id, $_order_name, $_order_transport, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getRetailAccountCollectionWithHttpInfo
     *
     * Retrieves the collection of RetailAccount resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  string $transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists (optional)
     * @param  string $transport (optional)
     * @param  string $transport_end (optional)
     * @param  string $transport_exact (optional)
     * @param  bool $transport_exists (optional)
     * @param  string $transport_partial (optional)
     * @param  string $transport_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_transport (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\RetailAccountCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getRetailAccountCollectionWithHttpInfo($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $transport = null, $transport_end = null, $transport_exact = null, $transport_exists = null, $transport_partial = null, $transport_start = null, $_order_id = null, $_order_name = null, $_order_transport = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\RetailAccountCollection[]';
        $request = $this->getRetailAccountCollectionRequest($id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $outgoing_ddi, $outgoing_ddi2, $outgoing_ddi_exists, $transformation_rule_set, $transformation_rule_set2, $transformation_rule_set_exists, $transport, $transport_end, $transport_exact, $transport_exists, $transport_partial, $transport_start, $_order_id, $_order_name, $_order_transport, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\RetailAccountCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRetailAccountCollectionAsync
     *
     * Retrieves the collection of RetailAccount resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  string $transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists (optional)
     * @param  string $transport (optional)
     * @param  string $transport_end (optional)
     * @param  string $transport_exact (optional)
     * @param  bool $transport_exists (optional)
     * @param  string $transport_partial (optional)
     * @param  string $transport_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_transport (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRetailAccountCollectionAsync($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $transport = null, $transport_end = null, $transport_exact = null, $transport_exists = null, $transport_partial = null, $transport_start = null, $_order_id = null, $_order_name = null, $_order_transport = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getRetailAccountCollectionAsyncWithHttpInfo($id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $outgoing_ddi, $outgoing_ddi2, $outgoing_ddi_exists, $transformation_rule_set, $transformation_rule_set2, $transformation_rule_set_exists, $transport, $transport_end, $transport_exact, $transport_exists, $transport_partial, $transport_start, $_order_id, $_order_name, $_order_transport, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRetailAccountCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of RetailAccount resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  string $transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists (optional)
     * @param  string $transport (optional)
     * @param  string $transport_end (optional)
     * @param  string $transport_exact (optional)
     * @param  bool $transport_exists (optional)
     * @param  string $transport_partial (optional)
     * @param  string $transport_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_transport (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRetailAccountCollectionAsyncWithHttpInfo($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $transport = null, $transport_end = null, $transport_exact = null, $transport_exists = null, $transport_partial = null, $transport_start = null, $_order_id = null, $_order_name = null, $_order_transport = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\RetailAccountCollection[]';
        $request = $this->getRetailAccountCollectionRequest($id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $outgoing_ddi, $outgoing_ddi2, $outgoing_ddi_exists, $transformation_rule_set, $transformation_rule_set2, $transformation_rule_set_exists, $transport, $transport_end, $transport_exact, $transport_exists, $transport_partial, $transport_start, $_order_id, $_order_name, $_order_transport, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRetailAccountCollection'
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  string $transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists (optional)
     * @param  string $transport (optional)
     * @param  string $transport_end (optional)
     * @param  string $transport_exact (optional)
     * @param  bool $transport_exists (optional)
     * @param  string $transport_partial (optional)
     * @param  string $transport_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_transport (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getRetailAccountCollectionRequest($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $transport = null, $transport_end = null, $transport_exact = null, $transport_exists = null, $transport_partial = null, $transport_start = null, $_order_id = null, $_order_name = null, $_order_transport = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/retail_accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_end !== null) {
            $queryParams['name[end]'] = ObjectSerializer::toQueryValue($name_end);
        }
        // query params
        if ($name_exact !== null) {
            $queryParams['name[exact]'] = ObjectSerializer::toQueryValue($name_exact);
        }
        // query params
        if ($name_partial !== null) {
            $queryParams['name[partial]'] = ObjectSerializer::toQueryValue($name_partial);
        }
        // query params
        if ($name_start !== null) {
            $queryParams['name[start]'] = ObjectSerializer::toQueryValue($name_start);
        }
        // query params
        if ($outgoing_ddi !== null) {
            $queryParams['outgoingDdi'] = ObjectSerializer::toQueryValue($outgoing_ddi);
        }
        // query params
        if ($outgoing_ddi2 !== null) {
            $queryParams['outgoingDdi[]'] = ObjectSerializer::toQueryValue($outgoing_ddi2);
        }
        // query params
        if ($outgoing_ddi_exists !== null) {
            $queryParams['outgoingDdi[exists]'] = ObjectSerializer::toQueryValue($outgoing_ddi_exists);
        }
        // query params
        if ($transformation_rule_set !== null) {
            $queryParams['transformationRuleSet'] = ObjectSerializer::toQueryValue($transformation_rule_set);
        }
        // query params
        if ($transformation_rule_set2 !== null) {
            $queryParams['transformationRuleSet[]'] = ObjectSerializer::toQueryValue($transformation_rule_set2);
        }
        // query params
        if ($transformation_rule_set_exists !== null) {
            $queryParams['transformationRuleSet[exists]'] = ObjectSerializer::toQueryValue($transformation_rule_set_exists);
        }
        // query params
        if ($transport !== null) {
            $queryParams['transport'] = ObjectSerializer::toQueryValue($transport);
        }
        // query params
        if ($transport_end !== null) {
            $queryParams['transport[end]'] = ObjectSerializer::toQueryValue($transport_end);
        }
        // query params
        if ($transport_exact !== null) {
            $queryParams['transport[exact]'] = ObjectSerializer::toQueryValue($transport_exact);
        }
        // query params
        if ($transport_exists !== null) {
            $queryParams['transport[exists]'] = ObjectSerializer::toQueryValue($transport_exists);
        }
        // query params
        if ($transport_partial !== null) {
            $queryParams['transport[partial]'] = ObjectSerializer::toQueryValue($transport_partial);
        }
        // query params
        if ($transport_start !== null) {
            $queryParams['transport[start]'] = ObjectSerializer::toQueryValue($transport_start);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_name !== null) {
            $queryParams['_order[name]'] = ObjectSerializer::toQueryValue($_order_name);
        }
        // query params
        if ($_order_transport !== null) {
            $queryParams['_order[transport]'] = ObjectSerializer::toQueryValue($_order_transport);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRetailAccountItem
     *
     * Retrieves a RetailAccount resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\RetailAccountDetailed
     */
    public function getRetailAccountItem($id)
    {
        list($response) = $this->getRetailAccountItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getRetailAccountItemWithHttpInfo
     *
     * Retrieves a RetailAccount resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\RetailAccountDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRetailAccountItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\RetailAccountDetailed';
        $request = $this->getRetailAccountItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\RetailAccountDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRetailAccountItemAsync
     *
     * Retrieves a RetailAccount resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRetailAccountItemAsync($id)
    {
        return $this->getRetailAccountItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRetailAccountItemAsyncWithHttpInfo
     *
     * Retrieves a RetailAccount resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRetailAccountItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\RetailAccountDetailed';
        $request = $this->getRetailAccountItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRetailAccountItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getRetailAccountItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getRetailAccountItem'
            );
        }

        $resourcePath = '/retail_accounts/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRouteLockCollection
     *
     * Retrieves the collection of RouteLock resources.
     *
     * @param  string $close_extension close_extension (optional)
     * @param  string $description description (optional)
     * @param  string $description_end description_end (optional)
     * @param  string $description_exact description_exact (optional)
     * @param  string $description_partial description_partial (optional)
     * @param  string $description_start description_start (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $name name (optional)
     * @param  string $name_end name_end (optional)
     * @param  string $name_exact name_exact (optional)
     * @param  string $name_partial name_partial (optional)
     * @param  string $name_start name_start (optional)
     * @param  bool $open open (optional)
     * @param  string $open_extension open_extension (optional)
     * @param  string $toggle_extension toggle_extension (optional)
     * @param  string $_order_description _order_description (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_name _order_name (optional)
     * @param  string $_order_open _order_open (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\RouteLockCollection[]
     */
    public function getRouteLockCollection($close_extension = null, $description = null, $description_end = null, $description_exact = null, $description_partial = null, $description_start = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $open = null, $open_extension = null, $toggle_extension = null, $_order_description = null, $_order_id = null, $_order_name = null, $_order_open = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getRouteLockCollectionWithHttpInfo($close_extension, $description, $description_end, $description_exact, $description_partial, $description_start, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $open, $open_extension, $toggle_extension, $_order_description, $_order_id, $_order_name, $_order_open, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getRouteLockCollectionWithHttpInfo
     *
     * Retrieves the collection of RouteLock resources.
     *
     * @param  string $close_extension (optional)
     * @param  string $description (optional)
     * @param  string $description_end (optional)
     * @param  string $description_exact (optional)
     * @param  string $description_partial (optional)
     * @param  string $description_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  bool $open (optional)
     * @param  string $open_extension (optional)
     * @param  string $toggle_extension (optional)
     * @param  string $_order_description (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_open (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\RouteLockCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getRouteLockCollectionWithHttpInfo($close_extension = null, $description = null, $description_end = null, $description_exact = null, $description_partial = null, $description_start = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $open = null, $open_extension = null, $toggle_extension = null, $_order_description = null, $_order_id = null, $_order_name = null, $_order_open = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\RouteLockCollection[]';
        $request = $this->getRouteLockCollectionRequest($close_extension, $description, $description_end, $description_exact, $description_partial, $description_start, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $open, $open_extension, $toggle_extension, $_order_description, $_order_id, $_order_name, $_order_open, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\RouteLockCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRouteLockCollectionAsync
     *
     * Retrieves the collection of RouteLock resources.
     *
     * @param  string $close_extension (optional)
     * @param  string $description (optional)
     * @param  string $description_end (optional)
     * @param  string $description_exact (optional)
     * @param  string $description_partial (optional)
     * @param  string $description_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  bool $open (optional)
     * @param  string $open_extension (optional)
     * @param  string $toggle_extension (optional)
     * @param  string $_order_description (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_open (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRouteLockCollectionAsync($close_extension = null, $description = null, $description_end = null, $description_exact = null, $description_partial = null, $description_start = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $open = null, $open_extension = null, $toggle_extension = null, $_order_description = null, $_order_id = null, $_order_name = null, $_order_open = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getRouteLockCollectionAsyncWithHttpInfo($close_extension, $description, $description_end, $description_exact, $description_partial, $description_start, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $open, $open_extension, $toggle_extension, $_order_description, $_order_id, $_order_name, $_order_open, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRouteLockCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of RouteLock resources.
     *
     * @param  string $close_extension (optional)
     * @param  string $description (optional)
     * @param  string $description_end (optional)
     * @param  string $description_exact (optional)
     * @param  string $description_partial (optional)
     * @param  string $description_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  bool $open (optional)
     * @param  string $open_extension (optional)
     * @param  string $toggle_extension (optional)
     * @param  string $_order_description (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_open (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRouteLockCollectionAsyncWithHttpInfo($close_extension = null, $description = null, $description_end = null, $description_exact = null, $description_partial = null, $description_start = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $open = null, $open_extension = null, $toggle_extension = null, $_order_description = null, $_order_id = null, $_order_name = null, $_order_open = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\RouteLockCollection[]';
        $request = $this->getRouteLockCollectionRequest($close_extension, $description, $description_end, $description_exact, $description_partial, $description_start, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $open, $open_extension, $toggle_extension, $_order_description, $_order_id, $_order_name, $_order_open, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRouteLockCollection'
     *
     * @param  string $close_extension (optional)
     * @param  string $description (optional)
     * @param  string $description_end (optional)
     * @param  string $description_exact (optional)
     * @param  string $description_partial (optional)
     * @param  string $description_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  bool $open (optional)
     * @param  string $open_extension (optional)
     * @param  string $toggle_extension (optional)
     * @param  string $_order_description (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_open (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getRouteLockCollectionRequest($close_extension = null, $description = null, $description_end = null, $description_exact = null, $description_partial = null, $description_start = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $open = null, $open_extension = null, $toggle_extension = null, $_order_description = null, $_order_id = null, $_order_name = null, $_order_open = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/route_locks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($close_extension !== null) {
            $queryParams['closeExtension'] = ObjectSerializer::toQueryValue($close_extension);
        }
        // query params
        if ($description !== null) {
            $queryParams['description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($description_end !== null) {
            $queryParams['description[end]'] = ObjectSerializer::toQueryValue($description_end);
        }
        // query params
        if ($description_exact !== null) {
            $queryParams['description[exact]'] = ObjectSerializer::toQueryValue($description_exact);
        }
        // query params
        if ($description_partial !== null) {
            $queryParams['description[partial]'] = ObjectSerializer::toQueryValue($description_partial);
        }
        // query params
        if ($description_start !== null) {
            $queryParams['description[start]'] = ObjectSerializer::toQueryValue($description_start);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_end !== null) {
            $queryParams['name[end]'] = ObjectSerializer::toQueryValue($name_end);
        }
        // query params
        if ($name_exact !== null) {
            $queryParams['name[exact]'] = ObjectSerializer::toQueryValue($name_exact);
        }
        // query params
        if ($name_partial !== null) {
            $queryParams['name[partial]'] = ObjectSerializer::toQueryValue($name_partial);
        }
        // query params
        if ($name_start !== null) {
            $queryParams['name[start]'] = ObjectSerializer::toQueryValue($name_start);
        }
        // query params
        if ($open !== null) {
            $queryParams['open'] = ObjectSerializer::toQueryValue($open);
        }
        // query params
        if ($open_extension !== null) {
            $queryParams['openExtension'] = ObjectSerializer::toQueryValue($open_extension);
        }
        // query params
        if ($toggle_extension !== null) {
            $queryParams['toggleExtension'] = ObjectSerializer::toQueryValue($toggle_extension);
        }
        // query params
        if ($_order_description !== null) {
            $queryParams['_order[description]'] = ObjectSerializer::toQueryValue($_order_description);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_name !== null) {
            $queryParams['_order[name]'] = ObjectSerializer::toQueryValue($_order_name);
        }
        // query params
        if ($_order_open !== null) {
            $queryParams['_order[open]'] = ObjectSerializer::toQueryValue($_order_open);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRouteLockItem
     *
     * Retrieves a RouteLock resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\RouteLockDetailed
     */
    public function getRouteLockItem($id)
    {
        list($response) = $this->getRouteLockItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getRouteLockItemWithHttpInfo
     *
     * Retrieves a RouteLock resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\RouteLockDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRouteLockItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\RouteLockDetailed';
        $request = $this->getRouteLockItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\RouteLockDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRouteLockItemAsync
     *
     * Retrieves a RouteLock resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRouteLockItemAsync($id)
    {
        return $this->getRouteLockItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRouteLockItemAsyncWithHttpInfo
     *
     * Retrieves a RouteLock resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRouteLockItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\RouteLockDetailed';
        $request = $this->getRouteLockItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRouteLockItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getRouteLockItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getRouteLockItem'
            );
        }

        $resourcePath = '/route_locks/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRoutingTagCollection
     *
     * Retrieves the collection of RoutingTag resources.
     *
     * @param  int $id_exact id_exact (optional)
     * @param  string $name name (optional)
     * @param  string $name_end name_end (optional)
     * @param  string $name_exact name_exact (optional)
     * @param  string $name_partial name_partial (optional)
     * @param  string $name_start name_start (optional)
     * @param  string $tag tag (optional)
     * @param  string $tag_end tag_end (optional)
     * @param  string $tag_exact tag_exact (optional)
     * @param  string $tag_partial tag_partial (optional)
     * @param  string $tag_start tag_start (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_name _order_name (optional)
     * @param  string $_order_tag _order_tag (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\RoutingTagCollection[]
     */
    public function getRoutingTagCollection($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $tag = null, $tag_end = null, $tag_exact = null, $tag_partial = null, $tag_start = null, $_order_id = null, $_order_name = null, $_order_tag = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getRoutingTagCollectionWithHttpInfo($id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $tag, $tag_end, $tag_exact, $tag_partial, $tag_start, $_order_id, $_order_name, $_order_tag, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getRoutingTagCollectionWithHttpInfo
     *
     * Retrieves the collection of RoutingTag resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $tag (optional)
     * @param  string $tag_end (optional)
     * @param  string $tag_exact (optional)
     * @param  string $tag_partial (optional)
     * @param  string $tag_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_tag (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\RoutingTagCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getRoutingTagCollectionWithHttpInfo($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $tag = null, $tag_end = null, $tag_exact = null, $tag_partial = null, $tag_start = null, $_order_id = null, $_order_name = null, $_order_tag = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\RoutingTagCollection[]';
        $request = $this->getRoutingTagCollectionRequest($id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $tag, $tag_end, $tag_exact, $tag_partial, $tag_start, $_order_id, $_order_name, $_order_tag, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\RoutingTagCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRoutingTagCollectionAsync
     *
     * Retrieves the collection of RoutingTag resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $tag (optional)
     * @param  string $tag_end (optional)
     * @param  string $tag_exact (optional)
     * @param  string $tag_partial (optional)
     * @param  string $tag_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_tag (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRoutingTagCollectionAsync($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $tag = null, $tag_end = null, $tag_exact = null, $tag_partial = null, $tag_start = null, $_order_id = null, $_order_name = null, $_order_tag = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getRoutingTagCollectionAsyncWithHttpInfo($id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $tag, $tag_end, $tag_exact, $tag_partial, $tag_start, $_order_id, $_order_name, $_order_tag, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRoutingTagCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of RoutingTag resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $tag (optional)
     * @param  string $tag_end (optional)
     * @param  string $tag_exact (optional)
     * @param  string $tag_partial (optional)
     * @param  string $tag_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_tag (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRoutingTagCollectionAsyncWithHttpInfo($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $tag = null, $tag_end = null, $tag_exact = null, $tag_partial = null, $tag_start = null, $_order_id = null, $_order_name = null, $_order_tag = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\RoutingTagCollection[]';
        $request = $this->getRoutingTagCollectionRequest($id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $tag, $tag_end, $tag_exact, $tag_partial, $tag_start, $_order_id, $_order_name, $_order_tag, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRoutingTagCollection'
     *
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $tag (optional)
     * @param  string $tag_end (optional)
     * @param  string $tag_exact (optional)
     * @param  string $tag_partial (optional)
     * @param  string $tag_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_tag (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getRoutingTagCollectionRequest($id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $tag = null, $tag_end = null, $tag_exact = null, $tag_partial = null, $tag_start = null, $_order_id = null, $_order_name = null, $_order_tag = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/routing_tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_end !== null) {
            $queryParams['name[end]'] = ObjectSerializer::toQueryValue($name_end);
        }
        // query params
        if ($name_exact !== null) {
            $queryParams['name[exact]'] = ObjectSerializer::toQueryValue($name_exact);
        }
        // query params
        if ($name_partial !== null) {
            $queryParams['name[partial]'] = ObjectSerializer::toQueryValue($name_partial);
        }
        // query params
        if ($name_start !== null) {
            $queryParams['name[start]'] = ObjectSerializer::toQueryValue($name_start);
        }
        // query params
        if ($tag !== null) {
            $queryParams['tag'] = ObjectSerializer::toQueryValue($tag);
        }
        // query params
        if ($tag_end !== null) {
            $queryParams['tag[end]'] = ObjectSerializer::toQueryValue($tag_end);
        }
        // query params
        if ($tag_exact !== null) {
            $queryParams['tag[exact]'] = ObjectSerializer::toQueryValue($tag_exact);
        }
        // query params
        if ($tag_partial !== null) {
            $queryParams['tag[partial]'] = ObjectSerializer::toQueryValue($tag_partial);
        }
        // query params
        if ($tag_start !== null) {
            $queryParams['tag[start]'] = ObjectSerializer::toQueryValue($tag_start);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_name !== null) {
            $queryParams['_order[name]'] = ObjectSerializer::toQueryValue($_order_name);
        }
        // query params
        if ($_order_tag !== null) {
            $queryParams['_order[tag]'] = ObjectSerializer::toQueryValue($_order_tag);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRoutingTagItem
     *
     * Retrieves a RoutingTag resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\RoutingTagDetailed
     */
    public function getRoutingTagItem($id)
    {
        list($response) = $this->getRoutingTagItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getRoutingTagItemWithHttpInfo
     *
     * Retrieves a RoutingTag resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\RoutingTagDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRoutingTagItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\RoutingTagDetailed';
        $request = $this->getRoutingTagItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\RoutingTagDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRoutingTagItemAsync
     *
     * Retrieves a RoutingTag resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRoutingTagItemAsync($id)
    {
        return $this->getRoutingTagItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRoutingTagItemAsyncWithHttpInfo
     *
     * Retrieves a RoutingTag resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRoutingTagItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\RoutingTagDetailed';
        $request = $this->getRoutingTagItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRoutingTagItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getRoutingTagItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getRoutingTagItem'
            );
        }

        $resourcePath = '/routing_tags/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getScheduleCollection
     *
     * Retrieves the collection of Schedule resources.
     *
     * @param  bool $friday friday (optional)
     * @param  bool $friday_exists friday_exists (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  bool $monday monday (optional)
     * @param  bool $monday_exists monday_exists (optional)
     * @param  string $name name (optional)
     * @param  string $name_end name_end (optional)
     * @param  string $name_exact name_exact (optional)
     * @param  string $name_partial name_partial (optional)
     * @param  string $name_start name_start (optional)
     * @param  bool $saturday saturday (optional)
     * @param  bool $saturday_exists saturday_exists (optional)
     * @param  bool $sunday sunday (optional)
     * @param  bool $sunday_exists sunday_exists (optional)
     * @param  bool $thursday thursday (optional)
     * @param  bool $thursday_exists thursday_exists (optional)
     * @param  string $time_in time_in (optional)
     * @param  string $time_in_after time_in_after (optional)
     * @param  string $time_in_before time_in_before (optional)
     * @param  string $time_in_start time_in_start (optional)
     * @param  string $time_in_strictly_after time_in_strictly_after (optional)
     * @param  string $time_in_strictly_before time_in_strictly_before (optional)
     * @param  string $timeout timeout (optional)
     * @param  string $timeout_after timeout_after (optional)
     * @param  string $timeout_before timeout_before (optional)
     * @param  string $timeout_start timeout_start (optional)
     * @param  string $timeout_strictly_after timeout_strictly_after (optional)
     * @param  string $timeout_strictly_before timeout_strictly_before (optional)
     * @param  bool $tuesday tuesday (optional)
     * @param  bool $tuesday_exists tuesday_exists (optional)
     * @param  bool $wednesday wednesday (optional)
     * @param  bool $wednesday_exists wednesday_exists (optional)
     * @param  string $_order_friday _order_friday (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_monday _order_monday (optional)
     * @param  string $_order_name _order_name (optional)
     * @param  string $_order_saturday _order_saturday (optional)
     * @param  string $_order_sunday _order_sunday (optional)
     * @param  string $_order_thursday _order_thursday (optional)
     * @param  string $_order_time_in _order_time_in (optional)
     * @param  string $_order_timeout _order_timeout (optional)
     * @param  string $_order_tuesday _order_tuesday (optional)
     * @param  string $_order_wednesday _order_wednesday (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ScheduleCollection[]
     */
    public function getScheduleCollection($friday = null, $friday_exists = null, $id_exact = null, $monday = null, $monday_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $saturday = null, $saturday_exists = null, $sunday = null, $sunday_exists = null, $thursday = null, $thursday_exists = null, $time_in = null, $time_in_after = null, $time_in_before = null, $time_in_start = null, $time_in_strictly_after = null, $time_in_strictly_before = null, $timeout = null, $timeout_after = null, $timeout_before = null, $timeout_start = null, $timeout_strictly_after = null, $timeout_strictly_before = null, $tuesday = null, $tuesday_exists = null, $wednesday = null, $wednesday_exists = null, $_order_friday = null, $_order_id = null, $_order_monday = null, $_order_name = null, $_order_saturday = null, $_order_sunday = null, $_order_thursday = null, $_order_time_in = null, $_order_timeout = null, $_order_tuesday = null, $_order_wednesday = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getScheduleCollectionWithHttpInfo($friday, $friday_exists, $id_exact, $monday, $monday_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $saturday, $saturday_exists, $sunday, $sunday_exists, $thursday, $thursday_exists, $time_in, $time_in_after, $time_in_before, $time_in_start, $time_in_strictly_after, $time_in_strictly_before, $timeout, $timeout_after, $timeout_before, $timeout_start, $timeout_strictly_after, $timeout_strictly_before, $tuesday, $tuesday_exists, $wednesday, $wednesday_exists, $_order_friday, $_order_id, $_order_monday, $_order_name, $_order_saturday, $_order_sunday, $_order_thursday, $_order_time_in, $_order_timeout, $_order_tuesday, $_order_wednesday, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getScheduleCollectionWithHttpInfo
     *
     * Retrieves the collection of Schedule resources.
     *
     * @param  bool $friday (optional)
     * @param  bool $friday_exists (optional)
     * @param  int $id_exact (optional)
     * @param  bool $monday (optional)
     * @param  bool $monday_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  bool $saturday (optional)
     * @param  bool $saturday_exists (optional)
     * @param  bool $sunday (optional)
     * @param  bool $sunday_exists (optional)
     * @param  bool $thursday (optional)
     * @param  bool $thursday_exists (optional)
     * @param  string $time_in (optional)
     * @param  string $time_in_after (optional)
     * @param  string $time_in_before (optional)
     * @param  string $time_in_start (optional)
     * @param  string $time_in_strictly_after (optional)
     * @param  string $time_in_strictly_before (optional)
     * @param  string $timeout (optional)
     * @param  string $timeout_after (optional)
     * @param  string $timeout_before (optional)
     * @param  string $timeout_start (optional)
     * @param  string $timeout_strictly_after (optional)
     * @param  string $timeout_strictly_before (optional)
     * @param  bool $tuesday (optional)
     * @param  bool $tuesday_exists (optional)
     * @param  bool $wednesday (optional)
     * @param  bool $wednesday_exists (optional)
     * @param  string $_order_friday (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_monday (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_saturday (optional)
     * @param  string $_order_sunday (optional)
     * @param  string $_order_thursday (optional)
     * @param  string $_order_time_in (optional)
     * @param  string $_order_timeout (optional)
     * @param  string $_order_tuesday (optional)
     * @param  string $_order_wednesday (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ScheduleCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getScheduleCollectionWithHttpInfo($friday = null, $friday_exists = null, $id_exact = null, $monday = null, $monday_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $saturday = null, $saturday_exists = null, $sunday = null, $sunday_exists = null, $thursday = null, $thursday_exists = null, $time_in = null, $time_in_after = null, $time_in_before = null, $time_in_start = null, $time_in_strictly_after = null, $time_in_strictly_before = null, $timeout = null, $timeout_after = null, $timeout_before = null, $timeout_start = null, $timeout_strictly_after = null, $timeout_strictly_before = null, $tuesday = null, $tuesday_exists = null, $wednesday = null, $wednesday_exists = null, $_order_friday = null, $_order_id = null, $_order_monday = null, $_order_name = null, $_order_saturday = null, $_order_sunday = null, $_order_thursday = null, $_order_time_in = null, $_order_timeout = null, $_order_tuesday = null, $_order_wednesday = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ScheduleCollection[]';
        $request = $this->getScheduleCollectionRequest($friday, $friday_exists, $id_exact, $monday, $monday_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $saturday, $saturday_exists, $sunday, $sunday_exists, $thursday, $thursday_exists, $time_in, $time_in_after, $time_in_before, $time_in_start, $time_in_strictly_after, $time_in_strictly_before, $timeout, $timeout_after, $timeout_before, $timeout_start, $timeout_strictly_after, $timeout_strictly_before, $tuesday, $tuesday_exists, $wednesday, $wednesday_exists, $_order_friday, $_order_id, $_order_monday, $_order_name, $_order_saturday, $_order_sunday, $_order_thursday, $_order_time_in, $_order_timeout, $_order_tuesday, $_order_wednesday, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ScheduleCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getScheduleCollectionAsync
     *
     * Retrieves the collection of Schedule resources.
     *
     * @param  bool $friday (optional)
     * @param  bool $friday_exists (optional)
     * @param  int $id_exact (optional)
     * @param  bool $monday (optional)
     * @param  bool $monday_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  bool $saturday (optional)
     * @param  bool $saturday_exists (optional)
     * @param  bool $sunday (optional)
     * @param  bool $sunday_exists (optional)
     * @param  bool $thursday (optional)
     * @param  bool $thursday_exists (optional)
     * @param  string $time_in (optional)
     * @param  string $time_in_after (optional)
     * @param  string $time_in_before (optional)
     * @param  string $time_in_start (optional)
     * @param  string $time_in_strictly_after (optional)
     * @param  string $time_in_strictly_before (optional)
     * @param  string $timeout (optional)
     * @param  string $timeout_after (optional)
     * @param  string $timeout_before (optional)
     * @param  string $timeout_start (optional)
     * @param  string $timeout_strictly_after (optional)
     * @param  string $timeout_strictly_before (optional)
     * @param  bool $tuesday (optional)
     * @param  bool $tuesday_exists (optional)
     * @param  bool $wednesday (optional)
     * @param  bool $wednesday_exists (optional)
     * @param  string $_order_friday (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_monday (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_saturday (optional)
     * @param  string $_order_sunday (optional)
     * @param  string $_order_thursday (optional)
     * @param  string $_order_time_in (optional)
     * @param  string $_order_timeout (optional)
     * @param  string $_order_tuesday (optional)
     * @param  string $_order_wednesday (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getScheduleCollectionAsync($friday = null, $friday_exists = null, $id_exact = null, $monday = null, $monday_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $saturday = null, $saturday_exists = null, $sunday = null, $sunday_exists = null, $thursday = null, $thursday_exists = null, $time_in = null, $time_in_after = null, $time_in_before = null, $time_in_start = null, $time_in_strictly_after = null, $time_in_strictly_before = null, $timeout = null, $timeout_after = null, $timeout_before = null, $timeout_start = null, $timeout_strictly_after = null, $timeout_strictly_before = null, $tuesday = null, $tuesday_exists = null, $wednesday = null, $wednesday_exists = null, $_order_friday = null, $_order_id = null, $_order_monday = null, $_order_name = null, $_order_saturday = null, $_order_sunday = null, $_order_thursday = null, $_order_time_in = null, $_order_timeout = null, $_order_tuesday = null, $_order_wednesday = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getScheduleCollectionAsyncWithHttpInfo($friday, $friday_exists, $id_exact, $monday, $monday_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $saturday, $saturday_exists, $sunday, $sunday_exists, $thursday, $thursday_exists, $time_in, $time_in_after, $time_in_before, $time_in_start, $time_in_strictly_after, $time_in_strictly_before, $timeout, $timeout_after, $timeout_before, $timeout_start, $timeout_strictly_after, $timeout_strictly_before, $tuesday, $tuesday_exists, $wednesday, $wednesday_exists, $_order_friday, $_order_id, $_order_monday, $_order_name, $_order_saturday, $_order_sunday, $_order_thursday, $_order_time_in, $_order_timeout, $_order_tuesday, $_order_wednesday, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getScheduleCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of Schedule resources.
     *
     * @param  bool $friday (optional)
     * @param  bool $friday_exists (optional)
     * @param  int $id_exact (optional)
     * @param  bool $monday (optional)
     * @param  bool $monday_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  bool $saturday (optional)
     * @param  bool $saturday_exists (optional)
     * @param  bool $sunday (optional)
     * @param  bool $sunday_exists (optional)
     * @param  bool $thursday (optional)
     * @param  bool $thursday_exists (optional)
     * @param  string $time_in (optional)
     * @param  string $time_in_after (optional)
     * @param  string $time_in_before (optional)
     * @param  string $time_in_start (optional)
     * @param  string $time_in_strictly_after (optional)
     * @param  string $time_in_strictly_before (optional)
     * @param  string $timeout (optional)
     * @param  string $timeout_after (optional)
     * @param  string $timeout_before (optional)
     * @param  string $timeout_start (optional)
     * @param  string $timeout_strictly_after (optional)
     * @param  string $timeout_strictly_before (optional)
     * @param  bool $tuesday (optional)
     * @param  bool $tuesday_exists (optional)
     * @param  bool $wednesday (optional)
     * @param  bool $wednesday_exists (optional)
     * @param  string $_order_friday (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_monday (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_saturday (optional)
     * @param  string $_order_sunday (optional)
     * @param  string $_order_thursday (optional)
     * @param  string $_order_time_in (optional)
     * @param  string $_order_timeout (optional)
     * @param  string $_order_tuesday (optional)
     * @param  string $_order_wednesday (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getScheduleCollectionAsyncWithHttpInfo($friday = null, $friday_exists = null, $id_exact = null, $monday = null, $monday_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $saturday = null, $saturday_exists = null, $sunday = null, $sunday_exists = null, $thursday = null, $thursday_exists = null, $time_in = null, $time_in_after = null, $time_in_before = null, $time_in_start = null, $time_in_strictly_after = null, $time_in_strictly_before = null, $timeout = null, $timeout_after = null, $timeout_before = null, $timeout_start = null, $timeout_strictly_after = null, $timeout_strictly_before = null, $tuesday = null, $tuesday_exists = null, $wednesday = null, $wednesday_exists = null, $_order_friday = null, $_order_id = null, $_order_monday = null, $_order_name = null, $_order_saturday = null, $_order_sunday = null, $_order_thursday = null, $_order_time_in = null, $_order_timeout = null, $_order_tuesday = null, $_order_wednesday = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ScheduleCollection[]';
        $request = $this->getScheduleCollectionRequest($friday, $friday_exists, $id_exact, $monday, $monday_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $saturday, $saturday_exists, $sunday, $sunday_exists, $thursday, $thursday_exists, $time_in, $time_in_after, $time_in_before, $time_in_start, $time_in_strictly_after, $time_in_strictly_before, $timeout, $timeout_after, $timeout_before, $timeout_start, $timeout_strictly_after, $timeout_strictly_before, $tuesday, $tuesday_exists, $wednesday, $wednesday_exists, $_order_friday, $_order_id, $_order_monday, $_order_name, $_order_saturday, $_order_sunday, $_order_thursday, $_order_time_in, $_order_timeout, $_order_tuesday, $_order_wednesday, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getScheduleCollection'
     *
     * @param  bool $friday (optional)
     * @param  bool $friday_exists (optional)
     * @param  int $id_exact (optional)
     * @param  bool $monday (optional)
     * @param  bool $monday_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  bool $saturday (optional)
     * @param  bool $saturday_exists (optional)
     * @param  bool $sunday (optional)
     * @param  bool $sunday_exists (optional)
     * @param  bool $thursday (optional)
     * @param  bool $thursday_exists (optional)
     * @param  string $time_in (optional)
     * @param  string $time_in_after (optional)
     * @param  string $time_in_before (optional)
     * @param  string $time_in_start (optional)
     * @param  string $time_in_strictly_after (optional)
     * @param  string $time_in_strictly_before (optional)
     * @param  string $timeout (optional)
     * @param  string $timeout_after (optional)
     * @param  string $timeout_before (optional)
     * @param  string $timeout_start (optional)
     * @param  string $timeout_strictly_after (optional)
     * @param  string $timeout_strictly_before (optional)
     * @param  bool $tuesday (optional)
     * @param  bool $tuesday_exists (optional)
     * @param  bool $wednesday (optional)
     * @param  bool $wednesday_exists (optional)
     * @param  string $_order_friday (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_monday (optional)
     * @param  string $_order_name (optional)
     * @param  string $_order_saturday (optional)
     * @param  string $_order_sunday (optional)
     * @param  string $_order_thursday (optional)
     * @param  string $_order_time_in (optional)
     * @param  string $_order_timeout (optional)
     * @param  string $_order_tuesday (optional)
     * @param  string $_order_wednesday (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getScheduleCollectionRequest($friday = null, $friday_exists = null, $id_exact = null, $monday = null, $monday_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $saturday = null, $saturday_exists = null, $sunday = null, $sunday_exists = null, $thursday = null, $thursday_exists = null, $time_in = null, $time_in_after = null, $time_in_before = null, $time_in_start = null, $time_in_strictly_after = null, $time_in_strictly_before = null, $timeout = null, $timeout_after = null, $timeout_before = null, $timeout_start = null, $timeout_strictly_after = null, $timeout_strictly_before = null, $tuesday = null, $tuesday_exists = null, $wednesday = null, $wednesday_exists = null, $_order_friday = null, $_order_id = null, $_order_monday = null, $_order_name = null, $_order_saturday = null, $_order_sunday = null, $_order_thursday = null, $_order_time_in = null, $_order_timeout = null, $_order_tuesday = null, $_order_wednesday = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/schedules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($friday !== null) {
            $queryParams['friday'] = ObjectSerializer::toQueryValue($friday);
        }
        // query params
        if ($friday_exists !== null) {
            $queryParams['friday[exists]'] = ObjectSerializer::toQueryValue($friday_exists);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($monday !== null) {
            $queryParams['monday'] = ObjectSerializer::toQueryValue($monday);
        }
        // query params
        if ($monday_exists !== null) {
            $queryParams['monday[exists]'] = ObjectSerializer::toQueryValue($monday_exists);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_end !== null) {
            $queryParams['name[end]'] = ObjectSerializer::toQueryValue($name_end);
        }
        // query params
        if ($name_exact !== null) {
            $queryParams['name[exact]'] = ObjectSerializer::toQueryValue($name_exact);
        }
        // query params
        if ($name_partial !== null) {
            $queryParams['name[partial]'] = ObjectSerializer::toQueryValue($name_partial);
        }
        // query params
        if ($name_start !== null) {
            $queryParams['name[start]'] = ObjectSerializer::toQueryValue($name_start);
        }
        // query params
        if ($saturday !== null) {
            $queryParams['saturday'] = ObjectSerializer::toQueryValue($saturday);
        }
        // query params
        if ($saturday_exists !== null) {
            $queryParams['saturday[exists]'] = ObjectSerializer::toQueryValue($saturday_exists);
        }
        // query params
        if ($sunday !== null) {
            $queryParams['sunday'] = ObjectSerializer::toQueryValue($sunday);
        }
        // query params
        if ($sunday_exists !== null) {
            $queryParams['sunday[exists]'] = ObjectSerializer::toQueryValue($sunday_exists);
        }
        // query params
        if ($thursday !== null) {
            $queryParams['thursday'] = ObjectSerializer::toQueryValue($thursday);
        }
        // query params
        if ($thursday_exists !== null) {
            $queryParams['thursday[exists]'] = ObjectSerializer::toQueryValue($thursday_exists);
        }
        // query params
        if ($time_in !== null) {
            $queryParams['timeIn'] = ObjectSerializer::toQueryValue($time_in);
        }
        // query params
        if ($time_in_after !== null) {
            $queryParams['timeIn[after]'] = ObjectSerializer::toQueryValue($time_in_after);
        }
        // query params
        if ($time_in_before !== null) {
            $queryParams['timeIn[before]'] = ObjectSerializer::toQueryValue($time_in_before);
        }
        // query params
        if ($time_in_start !== null) {
            $queryParams['timeIn[start]'] = ObjectSerializer::toQueryValue($time_in_start);
        }
        // query params
        if ($time_in_strictly_after !== null) {
            $queryParams['timeIn[strictly_after]'] = ObjectSerializer::toQueryValue($time_in_strictly_after);
        }
        // query params
        if ($time_in_strictly_before !== null) {
            $queryParams['timeIn[strictly_before]'] = ObjectSerializer::toQueryValue($time_in_strictly_before);
        }
        // query params
        if ($timeout !== null) {
            $queryParams['timeout'] = ObjectSerializer::toQueryValue($timeout);
        }
        // query params
        if ($timeout_after !== null) {
            $queryParams['timeout[after]'] = ObjectSerializer::toQueryValue($timeout_after);
        }
        // query params
        if ($timeout_before !== null) {
            $queryParams['timeout[before]'] = ObjectSerializer::toQueryValue($timeout_before);
        }
        // query params
        if ($timeout_start !== null) {
            $queryParams['timeout[start]'] = ObjectSerializer::toQueryValue($timeout_start);
        }
        // query params
        if ($timeout_strictly_after !== null) {
            $queryParams['timeout[strictly_after]'] = ObjectSerializer::toQueryValue($timeout_strictly_after);
        }
        // query params
        if ($timeout_strictly_before !== null) {
            $queryParams['timeout[strictly_before]'] = ObjectSerializer::toQueryValue($timeout_strictly_before);
        }
        // query params
        if ($tuesday !== null) {
            $queryParams['tuesday'] = ObjectSerializer::toQueryValue($tuesday);
        }
        // query params
        if ($tuesday_exists !== null) {
            $queryParams['tuesday[exists]'] = ObjectSerializer::toQueryValue($tuesday_exists);
        }
        // query params
        if ($wednesday !== null) {
            $queryParams['wednesday'] = ObjectSerializer::toQueryValue($wednesday);
        }
        // query params
        if ($wednesday_exists !== null) {
            $queryParams['wednesday[exists]'] = ObjectSerializer::toQueryValue($wednesday_exists);
        }
        // query params
        if ($_order_friday !== null) {
            $queryParams['_order[friday]'] = ObjectSerializer::toQueryValue($_order_friday);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_monday !== null) {
            $queryParams['_order[monday]'] = ObjectSerializer::toQueryValue($_order_monday);
        }
        // query params
        if ($_order_name !== null) {
            $queryParams['_order[name]'] = ObjectSerializer::toQueryValue($_order_name);
        }
        // query params
        if ($_order_saturday !== null) {
            $queryParams['_order[saturday]'] = ObjectSerializer::toQueryValue($_order_saturday);
        }
        // query params
        if ($_order_sunday !== null) {
            $queryParams['_order[sunday]'] = ObjectSerializer::toQueryValue($_order_sunday);
        }
        // query params
        if ($_order_thursday !== null) {
            $queryParams['_order[thursday]'] = ObjectSerializer::toQueryValue($_order_thursday);
        }
        // query params
        if ($_order_time_in !== null) {
            $queryParams['_order[timeIn]'] = ObjectSerializer::toQueryValue($_order_time_in);
        }
        // query params
        if ($_order_timeout !== null) {
            $queryParams['_order[timeout]'] = ObjectSerializer::toQueryValue($_order_timeout);
        }
        // query params
        if ($_order_tuesday !== null) {
            $queryParams['_order[tuesday]'] = ObjectSerializer::toQueryValue($_order_tuesday);
        }
        // query params
        if ($_order_wednesday !== null) {
            $queryParams['_order[wednesday]'] = ObjectSerializer::toQueryValue($_order_wednesday);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getScheduleItem
     *
     * Retrieves a Schedule resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ScheduleDetailed
     */
    public function getScheduleItem($id)
    {
        list($response) = $this->getScheduleItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getScheduleItemWithHttpInfo
     *
     * Retrieves a Schedule resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ScheduleDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getScheduleItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ScheduleDetailed';
        $request = $this->getScheduleItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ScheduleDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getScheduleItemAsync
     *
     * Retrieves a Schedule resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getScheduleItemAsync($id)
    {
        return $this->getScheduleItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getScheduleItemAsyncWithHttpInfo
     *
     * Retrieves a Schedule resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getScheduleItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ScheduleDetailed';
        $request = $this->getScheduleItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getScheduleItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getScheduleItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getScheduleItem'
            );
        }

        $resourcePath = '/schedules/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getServiceCollection
     *
     * Retrieves the collection of Service resources.
     *
     * @param  string $default_code default_code (optional)
     * @param  string $default_code_end default_code_end (optional)
     * @param  string $default_code_exact default_code_exact (optional)
     * @param  string $default_code_partial default_code_partial (optional)
     * @param  string $default_code_start default_code_start (optional)
     * @param  bool $extra_args extra_args (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $iden iden (optional)
     * @param  string $iden_end iden_end (optional)
     * @param  string $iden_exact iden_exact (optional)
     * @param  string $iden_partial iden_partial (optional)
     * @param  string $iden_start iden_start (optional)
     * @param  string $name name (optional)
     * @param  string $name_ca name_ca (optional)
     * @param  string $name_ca_end name_ca_end (optional)
     * @param  string $name_ca_exact name_ca_exact (optional)
     * @param  string $name_ca_partial name_ca_partial (optional)
     * @param  string $name_ca_start name_ca_start (optional)
     * @param  string $name_en name_en (optional)
     * @param  string $name_en_end name_en_end (optional)
     * @param  string $name_en_exact name_en_exact (optional)
     * @param  string $name_en_partial name_en_partial (optional)
     * @param  string $name_en_start name_en_start (optional)
     * @param  string $name_es name_es (optional)
     * @param  string $name_es_end name_es_end (optional)
     * @param  string $name_es_exact name_es_exact (optional)
     * @param  string $name_es_partial name_es_partial (optional)
     * @param  string $name_es_start name_es_start (optional)
     * @param  string $name_it name_it (optional)
     * @param  string $name_it_end name_it_end (optional)
     * @param  string $name_it_exact name_it_exact (optional)
     * @param  string $name_it_partial name_it_partial (optional)
     * @param  string $name_it_start name_it_start (optional)
     * @param  string $_order_default_code _order_default_code (optional)
     * @param  string $_order_extra_args _order_extra_args (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_iden _order_iden (optional)
     * @param  string $_order_name_ca _order_name_ca (optional)
     * @param  string $_order_name_en _order_name_en (optional)
     * @param  string $_order_name_es _order_name_es (optional)
     * @param  string $_order_name_it _order_name_it (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ServiceCollection[]
     */
    public function getServiceCollection($default_code = null, $default_code_end = null, $default_code_exact = null, $default_code_partial = null, $default_code_start = null, $extra_args = null, $id_exact = null, $iden = null, $iden_end = null, $iden_exact = null, $iden_partial = null, $iden_start = null, $name = null, $name_ca = null, $name_ca_end = null, $name_ca_exact = null, $name_ca_partial = null, $name_ca_start = null, $name_en = null, $name_en_end = null, $name_en_exact = null, $name_en_partial = null, $name_en_start = null, $name_es = null, $name_es_end = null, $name_es_exact = null, $name_es_partial = null, $name_es_start = null, $name_it = null, $name_it_end = null, $name_it_exact = null, $name_it_partial = null, $name_it_start = null, $_order_default_code = null, $_order_extra_args = null, $_order_id = null, $_order_iden = null, $_order_name_ca = null, $_order_name_en = null, $_order_name_es = null, $_order_name_it = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getServiceCollectionWithHttpInfo($default_code, $default_code_end, $default_code_exact, $default_code_partial, $default_code_start, $extra_args, $id_exact, $iden, $iden_end, $iden_exact, $iden_partial, $iden_start, $name, $name_ca, $name_ca_end, $name_ca_exact, $name_ca_partial, $name_ca_start, $name_en, $name_en_end, $name_en_exact, $name_en_partial, $name_en_start, $name_es, $name_es_end, $name_es_exact, $name_es_partial, $name_es_start, $name_it, $name_it_end, $name_it_exact, $name_it_partial, $name_it_start, $_order_default_code, $_order_extra_args, $_order_id, $_order_iden, $_order_name_ca, $_order_name_en, $_order_name_es, $_order_name_it, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getServiceCollectionWithHttpInfo
     *
     * Retrieves the collection of Service resources.
     *
     * @param  string $default_code (optional)
     * @param  string $default_code_end (optional)
     * @param  string $default_code_exact (optional)
     * @param  string $default_code_partial (optional)
     * @param  string $default_code_start (optional)
     * @param  bool $extra_args (optional)
     * @param  int $id_exact (optional)
     * @param  string $iden (optional)
     * @param  string $iden_end (optional)
     * @param  string $iden_exact (optional)
     * @param  string $iden_partial (optional)
     * @param  string $iden_start (optional)
     * @param  string $name (optional)
     * @param  string $name_ca (optional)
     * @param  string $name_ca_end (optional)
     * @param  string $name_ca_exact (optional)
     * @param  string $name_ca_partial (optional)
     * @param  string $name_ca_start (optional)
     * @param  string $name_en (optional)
     * @param  string $name_en_end (optional)
     * @param  string $name_en_exact (optional)
     * @param  string $name_en_partial (optional)
     * @param  string $name_en_start (optional)
     * @param  string $name_es (optional)
     * @param  string $name_es_end (optional)
     * @param  string $name_es_exact (optional)
     * @param  string $name_es_partial (optional)
     * @param  string $name_es_start (optional)
     * @param  string $name_it (optional)
     * @param  string $name_it_end (optional)
     * @param  string $name_it_exact (optional)
     * @param  string $name_it_partial (optional)
     * @param  string $name_it_start (optional)
     * @param  string $_order_default_code (optional)
     * @param  string $_order_extra_args (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_iden (optional)
     * @param  string $_order_name_ca (optional)
     * @param  string $_order_name_en (optional)
     * @param  string $_order_name_es (optional)
     * @param  string $_order_name_it (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ServiceCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getServiceCollectionWithHttpInfo($default_code = null, $default_code_end = null, $default_code_exact = null, $default_code_partial = null, $default_code_start = null, $extra_args = null, $id_exact = null, $iden = null, $iden_end = null, $iden_exact = null, $iden_partial = null, $iden_start = null, $name = null, $name_ca = null, $name_ca_end = null, $name_ca_exact = null, $name_ca_partial = null, $name_ca_start = null, $name_en = null, $name_en_end = null, $name_en_exact = null, $name_en_partial = null, $name_en_start = null, $name_es = null, $name_es_end = null, $name_es_exact = null, $name_es_partial = null, $name_es_start = null, $name_it = null, $name_it_end = null, $name_it_exact = null, $name_it_partial = null, $name_it_start = null, $_order_default_code = null, $_order_extra_args = null, $_order_id = null, $_order_iden = null, $_order_name_ca = null, $_order_name_en = null, $_order_name_es = null, $_order_name_it = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ServiceCollection[]';
        $request = $this->getServiceCollectionRequest($default_code, $default_code_end, $default_code_exact, $default_code_partial, $default_code_start, $extra_args, $id_exact, $iden, $iden_end, $iden_exact, $iden_partial, $iden_start, $name, $name_ca, $name_ca_end, $name_ca_exact, $name_ca_partial, $name_ca_start, $name_en, $name_en_end, $name_en_exact, $name_en_partial, $name_en_start, $name_es, $name_es_end, $name_es_exact, $name_es_partial, $name_es_start, $name_it, $name_it_end, $name_it_exact, $name_it_partial, $name_it_start, $_order_default_code, $_order_extra_args, $_order_id, $_order_iden, $_order_name_ca, $_order_name_en, $_order_name_es, $_order_name_it, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ServiceCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getServiceCollectionAsync
     *
     * Retrieves the collection of Service resources.
     *
     * @param  string $default_code (optional)
     * @param  string $default_code_end (optional)
     * @param  string $default_code_exact (optional)
     * @param  string $default_code_partial (optional)
     * @param  string $default_code_start (optional)
     * @param  bool $extra_args (optional)
     * @param  int $id_exact (optional)
     * @param  string $iden (optional)
     * @param  string $iden_end (optional)
     * @param  string $iden_exact (optional)
     * @param  string $iden_partial (optional)
     * @param  string $iden_start (optional)
     * @param  string $name (optional)
     * @param  string $name_ca (optional)
     * @param  string $name_ca_end (optional)
     * @param  string $name_ca_exact (optional)
     * @param  string $name_ca_partial (optional)
     * @param  string $name_ca_start (optional)
     * @param  string $name_en (optional)
     * @param  string $name_en_end (optional)
     * @param  string $name_en_exact (optional)
     * @param  string $name_en_partial (optional)
     * @param  string $name_en_start (optional)
     * @param  string $name_es (optional)
     * @param  string $name_es_end (optional)
     * @param  string $name_es_exact (optional)
     * @param  string $name_es_partial (optional)
     * @param  string $name_es_start (optional)
     * @param  string $name_it (optional)
     * @param  string $name_it_end (optional)
     * @param  string $name_it_exact (optional)
     * @param  string $name_it_partial (optional)
     * @param  string $name_it_start (optional)
     * @param  string $_order_default_code (optional)
     * @param  string $_order_extra_args (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_iden (optional)
     * @param  string $_order_name_ca (optional)
     * @param  string $_order_name_en (optional)
     * @param  string $_order_name_es (optional)
     * @param  string $_order_name_it (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getServiceCollectionAsync($default_code = null, $default_code_end = null, $default_code_exact = null, $default_code_partial = null, $default_code_start = null, $extra_args = null, $id_exact = null, $iden = null, $iden_end = null, $iden_exact = null, $iden_partial = null, $iden_start = null, $name = null, $name_ca = null, $name_ca_end = null, $name_ca_exact = null, $name_ca_partial = null, $name_ca_start = null, $name_en = null, $name_en_end = null, $name_en_exact = null, $name_en_partial = null, $name_en_start = null, $name_es = null, $name_es_end = null, $name_es_exact = null, $name_es_partial = null, $name_es_start = null, $name_it = null, $name_it_end = null, $name_it_exact = null, $name_it_partial = null, $name_it_start = null, $_order_default_code = null, $_order_extra_args = null, $_order_id = null, $_order_iden = null, $_order_name_ca = null, $_order_name_en = null, $_order_name_es = null, $_order_name_it = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getServiceCollectionAsyncWithHttpInfo($default_code, $default_code_end, $default_code_exact, $default_code_partial, $default_code_start, $extra_args, $id_exact, $iden, $iden_end, $iden_exact, $iden_partial, $iden_start, $name, $name_ca, $name_ca_end, $name_ca_exact, $name_ca_partial, $name_ca_start, $name_en, $name_en_end, $name_en_exact, $name_en_partial, $name_en_start, $name_es, $name_es_end, $name_es_exact, $name_es_partial, $name_es_start, $name_it, $name_it_end, $name_it_exact, $name_it_partial, $name_it_start, $_order_default_code, $_order_extra_args, $_order_id, $_order_iden, $_order_name_ca, $_order_name_en, $_order_name_es, $_order_name_it, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getServiceCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of Service resources.
     *
     * @param  string $default_code (optional)
     * @param  string $default_code_end (optional)
     * @param  string $default_code_exact (optional)
     * @param  string $default_code_partial (optional)
     * @param  string $default_code_start (optional)
     * @param  bool $extra_args (optional)
     * @param  int $id_exact (optional)
     * @param  string $iden (optional)
     * @param  string $iden_end (optional)
     * @param  string $iden_exact (optional)
     * @param  string $iden_partial (optional)
     * @param  string $iden_start (optional)
     * @param  string $name (optional)
     * @param  string $name_ca (optional)
     * @param  string $name_ca_end (optional)
     * @param  string $name_ca_exact (optional)
     * @param  string $name_ca_partial (optional)
     * @param  string $name_ca_start (optional)
     * @param  string $name_en (optional)
     * @param  string $name_en_end (optional)
     * @param  string $name_en_exact (optional)
     * @param  string $name_en_partial (optional)
     * @param  string $name_en_start (optional)
     * @param  string $name_es (optional)
     * @param  string $name_es_end (optional)
     * @param  string $name_es_exact (optional)
     * @param  string $name_es_partial (optional)
     * @param  string $name_es_start (optional)
     * @param  string $name_it (optional)
     * @param  string $name_it_end (optional)
     * @param  string $name_it_exact (optional)
     * @param  string $name_it_partial (optional)
     * @param  string $name_it_start (optional)
     * @param  string $_order_default_code (optional)
     * @param  string $_order_extra_args (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_iden (optional)
     * @param  string $_order_name_ca (optional)
     * @param  string $_order_name_en (optional)
     * @param  string $_order_name_es (optional)
     * @param  string $_order_name_it (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getServiceCollectionAsyncWithHttpInfo($default_code = null, $default_code_end = null, $default_code_exact = null, $default_code_partial = null, $default_code_start = null, $extra_args = null, $id_exact = null, $iden = null, $iden_end = null, $iden_exact = null, $iden_partial = null, $iden_start = null, $name = null, $name_ca = null, $name_ca_end = null, $name_ca_exact = null, $name_ca_partial = null, $name_ca_start = null, $name_en = null, $name_en_end = null, $name_en_exact = null, $name_en_partial = null, $name_en_start = null, $name_es = null, $name_es_end = null, $name_es_exact = null, $name_es_partial = null, $name_es_start = null, $name_it = null, $name_it_end = null, $name_it_exact = null, $name_it_partial = null, $name_it_start = null, $_order_default_code = null, $_order_extra_args = null, $_order_id = null, $_order_iden = null, $_order_name_ca = null, $_order_name_en = null, $_order_name_es = null, $_order_name_it = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ServiceCollection[]';
        $request = $this->getServiceCollectionRequest($default_code, $default_code_end, $default_code_exact, $default_code_partial, $default_code_start, $extra_args, $id_exact, $iden, $iden_end, $iden_exact, $iden_partial, $iden_start, $name, $name_ca, $name_ca_end, $name_ca_exact, $name_ca_partial, $name_ca_start, $name_en, $name_en_end, $name_en_exact, $name_en_partial, $name_en_start, $name_es, $name_es_end, $name_es_exact, $name_es_partial, $name_es_start, $name_it, $name_it_end, $name_it_exact, $name_it_partial, $name_it_start, $_order_default_code, $_order_extra_args, $_order_id, $_order_iden, $_order_name_ca, $_order_name_en, $_order_name_es, $_order_name_it, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getServiceCollection'
     *
     * @param  string $default_code (optional)
     * @param  string $default_code_end (optional)
     * @param  string $default_code_exact (optional)
     * @param  string $default_code_partial (optional)
     * @param  string $default_code_start (optional)
     * @param  bool $extra_args (optional)
     * @param  int $id_exact (optional)
     * @param  string $iden (optional)
     * @param  string $iden_end (optional)
     * @param  string $iden_exact (optional)
     * @param  string $iden_partial (optional)
     * @param  string $iden_start (optional)
     * @param  string $name (optional)
     * @param  string $name_ca (optional)
     * @param  string $name_ca_end (optional)
     * @param  string $name_ca_exact (optional)
     * @param  string $name_ca_partial (optional)
     * @param  string $name_ca_start (optional)
     * @param  string $name_en (optional)
     * @param  string $name_en_end (optional)
     * @param  string $name_en_exact (optional)
     * @param  string $name_en_partial (optional)
     * @param  string $name_en_start (optional)
     * @param  string $name_es (optional)
     * @param  string $name_es_end (optional)
     * @param  string $name_es_exact (optional)
     * @param  string $name_es_partial (optional)
     * @param  string $name_es_start (optional)
     * @param  string $name_it (optional)
     * @param  string $name_it_end (optional)
     * @param  string $name_it_exact (optional)
     * @param  string $name_it_partial (optional)
     * @param  string $name_it_start (optional)
     * @param  string $_order_default_code (optional)
     * @param  string $_order_extra_args (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_iden (optional)
     * @param  string $_order_name_ca (optional)
     * @param  string $_order_name_en (optional)
     * @param  string $_order_name_es (optional)
     * @param  string $_order_name_it (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getServiceCollectionRequest($default_code = null, $default_code_end = null, $default_code_exact = null, $default_code_partial = null, $default_code_start = null, $extra_args = null, $id_exact = null, $iden = null, $iden_end = null, $iden_exact = null, $iden_partial = null, $iden_start = null, $name = null, $name_ca = null, $name_ca_end = null, $name_ca_exact = null, $name_ca_partial = null, $name_ca_start = null, $name_en = null, $name_en_end = null, $name_en_exact = null, $name_en_partial = null, $name_en_start = null, $name_es = null, $name_es_end = null, $name_es_exact = null, $name_es_partial = null, $name_es_start = null, $name_it = null, $name_it_end = null, $name_it_exact = null, $name_it_partial = null, $name_it_start = null, $_order_default_code = null, $_order_extra_args = null, $_order_id = null, $_order_iden = null, $_order_name_ca = null, $_order_name_en = null, $_order_name_es = null, $_order_name_it = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/services';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($default_code !== null) {
            $queryParams['defaultCode'] = ObjectSerializer::toQueryValue($default_code);
        }
        // query params
        if ($default_code_end !== null) {
            $queryParams['defaultCode[end]'] = ObjectSerializer::toQueryValue($default_code_end);
        }
        // query params
        if ($default_code_exact !== null) {
            $queryParams['defaultCode[exact]'] = ObjectSerializer::toQueryValue($default_code_exact);
        }
        // query params
        if ($default_code_partial !== null) {
            $queryParams['defaultCode[partial]'] = ObjectSerializer::toQueryValue($default_code_partial);
        }
        // query params
        if ($default_code_start !== null) {
            $queryParams['defaultCode[start]'] = ObjectSerializer::toQueryValue($default_code_start);
        }
        // query params
        if ($extra_args !== null) {
            $queryParams['extraArgs'] = ObjectSerializer::toQueryValue($extra_args);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($iden !== null) {
            $queryParams['iden'] = ObjectSerializer::toQueryValue($iden);
        }
        // query params
        if ($iden_end !== null) {
            $queryParams['iden[end]'] = ObjectSerializer::toQueryValue($iden_end);
        }
        // query params
        if ($iden_exact !== null) {
            $queryParams['iden[exact]'] = ObjectSerializer::toQueryValue($iden_exact);
        }
        // query params
        if ($iden_partial !== null) {
            $queryParams['iden[partial]'] = ObjectSerializer::toQueryValue($iden_partial);
        }
        // query params
        if ($iden_start !== null) {
            $queryParams['iden[start]'] = ObjectSerializer::toQueryValue($iden_start);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_ca !== null) {
            $queryParams['name.ca'] = ObjectSerializer::toQueryValue($name_ca);
        }
        // query params
        if ($name_ca_end !== null) {
            $queryParams['name.ca[end]'] = ObjectSerializer::toQueryValue($name_ca_end);
        }
        // query params
        if ($name_ca_exact !== null) {
            $queryParams['name.ca[exact]'] = ObjectSerializer::toQueryValue($name_ca_exact);
        }
        // query params
        if ($name_ca_partial !== null) {
            $queryParams['name.ca[partial]'] = ObjectSerializer::toQueryValue($name_ca_partial);
        }
        // query params
        if ($name_ca_start !== null) {
            $queryParams['name.ca[start]'] = ObjectSerializer::toQueryValue($name_ca_start);
        }
        // query params
        if ($name_en !== null) {
            $queryParams['name.en'] = ObjectSerializer::toQueryValue($name_en);
        }
        // query params
        if ($name_en_end !== null) {
            $queryParams['name.en[end]'] = ObjectSerializer::toQueryValue($name_en_end);
        }
        // query params
        if ($name_en_exact !== null) {
            $queryParams['name.en[exact]'] = ObjectSerializer::toQueryValue($name_en_exact);
        }
        // query params
        if ($name_en_partial !== null) {
            $queryParams['name.en[partial]'] = ObjectSerializer::toQueryValue($name_en_partial);
        }
        // query params
        if ($name_en_start !== null) {
            $queryParams['name.en[start]'] = ObjectSerializer::toQueryValue($name_en_start);
        }
        // query params
        if ($name_es !== null) {
            $queryParams['name.es'] = ObjectSerializer::toQueryValue($name_es);
        }
        // query params
        if ($name_es_end !== null) {
            $queryParams['name.es[end]'] = ObjectSerializer::toQueryValue($name_es_end);
        }
        // query params
        if ($name_es_exact !== null) {
            $queryParams['name.es[exact]'] = ObjectSerializer::toQueryValue($name_es_exact);
        }
        // query params
        if ($name_es_partial !== null) {
            $queryParams['name.es[partial]'] = ObjectSerializer::toQueryValue($name_es_partial);
        }
        // query params
        if ($name_es_start !== null) {
            $queryParams['name.es[start]'] = ObjectSerializer::toQueryValue($name_es_start);
        }
        // query params
        if ($name_it !== null) {
            $queryParams['name.it'] = ObjectSerializer::toQueryValue($name_it);
        }
        // query params
        if ($name_it_end !== null) {
            $queryParams['name.it[end]'] = ObjectSerializer::toQueryValue($name_it_end);
        }
        // query params
        if ($name_it_exact !== null) {
            $queryParams['name.it[exact]'] = ObjectSerializer::toQueryValue($name_it_exact);
        }
        // query params
        if ($name_it_partial !== null) {
            $queryParams['name.it[partial]'] = ObjectSerializer::toQueryValue($name_it_partial);
        }
        // query params
        if ($name_it_start !== null) {
            $queryParams['name.it[start]'] = ObjectSerializer::toQueryValue($name_it_start);
        }
        // query params
        if ($_order_default_code !== null) {
            $queryParams['_order[defaultCode]'] = ObjectSerializer::toQueryValue($_order_default_code);
        }
        // query params
        if ($_order_extra_args !== null) {
            $queryParams['_order[extraArgs]'] = ObjectSerializer::toQueryValue($_order_extra_args);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_iden !== null) {
            $queryParams['_order[iden]'] = ObjectSerializer::toQueryValue($_order_iden);
        }
        // query params
        if ($_order_name_ca !== null) {
            $queryParams['_order[name.ca]'] = ObjectSerializer::toQueryValue($_order_name_ca);
        }
        // query params
        if ($_order_name_en !== null) {
            $queryParams['_order[name.en]'] = ObjectSerializer::toQueryValue($_order_name_en);
        }
        // query params
        if ($_order_name_es !== null) {
            $queryParams['_order[name.es]'] = ObjectSerializer::toQueryValue($_order_name_es);
        }
        // query params
        if ($_order_name_it !== null) {
            $queryParams['_order[name.it]'] = ObjectSerializer::toQueryValue($_order_name_it);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getServiceItem
     *
     * Retrieves a Service resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ServiceDetailed
     */
    public function getServiceItem($id)
    {
        list($response) = $this->getServiceItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getServiceItemWithHttpInfo
     *
     * Retrieves a Service resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ServiceDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getServiceItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ServiceDetailed';
        $request = $this->getServiceItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ServiceDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getServiceItemAsync
     *
     * Retrieves a Service resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getServiceItemAsync($id)
    {
        return $this->getServiceItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getServiceItemAsyncWithHttpInfo
     *
     * Retrieves a Service resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getServiceItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ServiceDetailed';
        $request = $this->getServiceItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getServiceItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getServiceItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getServiceItem'
            );
        }

        $resourcePath = '/services/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getServicesUnassignedServiceCollection
     *
     * Retrieves the collection of Service resources.
     *
     * @param  int $_include_id Ensure certain service id is included (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\Service[]
     */
    public function getServicesUnassignedServiceCollection($_include_id = null)
    {
        list($response) = $this->getServicesUnassignedServiceCollectionWithHttpInfo($_include_id);
        return $response;
    }

    /**
     * Operation getServicesUnassignedServiceCollectionWithHttpInfo
     *
     * Retrieves the collection of Service resources.
     *
     * @param  int $_include_id Ensure certain service id is included (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\Service[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getServicesUnassignedServiceCollectionWithHttpInfo($_include_id = null)
    {
        $returnType = '\Ivz\Client\Model\Service[]';
        $request = $this->getServicesUnassignedServiceCollectionRequest($_include_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\Service[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getServicesUnassignedServiceCollectionAsync
     *
     * Retrieves the collection of Service resources.
     *
     * @param  int $_include_id Ensure certain service id is included (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getServicesUnassignedServiceCollectionAsync($_include_id = null)
    {
        return $this->getServicesUnassignedServiceCollectionAsyncWithHttpInfo($_include_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getServicesUnassignedServiceCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of Service resources.
     *
     * @param  int $_include_id Ensure certain service id is included (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getServicesUnassignedServiceCollectionAsyncWithHttpInfo($_include_id = null)
    {
        $returnType = '\Ivz\Client\Model\Service[]';
        $request = $this->getServicesUnassignedServiceCollectionRequest($_include_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getServicesUnassignedServiceCollection'
     *
     * @param  int $_include_id Ensure certain service id is included (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getServicesUnassignedServiceCollectionRequest($_include_id = null)
    {

        $resourcePath = '/services/unassigned';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_include_id !== null) {
            $queryParams['_includeId'] = ObjectSerializer::toQueryValue($_include_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStatusCollectionFriendCollection
     *
     * Retrieves the collection of Friend resources.
     *
     * @param  string $call_acl call_acl (optional)
     * @param  string $call_acl2 call_acl2 (optional)
     * @param  bool $call_acl_exists call_acl_exists (optional)
     * @param  string $domain_name domain_name (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $language language (optional)
     * @param  string $language2 language2 (optional)
     * @param  bool $language_exists language_exists (optional)
     * @param  string $name name (optional)
     * @param  string $name_end name_end (optional)
     * @param  string $name_exact name_exact (optional)
     * @param  string $name_partial name_partial (optional)
     * @param  string $name_start name_start (optional)
     * @param  string $outgoing_ddi outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists outgoing_ddi_exists (optional)
     * @param  string $transformation_rule_set transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists transformation_rule_set_exists (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_name _order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\FriendStatus[]
     */
    public function getStatusCollectionFriendCollection($call_acl = null, $call_acl2 = null, $call_acl_exists = null, $domain_name = null, $id_exact = null, $language = null, $language2 = null, $language_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getStatusCollectionFriendCollectionWithHttpInfo($call_acl, $call_acl2, $call_acl_exists, $domain_name, $id_exact, $language, $language2, $language_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $outgoing_ddi, $outgoing_ddi2, $outgoing_ddi_exists, $transformation_rule_set, $transformation_rule_set2, $transformation_rule_set_exists, $_order_id, $_order_name, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getStatusCollectionFriendCollectionWithHttpInfo
     *
     * Retrieves the collection of Friend resources.
     *
     * @param  string $call_acl (optional)
     * @param  string $call_acl2 (optional)
     * @param  bool $call_acl_exists (optional)
     * @param  string $domain_name (optional)
     * @param  int $id_exact (optional)
     * @param  string $language (optional)
     * @param  string $language2 (optional)
     * @param  bool $language_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  string $transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\FriendStatus[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getStatusCollectionFriendCollectionWithHttpInfo($call_acl = null, $call_acl2 = null, $call_acl_exists = null, $domain_name = null, $id_exact = null, $language = null, $language2 = null, $language_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\FriendStatus[]';
        $request = $this->getStatusCollectionFriendCollectionRequest($call_acl, $call_acl2, $call_acl_exists, $domain_name, $id_exact, $language, $language2, $language_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $outgoing_ddi, $outgoing_ddi2, $outgoing_ddi_exists, $transformation_rule_set, $transformation_rule_set2, $transformation_rule_set_exists, $_order_id, $_order_name, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\FriendStatus[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStatusCollectionFriendCollectionAsync
     *
     * Retrieves the collection of Friend resources.
     *
     * @param  string $call_acl (optional)
     * @param  string $call_acl2 (optional)
     * @param  bool $call_acl_exists (optional)
     * @param  string $domain_name (optional)
     * @param  int $id_exact (optional)
     * @param  string $language (optional)
     * @param  string $language2 (optional)
     * @param  bool $language_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  string $transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatusCollectionFriendCollectionAsync($call_acl = null, $call_acl2 = null, $call_acl_exists = null, $domain_name = null, $id_exact = null, $language = null, $language2 = null, $language_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getStatusCollectionFriendCollectionAsyncWithHttpInfo($call_acl, $call_acl2, $call_acl_exists, $domain_name, $id_exact, $language, $language2, $language_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $outgoing_ddi, $outgoing_ddi2, $outgoing_ddi_exists, $transformation_rule_set, $transformation_rule_set2, $transformation_rule_set_exists, $_order_id, $_order_name, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStatusCollectionFriendCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of Friend resources.
     *
     * @param  string $call_acl (optional)
     * @param  string $call_acl2 (optional)
     * @param  bool $call_acl_exists (optional)
     * @param  string $domain_name (optional)
     * @param  int $id_exact (optional)
     * @param  string $language (optional)
     * @param  string $language2 (optional)
     * @param  bool $language_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  string $transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatusCollectionFriendCollectionAsyncWithHttpInfo($call_acl = null, $call_acl2 = null, $call_acl_exists = null, $domain_name = null, $id_exact = null, $language = null, $language2 = null, $language_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\FriendStatus[]';
        $request = $this->getStatusCollectionFriendCollectionRequest($call_acl, $call_acl2, $call_acl_exists, $domain_name, $id_exact, $language, $language2, $language_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $outgoing_ddi, $outgoing_ddi2, $outgoing_ddi_exists, $transformation_rule_set, $transformation_rule_set2, $transformation_rule_set_exists, $_order_id, $_order_name, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStatusCollectionFriendCollection'
     *
     * @param  string $call_acl (optional)
     * @param  string $call_acl2 (optional)
     * @param  bool $call_acl_exists (optional)
     * @param  string $domain_name (optional)
     * @param  int $id_exact (optional)
     * @param  string $language (optional)
     * @param  string $language2 (optional)
     * @param  bool $language_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  string $transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getStatusCollectionFriendCollectionRequest($call_acl = null, $call_acl2 = null, $call_acl_exists = null, $domain_name = null, $id_exact = null, $language = null, $language2 = null, $language_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/friends/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($call_acl !== null) {
            $queryParams['callAcl'] = ObjectSerializer::toQueryValue($call_acl);
        }
        // query params
        if ($call_acl2 !== null) {
            $queryParams['callAcl[]'] = ObjectSerializer::toQueryValue($call_acl2);
        }
        // query params
        if ($call_acl_exists !== null) {
            $queryParams['callAcl[exists]'] = ObjectSerializer::toQueryValue($call_acl_exists);
        }
        // query params
        if ($domain_name !== null) {
            $queryParams['domainName'] = ObjectSerializer::toQueryValue($domain_name);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($language2 !== null) {
            $queryParams['language[]'] = ObjectSerializer::toQueryValue($language2);
        }
        // query params
        if ($language_exists !== null) {
            $queryParams['language[exists]'] = ObjectSerializer::toQueryValue($language_exists);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_end !== null) {
            $queryParams['name[end]'] = ObjectSerializer::toQueryValue($name_end);
        }
        // query params
        if ($name_exact !== null) {
            $queryParams['name[exact]'] = ObjectSerializer::toQueryValue($name_exact);
        }
        // query params
        if ($name_partial !== null) {
            $queryParams['name[partial]'] = ObjectSerializer::toQueryValue($name_partial);
        }
        // query params
        if ($name_start !== null) {
            $queryParams['name[start]'] = ObjectSerializer::toQueryValue($name_start);
        }
        // query params
        if ($outgoing_ddi !== null) {
            $queryParams['outgoingDdi'] = ObjectSerializer::toQueryValue($outgoing_ddi);
        }
        // query params
        if ($outgoing_ddi2 !== null) {
            $queryParams['outgoingDdi[]'] = ObjectSerializer::toQueryValue($outgoing_ddi2);
        }
        // query params
        if ($outgoing_ddi_exists !== null) {
            $queryParams['outgoingDdi[exists]'] = ObjectSerializer::toQueryValue($outgoing_ddi_exists);
        }
        // query params
        if ($transformation_rule_set !== null) {
            $queryParams['transformationRuleSet'] = ObjectSerializer::toQueryValue($transformation_rule_set);
        }
        // query params
        if ($transformation_rule_set2 !== null) {
            $queryParams['transformationRuleSet[]'] = ObjectSerializer::toQueryValue($transformation_rule_set2);
        }
        // query params
        if ($transformation_rule_set_exists !== null) {
            $queryParams['transformationRuleSet[exists]'] = ObjectSerializer::toQueryValue($transformation_rule_set_exists);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_name !== null) {
            $queryParams['_order[name]'] = ObjectSerializer::toQueryValue($_order_name);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json', 'text/csv', 'application/xml', 'text/xml', 'text/html', 'application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json', 'text/csv', 'application/xml', 'text/xml', 'text/html', 'application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStatusCollectionResidentialDeviceCollection
     *
     * Retrieves the collection of ResidentialDevice resources.
     *
     * @param  string $domain_name domain_name (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $language language (optional)
     * @param  string $language2 language2 (optional)
     * @param  bool $language_exists language_exists (optional)
     * @param  string $name name (optional)
     * @param  string $name_end name_end (optional)
     * @param  string $name_exact name_exact (optional)
     * @param  string $name_partial name_partial (optional)
     * @param  string $name_start name_start (optional)
     * @param  string $outgoing_ddi outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists outgoing_ddi_exists (optional)
     * @param  string $transformation_rule_set transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists transformation_rule_set_exists (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_name _order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ResidentialDeviceStatus[]
     */
    public function getStatusCollectionResidentialDeviceCollection($domain_name = null, $id_exact = null, $language = null, $language2 = null, $language_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getStatusCollectionResidentialDeviceCollectionWithHttpInfo($domain_name, $id_exact, $language, $language2, $language_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $outgoing_ddi, $outgoing_ddi2, $outgoing_ddi_exists, $transformation_rule_set, $transformation_rule_set2, $transformation_rule_set_exists, $_order_id, $_order_name, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getStatusCollectionResidentialDeviceCollectionWithHttpInfo
     *
     * Retrieves the collection of ResidentialDevice resources.
     *
     * @param  string $domain_name (optional)
     * @param  int $id_exact (optional)
     * @param  string $language (optional)
     * @param  string $language2 (optional)
     * @param  bool $language_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  string $transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ResidentialDeviceStatus[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getStatusCollectionResidentialDeviceCollectionWithHttpInfo($domain_name = null, $id_exact = null, $language = null, $language2 = null, $language_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ResidentialDeviceStatus[]';
        $request = $this->getStatusCollectionResidentialDeviceCollectionRequest($domain_name, $id_exact, $language, $language2, $language_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $outgoing_ddi, $outgoing_ddi2, $outgoing_ddi_exists, $transformation_rule_set, $transformation_rule_set2, $transformation_rule_set_exists, $_order_id, $_order_name, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ResidentialDeviceStatus[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStatusCollectionResidentialDeviceCollectionAsync
     *
     * Retrieves the collection of ResidentialDevice resources.
     *
     * @param  string $domain_name (optional)
     * @param  int $id_exact (optional)
     * @param  string $language (optional)
     * @param  string $language2 (optional)
     * @param  bool $language_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  string $transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatusCollectionResidentialDeviceCollectionAsync($domain_name = null, $id_exact = null, $language = null, $language2 = null, $language_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getStatusCollectionResidentialDeviceCollectionAsyncWithHttpInfo($domain_name, $id_exact, $language, $language2, $language_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $outgoing_ddi, $outgoing_ddi2, $outgoing_ddi_exists, $transformation_rule_set, $transformation_rule_set2, $transformation_rule_set_exists, $_order_id, $_order_name, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStatusCollectionResidentialDeviceCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of ResidentialDevice resources.
     *
     * @param  string $domain_name (optional)
     * @param  int $id_exact (optional)
     * @param  string $language (optional)
     * @param  string $language2 (optional)
     * @param  bool $language_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  string $transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatusCollectionResidentialDeviceCollectionAsyncWithHttpInfo($domain_name = null, $id_exact = null, $language = null, $language2 = null, $language_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\ResidentialDeviceStatus[]';
        $request = $this->getStatusCollectionResidentialDeviceCollectionRequest($domain_name, $id_exact, $language, $language2, $language_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $outgoing_ddi, $outgoing_ddi2, $outgoing_ddi_exists, $transformation_rule_set, $transformation_rule_set2, $transformation_rule_set_exists, $_order_id, $_order_name, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStatusCollectionResidentialDeviceCollection'
     *
     * @param  string $domain_name (optional)
     * @param  int $id_exact (optional)
     * @param  string $language (optional)
     * @param  string $language2 (optional)
     * @param  bool $language_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  string $transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getStatusCollectionResidentialDeviceCollectionRequest($domain_name = null, $id_exact = null, $language = null, $language2 = null, $language_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/residential_devices/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($domain_name !== null) {
            $queryParams['domainName'] = ObjectSerializer::toQueryValue($domain_name);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($language2 !== null) {
            $queryParams['language[]'] = ObjectSerializer::toQueryValue($language2);
        }
        // query params
        if ($language_exists !== null) {
            $queryParams['language[exists]'] = ObjectSerializer::toQueryValue($language_exists);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_end !== null) {
            $queryParams['name[end]'] = ObjectSerializer::toQueryValue($name_end);
        }
        // query params
        if ($name_exact !== null) {
            $queryParams['name[exact]'] = ObjectSerializer::toQueryValue($name_exact);
        }
        // query params
        if ($name_partial !== null) {
            $queryParams['name[partial]'] = ObjectSerializer::toQueryValue($name_partial);
        }
        // query params
        if ($name_start !== null) {
            $queryParams['name[start]'] = ObjectSerializer::toQueryValue($name_start);
        }
        // query params
        if ($outgoing_ddi !== null) {
            $queryParams['outgoingDdi'] = ObjectSerializer::toQueryValue($outgoing_ddi);
        }
        // query params
        if ($outgoing_ddi2 !== null) {
            $queryParams['outgoingDdi[]'] = ObjectSerializer::toQueryValue($outgoing_ddi2);
        }
        // query params
        if ($outgoing_ddi_exists !== null) {
            $queryParams['outgoingDdi[exists]'] = ObjectSerializer::toQueryValue($outgoing_ddi_exists);
        }
        // query params
        if ($transformation_rule_set !== null) {
            $queryParams['transformationRuleSet'] = ObjectSerializer::toQueryValue($transformation_rule_set);
        }
        // query params
        if ($transformation_rule_set2 !== null) {
            $queryParams['transformationRuleSet[]'] = ObjectSerializer::toQueryValue($transformation_rule_set2);
        }
        // query params
        if ($transformation_rule_set_exists !== null) {
            $queryParams['transformationRuleSet[exists]'] = ObjectSerializer::toQueryValue($transformation_rule_set_exists);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_name !== null) {
            $queryParams['_order[name]'] = ObjectSerializer::toQueryValue($_order_name);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json', 'text/csv', 'application/xml', 'text/xml', 'text/html', 'application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json', 'text/csv', 'application/xml', 'text/xml', 'text/html', 'application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStatusCollectionRetailAccountCollection
     *
     * Retrieves the collection of RetailAccount resources.
     *
     * @param  string $domain_name domain_name (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $name name (optional)
     * @param  string $name_end name_end (optional)
     * @param  string $name_exact name_exact (optional)
     * @param  string $name_partial name_partial (optional)
     * @param  string $name_start name_start (optional)
     * @param  string $outgoing_ddi outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists outgoing_ddi_exists (optional)
     * @param  string $transformation_rule_set transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists transformation_rule_set_exists (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_name _order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\RetailAccountStatus[]
     */
    public function getStatusCollectionRetailAccountCollection($domain_name = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getStatusCollectionRetailAccountCollectionWithHttpInfo($domain_name, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $outgoing_ddi, $outgoing_ddi2, $outgoing_ddi_exists, $transformation_rule_set, $transformation_rule_set2, $transformation_rule_set_exists, $_order_id, $_order_name, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getStatusCollectionRetailAccountCollectionWithHttpInfo
     *
     * Retrieves the collection of RetailAccount resources.
     *
     * @param  string $domain_name (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  string $transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\RetailAccountStatus[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getStatusCollectionRetailAccountCollectionWithHttpInfo($domain_name = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\RetailAccountStatus[]';
        $request = $this->getStatusCollectionRetailAccountCollectionRequest($domain_name, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $outgoing_ddi, $outgoing_ddi2, $outgoing_ddi_exists, $transformation_rule_set, $transformation_rule_set2, $transformation_rule_set_exists, $_order_id, $_order_name, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\RetailAccountStatus[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStatusCollectionRetailAccountCollectionAsync
     *
     * Retrieves the collection of RetailAccount resources.
     *
     * @param  string $domain_name (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  string $transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatusCollectionRetailAccountCollectionAsync($domain_name = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getStatusCollectionRetailAccountCollectionAsyncWithHttpInfo($domain_name, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $outgoing_ddi, $outgoing_ddi2, $outgoing_ddi_exists, $transformation_rule_set, $transformation_rule_set2, $transformation_rule_set_exists, $_order_id, $_order_name, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStatusCollectionRetailAccountCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of RetailAccount resources.
     *
     * @param  string $domain_name (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  string $transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatusCollectionRetailAccountCollectionAsyncWithHttpInfo($domain_name = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\RetailAccountStatus[]';
        $request = $this->getStatusCollectionRetailAccountCollectionRequest($domain_name, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $outgoing_ddi, $outgoing_ddi2, $outgoing_ddi_exists, $transformation_rule_set, $transformation_rule_set2, $transformation_rule_set_exists, $_order_id, $_order_name, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStatusCollectionRetailAccountCollection'
     *
     * @param  string $domain_name (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  string $transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getStatusCollectionRetailAccountCollectionRequest($domain_name = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/retail_accounts/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($domain_name !== null) {
            $queryParams['domainName'] = ObjectSerializer::toQueryValue($domain_name);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_end !== null) {
            $queryParams['name[end]'] = ObjectSerializer::toQueryValue($name_end);
        }
        // query params
        if ($name_exact !== null) {
            $queryParams['name[exact]'] = ObjectSerializer::toQueryValue($name_exact);
        }
        // query params
        if ($name_partial !== null) {
            $queryParams['name[partial]'] = ObjectSerializer::toQueryValue($name_partial);
        }
        // query params
        if ($name_start !== null) {
            $queryParams['name[start]'] = ObjectSerializer::toQueryValue($name_start);
        }
        // query params
        if ($outgoing_ddi !== null) {
            $queryParams['outgoingDdi'] = ObjectSerializer::toQueryValue($outgoing_ddi);
        }
        // query params
        if ($outgoing_ddi2 !== null) {
            $queryParams['outgoingDdi[]'] = ObjectSerializer::toQueryValue($outgoing_ddi2);
        }
        // query params
        if ($outgoing_ddi_exists !== null) {
            $queryParams['outgoingDdi[exists]'] = ObjectSerializer::toQueryValue($outgoing_ddi_exists);
        }
        // query params
        if ($transformation_rule_set !== null) {
            $queryParams['transformationRuleSet'] = ObjectSerializer::toQueryValue($transformation_rule_set);
        }
        // query params
        if ($transformation_rule_set2 !== null) {
            $queryParams['transformationRuleSet[]'] = ObjectSerializer::toQueryValue($transformation_rule_set2);
        }
        // query params
        if ($transformation_rule_set_exists !== null) {
            $queryParams['transformationRuleSet[exists]'] = ObjectSerializer::toQueryValue($transformation_rule_set_exists);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_name !== null) {
            $queryParams['_order[name]'] = ObjectSerializer::toQueryValue($_order_name);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json', 'text/csv', 'application/xml', 'text/xml', 'text/html', 'application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json', 'text/csv', 'application/xml', 'text/xml', 'text/html', 'application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStatusCollectionTerminalCollection
     *
     * Retrieves the collection of Terminal resources.
     *
     * @param  string $domain_name domain_name (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $name name (optional)
     * @param  string $name_end name_end (optional)
     * @param  string $name_exact name_exact (optional)
     * @param  string $name_partial name_partial (optional)
     * @param  string $name_start name_start (optional)
     * @param  string $terminal_model terminal_model (optional)
     * @param  string $terminal_model2 terminal_model2 (optional)
     * @param  bool $terminal_model_exists terminal_model_exists (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_name _order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\TerminalStatus[]
     */
    public function getStatusCollectionTerminalCollection($domain_name = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $terminal_model = null, $terminal_model2 = null, $terminal_model_exists = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getStatusCollectionTerminalCollectionWithHttpInfo($domain_name, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $terminal_model, $terminal_model2, $terminal_model_exists, $_order_id, $_order_name, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getStatusCollectionTerminalCollectionWithHttpInfo
     *
     * Retrieves the collection of Terminal resources.
     *
     * @param  string $domain_name (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $terminal_model (optional)
     * @param  string $terminal_model2 (optional)
     * @param  bool $terminal_model_exists (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\TerminalStatus[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getStatusCollectionTerminalCollectionWithHttpInfo($domain_name = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $terminal_model = null, $terminal_model2 = null, $terminal_model_exists = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\TerminalStatus[]';
        $request = $this->getStatusCollectionTerminalCollectionRequest($domain_name, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $terminal_model, $terminal_model2, $terminal_model_exists, $_order_id, $_order_name, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\TerminalStatus[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStatusCollectionTerminalCollectionAsync
     *
     * Retrieves the collection of Terminal resources.
     *
     * @param  string $domain_name (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $terminal_model (optional)
     * @param  string $terminal_model2 (optional)
     * @param  bool $terminal_model_exists (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatusCollectionTerminalCollectionAsync($domain_name = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $terminal_model = null, $terminal_model2 = null, $terminal_model_exists = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getStatusCollectionTerminalCollectionAsyncWithHttpInfo($domain_name, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $terminal_model, $terminal_model2, $terminal_model_exists, $_order_id, $_order_name, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStatusCollectionTerminalCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of Terminal resources.
     *
     * @param  string $domain_name (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $terminal_model (optional)
     * @param  string $terminal_model2 (optional)
     * @param  bool $terminal_model_exists (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatusCollectionTerminalCollectionAsyncWithHttpInfo($domain_name = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $terminal_model = null, $terminal_model2 = null, $terminal_model_exists = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\TerminalStatus[]';
        $request = $this->getStatusCollectionTerminalCollectionRequest($domain_name, $id_exact, $name, $name_end, $name_exact, $name_partial, $name_start, $terminal_model, $terminal_model2, $terminal_model_exists, $_order_id, $_order_name, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStatusCollectionTerminalCollection'
     *
     * @param  string $domain_name (optional)
     * @param  int $id_exact (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $terminal_model (optional)
     * @param  string $terminal_model2 (optional)
     * @param  bool $terminal_model_exists (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getStatusCollectionTerminalCollectionRequest($domain_name = null, $id_exact = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $terminal_model = null, $terminal_model2 = null, $terminal_model_exists = null, $_order_id = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/terminals/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($domain_name !== null) {
            $queryParams['domainName'] = ObjectSerializer::toQueryValue($domain_name);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_end !== null) {
            $queryParams['name[end]'] = ObjectSerializer::toQueryValue($name_end);
        }
        // query params
        if ($name_exact !== null) {
            $queryParams['name[exact]'] = ObjectSerializer::toQueryValue($name_exact);
        }
        // query params
        if ($name_partial !== null) {
            $queryParams['name[partial]'] = ObjectSerializer::toQueryValue($name_partial);
        }
        // query params
        if ($name_start !== null) {
            $queryParams['name[start]'] = ObjectSerializer::toQueryValue($name_start);
        }
        // query params
        if ($terminal_model !== null) {
            $queryParams['terminalModel'] = ObjectSerializer::toQueryValue($terminal_model);
        }
        // query params
        if ($terminal_model2 !== null) {
            $queryParams['terminalModel[]'] = ObjectSerializer::toQueryValue($terminal_model2);
        }
        // query params
        if ($terminal_model_exists !== null) {
            $queryParams['terminalModel[exists]'] = ObjectSerializer::toQueryValue($terminal_model_exists);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_name !== null) {
            $queryParams['_order[name]'] = ObjectSerializer::toQueryValue($_order_name);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json', 'text/csv', 'application/xml', 'text/xml', 'text/html', 'application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json', 'text/csv', 'application/xml', 'text/xml', 'text/html', 'application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStatusItemFriendItem
     *
     * Retrieves a Friend resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\FriendStatus
     */
    public function getStatusItemFriendItem($id)
    {
        list($response) = $this->getStatusItemFriendItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getStatusItemFriendItemWithHttpInfo
     *
     * Retrieves a Friend resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\FriendStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStatusItemFriendItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\FriendStatus';
        $request = $this->getStatusItemFriendItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\FriendStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStatusItemFriendItemAsync
     *
     * Retrieves a Friend resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatusItemFriendItemAsync($id)
    {
        return $this->getStatusItemFriendItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStatusItemFriendItemAsyncWithHttpInfo
     *
     * Retrieves a Friend resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatusItemFriendItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\FriendStatus';
        $request = $this->getStatusItemFriendItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStatusItemFriendItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getStatusItemFriendItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getStatusItemFriendItem'
            );
        }

        $resourcePath = '/friends/{id}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json', 'text/csv', 'application/xml', 'text/xml', 'text/html', 'application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json', 'text/csv', 'application/xml', 'text/xml', 'text/html', 'application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStatusItemResidentialDeviceItem
     *
     * Retrieves a ResidentialDevice resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ResidentialDeviceStatus
     */
    public function getStatusItemResidentialDeviceItem($id)
    {
        list($response) = $this->getStatusItemResidentialDeviceItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getStatusItemResidentialDeviceItemWithHttpInfo
     *
     * Retrieves a ResidentialDevice resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ResidentialDeviceStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStatusItemResidentialDeviceItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ResidentialDeviceStatus';
        $request = $this->getStatusItemResidentialDeviceItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ResidentialDeviceStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStatusItemResidentialDeviceItemAsync
     *
     * Retrieves a ResidentialDevice resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatusItemResidentialDeviceItemAsync($id)
    {
        return $this->getStatusItemResidentialDeviceItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStatusItemResidentialDeviceItemAsyncWithHttpInfo
     *
     * Retrieves a ResidentialDevice resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatusItemResidentialDeviceItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\ResidentialDeviceStatus';
        $request = $this->getStatusItemResidentialDeviceItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStatusItemResidentialDeviceItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getStatusItemResidentialDeviceItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getStatusItemResidentialDeviceItem'
            );
        }

        $resourcePath = '/residential_devices/{id}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json', 'text/csv', 'application/xml', 'text/xml', 'text/html', 'application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json', 'text/csv', 'application/xml', 'text/xml', 'text/html', 'application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStatusItemRetailAccountItem
     *
     * Retrieves a RetailAccount resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\RetailAccountStatus
     */
    public function getStatusItemRetailAccountItem($id)
    {
        list($response) = $this->getStatusItemRetailAccountItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getStatusItemRetailAccountItemWithHttpInfo
     *
     * Retrieves a RetailAccount resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\RetailAccountStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStatusItemRetailAccountItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\RetailAccountStatus';
        $request = $this->getStatusItemRetailAccountItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\RetailAccountStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStatusItemRetailAccountItemAsync
     *
     * Retrieves a RetailAccount resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatusItemRetailAccountItemAsync($id)
    {
        return $this->getStatusItemRetailAccountItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStatusItemRetailAccountItemAsyncWithHttpInfo
     *
     * Retrieves a RetailAccount resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatusItemRetailAccountItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\RetailAccountStatus';
        $request = $this->getStatusItemRetailAccountItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStatusItemRetailAccountItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getStatusItemRetailAccountItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getStatusItemRetailAccountItem'
            );
        }

        $resourcePath = '/retail_accounts/{id}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json', 'text/csv', 'application/xml', 'text/xml', 'text/html', 'application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json', 'text/csv', 'application/xml', 'text/xml', 'text/html', 'application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStatusItemTerminalItem
     *
     * Retrieves a Terminal resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\TerminalStatus
     */
    public function getStatusItemTerminalItem($id)
    {
        list($response) = $this->getStatusItemTerminalItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getStatusItemTerminalItemWithHttpInfo
     *
     * Retrieves a Terminal resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\TerminalStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStatusItemTerminalItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\TerminalStatus';
        $request = $this->getStatusItemTerminalItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\TerminalStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStatusItemTerminalItemAsync
     *
     * Retrieves a Terminal resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatusItemTerminalItemAsync($id)
    {
        return $this->getStatusItemTerminalItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStatusItemTerminalItemAsyncWithHttpInfo
     *
     * Retrieves a Terminal resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatusItemTerminalItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\TerminalStatus';
        $request = $this->getStatusItemTerminalItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStatusItemTerminalItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getStatusItemTerminalItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getStatusItemTerminalItem'
            );
        }

        $resourcePath = '/terminals/{id}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json', 'text/csv', 'application/xml', 'text/xml', 'text/html', 'application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json', 'text/csv', 'application/xml', 'text/xml', 'text/html', 'application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTerminalCollection
     *
     * Retrieves the collection of Terminal resources.
     *
     * @param  int $domain domain (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $last_provision_date last_provision_date (optional)
     * @param  string $last_provision_date_after last_provision_date_after (optional)
     * @param  string $last_provision_date_before last_provision_date_before (optional)
     * @param  bool $last_provision_date_exists last_provision_date_exists (optional)
     * @param  string $last_provision_date_start last_provision_date_start (optional)
     * @param  string $last_provision_date_strictly_after last_provision_date_strictly_after (optional)
     * @param  string $last_provision_date_strictly_before last_provision_date_strictly_before (optional)
     * @param  string $mac mac (optional)
     * @param  string $mac_end mac_end (optional)
     * @param  string $mac_exact mac_exact (optional)
     * @param  bool $mac_exists mac_exists (optional)
     * @param  string $mac_partial mac_partial (optional)
     * @param  string $mac_start mac_start (optional)
     * @param  string $name name (optional)
     * @param  string $name_end name_end (optional)
     * @param  string $name_exact name_exact (optional)
     * @param  string $name_partial name_partial (optional)
     * @param  string $name_start name_start (optional)
     * @param  string $terminal_model terminal_model (optional)
     * @param  string $terminal_model2 terminal_model2 (optional)
     * @param  bool $terminal_model_exists terminal_model_exists (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_last_provision_date _order_last_provision_date (optional)
     * @param  string $_order_mac _order_mac (optional)
     * @param  string $_order_name _order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\TerminalCollection[]
     */
    public function getTerminalCollection($domain = null, $id_exact = null, $last_provision_date = null, $last_provision_date_after = null, $last_provision_date_before = null, $last_provision_date_exists = null, $last_provision_date_start = null, $last_provision_date_strictly_after = null, $last_provision_date_strictly_before = null, $mac = null, $mac_end = null, $mac_exact = null, $mac_exists = null, $mac_partial = null, $mac_start = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $terminal_model = null, $terminal_model2 = null, $terminal_model_exists = null, $_order_id = null, $_order_last_provision_date = null, $_order_mac = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null, $_timezone = null)
    {
        list($response) = $this->getTerminalCollectionWithHttpInfo($domain, $id_exact, $last_provision_date, $last_provision_date_after, $last_provision_date_before, $last_provision_date_exists, $last_provision_date_start, $last_provision_date_strictly_after, $last_provision_date_strictly_before, $mac, $mac_end, $mac_exact, $mac_exists, $mac_partial, $mac_start, $name, $name_end, $name_exact, $name_partial, $name_start, $terminal_model, $terminal_model2, $terminal_model_exists, $_order_id, $_order_last_provision_date, $_order_mac, $_order_name, $_items_per_page, $_page, $_properties, $_timezone);
        return $response;
    }

    /**
     * Operation getTerminalCollectionWithHttpInfo
     *
     * Retrieves the collection of Terminal resources.
     *
     * @param  int $domain (optional)
     * @param  int $id_exact (optional)
     * @param  string $last_provision_date (optional)
     * @param  string $last_provision_date_after (optional)
     * @param  string $last_provision_date_before (optional)
     * @param  bool $last_provision_date_exists (optional)
     * @param  string $last_provision_date_start (optional)
     * @param  string $last_provision_date_strictly_after (optional)
     * @param  string $last_provision_date_strictly_before (optional)
     * @param  string $mac (optional)
     * @param  string $mac_end (optional)
     * @param  string $mac_exact (optional)
     * @param  bool $mac_exists (optional)
     * @param  string $mac_partial (optional)
     * @param  string $mac_start (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $terminal_model (optional)
     * @param  string $terminal_model2 (optional)
     * @param  bool $terminal_model_exists (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_last_provision_date (optional)
     * @param  string $_order_mac (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\TerminalCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTerminalCollectionWithHttpInfo($domain = null, $id_exact = null, $last_provision_date = null, $last_provision_date_after = null, $last_provision_date_before = null, $last_provision_date_exists = null, $last_provision_date_start = null, $last_provision_date_strictly_after = null, $last_provision_date_strictly_before = null, $mac = null, $mac_end = null, $mac_exact = null, $mac_exists = null, $mac_partial = null, $mac_start = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $terminal_model = null, $terminal_model2 = null, $terminal_model_exists = null, $_order_id = null, $_order_last_provision_date = null, $_order_mac = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\TerminalCollection[]';
        $request = $this->getTerminalCollectionRequest($domain, $id_exact, $last_provision_date, $last_provision_date_after, $last_provision_date_before, $last_provision_date_exists, $last_provision_date_start, $last_provision_date_strictly_after, $last_provision_date_strictly_before, $mac, $mac_end, $mac_exact, $mac_exists, $mac_partial, $mac_start, $name, $name_end, $name_exact, $name_partial, $name_start, $terminal_model, $terminal_model2, $terminal_model_exists, $_order_id, $_order_last_provision_date, $_order_mac, $_order_name, $_items_per_page, $_page, $_properties, $_timezone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\TerminalCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTerminalCollectionAsync
     *
     * Retrieves the collection of Terminal resources.
     *
     * @param  int $domain (optional)
     * @param  int $id_exact (optional)
     * @param  string $last_provision_date (optional)
     * @param  string $last_provision_date_after (optional)
     * @param  string $last_provision_date_before (optional)
     * @param  bool $last_provision_date_exists (optional)
     * @param  string $last_provision_date_start (optional)
     * @param  string $last_provision_date_strictly_after (optional)
     * @param  string $last_provision_date_strictly_before (optional)
     * @param  string $mac (optional)
     * @param  string $mac_end (optional)
     * @param  string $mac_exact (optional)
     * @param  bool $mac_exists (optional)
     * @param  string $mac_partial (optional)
     * @param  string $mac_start (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $terminal_model (optional)
     * @param  string $terminal_model2 (optional)
     * @param  bool $terminal_model_exists (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_last_provision_date (optional)
     * @param  string $_order_mac (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTerminalCollectionAsync($domain = null, $id_exact = null, $last_provision_date = null, $last_provision_date_after = null, $last_provision_date_before = null, $last_provision_date_exists = null, $last_provision_date_start = null, $last_provision_date_strictly_after = null, $last_provision_date_strictly_before = null, $mac = null, $mac_end = null, $mac_exact = null, $mac_exists = null, $mac_partial = null, $mac_start = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $terminal_model = null, $terminal_model2 = null, $terminal_model_exists = null, $_order_id = null, $_order_last_provision_date = null, $_order_mac = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null, $_timezone = null)
    {
        return $this->getTerminalCollectionAsyncWithHttpInfo($domain, $id_exact, $last_provision_date, $last_provision_date_after, $last_provision_date_before, $last_provision_date_exists, $last_provision_date_start, $last_provision_date_strictly_after, $last_provision_date_strictly_before, $mac, $mac_end, $mac_exact, $mac_exists, $mac_partial, $mac_start, $name, $name_end, $name_exact, $name_partial, $name_start, $terminal_model, $terminal_model2, $terminal_model_exists, $_order_id, $_order_last_provision_date, $_order_mac, $_order_name, $_items_per_page, $_page, $_properties, $_timezone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTerminalCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of Terminal resources.
     *
     * @param  int $domain (optional)
     * @param  int $id_exact (optional)
     * @param  string $last_provision_date (optional)
     * @param  string $last_provision_date_after (optional)
     * @param  string $last_provision_date_before (optional)
     * @param  bool $last_provision_date_exists (optional)
     * @param  string $last_provision_date_start (optional)
     * @param  string $last_provision_date_strictly_after (optional)
     * @param  string $last_provision_date_strictly_before (optional)
     * @param  string $mac (optional)
     * @param  string $mac_end (optional)
     * @param  string $mac_exact (optional)
     * @param  bool $mac_exists (optional)
     * @param  string $mac_partial (optional)
     * @param  string $mac_start (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $terminal_model (optional)
     * @param  string $terminal_model2 (optional)
     * @param  bool $terminal_model_exists (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_last_provision_date (optional)
     * @param  string $_order_mac (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTerminalCollectionAsyncWithHttpInfo($domain = null, $id_exact = null, $last_provision_date = null, $last_provision_date_after = null, $last_provision_date_before = null, $last_provision_date_exists = null, $last_provision_date_start = null, $last_provision_date_strictly_after = null, $last_provision_date_strictly_before = null, $mac = null, $mac_end = null, $mac_exact = null, $mac_exists = null, $mac_partial = null, $mac_start = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $terminal_model = null, $terminal_model2 = null, $terminal_model_exists = null, $_order_id = null, $_order_last_provision_date = null, $_order_mac = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\TerminalCollection[]';
        $request = $this->getTerminalCollectionRequest($domain, $id_exact, $last_provision_date, $last_provision_date_after, $last_provision_date_before, $last_provision_date_exists, $last_provision_date_start, $last_provision_date_strictly_after, $last_provision_date_strictly_before, $mac, $mac_end, $mac_exact, $mac_exists, $mac_partial, $mac_start, $name, $name_end, $name_exact, $name_partial, $name_start, $terminal_model, $terminal_model2, $terminal_model_exists, $_order_id, $_order_last_provision_date, $_order_mac, $_order_name, $_items_per_page, $_page, $_properties, $_timezone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTerminalCollection'
     *
     * @param  int $domain (optional)
     * @param  int $id_exact (optional)
     * @param  string $last_provision_date (optional)
     * @param  string $last_provision_date_after (optional)
     * @param  string $last_provision_date_before (optional)
     * @param  bool $last_provision_date_exists (optional)
     * @param  string $last_provision_date_start (optional)
     * @param  string $last_provision_date_strictly_after (optional)
     * @param  string $last_provision_date_strictly_before (optional)
     * @param  string $mac (optional)
     * @param  string $mac_end (optional)
     * @param  string $mac_exact (optional)
     * @param  bool $mac_exists (optional)
     * @param  string $mac_partial (optional)
     * @param  string $mac_start (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $terminal_model (optional)
     * @param  string $terminal_model2 (optional)
     * @param  bool $terminal_model_exists (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_last_provision_date (optional)
     * @param  string $_order_mac (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTerminalCollectionRequest($domain = null, $id_exact = null, $last_provision_date = null, $last_provision_date_after = null, $last_provision_date_before = null, $last_provision_date_exists = null, $last_provision_date_start = null, $last_provision_date_strictly_after = null, $last_provision_date_strictly_before = null, $mac = null, $mac_end = null, $mac_exact = null, $mac_exists = null, $mac_partial = null, $mac_start = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $terminal_model = null, $terminal_model2 = null, $terminal_model_exists = null, $_order_id = null, $_order_last_provision_date = null, $_order_mac = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null, $_timezone = null)
    {

        $resourcePath = '/terminals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($domain !== null) {
            $queryParams['domain'] = ObjectSerializer::toQueryValue($domain);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($last_provision_date !== null) {
            $queryParams['lastProvisionDate'] = ObjectSerializer::toQueryValue($last_provision_date);
        }
        // query params
        if ($last_provision_date_after !== null) {
            $queryParams['lastProvisionDate[after]'] = ObjectSerializer::toQueryValue($last_provision_date_after);
        }
        // query params
        if ($last_provision_date_before !== null) {
            $queryParams['lastProvisionDate[before]'] = ObjectSerializer::toQueryValue($last_provision_date_before);
        }
        // query params
        if ($last_provision_date_exists !== null) {
            $queryParams['lastProvisionDate[exists]'] = ObjectSerializer::toQueryValue($last_provision_date_exists);
        }
        // query params
        if ($last_provision_date_start !== null) {
            $queryParams['lastProvisionDate[start]'] = ObjectSerializer::toQueryValue($last_provision_date_start);
        }
        // query params
        if ($last_provision_date_strictly_after !== null) {
            $queryParams['lastProvisionDate[strictly_after]'] = ObjectSerializer::toQueryValue($last_provision_date_strictly_after);
        }
        // query params
        if ($last_provision_date_strictly_before !== null) {
            $queryParams['lastProvisionDate[strictly_before]'] = ObjectSerializer::toQueryValue($last_provision_date_strictly_before);
        }
        // query params
        if ($mac !== null) {
            $queryParams['mac'] = ObjectSerializer::toQueryValue($mac);
        }
        // query params
        if ($mac_end !== null) {
            $queryParams['mac[end]'] = ObjectSerializer::toQueryValue($mac_end);
        }
        // query params
        if ($mac_exact !== null) {
            $queryParams['mac[exact]'] = ObjectSerializer::toQueryValue($mac_exact);
        }
        // query params
        if ($mac_exists !== null) {
            $queryParams['mac[exists]'] = ObjectSerializer::toQueryValue($mac_exists);
        }
        // query params
        if ($mac_partial !== null) {
            $queryParams['mac[partial]'] = ObjectSerializer::toQueryValue($mac_partial);
        }
        // query params
        if ($mac_start !== null) {
            $queryParams['mac[start]'] = ObjectSerializer::toQueryValue($mac_start);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_end !== null) {
            $queryParams['name[end]'] = ObjectSerializer::toQueryValue($name_end);
        }
        // query params
        if ($name_exact !== null) {
            $queryParams['name[exact]'] = ObjectSerializer::toQueryValue($name_exact);
        }
        // query params
        if ($name_partial !== null) {
            $queryParams['name[partial]'] = ObjectSerializer::toQueryValue($name_partial);
        }
        // query params
        if ($name_start !== null) {
            $queryParams['name[start]'] = ObjectSerializer::toQueryValue($name_start);
        }
        // query params
        if ($terminal_model !== null) {
            $queryParams['terminalModel'] = ObjectSerializer::toQueryValue($terminal_model);
        }
        // query params
        if ($terminal_model2 !== null) {
            $queryParams['terminalModel[]'] = ObjectSerializer::toQueryValue($terminal_model2);
        }
        // query params
        if ($terminal_model_exists !== null) {
            $queryParams['terminalModel[exists]'] = ObjectSerializer::toQueryValue($terminal_model_exists);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_last_provision_date !== null) {
            $queryParams['_order[lastProvisionDate]'] = ObjectSerializer::toQueryValue($_order_last_provision_date);
        }
        // query params
        if ($_order_mac !== null) {
            $queryParams['_order[mac]'] = ObjectSerializer::toQueryValue($_order_mac);
        }
        // query params
        if ($_order_name !== null) {
            $queryParams['_order[name]'] = ObjectSerializer::toQueryValue($_order_name);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }
        // query params
        if ($_timezone !== null) {
            $queryParams['_timezone'] = ObjectSerializer::toQueryValue($_timezone);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTerminalItem
     *
     * Retrieves a Terminal resource.
     *
     * @param  string $id id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\TerminalDetailed
     */
    public function getTerminalItem($id, $_timezone = null)
    {
        list($response) = $this->getTerminalItemWithHttpInfo($id, $_timezone);
        return $response;
    }

    /**
     * Operation getTerminalItemWithHttpInfo
     *
     * Retrieves a Terminal resource.
     *
     * @param  string $id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\TerminalDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTerminalItemWithHttpInfo($id, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\TerminalDetailed';
        $request = $this->getTerminalItemRequest($id, $_timezone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\TerminalDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTerminalItemAsync
     *
     * Retrieves a Terminal resource.
     *
     * @param  string $id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTerminalItemAsync($id, $_timezone = null)
    {
        return $this->getTerminalItemAsyncWithHttpInfo($id, $_timezone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTerminalItemAsyncWithHttpInfo
     *
     * Retrieves a Terminal resource.
     *
     * @param  string $id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTerminalItemAsyncWithHttpInfo($id, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\TerminalDetailed';
        $request = $this->getTerminalItemRequest($id, $_timezone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTerminalItem'
     *
     * @param  string $id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTerminalItemRequest($id, $_timezone = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getTerminalItem'
            );
        }

        $resourcePath = '/terminals/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_timezone !== null) {
            $queryParams['_timezone'] = ObjectSerializer::toQueryValue($_timezone);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTerminalModelCollection
     *
     * Retrieves the collection of TerminalModel resources.
     *
     * @param  int $id_exact id_exact (optional)
     * @param  string $iden iden (optional)
     * @param  string $iden_end iden_end (optional)
     * @param  string $iden_exact iden_exact (optional)
     * @param  string $iden_partial iden_partial (optional)
     * @param  string $iden_start iden_start (optional)
     * @param  string $name name (optional)
     * @param  string $name_end name_end (optional)
     * @param  string $name_exact name_exact (optional)
     * @param  string $name_partial name_partial (optional)
     * @param  string $name_start name_start (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_iden _order_iden (optional)
     * @param  string $_order_name _order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\TerminalModelCollection[]
     */
    public function getTerminalModelCollection($id_exact = null, $iden = null, $iden_end = null, $iden_exact = null, $iden_partial = null, $iden_start = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_id = null, $_order_iden = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getTerminalModelCollectionWithHttpInfo($id_exact, $iden, $iden_end, $iden_exact, $iden_partial, $iden_start, $name, $name_end, $name_exact, $name_partial, $name_start, $_order_id, $_order_iden, $_order_name, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getTerminalModelCollectionWithHttpInfo
     *
     * Retrieves the collection of TerminalModel resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $iden (optional)
     * @param  string $iden_end (optional)
     * @param  string $iden_exact (optional)
     * @param  string $iden_partial (optional)
     * @param  string $iden_start (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_iden (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\TerminalModelCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTerminalModelCollectionWithHttpInfo($id_exact = null, $iden = null, $iden_end = null, $iden_exact = null, $iden_partial = null, $iden_start = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_id = null, $_order_iden = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\TerminalModelCollection[]';
        $request = $this->getTerminalModelCollectionRequest($id_exact, $iden, $iden_end, $iden_exact, $iden_partial, $iden_start, $name, $name_end, $name_exact, $name_partial, $name_start, $_order_id, $_order_iden, $_order_name, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\TerminalModelCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTerminalModelCollectionAsync
     *
     * Retrieves the collection of TerminalModel resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $iden (optional)
     * @param  string $iden_end (optional)
     * @param  string $iden_exact (optional)
     * @param  string $iden_partial (optional)
     * @param  string $iden_start (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_iden (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTerminalModelCollectionAsync($id_exact = null, $iden = null, $iden_end = null, $iden_exact = null, $iden_partial = null, $iden_start = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_id = null, $_order_iden = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getTerminalModelCollectionAsyncWithHttpInfo($id_exact, $iden, $iden_end, $iden_exact, $iden_partial, $iden_start, $name, $name_end, $name_exact, $name_partial, $name_start, $_order_id, $_order_iden, $_order_name, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTerminalModelCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of TerminalModel resources.
     *
     * @param  int $id_exact (optional)
     * @param  string $iden (optional)
     * @param  string $iden_end (optional)
     * @param  string $iden_exact (optional)
     * @param  string $iden_partial (optional)
     * @param  string $iden_start (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_iden (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTerminalModelCollectionAsyncWithHttpInfo($id_exact = null, $iden = null, $iden_end = null, $iden_exact = null, $iden_partial = null, $iden_start = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_id = null, $_order_iden = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\TerminalModelCollection[]';
        $request = $this->getTerminalModelCollectionRequest($id_exact, $iden, $iden_end, $iden_exact, $iden_partial, $iden_start, $name, $name_end, $name_exact, $name_partial, $name_start, $_order_id, $_order_iden, $_order_name, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTerminalModelCollection'
     *
     * @param  int $id_exact (optional)
     * @param  string $iden (optional)
     * @param  string $iden_end (optional)
     * @param  string $iden_exact (optional)
     * @param  string $iden_partial (optional)
     * @param  string $iden_start (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_iden (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTerminalModelCollectionRequest($id_exact = null, $iden = null, $iden_end = null, $iden_exact = null, $iden_partial = null, $iden_start = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $_order_id = null, $_order_iden = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/terminal_models';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($iden !== null) {
            $queryParams['iden'] = ObjectSerializer::toQueryValue($iden);
        }
        // query params
        if ($iden_end !== null) {
            $queryParams['iden[end]'] = ObjectSerializer::toQueryValue($iden_end);
        }
        // query params
        if ($iden_exact !== null) {
            $queryParams['iden[exact]'] = ObjectSerializer::toQueryValue($iden_exact);
        }
        // query params
        if ($iden_partial !== null) {
            $queryParams['iden[partial]'] = ObjectSerializer::toQueryValue($iden_partial);
        }
        // query params
        if ($iden_start !== null) {
            $queryParams['iden[start]'] = ObjectSerializer::toQueryValue($iden_start);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_end !== null) {
            $queryParams['name[end]'] = ObjectSerializer::toQueryValue($name_end);
        }
        // query params
        if ($name_exact !== null) {
            $queryParams['name[exact]'] = ObjectSerializer::toQueryValue($name_exact);
        }
        // query params
        if ($name_partial !== null) {
            $queryParams['name[partial]'] = ObjectSerializer::toQueryValue($name_partial);
        }
        // query params
        if ($name_start !== null) {
            $queryParams['name[start]'] = ObjectSerializer::toQueryValue($name_start);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_iden !== null) {
            $queryParams['_order[iden]'] = ObjectSerializer::toQueryValue($_order_iden);
        }
        // query params
        if ($_order_name !== null) {
            $queryParams['_order[name]'] = ObjectSerializer::toQueryValue($_order_name);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTerminalModelItem
     *
     * Retrieves a TerminalModel resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\TerminalModelDetailed
     */
    public function getTerminalModelItem($id)
    {
        list($response) = $this->getTerminalModelItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getTerminalModelItemWithHttpInfo
     *
     * Retrieves a TerminalModel resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\TerminalModelDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTerminalModelItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\TerminalModelDetailed';
        $request = $this->getTerminalModelItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\TerminalModelDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTerminalModelItemAsync
     *
     * Retrieves a TerminalModel resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTerminalModelItemAsync($id)
    {
        return $this->getTerminalModelItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTerminalModelItemAsyncWithHttpInfo
     *
     * Retrieves a TerminalModel resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTerminalModelItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\TerminalModelDetailed';
        $request = $this->getTerminalModelItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTerminalModelItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTerminalModelItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getTerminalModelItem'
            );
        }

        $resourcePath = '/terminal_models/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTimezoneCollection
     *
     * Retrieves the collection of Timezone resources.
     *
     * @param  string $country country (optional)
     * @param  string $country2 country2 (optional)
     * @param  bool $country_exists country_exists (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $tz tz (optional)
     * @param  string $tz_end tz_end (optional)
     * @param  string $tz_exact tz_exact (optional)
     * @param  string $tz_partial tz_partial (optional)
     * @param  string $tz_start tz_start (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_tz _order_tz (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     * @param  bool $_pagination _pagination (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\TimezoneCollection[]
     */
    public function getTimezoneCollection($country = null, $country2 = null, $country_exists = null, $id_exact = null, $tz = null, $tz_end = null, $tz_exact = null, $tz_partial = null, $tz_start = null, $_order_id = null, $_order_tz = null, $_items_per_page = null, $_page = null, $_properties = null, $_pagination = null)
    {
        list($response) = $this->getTimezoneCollectionWithHttpInfo($country, $country2, $country_exists, $id_exact, $tz, $tz_end, $tz_exact, $tz_partial, $tz_start, $_order_id, $_order_tz, $_items_per_page, $_page, $_properties, $_pagination);
        return $response;
    }

    /**
     * Operation getTimezoneCollectionWithHttpInfo
     *
     * Retrieves the collection of Timezone resources.
     *
     * @param  string $country (optional)
     * @param  string $country2 (optional)
     * @param  bool $country_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $tz (optional)
     * @param  string $tz_end (optional)
     * @param  string $tz_exact (optional)
     * @param  string $tz_partial (optional)
     * @param  string $tz_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_tz (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  bool $_pagination (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\TimezoneCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTimezoneCollectionWithHttpInfo($country = null, $country2 = null, $country_exists = null, $id_exact = null, $tz = null, $tz_end = null, $tz_exact = null, $tz_partial = null, $tz_start = null, $_order_id = null, $_order_tz = null, $_items_per_page = null, $_page = null, $_properties = null, $_pagination = null)
    {
        $returnType = '\Ivz\Client\Model\TimezoneCollection[]';
        $request = $this->getTimezoneCollectionRequest($country, $country2, $country_exists, $id_exact, $tz, $tz_end, $tz_exact, $tz_partial, $tz_start, $_order_id, $_order_tz, $_items_per_page, $_page, $_properties, $_pagination);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\TimezoneCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTimezoneCollectionAsync
     *
     * Retrieves the collection of Timezone resources.
     *
     * @param  string $country (optional)
     * @param  string $country2 (optional)
     * @param  bool $country_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $tz (optional)
     * @param  string $tz_end (optional)
     * @param  string $tz_exact (optional)
     * @param  string $tz_partial (optional)
     * @param  string $tz_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_tz (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  bool $_pagination (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTimezoneCollectionAsync($country = null, $country2 = null, $country_exists = null, $id_exact = null, $tz = null, $tz_end = null, $tz_exact = null, $tz_partial = null, $tz_start = null, $_order_id = null, $_order_tz = null, $_items_per_page = null, $_page = null, $_properties = null, $_pagination = null)
    {
        return $this->getTimezoneCollectionAsyncWithHttpInfo($country, $country2, $country_exists, $id_exact, $tz, $tz_end, $tz_exact, $tz_partial, $tz_start, $_order_id, $_order_tz, $_items_per_page, $_page, $_properties, $_pagination)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTimezoneCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of Timezone resources.
     *
     * @param  string $country (optional)
     * @param  string $country2 (optional)
     * @param  bool $country_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $tz (optional)
     * @param  string $tz_end (optional)
     * @param  string $tz_exact (optional)
     * @param  string $tz_partial (optional)
     * @param  string $tz_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_tz (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  bool $_pagination (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTimezoneCollectionAsyncWithHttpInfo($country = null, $country2 = null, $country_exists = null, $id_exact = null, $tz = null, $tz_end = null, $tz_exact = null, $tz_partial = null, $tz_start = null, $_order_id = null, $_order_tz = null, $_items_per_page = null, $_page = null, $_properties = null, $_pagination = null)
    {
        $returnType = '\Ivz\Client\Model\TimezoneCollection[]';
        $request = $this->getTimezoneCollectionRequest($country, $country2, $country_exists, $id_exact, $tz, $tz_end, $tz_exact, $tz_partial, $tz_start, $_order_id, $_order_tz, $_items_per_page, $_page, $_properties, $_pagination);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTimezoneCollection'
     *
     * @param  string $country (optional)
     * @param  string $country2 (optional)
     * @param  bool $country_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $tz (optional)
     * @param  string $tz_end (optional)
     * @param  string $tz_exact (optional)
     * @param  string $tz_partial (optional)
     * @param  string $tz_start (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_tz (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  bool $_pagination (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTimezoneCollectionRequest($country = null, $country2 = null, $country_exists = null, $id_exact = null, $tz = null, $tz_end = null, $tz_exact = null, $tz_partial = null, $tz_start = null, $_order_id = null, $_order_tz = null, $_items_per_page = null, $_page = null, $_properties = null, $_pagination = null)
    {

        $resourcePath = '/timezones';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($country !== null) {
            $queryParams['country'] = ObjectSerializer::toQueryValue($country);
        }
        // query params
        if ($country2 !== null) {
            $queryParams['country[]'] = ObjectSerializer::toQueryValue($country2);
        }
        // query params
        if ($country_exists !== null) {
            $queryParams['country[exists]'] = ObjectSerializer::toQueryValue($country_exists);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($tz !== null) {
            $queryParams['tz'] = ObjectSerializer::toQueryValue($tz);
        }
        // query params
        if ($tz_end !== null) {
            $queryParams['tz[end]'] = ObjectSerializer::toQueryValue($tz_end);
        }
        // query params
        if ($tz_exact !== null) {
            $queryParams['tz[exact]'] = ObjectSerializer::toQueryValue($tz_exact);
        }
        // query params
        if ($tz_partial !== null) {
            $queryParams['tz[partial]'] = ObjectSerializer::toQueryValue($tz_partial);
        }
        // query params
        if ($tz_start !== null) {
            $queryParams['tz[start]'] = ObjectSerializer::toQueryValue($tz_start);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_tz !== null) {
            $queryParams['_order[tz]'] = ObjectSerializer::toQueryValue($_order_tz);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }
        // query params
        if ($_pagination !== null) {
            $queryParams['_pagination'] = ObjectSerializer::toQueryValue($_pagination);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTimezoneItem
     *
     * Retrieves a Timezone resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\TimezoneDetailed
     */
    public function getTimezoneItem($id)
    {
        list($response) = $this->getTimezoneItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getTimezoneItemWithHttpInfo
     *
     * Retrieves a Timezone resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\TimezoneDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTimezoneItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\TimezoneDetailed';
        $request = $this->getTimezoneItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\TimezoneDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTimezoneItemAsync
     *
     * Retrieves a Timezone resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTimezoneItemAsync($id)
    {
        return $this->getTimezoneItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTimezoneItemAsyncWithHttpInfo
     *
     * Retrieves a Timezone resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTimezoneItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\TimezoneDetailed';
        $request = $this->getTimezoneItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTimezoneItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTimezoneItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getTimezoneItem'
            );
        }

        $resourcePath = '/timezones/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransformationRuleSetCollection
     *
     * Retrieves the collection of TransformationRuleSet resources.
     *
     * @param  string $area_code area_code (optional)
     * @param  string $area_code_end area_code_end (optional)
     * @param  string $area_code_exact area_code_exact (optional)
     * @param  bool $area_code_exists area_code_exists (optional)
     * @param  string $area_code_partial area_code_partial (optional)
     * @param  string $area_code_start area_code_start (optional)
     * @param  string $country country (optional)
     * @param  string $country2 country2 (optional)
     * @param  bool $country_exists country_exists (optional)
     * @param  string $description description (optional)
     * @param  string $description_end description_end (optional)
     * @param  string $description_exact description_exact (optional)
     * @param  bool $description_exists description_exists (optional)
     * @param  string $description_partial description_partial (optional)
     * @param  string $description_start description_start (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $international_code international_code (optional)
     * @param  string $international_code_end international_code_end (optional)
     * @param  string $international_code_exact international_code_exact (optional)
     * @param  bool $international_code_exists international_code_exists (optional)
     * @param  string $international_code_partial international_code_partial (optional)
     * @param  string $international_code_start international_code_start (optional)
     * @param  string $name name (optional)
     * @param  string $name_ca name_ca (optional)
     * @param  string $name_ca_end name_ca_end (optional)
     * @param  string $name_ca_exact name_ca_exact (optional)
     * @param  string $name_ca_partial name_ca_partial (optional)
     * @param  string $name_ca_start name_ca_start (optional)
     * @param  string $name_en name_en (optional)
     * @param  string $name_en_end name_en_end (optional)
     * @param  string $name_en_exact name_en_exact (optional)
     * @param  string $name_en_partial name_en_partial (optional)
     * @param  string $name_en_start name_en_start (optional)
     * @param  string $name_es name_es (optional)
     * @param  string $name_es_end name_es_end (optional)
     * @param  string $name_es_exact name_es_exact (optional)
     * @param  string $name_es_partial name_es_partial (optional)
     * @param  string $name_es_start name_es_start (optional)
     * @param  string $name_it name_it (optional)
     * @param  string $name_it_end name_it_end (optional)
     * @param  string $name_it_exact name_it_exact (optional)
     * @param  string $name_it_partial name_it_partial (optional)
     * @param  string $name_it_start name_it_start (optional)
     * @param  int $national_len national_len (optional)
     * @param  string $national_len_between national_len_between (optional)
     * @param  bool $national_len_exists national_len_exists (optional)
     * @param  string $national_len_gt national_len_gt (optional)
     * @param  string $national_len_gte national_len_gte (optional)
     * @param  string $national_len_lt national_len_lt (optional)
     * @param  string $national_len_lte national_len_lte (optional)
     * @param  string $trunk_prefix trunk_prefix (optional)
     * @param  string $trunk_prefix_end trunk_prefix_end (optional)
     * @param  string $trunk_prefix_exact trunk_prefix_exact (optional)
     * @param  bool $trunk_prefix_exists trunk_prefix_exists (optional)
     * @param  string $trunk_prefix_partial trunk_prefix_partial (optional)
     * @param  string $trunk_prefix_start trunk_prefix_start (optional)
     * @param  string $_order_area_code _order_area_code (optional)
     * @param  string $_order_description _order_description (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_international_code _order_international_code (optional)
     * @param  string $_order_name_ca _order_name_ca (optional)
     * @param  string $_order_name_en _order_name_en (optional)
     * @param  string $_order_name_es _order_name_es (optional)
     * @param  string $_order_name_it _order_name_it (optional)
     * @param  string $_order_national_len _order_national_len (optional)
     * @param  string $_order_trunk_prefix _order_trunk_prefix (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\TransformationRuleSetCollection[]
     */
    public function getTransformationRuleSetCollection($area_code = null, $area_code_end = null, $area_code_exact = null, $area_code_exists = null, $area_code_partial = null, $area_code_start = null, $country = null, $country2 = null, $country_exists = null, $description = null, $description_end = null, $description_exact = null, $description_exists = null, $description_partial = null, $description_start = null, $id_exact = null, $international_code = null, $international_code_end = null, $international_code_exact = null, $international_code_exists = null, $international_code_partial = null, $international_code_start = null, $name = null, $name_ca = null, $name_ca_end = null, $name_ca_exact = null, $name_ca_partial = null, $name_ca_start = null, $name_en = null, $name_en_end = null, $name_en_exact = null, $name_en_partial = null, $name_en_start = null, $name_es = null, $name_es_end = null, $name_es_exact = null, $name_es_partial = null, $name_es_start = null, $name_it = null, $name_it_end = null, $name_it_exact = null, $name_it_partial = null, $name_it_start = null, $national_len = null, $national_len_between = null, $national_len_exists = null, $national_len_gt = null, $national_len_gte = null, $national_len_lt = null, $national_len_lte = null, $trunk_prefix = null, $trunk_prefix_end = null, $trunk_prefix_exact = null, $trunk_prefix_exists = null, $trunk_prefix_partial = null, $trunk_prefix_start = null, $_order_area_code = null, $_order_description = null, $_order_id = null, $_order_international_code = null, $_order_name_ca = null, $_order_name_en = null, $_order_name_es = null, $_order_name_it = null, $_order_national_len = null, $_order_trunk_prefix = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getTransformationRuleSetCollectionWithHttpInfo($area_code, $area_code_end, $area_code_exact, $area_code_exists, $area_code_partial, $area_code_start, $country, $country2, $country_exists, $description, $description_end, $description_exact, $description_exists, $description_partial, $description_start, $id_exact, $international_code, $international_code_end, $international_code_exact, $international_code_exists, $international_code_partial, $international_code_start, $name, $name_ca, $name_ca_end, $name_ca_exact, $name_ca_partial, $name_ca_start, $name_en, $name_en_end, $name_en_exact, $name_en_partial, $name_en_start, $name_es, $name_es_end, $name_es_exact, $name_es_partial, $name_es_start, $name_it, $name_it_end, $name_it_exact, $name_it_partial, $name_it_start, $national_len, $national_len_between, $national_len_exists, $national_len_gt, $national_len_gte, $national_len_lt, $national_len_lte, $trunk_prefix, $trunk_prefix_end, $trunk_prefix_exact, $trunk_prefix_exists, $trunk_prefix_partial, $trunk_prefix_start, $_order_area_code, $_order_description, $_order_id, $_order_international_code, $_order_name_ca, $_order_name_en, $_order_name_es, $_order_name_it, $_order_national_len, $_order_trunk_prefix, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getTransformationRuleSetCollectionWithHttpInfo
     *
     * Retrieves the collection of TransformationRuleSet resources.
     *
     * @param  string $area_code (optional)
     * @param  string $area_code_end (optional)
     * @param  string $area_code_exact (optional)
     * @param  bool $area_code_exists (optional)
     * @param  string $area_code_partial (optional)
     * @param  string $area_code_start (optional)
     * @param  string $country (optional)
     * @param  string $country2 (optional)
     * @param  bool $country_exists (optional)
     * @param  string $description (optional)
     * @param  string $description_end (optional)
     * @param  string $description_exact (optional)
     * @param  bool $description_exists (optional)
     * @param  string $description_partial (optional)
     * @param  string $description_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $international_code (optional)
     * @param  string $international_code_end (optional)
     * @param  string $international_code_exact (optional)
     * @param  bool $international_code_exists (optional)
     * @param  string $international_code_partial (optional)
     * @param  string $international_code_start (optional)
     * @param  string $name (optional)
     * @param  string $name_ca (optional)
     * @param  string $name_ca_end (optional)
     * @param  string $name_ca_exact (optional)
     * @param  string $name_ca_partial (optional)
     * @param  string $name_ca_start (optional)
     * @param  string $name_en (optional)
     * @param  string $name_en_end (optional)
     * @param  string $name_en_exact (optional)
     * @param  string $name_en_partial (optional)
     * @param  string $name_en_start (optional)
     * @param  string $name_es (optional)
     * @param  string $name_es_end (optional)
     * @param  string $name_es_exact (optional)
     * @param  string $name_es_partial (optional)
     * @param  string $name_es_start (optional)
     * @param  string $name_it (optional)
     * @param  string $name_it_end (optional)
     * @param  string $name_it_exact (optional)
     * @param  string $name_it_partial (optional)
     * @param  string $name_it_start (optional)
     * @param  int $national_len (optional)
     * @param  string $national_len_between (optional)
     * @param  bool $national_len_exists (optional)
     * @param  string $national_len_gt (optional)
     * @param  string $national_len_gte (optional)
     * @param  string $national_len_lt (optional)
     * @param  string $national_len_lte (optional)
     * @param  string $trunk_prefix (optional)
     * @param  string $trunk_prefix_end (optional)
     * @param  string $trunk_prefix_exact (optional)
     * @param  bool $trunk_prefix_exists (optional)
     * @param  string $trunk_prefix_partial (optional)
     * @param  string $trunk_prefix_start (optional)
     * @param  string $_order_area_code (optional)
     * @param  string $_order_description (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_international_code (optional)
     * @param  string $_order_name_ca (optional)
     * @param  string $_order_name_en (optional)
     * @param  string $_order_name_es (optional)
     * @param  string $_order_name_it (optional)
     * @param  string $_order_national_len (optional)
     * @param  string $_order_trunk_prefix (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\TransformationRuleSetCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransformationRuleSetCollectionWithHttpInfo($area_code = null, $area_code_end = null, $area_code_exact = null, $area_code_exists = null, $area_code_partial = null, $area_code_start = null, $country = null, $country2 = null, $country_exists = null, $description = null, $description_end = null, $description_exact = null, $description_exists = null, $description_partial = null, $description_start = null, $id_exact = null, $international_code = null, $international_code_end = null, $international_code_exact = null, $international_code_exists = null, $international_code_partial = null, $international_code_start = null, $name = null, $name_ca = null, $name_ca_end = null, $name_ca_exact = null, $name_ca_partial = null, $name_ca_start = null, $name_en = null, $name_en_end = null, $name_en_exact = null, $name_en_partial = null, $name_en_start = null, $name_es = null, $name_es_end = null, $name_es_exact = null, $name_es_partial = null, $name_es_start = null, $name_it = null, $name_it_end = null, $name_it_exact = null, $name_it_partial = null, $name_it_start = null, $national_len = null, $national_len_between = null, $national_len_exists = null, $national_len_gt = null, $national_len_gte = null, $national_len_lt = null, $national_len_lte = null, $trunk_prefix = null, $trunk_prefix_end = null, $trunk_prefix_exact = null, $trunk_prefix_exists = null, $trunk_prefix_partial = null, $trunk_prefix_start = null, $_order_area_code = null, $_order_description = null, $_order_id = null, $_order_international_code = null, $_order_name_ca = null, $_order_name_en = null, $_order_name_es = null, $_order_name_it = null, $_order_national_len = null, $_order_trunk_prefix = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\TransformationRuleSetCollection[]';
        $request = $this->getTransformationRuleSetCollectionRequest($area_code, $area_code_end, $area_code_exact, $area_code_exists, $area_code_partial, $area_code_start, $country, $country2, $country_exists, $description, $description_end, $description_exact, $description_exists, $description_partial, $description_start, $id_exact, $international_code, $international_code_end, $international_code_exact, $international_code_exists, $international_code_partial, $international_code_start, $name, $name_ca, $name_ca_end, $name_ca_exact, $name_ca_partial, $name_ca_start, $name_en, $name_en_end, $name_en_exact, $name_en_partial, $name_en_start, $name_es, $name_es_end, $name_es_exact, $name_es_partial, $name_es_start, $name_it, $name_it_end, $name_it_exact, $name_it_partial, $name_it_start, $national_len, $national_len_between, $national_len_exists, $national_len_gt, $national_len_gte, $national_len_lt, $national_len_lte, $trunk_prefix, $trunk_prefix_end, $trunk_prefix_exact, $trunk_prefix_exists, $trunk_prefix_partial, $trunk_prefix_start, $_order_area_code, $_order_description, $_order_id, $_order_international_code, $_order_name_ca, $_order_name_en, $_order_name_es, $_order_name_it, $_order_national_len, $_order_trunk_prefix, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\TransformationRuleSetCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransformationRuleSetCollectionAsync
     *
     * Retrieves the collection of TransformationRuleSet resources.
     *
     * @param  string $area_code (optional)
     * @param  string $area_code_end (optional)
     * @param  string $area_code_exact (optional)
     * @param  bool $area_code_exists (optional)
     * @param  string $area_code_partial (optional)
     * @param  string $area_code_start (optional)
     * @param  string $country (optional)
     * @param  string $country2 (optional)
     * @param  bool $country_exists (optional)
     * @param  string $description (optional)
     * @param  string $description_end (optional)
     * @param  string $description_exact (optional)
     * @param  bool $description_exists (optional)
     * @param  string $description_partial (optional)
     * @param  string $description_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $international_code (optional)
     * @param  string $international_code_end (optional)
     * @param  string $international_code_exact (optional)
     * @param  bool $international_code_exists (optional)
     * @param  string $international_code_partial (optional)
     * @param  string $international_code_start (optional)
     * @param  string $name (optional)
     * @param  string $name_ca (optional)
     * @param  string $name_ca_end (optional)
     * @param  string $name_ca_exact (optional)
     * @param  string $name_ca_partial (optional)
     * @param  string $name_ca_start (optional)
     * @param  string $name_en (optional)
     * @param  string $name_en_end (optional)
     * @param  string $name_en_exact (optional)
     * @param  string $name_en_partial (optional)
     * @param  string $name_en_start (optional)
     * @param  string $name_es (optional)
     * @param  string $name_es_end (optional)
     * @param  string $name_es_exact (optional)
     * @param  string $name_es_partial (optional)
     * @param  string $name_es_start (optional)
     * @param  string $name_it (optional)
     * @param  string $name_it_end (optional)
     * @param  string $name_it_exact (optional)
     * @param  string $name_it_partial (optional)
     * @param  string $name_it_start (optional)
     * @param  int $national_len (optional)
     * @param  string $national_len_between (optional)
     * @param  bool $national_len_exists (optional)
     * @param  string $national_len_gt (optional)
     * @param  string $national_len_gte (optional)
     * @param  string $national_len_lt (optional)
     * @param  string $national_len_lte (optional)
     * @param  string $trunk_prefix (optional)
     * @param  string $trunk_prefix_end (optional)
     * @param  string $trunk_prefix_exact (optional)
     * @param  bool $trunk_prefix_exists (optional)
     * @param  string $trunk_prefix_partial (optional)
     * @param  string $trunk_prefix_start (optional)
     * @param  string $_order_area_code (optional)
     * @param  string $_order_description (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_international_code (optional)
     * @param  string $_order_name_ca (optional)
     * @param  string $_order_name_en (optional)
     * @param  string $_order_name_es (optional)
     * @param  string $_order_name_it (optional)
     * @param  string $_order_national_len (optional)
     * @param  string $_order_trunk_prefix (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransformationRuleSetCollectionAsync($area_code = null, $area_code_end = null, $area_code_exact = null, $area_code_exists = null, $area_code_partial = null, $area_code_start = null, $country = null, $country2 = null, $country_exists = null, $description = null, $description_end = null, $description_exact = null, $description_exists = null, $description_partial = null, $description_start = null, $id_exact = null, $international_code = null, $international_code_end = null, $international_code_exact = null, $international_code_exists = null, $international_code_partial = null, $international_code_start = null, $name = null, $name_ca = null, $name_ca_end = null, $name_ca_exact = null, $name_ca_partial = null, $name_ca_start = null, $name_en = null, $name_en_end = null, $name_en_exact = null, $name_en_partial = null, $name_en_start = null, $name_es = null, $name_es_end = null, $name_es_exact = null, $name_es_partial = null, $name_es_start = null, $name_it = null, $name_it_end = null, $name_it_exact = null, $name_it_partial = null, $name_it_start = null, $national_len = null, $national_len_between = null, $national_len_exists = null, $national_len_gt = null, $national_len_gte = null, $national_len_lt = null, $national_len_lte = null, $trunk_prefix = null, $trunk_prefix_end = null, $trunk_prefix_exact = null, $trunk_prefix_exists = null, $trunk_prefix_partial = null, $trunk_prefix_start = null, $_order_area_code = null, $_order_description = null, $_order_id = null, $_order_international_code = null, $_order_name_ca = null, $_order_name_en = null, $_order_name_es = null, $_order_name_it = null, $_order_national_len = null, $_order_trunk_prefix = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getTransformationRuleSetCollectionAsyncWithHttpInfo($area_code, $area_code_end, $area_code_exact, $area_code_exists, $area_code_partial, $area_code_start, $country, $country2, $country_exists, $description, $description_end, $description_exact, $description_exists, $description_partial, $description_start, $id_exact, $international_code, $international_code_end, $international_code_exact, $international_code_exists, $international_code_partial, $international_code_start, $name, $name_ca, $name_ca_end, $name_ca_exact, $name_ca_partial, $name_ca_start, $name_en, $name_en_end, $name_en_exact, $name_en_partial, $name_en_start, $name_es, $name_es_end, $name_es_exact, $name_es_partial, $name_es_start, $name_it, $name_it_end, $name_it_exact, $name_it_partial, $name_it_start, $national_len, $national_len_between, $national_len_exists, $national_len_gt, $national_len_gte, $national_len_lt, $national_len_lte, $trunk_prefix, $trunk_prefix_end, $trunk_prefix_exact, $trunk_prefix_exists, $trunk_prefix_partial, $trunk_prefix_start, $_order_area_code, $_order_description, $_order_id, $_order_international_code, $_order_name_ca, $_order_name_en, $_order_name_es, $_order_name_it, $_order_national_len, $_order_trunk_prefix, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransformationRuleSetCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of TransformationRuleSet resources.
     *
     * @param  string $area_code (optional)
     * @param  string $area_code_end (optional)
     * @param  string $area_code_exact (optional)
     * @param  bool $area_code_exists (optional)
     * @param  string $area_code_partial (optional)
     * @param  string $area_code_start (optional)
     * @param  string $country (optional)
     * @param  string $country2 (optional)
     * @param  bool $country_exists (optional)
     * @param  string $description (optional)
     * @param  string $description_end (optional)
     * @param  string $description_exact (optional)
     * @param  bool $description_exists (optional)
     * @param  string $description_partial (optional)
     * @param  string $description_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $international_code (optional)
     * @param  string $international_code_end (optional)
     * @param  string $international_code_exact (optional)
     * @param  bool $international_code_exists (optional)
     * @param  string $international_code_partial (optional)
     * @param  string $international_code_start (optional)
     * @param  string $name (optional)
     * @param  string $name_ca (optional)
     * @param  string $name_ca_end (optional)
     * @param  string $name_ca_exact (optional)
     * @param  string $name_ca_partial (optional)
     * @param  string $name_ca_start (optional)
     * @param  string $name_en (optional)
     * @param  string $name_en_end (optional)
     * @param  string $name_en_exact (optional)
     * @param  string $name_en_partial (optional)
     * @param  string $name_en_start (optional)
     * @param  string $name_es (optional)
     * @param  string $name_es_end (optional)
     * @param  string $name_es_exact (optional)
     * @param  string $name_es_partial (optional)
     * @param  string $name_es_start (optional)
     * @param  string $name_it (optional)
     * @param  string $name_it_end (optional)
     * @param  string $name_it_exact (optional)
     * @param  string $name_it_partial (optional)
     * @param  string $name_it_start (optional)
     * @param  int $national_len (optional)
     * @param  string $national_len_between (optional)
     * @param  bool $national_len_exists (optional)
     * @param  string $national_len_gt (optional)
     * @param  string $national_len_gte (optional)
     * @param  string $national_len_lt (optional)
     * @param  string $national_len_lte (optional)
     * @param  string $trunk_prefix (optional)
     * @param  string $trunk_prefix_end (optional)
     * @param  string $trunk_prefix_exact (optional)
     * @param  bool $trunk_prefix_exists (optional)
     * @param  string $trunk_prefix_partial (optional)
     * @param  string $trunk_prefix_start (optional)
     * @param  string $_order_area_code (optional)
     * @param  string $_order_description (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_international_code (optional)
     * @param  string $_order_name_ca (optional)
     * @param  string $_order_name_en (optional)
     * @param  string $_order_name_es (optional)
     * @param  string $_order_name_it (optional)
     * @param  string $_order_national_len (optional)
     * @param  string $_order_trunk_prefix (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransformationRuleSetCollectionAsyncWithHttpInfo($area_code = null, $area_code_end = null, $area_code_exact = null, $area_code_exists = null, $area_code_partial = null, $area_code_start = null, $country = null, $country2 = null, $country_exists = null, $description = null, $description_end = null, $description_exact = null, $description_exists = null, $description_partial = null, $description_start = null, $id_exact = null, $international_code = null, $international_code_end = null, $international_code_exact = null, $international_code_exists = null, $international_code_partial = null, $international_code_start = null, $name = null, $name_ca = null, $name_ca_end = null, $name_ca_exact = null, $name_ca_partial = null, $name_ca_start = null, $name_en = null, $name_en_end = null, $name_en_exact = null, $name_en_partial = null, $name_en_start = null, $name_es = null, $name_es_end = null, $name_es_exact = null, $name_es_partial = null, $name_es_start = null, $name_it = null, $name_it_end = null, $name_it_exact = null, $name_it_partial = null, $name_it_start = null, $national_len = null, $national_len_between = null, $national_len_exists = null, $national_len_gt = null, $national_len_gte = null, $national_len_lt = null, $national_len_lte = null, $trunk_prefix = null, $trunk_prefix_end = null, $trunk_prefix_exact = null, $trunk_prefix_exists = null, $trunk_prefix_partial = null, $trunk_prefix_start = null, $_order_area_code = null, $_order_description = null, $_order_id = null, $_order_international_code = null, $_order_name_ca = null, $_order_name_en = null, $_order_name_es = null, $_order_name_it = null, $_order_national_len = null, $_order_trunk_prefix = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\TransformationRuleSetCollection[]';
        $request = $this->getTransformationRuleSetCollectionRequest($area_code, $area_code_end, $area_code_exact, $area_code_exists, $area_code_partial, $area_code_start, $country, $country2, $country_exists, $description, $description_end, $description_exact, $description_exists, $description_partial, $description_start, $id_exact, $international_code, $international_code_end, $international_code_exact, $international_code_exists, $international_code_partial, $international_code_start, $name, $name_ca, $name_ca_end, $name_ca_exact, $name_ca_partial, $name_ca_start, $name_en, $name_en_end, $name_en_exact, $name_en_partial, $name_en_start, $name_es, $name_es_end, $name_es_exact, $name_es_partial, $name_es_start, $name_it, $name_it_end, $name_it_exact, $name_it_partial, $name_it_start, $national_len, $national_len_between, $national_len_exists, $national_len_gt, $national_len_gte, $national_len_lt, $national_len_lte, $trunk_prefix, $trunk_prefix_end, $trunk_prefix_exact, $trunk_prefix_exists, $trunk_prefix_partial, $trunk_prefix_start, $_order_area_code, $_order_description, $_order_id, $_order_international_code, $_order_name_ca, $_order_name_en, $_order_name_es, $_order_name_it, $_order_national_len, $_order_trunk_prefix, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransformationRuleSetCollection'
     *
     * @param  string $area_code (optional)
     * @param  string $area_code_end (optional)
     * @param  string $area_code_exact (optional)
     * @param  bool $area_code_exists (optional)
     * @param  string $area_code_partial (optional)
     * @param  string $area_code_start (optional)
     * @param  string $country (optional)
     * @param  string $country2 (optional)
     * @param  bool $country_exists (optional)
     * @param  string $description (optional)
     * @param  string $description_end (optional)
     * @param  string $description_exact (optional)
     * @param  bool $description_exists (optional)
     * @param  string $description_partial (optional)
     * @param  string $description_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $international_code (optional)
     * @param  string $international_code_end (optional)
     * @param  string $international_code_exact (optional)
     * @param  bool $international_code_exists (optional)
     * @param  string $international_code_partial (optional)
     * @param  string $international_code_start (optional)
     * @param  string $name (optional)
     * @param  string $name_ca (optional)
     * @param  string $name_ca_end (optional)
     * @param  string $name_ca_exact (optional)
     * @param  string $name_ca_partial (optional)
     * @param  string $name_ca_start (optional)
     * @param  string $name_en (optional)
     * @param  string $name_en_end (optional)
     * @param  string $name_en_exact (optional)
     * @param  string $name_en_partial (optional)
     * @param  string $name_en_start (optional)
     * @param  string $name_es (optional)
     * @param  string $name_es_end (optional)
     * @param  string $name_es_exact (optional)
     * @param  string $name_es_partial (optional)
     * @param  string $name_es_start (optional)
     * @param  string $name_it (optional)
     * @param  string $name_it_end (optional)
     * @param  string $name_it_exact (optional)
     * @param  string $name_it_partial (optional)
     * @param  string $name_it_start (optional)
     * @param  int $national_len (optional)
     * @param  string $national_len_between (optional)
     * @param  bool $national_len_exists (optional)
     * @param  string $national_len_gt (optional)
     * @param  string $national_len_gte (optional)
     * @param  string $national_len_lt (optional)
     * @param  string $national_len_lte (optional)
     * @param  string $trunk_prefix (optional)
     * @param  string $trunk_prefix_end (optional)
     * @param  string $trunk_prefix_exact (optional)
     * @param  bool $trunk_prefix_exists (optional)
     * @param  string $trunk_prefix_partial (optional)
     * @param  string $trunk_prefix_start (optional)
     * @param  string $_order_area_code (optional)
     * @param  string $_order_description (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_international_code (optional)
     * @param  string $_order_name_ca (optional)
     * @param  string $_order_name_en (optional)
     * @param  string $_order_name_es (optional)
     * @param  string $_order_name_it (optional)
     * @param  string $_order_national_len (optional)
     * @param  string $_order_trunk_prefix (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTransformationRuleSetCollectionRequest($area_code = null, $area_code_end = null, $area_code_exact = null, $area_code_exists = null, $area_code_partial = null, $area_code_start = null, $country = null, $country2 = null, $country_exists = null, $description = null, $description_end = null, $description_exact = null, $description_exists = null, $description_partial = null, $description_start = null, $id_exact = null, $international_code = null, $international_code_end = null, $international_code_exact = null, $international_code_exists = null, $international_code_partial = null, $international_code_start = null, $name = null, $name_ca = null, $name_ca_end = null, $name_ca_exact = null, $name_ca_partial = null, $name_ca_start = null, $name_en = null, $name_en_end = null, $name_en_exact = null, $name_en_partial = null, $name_en_start = null, $name_es = null, $name_es_end = null, $name_es_exact = null, $name_es_partial = null, $name_es_start = null, $name_it = null, $name_it_end = null, $name_it_exact = null, $name_it_partial = null, $name_it_start = null, $national_len = null, $national_len_between = null, $national_len_exists = null, $national_len_gt = null, $national_len_gte = null, $national_len_lt = null, $national_len_lte = null, $trunk_prefix = null, $trunk_prefix_end = null, $trunk_prefix_exact = null, $trunk_prefix_exists = null, $trunk_prefix_partial = null, $trunk_prefix_start = null, $_order_area_code = null, $_order_description = null, $_order_id = null, $_order_international_code = null, $_order_name_ca = null, $_order_name_en = null, $_order_name_es = null, $_order_name_it = null, $_order_national_len = null, $_order_trunk_prefix = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/transformation_rule_sets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($area_code !== null) {
            $queryParams['areaCode'] = ObjectSerializer::toQueryValue($area_code);
        }
        // query params
        if ($area_code_end !== null) {
            $queryParams['areaCode[end]'] = ObjectSerializer::toQueryValue($area_code_end);
        }
        // query params
        if ($area_code_exact !== null) {
            $queryParams['areaCode[exact]'] = ObjectSerializer::toQueryValue($area_code_exact);
        }
        // query params
        if ($area_code_exists !== null) {
            $queryParams['areaCode[exists]'] = ObjectSerializer::toQueryValue($area_code_exists);
        }
        // query params
        if ($area_code_partial !== null) {
            $queryParams['areaCode[partial]'] = ObjectSerializer::toQueryValue($area_code_partial);
        }
        // query params
        if ($area_code_start !== null) {
            $queryParams['areaCode[start]'] = ObjectSerializer::toQueryValue($area_code_start);
        }
        // query params
        if ($country !== null) {
            $queryParams['country'] = ObjectSerializer::toQueryValue($country);
        }
        // query params
        if ($country2 !== null) {
            $queryParams['country[]'] = ObjectSerializer::toQueryValue($country2);
        }
        // query params
        if ($country_exists !== null) {
            $queryParams['country[exists]'] = ObjectSerializer::toQueryValue($country_exists);
        }
        // query params
        if ($description !== null) {
            $queryParams['description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($description_end !== null) {
            $queryParams['description[end]'] = ObjectSerializer::toQueryValue($description_end);
        }
        // query params
        if ($description_exact !== null) {
            $queryParams['description[exact]'] = ObjectSerializer::toQueryValue($description_exact);
        }
        // query params
        if ($description_exists !== null) {
            $queryParams['description[exists]'] = ObjectSerializer::toQueryValue($description_exists);
        }
        // query params
        if ($description_partial !== null) {
            $queryParams['description[partial]'] = ObjectSerializer::toQueryValue($description_partial);
        }
        // query params
        if ($description_start !== null) {
            $queryParams['description[start]'] = ObjectSerializer::toQueryValue($description_start);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($international_code !== null) {
            $queryParams['internationalCode'] = ObjectSerializer::toQueryValue($international_code);
        }
        // query params
        if ($international_code_end !== null) {
            $queryParams['internationalCode[end]'] = ObjectSerializer::toQueryValue($international_code_end);
        }
        // query params
        if ($international_code_exact !== null) {
            $queryParams['internationalCode[exact]'] = ObjectSerializer::toQueryValue($international_code_exact);
        }
        // query params
        if ($international_code_exists !== null) {
            $queryParams['internationalCode[exists]'] = ObjectSerializer::toQueryValue($international_code_exists);
        }
        // query params
        if ($international_code_partial !== null) {
            $queryParams['internationalCode[partial]'] = ObjectSerializer::toQueryValue($international_code_partial);
        }
        // query params
        if ($international_code_start !== null) {
            $queryParams['internationalCode[start]'] = ObjectSerializer::toQueryValue($international_code_start);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_ca !== null) {
            $queryParams['name.ca'] = ObjectSerializer::toQueryValue($name_ca);
        }
        // query params
        if ($name_ca_end !== null) {
            $queryParams['name.ca[end]'] = ObjectSerializer::toQueryValue($name_ca_end);
        }
        // query params
        if ($name_ca_exact !== null) {
            $queryParams['name.ca[exact]'] = ObjectSerializer::toQueryValue($name_ca_exact);
        }
        // query params
        if ($name_ca_partial !== null) {
            $queryParams['name.ca[partial]'] = ObjectSerializer::toQueryValue($name_ca_partial);
        }
        // query params
        if ($name_ca_start !== null) {
            $queryParams['name.ca[start]'] = ObjectSerializer::toQueryValue($name_ca_start);
        }
        // query params
        if ($name_en !== null) {
            $queryParams['name.en'] = ObjectSerializer::toQueryValue($name_en);
        }
        // query params
        if ($name_en_end !== null) {
            $queryParams['name.en[end]'] = ObjectSerializer::toQueryValue($name_en_end);
        }
        // query params
        if ($name_en_exact !== null) {
            $queryParams['name.en[exact]'] = ObjectSerializer::toQueryValue($name_en_exact);
        }
        // query params
        if ($name_en_partial !== null) {
            $queryParams['name.en[partial]'] = ObjectSerializer::toQueryValue($name_en_partial);
        }
        // query params
        if ($name_en_start !== null) {
            $queryParams['name.en[start]'] = ObjectSerializer::toQueryValue($name_en_start);
        }
        // query params
        if ($name_es !== null) {
            $queryParams['name.es'] = ObjectSerializer::toQueryValue($name_es);
        }
        // query params
        if ($name_es_end !== null) {
            $queryParams['name.es[end]'] = ObjectSerializer::toQueryValue($name_es_end);
        }
        // query params
        if ($name_es_exact !== null) {
            $queryParams['name.es[exact]'] = ObjectSerializer::toQueryValue($name_es_exact);
        }
        // query params
        if ($name_es_partial !== null) {
            $queryParams['name.es[partial]'] = ObjectSerializer::toQueryValue($name_es_partial);
        }
        // query params
        if ($name_es_start !== null) {
            $queryParams['name.es[start]'] = ObjectSerializer::toQueryValue($name_es_start);
        }
        // query params
        if ($name_it !== null) {
            $queryParams['name.it'] = ObjectSerializer::toQueryValue($name_it);
        }
        // query params
        if ($name_it_end !== null) {
            $queryParams['name.it[end]'] = ObjectSerializer::toQueryValue($name_it_end);
        }
        // query params
        if ($name_it_exact !== null) {
            $queryParams['name.it[exact]'] = ObjectSerializer::toQueryValue($name_it_exact);
        }
        // query params
        if ($name_it_partial !== null) {
            $queryParams['name.it[partial]'] = ObjectSerializer::toQueryValue($name_it_partial);
        }
        // query params
        if ($name_it_start !== null) {
            $queryParams['name.it[start]'] = ObjectSerializer::toQueryValue($name_it_start);
        }
        // query params
        if ($national_len !== null) {
            $queryParams['nationalLen'] = ObjectSerializer::toQueryValue($national_len);
        }
        // query params
        if ($national_len_between !== null) {
            $queryParams['nationalLen[between]'] = ObjectSerializer::toQueryValue($national_len_between);
        }
        // query params
        if ($national_len_exists !== null) {
            $queryParams['nationalLen[exists]'] = ObjectSerializer::toQueryValue($national_len_exists);
        }
        // query params
        if ($national_len_gt !== null) {
            $queryParams['nationalLen[gt]'] = ObjectSerializer::toQueryValue($national_len_gt);
        }
        // query params
        if ($national_len_gte !== null) {
            $queryParams['nationalLen[gte]'] = ObjectSerializer::toQueryValue($national_len_gte);
        }
        // query params
        if ($national_len_lt !== null) {
            $queryParams['nationalLen[lt]'] = ObjectSerializer::toQueryValue($national_len_lt);
        }
        // query params
        if ($national_len_lte !== null) {
            $queryParams['nationalLen[lte]'] = ObjectSerializer::toQueryValue($national_len_lte);
        }
        // query params
        if ($trunk_prefix !== null) {
            $queryParams['trunkPrefix'] = ObjectSerializer::toQueryValue($trunk_prefix);
        }
        // query params
        if ($trunk_prefix_end !== null) {
            $queryParams['trunkPrefix[end]'] = ObjectSerializer::toQueryValue($trunk_prefix_end);
        }
        // query params
        if ($trunk_prefix_exact !== null) {
            $queryParams['trunkPrefix[exact]'] = ObjectSerializer::toQueryValue($trunk_prefix_exact);
        }
        // query params
        if ($trunk_prefix_exists !== null) {
            $queryParams['trunkPrefix[exists]'] = ObjectSerializer::toQueryValue($trunk_prefix_exists);
        }
        // query params
        if ($trunk_prefix_partial !== null) {
            $queryParams['trunkPrefix[partial]'] = ObjectSerializer::toQueryValue($trunk_prefix_partial);
        }
        // query params
        if ($trunk_prefix_start !== null) {
            $queryParams['trunkPrefix[start]'] = ObjectSerializer::toQueryValue($trunk_prefix_start);
        }
        // query params
        if ($_order_area_code !== null) {
            $queryParams['_order[areaCode]'] = ObjectSerializer::toQueryValue($_order_area_code);
        }
        // query params
        if ($_order_description !== null) {
            $queryParams['_order[description]'] = ObjectSerializer::toQueryValue($_order_description);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_international_code !== null) {
            $queryParams['_order[internationalCode]'] = ObjectSerializer::toQueryValue($_order_international_code);
        }
        // query params
        if ($_order_name_ca !== null) {
            $queryParams['_order[name.ca]'] = ObjectSerializer::toQueryValue($_order_name_ca);
        }
        // query params
        if ($_order_name_en !== null) {
            $queryParams['_order[name.en]'] = ObjectSerializer::toQueryValue($_order_name_en);
        }
        // query params
        if ($_order_name_es !== null) {
            $queryParams['_order[name.es]'] = ObjectSerializer::toQueryValue($_order_name_es);
        }
        // query params
        if ($_order_name_it !== null) {
            $queryParams['_order[name.it]'] = ObjectSerializer::toQueryValue($_order_name_it);
        }
        // query params
        if ($_order_national_len !== null) {
            $queryParams['_order[nationalLen]'] = ObjectSerializer::toQueryValue($_order_national_len);
        }
        // query params
        if ($_order_trunk_prefix !== null) {
            $queryParams['_order[trunkPrefix]'] = ObjectSerializer::toQueryValue($_order_trunk_prefix);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransformationRuleSetItem
     *
     * Retrieves a TransformationRuleSet resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\TransformationRuleSetDetailed
     */
    public function getTransformationRuleSetItem($id)
    {
        list($response) = $this->getTransformationRuleSetItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getTransformationRuleSetItemWithHttpInfo
     *
     * Retrieves a TransformationRuleSet resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\TransformationRuleSetDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransformationRuleSetItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\TransformationRuleSetDetailed';
        $request = $this->getTransformationRuleSetItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\TransformationRuleSetDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransformationRuleSetItemAsync
     *
     * Retrieves a TransformationRuleSet resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransformationRuleSetItemAsync($id)
    {
        return $this->getTransformationRuleSetItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransformationRuleSetItemAsyncWithHttpInfo
     *
     * Retrieves a TransformationRuleSet resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransformationRuleSetItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\TransformationRuleSetDetailed';
        $request = $this->getTransformationRuleSetItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransformationRuleSetItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTransformationRuleSetItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getTransformationRuleSetItem'
            );
        }

        $resourcePath = '/transformation_rule_sets/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUserCollection
     *
     * Retrieves the collection of User resources.
     *
     * @param  string $boss_assistant boss_assistant (optional)
     * @param  string $boss_assistant_white_list boss_assistant_white_list (optional)
     * @param  string $boss_assistant_white_list2 boss_assistant_white_list2 (optional)
     * @param  bool $boss_assistant_white_list_exists boss_assistant_white_list_exists (optional)
     * @param  string $boss_assistant2 boss_assistant2 (optional)
     * @param  bool $boss_assistant_exists boss_assistant_exists (optional)
     * @param  string $call_acl call_acl (optional)
     * @param  string $call_acl2 call_acl2 (optional)
     * @param  bool $call_acl_exists call_acl_exists (optional)
     * @param  string $extension extension (optional)
     * @param  string $extension2 extension2 (optional)
     * @param  bool $extension_exists extension_exists (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $language language (optional)
     * @param  string $language2 language2 (optional)
     * @param  bool $language_exists language_exists (optional)
     * @param  string $lastname lastname (optional)
     * @param  string $lastname_end lastname_end (optional)
     * @param  string $lastname_exact lastname_exact (optional)
     * @param  string $lastname_partial lastname_partial (optional)
     * @param  string $lastname_start lastname_start (optional)
     * @param  string $location location (optional)
     * @param  string $location2 location2 (optional)
     * @param  bool $location_exists location_exists (optional)
     * @param  string $name name (optional)
     * @param  string $name_end name_end (optional)
     * @param  string $name_exact name_exact (optional)
     * @param  string $name_partial name_partial (optional)
     * @param  string $name_start name_start (optional)
     * @param  string $outgoing_ddi outgoing_ddi (optional)
     * @param  string $outgoing_ddi_rule outgoing_ddi_rule (optional)
     * @param  string $outgoing_ddi_rule2 outgoing_ddi_rule2 (optional)
     * @param  bool $outgoing_ddi_rule_exists outgoing_ddi_rule_exists (optional)
     * @param  string $outgoing_ddi2 outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists outgoing_ddi_exists (optional)
     * @param  string $terminal terminal (optional)
     * @param  string $terminal2 terminal2 (optional)
     * @param  bool $terminal_exists terminal_exists (optional)
     * @param  string $timezone timezone (optional)
     * @param  string $timezone2 timezone2 (optional)
     * @param  bool $timezone_exists timezone_exists (optional)
     * @param  string $transformation_rule_set transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists transformation_rule_set_exists (optional)
     * @param  string $voicemail_locution voicemail_locution (optional)
     * @param  string $voicemail_locution2 voicemail_locution2 (optional)
     * @param  bool $voicemail_locution_exists voicemail_locution_exists (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_lastname _order_lastname (optional)
     * @param  string $_order_name _order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\UserCollection[]
     */
    public function getUserCollection($boss_assistant = null, $boss_assistant_white_list = null, $boss_assistant_white_list2 = null, $boss_assistant_white_list_exists = null, $boss_assistant2 = null, $boss_assistant_exists = null, $call_acl = null, $call_acl2 = null, $call_acl_exists = null, $extension = null, $extension2 = null, $extension_exists = null, $id_exact = null, $language = null, $language2 = null, $language_exists = null, $lastname = null, $lastname_end = null, $lastname_exact = null, $lastname_partial = null, $lastname_start = null, $location = null, $location2 = null, $location_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi_rule = null, $outgoing_ddi_rule2 = null, $outgoing_ddi_rule_exists = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $terminal = null, $terminal2 = null, $terminal_exists = null, $timezone = null, $timezone2 = null, $timezone_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $voicemail_locution = null, $voicemail_locution2 = null, $voicemail_locution_exists = null, $_order_id = null, $_order_lastname = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getUserCollectionWithHttpInfo($boss_assistant, $boss_assistant_white_list, $boss_assistant_white_list2, $boss_assistant_white_list_exists, $boss_assistant2, $boss_assistant_exists, $call_acl, $call_acl2, $call_acl_exists, $extension, $extension2, $extension_exists, $id_exact, $language, $language2, $language_exists, $lastname, $lastname_end, $lastname_exact, $lastname_partial, $lastname_start, $location, $location2, $location_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $outgoing_ddi, $outgoing_ddi_rule, $outgoing_ddi_rule2, $outgoing_ddi_rule_exists, $outgoing_ddi2, $outgoing_ddi_exists, $terminal, $terminal2, $terminal_exists, $timezone, $timezone2, $timezone_exists, $transformation_rule_set, $transformation_rule_set2, $transformation_rule_set_exists, $voicemail_locution, $voicemail_locution2, $voicemail_locution_exists, $_order_id, $_order_lastname, $_order_name, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getUserCollectionWithHttpInfo
     *
     * Retrieves the collection of User resources.
     *
     * @param  string $boss_assistant (optional)
     * @param  string $boss_assistant_white_list (optional)
     * @param  string $boss_assistant_white_list2 (optional)
     * @param  bool $boss_assistant_white_list_exists (optional)
     * @param  string $boss_assistant2 (optional)
     * @param  bool $boss_assistant_exists (optional)
     * @param  string $call_acl (optional)
     * @param  string $call_acl2 (optional)
     * @param  bool $call_acl_exists (optional)
     * @param  string $extension (optional)
     * @param  string $extension2 (optional)
     * @param  bool $extension_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $language (optional)
     * @param  string $language2 (optional)
     * @param  bool $language_exists (optional)
     * @param  string $lastname (optional)
     * @param  string $lastname_end (optional)
     * @param  string $lastname_exact (optional)
     * @param  string $lastname_partial (optional)
     * @param  string $lastname_start (optional)
     * @param  string $location (optional)
     * @param  string $location2 (optional)
     * @param  bool $location_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi_rule (optional)
     * @param  string $outgoing_ddi_rule2 (optional)
     * @param  bool $outgoing_ddi_rule_exists (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  string $terminal (optional)
     * @param  string $terminal2 (optional)
     * @param  bool $terminal_exists (optional)
     * @param  string $timezone (optional)
     * @param  string $timezone2 (optional)
     * @param  bool $timezone_exists (optional)
     * @param  string $transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists (optional)
     * @param  string $voicemail_locution (optional)
     * @param  string $voicemail_locution2 (optional)
     * @param  bool $voicemail_locution_exists (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_lastname (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\UserCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserCollectionWithHttpInfo($boss_assistant = null, $boss_assistant_white_list = null, $boss_assistant_white_list2 = null, $boss_assistant_white_list_exists = null, $boss_assistant2 = null, $boss_assistant_exists = null, $call_acl = null, $call_acl2 = null, $call_acl_exists = null, $extension = null, $extension2 = null, $extension_exists = null, $id_exact = null, $language = null, $language2 = null, $language_exists = null, $lastname = null, $lastname_end = null, $lastname_exact = null, $lastname_partial = null, $lastname_start = null, $location = null, $location2 = null, $location_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi_rule = null, $outgoing_ddi_rule2 = null, $outgoing_ddi_rule_exists = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $terminal = null, $terminal2 = null, $terminal_exists = null, $timezone = null, $timezone2 = null, $timezone_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $voicemail_locution = null, $voicemail_locution2 = null, $voicemail_locution_exists = null, $_order_id = null, $_order_lastname = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\UserCollection[]';
        $request = $this->getUserCollectionRequest($boss_assistant, $boss_assistant_white_list, $boss_assistant_white_list2, $boss_assistant_white_list_exists, $boss_assistant2, $boss_assistant_exists, $call_acl, $call_acl2, $call_acl_exists, $extension, $extension2, $extension_exists, $id_exact, $language, $language2, $language_exists, $lastname, $lastname_end, $lastname_exact, $lastname_partial, $lastname_start, $location, $location2, $location_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $outgoing_ddi, $outgoing_ddi_rule, $outgoing_ddi_rule2, $outgoing_ddi_rule_exists, $outgoing_ddi2, $outgoing_ddi_exists, $terminal, $terminal2, $terminal_exists, $timezone, $timezone2, $timezone_exists, $transformation_rule_set, $transformation_rule_set2, $transformation_rule_set_exists, $voicemail_locution, $voicemail_locution2, $voicemail_locution_exists, $_order_id, $_order_lastname, $_order_name, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\UserCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUserCollectionAsync
     *
     * Retrieves the collection of User resources.
     *
     * @param  string $boss_assistant (optional)
     * @param  string $boss_assistant_white_list (optional)
     * @param  string $boss_assistant_white_list2 (optional)
     * @param  bool $boss_assistant_white_list_exists (optional)
     * @param  string $boss_assistant2 (optional)
     * @param  bool $boss_assistant_exists (optional)
     * @param  string $call_acl (optional)
     * @param  string $call_acl2 (optional)
     * @param  bool $call_acl_exists (optional)
     * @param  string $extension (optional)
     * @param  string $extension2 (optional)
     * @param  bool $extension_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $language (optional)
     * @param  string $language2 (optional)
     * @param  bool $language_exists (optional)
     * @param  string $lastname (optional)
     * @param  string $lastname_end (optional)
     * @param  string $lastname_exact (optional)
     * @param  string $lastname_partial (optional)
     * @param  string $lastname_start (optional)
     * @param  string $location (optional)
     * @param  string $location2 (optional)
     * @param  bool $location_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi_rule (optional)
     * @param  string $outgoing_ddi_rule2 (optional)
     * @param  bool $outgoing_ddi_rule_exists (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  string $terminal (optional)
     * @param  string $terminal2 (optional)
     * @param  bool $terminal_exists (optional)
     * @param  string $timezone (optional)
     * @param  string $timezone2 (optional)
     * @param  bool $timezone_exists (optional)
     * @param  string $transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists (optional)
     * @param  string $voicemail_locution (optional)
     * @param  string $voicemail_locution2 (optional)
     * @param  bool $voicemail_locution_exists (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_lastname (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserCollectionAsync($boss_assistant = null, $boss_assistant_white_list = null, $boss_assistant_white_list2 = null, $boss_assistant_white_list_exists = null, $boss_assistant2 = null, $boss_assistant_exists = null, $call_acl = null, $call_acl2 = null, $call_acl_exists = null, $extension = null, $extension2 = null, $extension_exists = null, $id_exact = null, $language = null, $language2 = null, $language_exists = null, $lastname = null, $lastname_end = null, $lastname_exact = null, $lastname_partial = null, $lastname_start = null, $location = null, $location2 = null, $location_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi_rule = null, $outgoing_ddi_rule2 = null, $outgoing_ddi_rule_exists = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $terminal = null, $terminal2 = null, $terminal_exists = null, $timezone = null, $timezone2 = null, $timezone_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $voicemail_locution = null, $voicemail_locution2 = null, $voicemail_locution_exists = null, $_order_id = null, $_order_lastname = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getUserCollectionAsyncWithHttpInfo($boss_assistant, $boss_assistant_white_list, $boss_assistant_white_list2, $boss_assistant_white_list_exists, $boss_assistant2, $boss_assistant_exists, $call_acl, $call_acl2, $call_acl_exists, $extension, $extension2, $extension_exists, $id_exact, $language, $language2, $language_exists, $lastname, $lastname_end, $lastname_exact, $lastname_partial, $lastname_start, $location, $location2, $location_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $outgoing_ddi, $outgoing_ddi_rule, $outgoing_ddi_rule2, $outgoing_ddi_rule_exists, $outgoing_ddi2, $outgoing_ddi_exists, $terminal, $terminal2, $terminal_exists, $timezone, $timezone2, $timezone_exists, $transformation_rule_set, $transformation_rule_set2, $transformation_rule_set_exists, $voicemail_locution, $voicemail_locution2, $voicemail_locution_exists, $_order_id, $_order_lastname, $_order_name, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUserCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of User resources.
     *
     * @param  string $boss_assistant (optional)
     * @param  string $boss_assistant_white_list (optional)
     * @param  string $boss_assistant_white_list2 (optional)
     * @param  bool $boss_assistant_white_list_exists (optional)
     * @param  string $boss_assistant2 (optional)
     * @param  bool $boss_assistant_exists (optional)
     * @param  string $call_acl (optional)
     * @param  string $call_acl2 (optional)
     * @param  bool $call_acl_exists (optional)
     * @param  string $extension (optional)
     * @param  string $extension2 (optional)
     * @param  bool $extension_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $language (optional)
     * @param  string $language2 (optional)
     * @param  bool $language_exists (optional)
     * @param  string $lastname (optional)
     * @param  string $lastname_end (optional)
     * @param  string $lastname_exact (optional)
     * @param  string $lastname_partial (optional)
     * @param  string $lastname_start (optional)
     * @param  string $location (optional)
     * @param  string $location2 (optional)
     * @param  bool $location_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi_rule (optional)
     * @param  string $outgoing_ddi_rule2 (optional)
     * @param  bool $outgoing_ddi_rule_exists (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  string $terminal (optional)
     * @param  string $terminal2 (optional)
     * @param  bool $terminal_exists (optional)
     * @param  string $timezone (optional)
     * @param  string $timezone2 (optional)
     * @param  bool $timezone_exists (optional)
     * @param  string $transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists (optional)
     * @param  string $voicemail_locution (optional)
     * @param  string $voicemail_locution2 (optional)
     * @param  bool $voicemail_locution_exists (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_lastname (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserCollectionAsyncWithHttpInfo($boss_assistant = null, $boss_assistant_white_list = null, $boss_assistant_white_list2 = null, $boss_assistant_white_list_exists = null, $boss_assistant2 = null, $boss_assistant_exists = null, $call_acl = null, $call_acl2 = null, $call_acl_exists = null, $extension = null, $extension2 = null, $extension_exists = null, $id_exact = null, $language = null, $language2 = null, $language_exists = null, $lastname = null, $lastname_end = null, $lastname_exact = null, $lastname_partial = null, $lastname_start = null, $location = null, $location2 = null, $location_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi_rule = null, $outgoing_ddi_rule2 = null, $outgoing_ddi_rule_exists = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $terminal = null, $terminal2 = null, $terminal_exists = null, $timezone = null, $timezone2 = null, $timezone_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $voicemail_locution = null, $voicemail_locution2 = null, $voicemail_locution_exists = null, $_order_id = null, $_order_lastname = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Ivz\Client\Model\UserCollection[]';
        $request = $this->getUserCollectionRequest($boss_assistant, $boss_assistant_white_list, $boss_assistant_white_list2, $boss_assistant_white_list_exists, $boss_assistant2, $boss_assistant_exists, $call_acl, $call_acl2, $call_acl_exists, $extension, $extension2, $extension_exists, $id_exact, $language, $language2, $language_exists, $lastname, $lastname_end, $lastname_exact, $lastname_partial, $lastname_start, $location, $location2, $location_exists, $name, $name_end, $name_exact, $name_partial, $name_start, $outgoing_ddi, $outgoing_ddi_rule, $outgoing_ddi_rule2, $outgoing_ddi_rule_exists, $outgoing_ddi2, $outgoing_ddi_exists, $terminal, $terminal2, $terminal_exists, $timezone, $timezone2, $timezone_exists, $transformation_rule_set, $transformation_rule_set2, $transformation_rule_set_exists, $voicemail_locution, $voicemail_locution2, $voicemail_locution_exists, $_order_id, $_order_lastname, $_order_name, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUserCollection'
     *
     * @param  string $boss_assistant (optional)
     * @param  string $boss_assistant_white_list (optional)
     * @param  string $boss_assistant_white_list2 (optional)
     * @param  bool $boss_assistant_white_list_exists (optional)
     * @param  string $boss_assistant2 (optional)
     * @param  bool $boss_assistant_exists (optional)
     * @param  string $call_acl (optional)
     * @param  string $call_acl2 (optional)
     * @param  bool $call_acl_exists (optional)
     * @param  string $extension (optional)
     * @param  string $extension2 (optional)
     * @param  bool $extension_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $language (optional)
     * @param  string $language2 (optional)
     * @param  bool $language_exists (optional)
     * @param  string $lastname (optional)
     * @param  string $lastname_end (optional)
     * @param  string $lastname_exact (optional)
     * @param  string $lastname_partial (optional)
     * @param  string $lastname_start (optional)
     * @param  string $location (optional)
     * @param  string $location2 (optional)
     * @param  bool $location_exists (optional)
     * @param  string $name (optional)
     * @param  string $name_end (optional)
     * @param  string $name_exact (optional)
     * @param  string $name_partial (optional)
     * @param  string $name_start (optional)
     * @param  string $outgoing_ddi (optional)
     * @param  string $outgoing_ddi_rule (optional)
     * @param  string $outgoing_ddi_rule2 (optional)
     * @param  bool $outgoing_ddi_rule_exists (optional)
     * @param  string $outgoing_ddi2 (optional)
     * @param  bool $outgoing_ddi_exists (optional)
     * @param  string $terminal (optional)
     * @param  string $terminal2 (optional)
     * @param  bool $terminal_exists (optional)
     * @param  string $timezone (optional)
     * @param  string $timezone2 (optional)
     * @param  bool $timezone_exists (optional)
     * @param  string $transformation_rule_set (optional)
     * @param  string $transformation_rule_set2 (optional)
     * @param  bool $transformation_rule_set_exists (optional)
     * @param  string $voicemail_locution (optional)
     * @param  string $voicemail_locution2 (optional)
     * @param  bool $voicemail_locution_exists (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_lastname (optional)
     * @param  string $_order_name (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getUserCollectionRequest($boss_assistant = null, $boss_assistant_white_list = null, $boss_assistant_white_list2 = null, $boss_assistant_white_list_exists = null, $boss_assistant2 = null, $boss_assistant_exists = null, $call_acl = null, $call_acl2 = null, $call_acl_exists = null, $extension = null, $extension2 = null, $extension_exists = null, $id_exact = null, $language = null, $language2 = null, $language_exists = null, $lastname = null, $lastname_end = null, $lastname_exact = null, $lastname_partial = null, $lastname_start = null, $location = null, $location2 = null, $location_exists = null, $name = null, $name_end = null, $name_exact = null, $name_partial = null, $name_start = null, $outgoing_ddi = null, $outgoing_ddi_rule = null, $outgoing_ddi_rule2 = null, $outgoing_ddi_rule_exists = null, $outgoing_ddi2 = null, $outgoing_ddi_exists = null, $terminal = null, $terminal2 = null, $terminal_exists = null, $timezone = null, $timezone2 = null, $timezone_exists = null, $transformation_rule_set = null, $transformation_rule_set2 = null, $transformation_rule_set_exists = null, $voicemail_locution = null, $voicemail_locution2 = null, $voicemail_locution_exists = null, $_order_id = null, $_order_lastname = null, $_order_name = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($boss_assistant !== null) {
            $queryParams['bossAssistant'] = ObjectSerializer::toQueryValue($boss_assistant);
        }
        // query params
        if ($boss_assistant_white_list !== null) {
            $queryParams['bossAssistantWhiteList'] = ObjectSerializer::toQueryValue($boss_assistant_white_list);
        }
        // query params
        if ($boss_assistant_white_list2 !== null) {
            $queryParams['bossAssistantWhiteList[]'] = ObjectSerializer::toQueryValue($boss_assistant_white_list2);
        }
        // query params
        if ($boss_assistant_white_list_exists !== null) {
            $queryParams['bossAssistantWhiteList[exists]'] = ObjectSerializer::toQueryValue($boss_assistant_white_list_exists);
        }
        // query params
        if ($boss_assistant2 !== null) {
            $queryParams['bossAssistant[]'] = ObjectSerializer::toQueryValue($boss_assistant2);
        }
        // query params
        if ($boss_assistant_exists !== null) {
            $queryParams['bossAssistant[exists]'] = ObjectSerializer::toQueryValue($boss_assistant_exists);
        }
        // query params
        if ($call_acl !== null) {
            $queryParams['callAcl'] = ObjectSerializer::toQueryValue($call_acl);
        }
        // query params
        if ($call_acl2 !== null) {
            $queryParams['callAcl[]'] = ObjectSerializer::toQueryValue($call_acl2);
        }
        // query params
        if ($call_acl_exists !== null) {
            $queryParams['callAcl[exists]'] = ObjectSerializer::toQueryValue($call_acl_exists);
        }
        // query params
        if ($extension !== null) {
            $queryParams['extension'] = ObjectSerializer::toQueryValue($extension);
        }
        // query params
        if ($extension2 !== null) {
            $queryParams['extension[]'] = ObjectSerializer::toQueryValue($extension2);
        }
        // query params
        if ($extension_exists !== null) {
            $queryParams['extension[exists]'] = ObjectSerializer::toQueryValue($extension_exists);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($language2 !== null) {
            $queryParams['language[]'] = ObjectSerializer::toQueryValue($language2);
        }
        // query params
        if ($language_exists !== null) {
            $queryParams['language[exists]'] = ObjectSerializer::toQueryValue($language_exists);
        }
        // query params
        if ($lastname !== null) {
            $queryParams['lastname'] = ObjectSerializer::toQueryValue($lastname);
        }
        // query params
        if ($lastname_end !== null) {
            $queryParams['lastname[end]'] = ObjectSerializer::toQueryValue($lastname_end);
        }
        // query params
        if ($lastname_exact !== null) {
            $queryParams['lastname[exact]'] = ObjectSerializer::toQueryValue($lastname_exact);
        }
        // query params
        if ($lastname_partial !== null) {
            $queryParams['lastname[partial]'] = ObjectSerializer::toQueryValue($lastname_partial);
        }
        // query params
        if ($lastname_start !== null) {
            $queryParams['lastname[start]'] = ObjectSerializer::toQueryValue($lastname_start);
        }
        // query params
        if ($location !== null) {
            $queryParams['location'] = ObjectSerializer::toQueryValue($location);
        }
        // query params
        if ($location2 !== null) {
            $queryParams['location[]'] = ObjectSerializer::toQueryValue($location2);
        }
        // query params
        if ($location_exists !== null) {
            $queryParams['location[exists]'] = ObjectSerializer::toQueryValue($location_exists);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_end !== null) {
            $queryParams['name[end]'] = ObjectSerializer::toQueryValue($name_end);
        }
        // query params
        if ($name_exact !== null) {
            $queryParams['name[exact]'] = ObjectSerializer::toQueryValue($name_exact);
        }
        // query params
        if ($name_partial !== null) {
            $queryParams['name[partial]'] = ObjectSerializer::toQueryValue($name_partial);
        }
        // query params
        if ($name_start !== null) {
            $queryParams['name[start]'] = ObjectSerializer::toQueryValue($name_start);
        }
        // query params
        if ($outgoing_ddi !== null) {
            $queryParams['outgoingDdi'] = ObjectSerializer::toQueryValue($outgoing_ddi);
        }
        // query params
        if ($outgoing_ddi_rule !== null) {
            $queryParams['outgoingDdiRule'] = ObjectSerializer::toQueryValue($outgoing_ddi_rule);
        }
        // query params
        if ($outgoing_ddi_rule2 !== null) {
            $queryParams['outgoingDdiRule[]'] = ObjectSerializer::toQueryValue($outgoing_ddi_rule2);
        }
        // query params
        if ($outgoing_ddi_rule_exists !== null) {
            $queryParams['outgoingDdiRule[exists]'] = ObjectSerializer::toQueryValue($outgoing_ddi_rule_exists);
        }
        // query params
        if ($outgoing_ddi2 !== null) {
            $queryParams['outgoingDdi[]'] = ObjectSerializer::toQueryValue($outgoing_ddi2);
        }
        // query params
        if ($outgoing_ddi_exists !== null) {
            $queryParams['outgoingDdi[exists]'] = ObjectSerializer::toQueryValue($outgoing_ddi_exists);
        }
        // query params
        if ($terminal !== null) {
            $queryParams['terminal'] = ObjectSerializer::toQueryValue($terminal);
        }
        // query params
        if ($terminal2 !== null) {
            $queryParams['terminal[]'] = ObjectSerializer::toQueryValue($terminal2);
        }
        // query params
        if ($terminal_exists !== null) {
            $queryParams['terminal[exists]'] = ObjectSerializer::toQueryValue($terminal_exists);
        }
        // query params
        if ($timezone !== null) {
            $queryParams['timezone'] = ObjectSerializer::toQueryValue($timezone);
        }
        // query params
        if ($timezone2 !== null) {
            $queryParams['timezone[]'] = ObjectSerializer::toQueryValue($timezone2);
        }
        // query params
        if ($timezone_exists !== null) {
            $queryParams['timezone[exists]'] = ObjectSerializer::toQueryValue($timezone_exists);
        }
        // query params
        if ($transformation_rule_set !== null) {
            $queryParams['transformationRuleSet'] = ObjectSerializer::toQueryValue($transformation_rule_set);
        }
        // query params
        if ($transformation_rule_set2 !== null) {
            $queryParams['transformationRuleSet[]'] = ObjectSerializer::toQueryValue($transformation_rule_set2);
        }
        // query params
        if ($transformation_rule_set_exists !== null) {
            $queryParams['transformationRuleSet[exists]'] = ObjectSerializer::toQueryValue($transformation_rule_set_exists);
        }
        // query params
        if ($voicemail_locution !== null) {
            $queryParams['voicemailLocution'] = ObjectSerializer::toQueryValue($voicemail_locution);
        }
        // query params
        if ($voicemail_locution2 !== null) {
            $queryParams['voicemailLocution[]'] = ObjectSerializer::toQueryValue($voicemail_locution2);
        }
        // query params
        if ($voicemail_locution_exists !== null) {
            $queryParams['voicemailLocution[exists]'] = ObjectSerializer::toQueryValue($voicemail_locution_exists);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_lastname !== null) {
            $queryParams['_order[lastname]'] = ObjectSerializer::toQueryValue($_order_lastname);
        }
        // query params
        if ($_order_name !== null) {
            $queryParams['_order[name]'] = ObjectSerializer::toQueryValue($_order_name);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUserItem
     *
     * Retrieves a User resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\UserDetailed
     */
    public function getUserItem($id)
    {
        list($response) = $this->getUserItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getUserItemWithHttpInfo
     *
     * Retrieves a User resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\UserDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserItemWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\UserDetailed';
        $request = $this->getUserItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\UserDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUserItemAsync
     *
     * Retrieves a User resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserItemAsync($id)
    {
        return $this->getUserItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUserItemAsyncWithHttpInfo
     *
     * Retrieves a User resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Ivz\Client\Model\UserDetailed';
        $request = $this->getUserItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUserItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getUserItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getUserItem'
            );
        }

        $resourcePath = '/users/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation locutionEncodedfileLocutionItem
     *
     * Retrieves a Locution resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function locutionEncodedfileLocutionItem($id)
    {
        $this->locutionEncodedfileLocutionItemWithHttpInfo($id);
    }

    /**
     * Operation locutionEncodedfileLocutionItemWithHttpInfo
     *
     * Retrieves a Locution resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function locutionEncodedfileLocutionItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->locutionEncodedfileLocutionItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation locutionEncodedfileLocutionItemAsync
     *
     * Retrieves a Locution resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function locutionEncodedfileLocutionItemAsync($id)
    {
        return $this->locutionEncodedfileLocutionItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation locutionEncodedfileLocutionItemAsyncWithHttpInfo
     *
     * Retrieves a Locution resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function locutionEncodedfileLocutionItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->locutionEncodedfileLocutionItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'locutionEncodedfileLocutionItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function locutionEncodedfileLocutionItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling locutionEncodedfileLocutionItem'
            );
        }

        $resourcePath = '/locutions/{id}/encodedfile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation locutionOriginalfileLocutionItem
     *
     * Retrieves a Locution resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function locutionOriginalfileLocutionItem($id)
    {
        $this->locutionOriginalfileLocutionItemWithHttpInfo($id);
    }

    /**
     * Operation locutionOriginalfileLocutionItemWithHttpInfo
     *
     * Retrieves a Locution resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function locutionOriginalfileLocutionItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->locutionOriginalfileLocutionItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation locutionOriginalfileLocutionItemAsync
     *
     * Retrieves a Locution resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function locutionOriginalfileLocutionItemAsync($id)
    {
        return $this->locutionOriginalfileLocutionItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation locutionOriginalfileLocutionItemAsyncWithHttpInfo
     *
     * Retrieves a Locution resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function locutionOriginalfileLocutionItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->locutionOriginalfileLocutionItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'locutionOriginalfileLocutionItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function locutionOriginalfileLocutionItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling locutionOriginalfileLocutionItem'
            );
        }

        $resourcePath = '/locutions/{id}/originalfile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation musiconholdEncodedfileMusicOnHoldItem
     *
     * Retrieves a MusicOnHold resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function musiconholdEncodedfileMusicOnHoldItem($id)
    {
        $this->musiconholdEncodedfileMusicOnHoldItemWithHttpInfo($id);
    }

    /**
     * Operation musiconholdEncodedfileMusicOnHoldItemWithHttpInfo
     *
     * Retrieves a MusicOnHold resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function musiconholdEncodedfileMusicOnHoldItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->musiconholdEncodedfileMusicOnHoldItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation musiconholdEncodedfileMusicOnHoldItemAsync
     *
     * Retrieves a MusicOnHold resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function musiconholdEncodedfileMusicOnHoldItemAsync($id)
    {
        return $this->musiconholdEncodedfileMusicOnHoldItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation musiconholdEncodedfileMusicOnHoldItemAsyncWithHttpInfo
     *
     * Retrieves a MusicOnHold resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function musiconholdEncodedfileMusicOnHoldItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->musiconholdEncodedfileMusicOnHoldItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'musiconholdEncodedfileMusicOnHoldItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function musiconholdEncodedfileMusicOnHoldItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling musiconholdEncodedfileMusicOnHoldItem'
            );
        }

        $resourcePath = '/music_on_holds/{id}/encodedfile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation musiconholdOriginalfileMusicOnHoldItem
     *
     * Retrieves a MusicOnHold resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function musiconholdOriginalfileMusicOnHoldItem($id)
    {
        $this->musiconholdOriginalfileMusicOnHoldItemWithHttpInfo($id);
    }

    /**
     * Operation musiconholdOriginalfileMusicOnHoldItemWithHttpInfo
     *
     * Retrieves a MusicOnHold resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function musiconholdOriginalfileMusicOnHoldItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->musiconholdOriginalfileMusicOnHoldItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation musiconholdOriginalfileMusicOnHoldItemAsync
     *
     * Retrieves a MusicOnHold resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function musiconholdOriginalfileMusicOnHoldItemAsync($id)
    {
        return $this->musiconholdOriginalfileMusicOnHoldItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation musiconholdOriginalfileMusicOnHoldItemAsyncWithHttpInfo
     *
     * Retrieves a MusicOnHold resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function musiconholdOriginalfileMusicOnHoldItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->musiconholdOriginalfileMusicOnHoldItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'musiconholdOriginalfileMusicOnHoldItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function musiconholdOriginalfileMusicOnHoldItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling musiconholdOriginalfileMusicOnHoldItem'
            );
        }

        $resourcePath = '/music_on_holds/{id}/originalfile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCalendarCollection
     *
     * Creates a Calendar resource.
     *
     * @param  \Ivz\Client\Model\Calendar $calendar The new Calendar resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\Calendar
     */
    public function postCalendarCollection($calendar = null)
    {
        list($response) = $this->postCalendarCollectionWithHttpInfo($calendar);
        return $response;
    }

    /**
     * Operation postCalendarCollectionWithHttpInfo
     *
     * Creates a Calendar resource.
     *
     * @param  \Ivz\Client\Model\Calendar $calendar The new Calendar resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\Calendar, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCalendarCollectionWithHttpInfo($calendar = null)
    {
        $returnType = '\Ivz\Client\Model\Calendar';
        $request = $this->postCalendarCollectionRequest($calendar);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\Calendar',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postCalendarCollectionAsync
     *
     * Creates a Calendar resource.
     *
     * @param  \Ivz\Client\Model\Calendar $calendar The new Calendar resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCalendarCollectionAsync($calendar = null)
    {
        return $this->postCalendarCollectionAsyncWithHttpInfo($calendar)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCalendarCollectionAsyncWithHttpInfo
     *
     * Creates a Calendar resource.
     *
     * @param  \Ivz\Client\Model\Calendar $calendar The new Calendar resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCalendarCollectionAsyncWithHttpInfo($calendar = null)
    {
        $returnType = '\Ivz\Client\Model\Calendar';
        $request = $this->postCalendarCollectionRequest($calendar);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCalendarCollection'
     *
     * @param  \Ivz\Client\Model\Calendar $calendar The new Calendar resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postCalendarCollectionRequest($calendar = null)
    {

        $resourcePath = '/calendars';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($calendar)) {
            $_tempBody = $calendar;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCalendarPeriodCollection
     *
     * Creates a CalendarPeriod resource.
     *
     * @param  \Ivz\Client\Model\CalendarPeriod $calendar_period The new CalendarPeriod resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CalendarPeriod
     */
    public function postCalendarPeriodCollection($calendar_period = null)
    {
        list($response) = $this->postCalendarPeriodCollectionWithHttpInfo($calendar_period);
        return $response;
    }

    /**
     * Operation postCalendarPeriodCollectionWithHttpInfo
     *
     * Creates a CalendarPeriod resource.
     *
     * @param  \Ivz\Client\Model\CalendarPeriod $calendar_period The new CalendarPeriod resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CalendarPeriod, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCalendarPeriodCollectionWithHttpInfo($calendar_period = null)
    {
        $returnType = '\Ivz\Client\Model\CalendarPeriod';
        $request = $this->postCalendarPeriodCollectionRequest($calendar_period);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CalendarPeriod',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postCalendarPeriodCollectionAsync
     *
     * Creates a CalendarPeriod resource.
     *
     * @param  \Ivz\Client\Model\CalendarPeriod $calendar_period The new CalendarPeriod resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCalendarPeriodCollectionAsync($calendar_period = null)
    {
        return $this->postCalendarPeriodCollectionAsyncWithHttpInfo($calendar_period)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCalendarPeriodCollectionAsyncWithHttpInfo
     *
     * Creates a CalendarPeriod resource.
     *
     * @param  \Ivz\Client\Model\CalendarPeriod $calendar_period The new CalendarPeriod resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCalendarPeriodCollectionAsyncWithHttpInfo($calendar_period = null)
    {
        $returnType = '\Ivz\Client\Model\CalendarPeriod';
        $request = $this->postCalendarPeriodCollectionRequest($calendar_period);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCalendarPeriodCollection'
     *
     * @param  \Ivz\Client\Model\CalendarPeriod $calendar_period The new CalendarPeriod resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postCalendarPeriodCollectionRequest($calendar_period = null)
    {

        $resourcePath = '/calendar_periods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($calendar_period)) {
            $_tempBody = $calendar_period;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCalendarPeriodsRelScheduleCollection
     *
     * Creates a CalendarPeriodsRelSchedule resource.
     *
     * @param  \Ivz\Client\Model\CalendarPeriodsRelSchedule $calendar_periods_rel_schedule The new CalendarPeriodsRelSchedule resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CalendarPeriodsRelSchedule
     */
    public function postCalendarPeriodsRelScheduleCollection($calendar_periods_rel_schedule = null)
    {
        list($response) = $this->postCalendarPeriodsRelScheduleCollectionWithHttpInfo($calendar_periods_rel_schedule);
        return $response;
    }

    /**
     * Operation postCalendarPeriodsRelScheduleCollectionWithHttpInfo
     *
     * Creates a CalendarPeriodsRelSchedule resource.
     *
     * @param  \Ivz\Client\Model\CalendarPeriodsRelSchedule $calendar_periods_rel_schedule The new CalendarPeriodsRelSchedule resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CalendarPeriodsRelSchedule, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCalendarPeriodsRelScheduleCollectionWithHttpInfo($calendar_periods_rel_schedule = null)
    {
        $returnType = '\Ivz\Client\Model\CalendarPeriodsRelSchedule';
        $request = $this->postCalendarPeriodsRelScheduleCollectionRequest($calendar_periods_rel_schedule);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CalendarPeriodsRelSchedule',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postCalendarPeriodsRelScheduleCollectionAsync
     *
     * Creates a CalendarPeriodsRelSchedule resource.
     *
     * @param  \Ivz\Client\Model\CalendarPeriodsRelSchedule $calendar_periods_rel_schedule The new CalendarPeriodsRelSchedule resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCalendarPeriodsRelScheduleCollectionAsync($calendar_periods_rel_schedule = null)
    {
        return $this->postCalendarPeriodsRelScheduleCollectionAsyncWithHttpInfo($calendar_periods_rel_schedule)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCalendarPeriodsRelScheduleCollectionAsyncWithHttpInfo
     *
     * Creates a CalendarPeriodsRelSchedule resource.
     *
     * @param  \Ivz\Client\Model\CalendarPeriodsRelSchedule $calendar_periods_rel_schedule The new CalendarPeriodsRelSchedule resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCalendarPeriodsRelScheduleCollectionAsyncWithHttpInfo($calendar_periods_rel_schedule = null)
    {
        $returnType = '\Ivz\Client\Model\CalendarPeriodsRelSchedule';
        $request = $this->postCalendarPeriodsRelScheduleCollectionRequest($calendar_periods_rel_schedule);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCalendarPeriodsRelScheduleCollection'
     *
     * @param  \Ivz\Client\Model\CalendarPeriodsRelSchedule $calendar_periods_rel_schedule The new CalendarPeriodsRelSchedule resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postCalendarPeriodsRelScheduleCollectionRequest($calendar_periods_rel_schedule = null)
    {

        $resourcePath = '/calendar_periods_rel_schedules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($calendar_periods_rel_schedule)) {
            $_tempBody = $calendar_periods_rel_schedule;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCallAclCollection
     *
     * Creates a CallAcl resource.
     *
     * @param  \Ivz\Client\Model\CallAcl $call_acl The new CallAcl resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CallAcl
     */
    public function postCallAclCollection($call_acl = null)
    {
        list($response) = $this->postCallAclCollectionWithHttpInfo($call_acl);
        return $response;
    }

    /**
     * Operation postCallAclCollectionWithHttpInfo
     *
     * Creates a CallAcl resource.
     *
     * @param  \Ivz\Client\Model\CallAcl $call_acl The new CallAcl resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CallAcl, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCallAclCollectionWithHttpInfo($call_acl = null)
    {
        $returnType = '\Ivz\Client\Model\CallAcl';
        $request = $this->postCallAclCollectionRequest($call_acl);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CallAcl',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postCallAclCollectionAsync
     *
     * Creates a CallAcl resource.
     *
     * @param  \Ivz\Client\Model\CallAcl $call_acl The new CallAcl resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCallAclCollectionAsync($call_acl = null)
    {
        return $this->postCallAclCollectionAsyncWithHttpInfo($call_acl)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCallAclCollectionAsyncWithHttpInfo
     *
     * Creates a CallAcl resource.
     *
     * @param  \Ivz\Client\Model\CallAcl $call_acl The new CallAcl resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCallAclCollectionAsyncWithHttpInfo($call_acl = null)
    {
        $returnType = '\Ivz\Client\Model\CallAcl';
        $request = $this->postCallAclCollectionRequest($call_acl);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCallAclCollection'
     *
     * @param  \Ivz\Client\Model\CallAcl $call_acl The new CallAcl resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postCallAclCollectionRequest($call_acl = null)
    {

        $resourcePath = '/call_acls';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($call_acl)) {
            $_tempBody = $call_acl;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCallAclRelMatchListCollection
     *
     * Creates a CallAclRelMatchList resource.
     *
     * @param  \Ivz\Client\Model\CallAclRelMatchList $call_acl_rel_match_list The new CallAclRelMatchList resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CallAclRelMatchList
     */
    public function postCallAclRelMatchListCollection($call_acl_rel_match_list = null)
    {
        list($response) = $this->postCallAclRelMatchListCollectionWithHttpInfo($call_acl_rel_match_list);
        return $response;
    }

    /**
     * Operation postCallAclRelMatchListCollectionWithHttpInfo
     *
     * Creates a CallAclRelMatchList resource.
     *
     * @param  \Ivz\Client\Model\CallAclRelMatchList $call_acl_rel_match_list The new CallAclRelMatchList resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CallAclRelMatchList, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCallAclRelMatchListCollectionWithHttpInfo($call_acl_rel_match_list = null)
    {
        $returnType = '\Ivz\Client\Model\CallAclRelMatchList';
        $request = $this->postCallAclRelMatchListCollectionRequest($call_acl_rel_match_list);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CallAclRelMatchList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postCallAclRelMatchListCollectionAsync
     *
     * Creates a CallAclRelMatchList resource.
     *
     * @param  \Ivz\Client\Model\CallAclRelMatchList $call_acl_rel_match_list The new CallAclRelMatchList resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCallAclRelMatchListCollectionAsync($call_acl_rel_match_list = null)
    {
        return $this->postCallAclRelMatchListCollectionAsyncWithHttpInfo($call_acl_rel_match_list)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCallAclRelMatchListCollectionAsyncWithHttpInfo
     *
     * Creates a CallAclRelMatchList resource.
     *
     * @param  \Ivz\Client\Model\CallAclRelMatchList $call_acl_rel_match_list The new CallAclRelMatchList resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCallAclRelMatchListCollectionAsyncWithHttpInfo($call_acl_rel_match_list = null)
    {
        $returnType = '\Ivz\Client\Model\CallAclRelMatchList';
        $request = $this->postCallAclRelMatchListCollectionRequest($call_acl_rel_match_list);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCallAclRelMatchListCollection'
     *
     * @param  \Ivz\Client\Model\CallAclRelMatchList $call_acl_rel_match_list The new CallAclRelMatchList resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postCallAclRelMatchListCollectionRequest($call_acl_rel_match_list = null)
    {

        $resourcePath = '/call_acl_rel_match_lists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($call_acl_rel_match_list)) {
            $_tempBody = $call_acl_rel_match_list;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCallCsvSchedulerCollection
     *
     * Creates a CallCsvScheduler resource.
     *
     * @param  \Ivz\Client\Model\CallCsvScheduler $call_csv_scheduler The new CallCsvScheduler resource (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CallCsvScheduler
     */
    public function postCallCsvSchedulerCollection($call_csv_scheduler = null, $_timezone = null)
    {
        list($response) = $this->postCallCsvSchedulerCollectionWithHttpInfo($call_csv_scheduler, $_timezone);
        return $response;
    }

    /**
     * Operation postCallCsvSchedulerCollectionWithHttpInfo
     *
     * Creates a CallCsvScheduler resource.
     *
     * @param  \Ivz\Client\Model\CallCsvScheduler $call_csv_scheduler The new CallCsvScheduler resource (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CallCsvScheduler, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCallCsvSchedulerCollectionWithHttpInfo($call_csv_scheduler = null, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\CallCsvScheduler';
        $request = $this->postCallCsvSchedulerCollectionRequest($call_csv_scheduler, $_timezone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CallCsvScheduler',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postCallCsvSchedulerCollectionAsync
     *
     * Creates a CallCsvScheduler resource.
     *
     * @param  \Ivz\Client\Model\CallCsvScheduler $call_csv_scheduler The new CallCsvScheduler resource (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCallCsvSchedulerCollectionAsync($call_csv_scheduler = null, $_timezone = null)
    {
        return $this->postCallCsvSchedulerCollectionAsyncWithHttpInfo($call_csv_scheduler, $_timezone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCallCsvSchedulerCollectionAsyncWithHttpInfo
     *
     * Creates a CallCsvScheduler resource.
     *
     * @param  \Ivz\Client\Model\CallCsvScheduler $call_csv_scheduler The new CallCsvScheduler resource (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCallCsvSchedulerCollectionAsyncWithHttpInfo($call_csv_scheduler = null, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\CallCsvScheduler';
        $request = $this->postCallCsvSchedulerCollectionRequest($call_csv_scheduler, $_timezone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCallCsvSchedulerCollection'
     *
     * @param  \Ivz\Client\Model\CallCsvScheduler $call_csv_scheduler The new CallCsvScheduler resource (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postCallCsvSchedulerCollectionRequest($call_csv_scheduler = null, $_timezone = null)
    {

        $resourcePath = '/call_csv_schedulers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_timezone !== null) {
            $queryParams['_timezone'] = ObjectSerializer::toQueryValue($_timezone);
        }


        // body params
        $_tempBody = null;
        if (isset($call_csv_scheduler)) {
            $_tempBody = $call_csv_scheduler;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCallForwardSettingCollection
     *
     * Creates a CallForwardSetting resource.
     *
     * @param  \Ivz\Client\Model\CallForwardSetting $call_forward_setting The new CallForwardSetting resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CallForwardSetting
     */
    public function postCallForwardSettingCollection($call_forward_setting = null)
    {
        list($response) = $this->postCallForwardSettingCollectionWithHttpInfo($call_forward_setting);
        return $response;
    }

    /**
     * Operation postCallForwardSettingCollectionWithHttpInfo
     *
     * Creates a CallForwardSetting resource.
     *
     * @param  \Ivz\Client\Model\CallForwardSetting $call_forward_setting The new CallForwardSetting resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CallForwardSetting, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCallForwardSettingCollectionWithHttpInfo($call_forward_setting = null)
    {
        $returnType = '\Ivz\Client\Model\CallForwardSetting';
        $request = $this->postCallForwardSettingCollectionRequest($call_forward_setting);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CallForwardSetting',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postCallForwardSettingCollectionAsync
     *
     * Creates a CallForwardSetting resource.
     *
     * @param  \Ivz\Client\Model\CallForwardSetting $call_forward_setting The new CallForwardSetting resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCallForwardSettingCollectionAsync($call_forward_setting = null)
    {
        return $this->postCallForwardSettingCollectionAsyncWithHttpInfo($call_forward_setting)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCallForwardSettingCollectionAsyncWithHttpInfo
     *
     * Creates a CallForwardSetting resource.
     *
     * @param  \Ivz\Client\Model\CallForwardSetting $call_forward_setting The new CallForwardSetting resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCallForwardSettingCollectionAsyncWithHttpInfo($call_forward_setting = null)
    {
        $returnType = '\Ivz\Client\Model\CallForwardSetting';
        $request = $this->postCallForwardSettingCollectionRequest($call_forward_setting);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCallForwardSettingCollection'
     *
     * @param  \Ivz\Client\Model\CallForwardSetting $call_forward_setting The new CallForwardSetting resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postCallForwardSettingCollectionRequest($call_forward_setting = null)
    {

        $resourcePath = '/call_forward_settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($call_forward_setting)) {
            $_tempBody = $call_forward_setting;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCompanyServiceCollection
     *
     * Creates a CompanyService resource.
     *
     * @param  \Ivz\Client\Model\CompanyService $company_service The new CompanyService resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CompanyService
     */
    public function postCompanyServiceCollection($company_service = null)
    {
        list($response) = $this->postCompanyServiceCollectionWithHttpInfo($company_service);
        return $response;
    }

    /**
     * Operation postCompanyServiceCollectionWithHttpInfo
     *
     * Creates a CompanyService resource.
     *
     * @param  \Ivz\Client\Model\CompanyService $company_service The new CompanyService resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CompanyService, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCompanyServiceCollectionWithHttpInfo($company_service = null)
    {
        $returnType = '\Ivz\Client\Model\CompanyService';
        $request = $this->postCompanyServiceCollectionRequest($company_service);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CompanyService',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postCompanyServiceCollectionAsync
     *
     * Creates a CompanyService resource.
     *
     * @param  \Ivz\Client\Model\CompanyService $company_service The new CompanyService resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCompanyServiceCollectionAsync($company_service = null)
    {
        return $this->postCompanyServiceCollectionAsyncWithHttpInfo($company_service)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCompanyServiceCollectionAsyncWithHttpInfo
     *
     * Creates a CompanyService resource.
     *
     * @param  \Ivz\Client\Model\CompanyService $company_service The new CompanyService resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCompanyServiceCollectionAsyncWithHttpInfo($company_service = null)
    {
        $returnType = '\Ivz\Client\Model\CompanyService';
        $request = $this->postCompanyServiceCollectionRequest($company_service);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCompanyServiceCollection'
     *
     * @param  \Ivz\Client\Model\CompanyService $company_service The new CompanyService resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postCompanyServiceCollectionRequest($company_service = null)
    {

        $resourcePath = '/company_services';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($company_service)) {
            $_tempBody = $company_service;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postConditionalRouteCollection
     *
     * Creates a ConditionalRoute resource.
     *
     * @param  \Ivz\Client\Model\ConditionalRoute $conditional_route The new ConditionalRoute resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ConditionalRoute
     */
    public function postConditionalRouteCollection($conditional_route = null)
    {
        list($response) = $this->postConditionalRouteCollectionWithHttpInfo($conditional_route);
        return $response;
    }

    /**
     * Operation postConditionalRouteCollectionWithHttpInfo
     *
     * Creates a ConditionalRoute resource.
     *
     * @param  \Ivz\Client\Model\ConditionalRoute $conditional_route The new ConditionalRoute resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ConditionalRoute, HTTP status code, HTTP response headers (array of strings)
     */
    public function postConditionalRouteCollectionWithHttpInfo($conditional_route = null)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoute';
        $request = $this->postConditionalRouteCollectionRequest($conditional_route);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ConditionalRoute',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postConditionalRouteCollectionAsync
     *
     * Creates a ConditionalRoute resource.
     *
     * @param  \Ivz\Client\Model\ConditionalRoute $conditional_route The new ConditionalRoute resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postConditionalRouteCollectionAsync($conditional_route = null)
    {
        return $this->postConditionalRouteCollectionAsyncWithHttpInfo($conditional_route)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postConditionalRouteCollectionAsyncWithHttpInfo
     *
     * Creates a ConditionalRoute resource.
     *
     * @param  \Ivz\Client\Model\ConditionalRoute $conditional_route The new ConditionalRoute resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postConditionalRouteCollectionAsyncWithHttpInfo($conditional_route = null)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoute';
        $request = $this->postConditionalRouteCollectionRequest($conditional_route);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postConditionalRouteCollection'
     *
     * @param  \Ivz\Client\Model\ConditionalRoute $conditional_route The new ConditionalRoute resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postConditionalRouteCollectionRequest($conditional_route = null)
    {

        $resourcePath = '/conditional_routes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($conditional_route)) {
            $_tempBody = $conditional_route;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postConditionalRoutesConditionCollection
     *
     * Creates a ConditionalRoutesCondition resource.
     *
     * @param  \Ivz\Client\Model\ConditionalRoutesCondition $conditional_routes_condition The new ConditionalRoutesCondition resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ConditionalRoutesConditionWithInverseRelationships
     */
    public function postConditionalRoutesConditionCollection($conditional_routes_condition = null)
    {
        list($response) = $this->postConditionalRoutesConditionCollectionWithHttpInfo($conditional_routes_condition);
        return $response;
    }

    /**
     * Operation postConditionalRoutesConditionCollectionWithHttpInfo
     *
     * Creates a ConditionalRoutesCondition resource.
     *
     * @param  \Ivz\Client\Model\ConditionalRoutesCondition $conditional_routes_condition The new ConditionalRoutesCondition resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ConditionalRoutesConditionWithInverseRelationships, HTTP status code, HTTP response headers (array of strings)
     */
    public function postConditionalRoutesConditionCollectionWithHttpInfo($conditional_routes_condition = null)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoutesConditionWithInverseRelationships';
        $request = $this->postConditionalRoutesConditionCollectionRequest($conditional_routes_condition);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ConditionalRoutesConditionWithInverseRelationships',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postConditionalRoutesConditionCollectionAsync
     *
     * Creates a ConditionalRoutesCondition resource.
     *
     * @param  \Ivz\Client\Model\ConditionalRoutesCondition $conditional_routes_condition The new ConditionalRoutesCondition resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postConditionalRoutesConditionCollectionAsync($conditional_routes_condition = null)
    {
        return $this->postConditionalRoutesConditionCollectionAsyncWithHttpInfo($conditional_routes_condition)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postConditionalRoutesConditionCollectionAsyncWithHttpInfo
     *
     * Creates a ConditionalRoutesCondition resource.
     *
     * @param  \Ivz\Client\Model\ConditionalRoutesCondition $conditional_routes_condition The new ConditionalRoutesCondition resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postConditionalRoutesConditionCollectionAsyncWithHttpInfo($conditional_routes_condition = null)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoutesConditionWithInverseRelationships';
        $request = $this->postConditionalRoutesConditionCollectionRequest($conditional_routes_condition);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postConditionalRoutesConditionCollection'
     *
     * @param  \Ivz\Client\Model\ConditionalRoutesCondition $conditional_routes_condition The new ConditionalRoutesCondition resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postConditionalRoutesConditionCollectionRequest($conditional_routes_condition = null)
    {

        $resourcePath = '/conditional_routes_conditions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($conditional_routes_condition)) {
            $_tempBody = $conditional_routes_condition;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postConditionalRoutesConditionsRelCalendarCollection
     *
     * Creates a ConditionalRoutesConditionsRelCalendar resource.
     *
     * @param  \Ivz\Client\Model\ConditionalRoutesConditionsRelCalendar $conditional_routes_conditions_rel_calendar The new ConditionalRoutesConditionsRelCalendar resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ConditionalRoutesConditionsRelCalendar
     */
    public function postConditionalRoutesConditionsRelCalendarCollection($conditional_routes_conditions_rel_calendar = null)
    {
        list($response) = $this->postConditionalRoutesConditionsRelCalendarCollectionWithHttpInfo($conditional_routes_conditions_rel_calendar);
        return $response;
    }

    /**
     * Operation postConditionalRoutesConditionsRelCalendarCollectionWithHttpInfo
     *
     * Creates a ConditionalRoutesConditionsRelCalendar resource.
     *
     * @param  \Ivz\Client\Model\ConditionalRoutesConditionsRelCalendar $conditional_routes_conditions_rel_calendar The new ConditionalRoutesConditionsRelCalendar resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ConditionalRoutesConditionsRelCalendar, HTTP status code, HTTP response headers (array of strings)
     */
    public function postConditionalRoutesConditionsRelCalendarCollectionWithHttpInfo($conditional_routes_conditions_rel_calendar = null)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoutesConditionsRelCalendar';
        $request = $this->postConditionalRoutesConditionsRelCalendarCollectionRequest($conditional_routes_conditions_rel_calendar);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ConditionalRoutesConditionsRelCalendar',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postConditionalRoutesConditionsRelCalendarCollectionAsync
     *
     * Creates a ConditionalRoutesConditionsRelCalendar resource.
     *
     * @param  \Ivz\Client\Model\ConditionalRoutesConditionsRelCalendar $conditional_routes_conditions_rel_calendar The new ConditionalRoutesConditionsRelCalendar resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postConditionalRoutesConditionsRelCalendarCollectionAsync($conditional_routes_conditions_rel_calendar = null)
    {
        return $this->postConditionalRoutesConditionsRelCalendarCollectionAsyncWithHttpInfo($conditional_routes_conditions_rel_calendar)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postConditionalRoutesConditionsRelCalendarCollectionAsyncWithHttpInfo
     *
     * Creates a ConditionalRoutesConditionsRelCalendar resource.
     *
     * @param  \Ivz\Client\Model\ConditionalRoutesConditionsRelCalendar $conditional_routes_conditions_rel_calendar The new ConditionalRoutesConditionsRelCalendar resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postConditionalRoutesConditionsRelCalendarCollectionAsyncWithHttpInfo($conditional_routes_conditions_rel_calendar = null)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoutesConditionsRelCalendar';
        $request = $this->postConditionalRoutesConditionsRelCalendarCollectionRequest($conditional_routes_conditions_rel_calendar);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postConditionalRoutesConditionsRelCalendarCollection'
     *
     * @param  \Ivz\Client\Model\ConditionalRoutesConditionsRelCalendar $conditional_routes_conditions_rel_calendar The new ConditionalRoutesConditionsRelCalendar resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postConditionalRoutesConditionsRelCalendarCollectionRequest($conditional_routes_conditions_rel_calendar = null)
    {

        $resourcePath = '/conditional_routes_conditions_rel_calendars';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($conditional_routes_conditions_rel_calendar)) {
            $_tempBody = $conditional_routes_conditions_rel_calendar;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postConditionalRoutesConditionsRelMatchlistCollection
     *
     * Creates a ConditionalRoutesConditionsRelMatchlist resource.
     *
     * @param  \Ivz\Client\Model\ConditionalRoutesConditionsRelMatchlist $conditional_routes_conditions_rel_matchlist The new ConditionalRoutesConditionsRelMatchlist resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ConditionalRoutesConditionsRelMatchlist
     */
    public function postConditionalRoutesConditionsRelMatchlistCollection($conditional_routes_conditions_rel_matchlist = null)
    {
        list($response) = $this->postConditionalRoutesConditionsRelMatchlistCollectionWithHttpInfo($conditional_routes_conditions_rel_matchlist);
        return $response;
    }

    /**
     * Operation postConditionalRoutesConditionsRelMatchlistCollectionWithHttpInfo
     *
     * Creates a ConditionalRoutesConditionsRelMatchlist resource.
     *
     * @param  \Ivz\Client\Model\ConditionalRoutesConditionsRelMatchlist $conditional_routes_conditions_rel_matchlist The new ConditionalRoutesConditionsRelMatchlist resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ConditionalRoutesConditionsRelMatchlist, HTTP status code, HTTP response headers (array of strings)
     */
    public function postConditionalRoutesConditionsRelMatchlistCollectionWithHttpInfo($conditional_routes_conditions_rel_matchlist = null)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoutesConditionsRelMatchlist';
        $request = $this->postConditionalRoutesConditionsRelMatchlistCollectionRequest($conditional_routes_conditions_rel_matchlist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ConditionalRoutesConditionsRelMatchlist',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postConditionalRoutesConditionsRelMatchlistCollectionAsync
     *
     * Creates a ConditionalRoutesConditionsRelMatchlist resource.
     *
     * @param  \Ivz\Client\Model\ConditionalRoutesConditionsRelMatchlist $conditional_routes_conditions_rel_matchlist The new ConditionalRoutesConditionsRelMatchlist resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postConditionalRoutesConditionsRelMatchlistCollectionAsync($conditional_routes_conditions_rel_matchlist = null)
    {
        return $this->postConditionalRoutesConditionsRelMatchlistCollectionAsyncWithHttpInfo($conditional_routes_conditions_rel_matchlist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postConditionalRoutesConditionsRelMatchlistCollectionAsyncWithHttpInfo
     *
     * Creates a ConditionalRoutesConditionsRelMatchlist resource.
     *
     * @param  \Ivz\Client\Model\ConditionalRoutesConditionsRelMatchlist $conditional_routes_conditions_rel_matchlist The new ConditionalRoutesConditionsRelMatchlist resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postConditionalRoutesConditionsRelMatchlistCollectionAsyncWithHttpInfo($conditional_routes_conditions_rel_matchlist = null)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoutesConditionsRelMatchlist';
        $request = $this->postConditionalRoutesConditionsRelMatchlistCollectionRequest($conditional_routes_conditions_rel_matchlist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postConditionalRoutesConditionsRelMatchlistCollection'
     *
     * @param  \Ivz\Client\Model\ConditionalRoutesConditionsRelMatchlist $conditional_routes_conditions_rel_matchlist The new ConditionalRoutesConditionsRelMatchlist resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postConditionalRoutesConditionsRelMatchlistCollectionRequest($conditional_routes_conditions_rel_matchlist = null)
    {

        $resourcePath = '/conditional_routes_conditions_rel_matchlists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($conditional_routes_conditions_rel_matchlist)) {
            $_tempBody = $conditional_routes_conditions_rel_matchlist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postConditionalRoutesConditionsRelRouteLockCollection
     *
     * Creates a ConditionalRoutesConditionsRelRouteLock resource.
     *
     * @param  \Ivz\Client\Model\ConditionalRoutesConditionsRelRouteLock $conditional_routes_conditions_rel_route_lock The new ConditionalRoutesConditionsRelRouteLock resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ConditionalRoutesConditionsRelRouteLock
     */
    public function postConditionalRoutesConditionsRelRouteLockCollection($conditional_routes_conditions_rel_route_lock = null)
    {
        list($response) = $this->postConditionalRoutesConditionsRelRouteLockCollectionWithHttpInfo($conditional_routes_conditions_rel_route_lock);
        return $response;
    }

    /**
     * Operation postConditionalRoutesConditionsRelRouteLockCollectionWithHttpInfo
     *
     * Creates a ConditionalRoutesConditionsRelRouteLock resource.
     *
     * @param  \Ivz\Client\Model\ConditionalRoutesConditionsRelRouteLock $conditional_routes_conditions_rel_route_lock The new ConditionalRoutesConditionsRelRouteLock resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ConditionalRoutesConditionsRelRouteLock, HTTP status code, HTTP response headers (array of strings)
     */
    public function postConditionalRoutesConditionsRelRouteLockCollectionWithHttpInfo($conditional_routes_conditions_rel_route_lock = null)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoutesConditionsRelRouteLock';
        $request = $this->postConditionalRoutesConditionsRelRouteLockCollectionRequest($conditional_routes_conditions_rel_route_lock);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ConditionalRoutesConditionsRelRouteLock',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postConditionalRoutesConditionsRelRouteLockCollectionAsync
     *
     * Creates a ConditionalRoutesConditionsRelRouteLock resource.
     *
     * @param  \Ivz\Client\Model\ConditionalRoutesConditionsRelRouteLock $conditional_routes_conditions_rel_route_lock The new ConditionalRoutesConditionsRelRouteLock resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postConditionalRoutesConditionsRelRouteLockCollectionAsync($conditional_routes_conditions_rel_route_lock = null)
    {
        return $this->postConditionalRoutesConditionsRelRouteLockCollectionAsyncWithHttpInfo($conditional_routes_conditions_rel_route_lock)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postConditionalRoutesConditionsRelRouteLockCollectionAsyncWithHttpInfo
     *
     * Creates a ConditionalRoutesConditionsRelRouteLock resource.
     *
     * @param  \Ivz\Client\Model\ConditionalRoutesConditionsRelRouteLock $conditional_routes_conditions_rel_route_lock The new ConditionalRoutesConditionsRelRouteLock resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postConditionalRoutesConditionsRelRouteLockCollectionAsyncWithHttpInfo($conditional_routes_conditions_rel_route_lock = null)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoutesConditionsRelRouteLock';
        $request = $this->postConditionalRoutesConditionsRelRouteLockCollectionRequest($conditional_routes_conditions_rel_route_lock);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postConditionalRoutesConditionsRelRouteLockCollection'
     *
     * @param  \Ivz\Client\Model\ConditionalRoutesConditionsRelRouteLock $conditional_routes_conditions_rel_route_lock The new ConditionalRoutesConditionsRelRouteLock resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postConditionalRoutesConditionsRelRouteLockCollectionRequest($conditional_routes_conditions_rel_route_lock = null)
    {

        $resourcePath = '/conditional_routes_conditions_rel_route_locks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($conditional_routes_conditions_rel_route_lock)) {
            $_tempBody = $conditional_routes_conditions_rel_route_lock;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postConditionalRoutesConditionsRelScheduleCollection
     *
     * Creates a ConditionalRoutesConditionsRelSchedule resource.
     *
     * @param  \Ivz\Client\Model\ConditionalRoutesConditionsRelSchedule $conditional_routes_conditions_rel_schedule The new ConditionalRoutesConditionsRelSchedule resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ConditionalRoutesConditionsRelSchedule
     */
    public function postConditionalRoutesConditionsRelScheduleCollection($conditional_routes_conditions_rel_schedule = null)
    {
        list($response) = $this->postConditionalRoutesConditionsRelScheduleCollectionWithHttpInfo($conditional_routes_conditions_rel_schedule);
        return $response;
    }

    /**
     * Operation postConditionalRoutesConditionsRelScheduleCollectionWithHttpInfo
     *
     * Creates a ConditionalRoutesConditionsRelSchedule resource.
     *
     * @param  \Ivz\Client\Model\ConditionalRoutesConditionsRelSchedule $conditional_routes_conditions_rel_schedule The new ConditionalRoutesConditionsRelSchedule resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ConditionalRoutesConditionsRelSchedule, HTTP status code, HTTP response headers (array of strings)
     */
    public function postConditionalRoutesConditionsRelScheduleCollectionWithHttpInfo($conditional_routes_conditions_rel_schedule = null)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoutesConditionsRelSchedule';
        $request = $this->postConditionalRoutesConditionsRelScheduleCollectionRequest($conditional_routes_conditions_rel_schedule);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ConditionalRoutesConditionsRelSchedule',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postConditionalRoutesConditionsRelScheduleCollectionAsync
     *
     * Creates a ConditionalRoutesConditionsRelSchedule resource.
     *
     * @param  \Ivz\Client\Model\ConditionalRoutesConditionsRelSchedule $conditional_routes_conditions_rel_schedule The new ConditionalRoutesConditionsRelSchedule resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postConditionalRoutesConditionsRelScheduleCollectionAsync($conditional_routes_conditions_rel_schedule = null)
    {
        return $this->postConditionalRoutesConditionsRelScheduleCollectionAsyncWithHttpInfo($conditional_routes_conditions_rel_schedule)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postConditionalRoutesConditionsRelScheduleCollectionAsyncWithHttpInfo
     *
     * Creates a ConditionalRoutesConditionsRelSchedule resource.
     *
     * @param  \Ivz\Client\Model\ConditionalRoutesConditionsRelSchedule $conditional_routes_conditions_rel_schedule The new ConditionalRoutesConditionsRelSchedule resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postConditionalRoutesConditionsRelScheduleCollectionAsyncWithHttpInfo($conditional_routes_conditions_rel_schedule = null)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoutesConditionsRelSchedule';
        $request = $this->postConditionalRoutesConditionsRelScheduleCollectionRequest($conditional_routes_conditions_rel_schedule);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postConditionalRoutesConditionsRelScheduleCollection'
     *
     * @param  \Ivz\Client\Model\ConditionalRoutesConditionsRelSchedule $conditional_routes_conditions_rel_schedule The new ConditionalRoutesConditionsRelSchedule resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postConditionalRoutesConditionsRelScheduleCollectionRequest($conditional_routes_conditions_rel_schedule = null)
    {

        $resourcePath = '/conditional_routes_conditions_rel_schedules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($conditional_routes_conditions_rel_schedule)) {
            $_tempBody = $conditional_routes_conditions_rel_schedule;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postConferenceRoomCollection
     *
     * Creates a ConferenceRoom resource.
     *
     * @param  \Ivz\Client\Model\ConferenceRoom $conference_room The new ConferenceRoom resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ConferenceRoom
     */
    public function postConferenceRoomCollection($conference_room = null)
    {
        list($response) = $this->postConferenceRoomCollectionWithHttpInfo($conference_room);
        return $response;
    }

    /**
     * Operation postConferenceRoomCollectionWithHttpInfo
     *
     * Creates a ConferenceRoom resource.
     *
     * @param  \Ivz\Client\Model\ConferenceRoom $conference_room The new ConferenceRoom resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ConferenceRoom, HTTP status code, HTTP response headers (array of strings)
     */
    public function postConferenceRoomCollectionWithHttpInfo($conference_room = null)
    {
        $returnType = '\Ivz\Client\Model\ConferenceRoom';
        $request = $this->postConferenceRoomCollectionRequest($conference_room);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ConferenceRoom',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postConferenceRoomCollectionAsync
     *
     * Creates a ConferenceRoom resource.
     *
     * @param  \Ivz\Client\Model\ConferenceRoom $conference_room The new ConferenceRoom resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postConferenceRoomCollectionAsync($conference_room = null)
    {
        return $this->postConferenceRoomCollectionAsyncWithHttpInfo($conference_room)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postConferenceRoomCollectionAsyncWithHttpInfo
     *
     * Creates a ConferenceRoom resource.
     *
     * @param  \Ivz\Client\Model\ConferenceRoom $conference_room The new ConferenceRoom resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postConferenceRoomCollectionAsyncWithHttpInfo($conference_room = null)
    {
        $returnType = '\Ivz\Client\Model\ConferenceRoom';
        $request = $this->postConferenceRoomCollectionRequest($conference_room);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postConferenceRoomCollection'
     *
     * @param  \Ivz\Client\Model\ConferenceRoom $conference_room The new ConferenceRoom resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postConferenceRoomCollectionRequest($conference_room = null)
    {

        $resourcePath = '/conference_rooms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($conference_room)) {
            $_tempBody = $conference_room;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postExtensionCollection
     *
     * Creates a Extension resource.
     *
     * @param  \Ivz\Client\Model\Extension $extension The new Extension resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\Extension
     */
    public function postExtensionCollection($extension = null)
    {
        list($response) = $this->postExtensionCollectionWithHttpInfo($extension);
        return $response;
    }

    /**
     * Operation postExtensionCollectionWithHttpInfo
     *
     * Creates a Extension resource.
     *
     * @param  \Ivz\Client\Model\Extension $extension The new Extension resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\Extension, HTTP status code, HTTP response headers (array of strings)
     */
    public function postExtensionCollectionWithHttpInfo($extension = null)
    {
        $returnType = '\Ivz\Client\Model\Extension';
        $request = $this->postExtensionCollectionRequest($extension);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\Extension',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postExtensionCollectionAsync
     *
     * Creates a Extension resource.
     *
     * @param  \Ivz\Client\Model\Extension $extension The new Extension resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postExtensionCollectionAsync($extension = null)
    {
        return $this->postExtensionCollectionAsyncWithHttpInfo($extension)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postExtensionCollectionAsyncWithHttpInfo
     *
     * Creates a Extension resource.
     *
     * @param  \Ivz\Client\Model\Extension $extension The new Extension resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postExtensionCollectionAsyncWithHttpInfo($extension = null)
    {
        $returnType = '\Ivz\Client\Model\Extension';
        $request = $this->postExtensionCollectionRequest($extension);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postExtensionCollection'
     *
     * @param  \Ivz\Client\Model\Extension $extension The new Extension resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postExtensionCollectionRequest($extension = null)
    {

        $resourcePath = '/extensions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($extension)) {
            $_tempBody = $extension;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postExternalCallFilterBlackListCollection
     *
     * Creates a ExternalCallFilterBlackList resource.
     *
     * @param  \Ivz\Client\Model\ExternalCallFilterBlackList $external_call_filter_black_list The new ExternalCallFilterBlackList resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ExternalCallFilterBlackList
     */
    public function postExternalCallFilterBlackListCollection($external_call_filter_black_list = null)
    {
        list($response) = $this->postExternalCallFilterBlackListCollectionWithHttpInfo($external_call_filter_black_list);
        return $response;
    }

    /**
     * Operation postExternalCallFilterBlackListCollectionWithHttpInfo
     *
     * Creates a ExternalCallFilterBlackList resource.
     *
     * @param  \Ivz\Client\Model\ExternalCallFilterBlackList $external_call_filter_black_list The new ExternalCallFilterBlackList resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ExternalCallFilterBlackList, HTTP status code, HTTP response headers (array of strings)
     */
    public function postExternalCallFilterBlackListCollectionWithHttpInfo($external_call_filter_black_list = null)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterBlackList';
        $request = $this->postExternalCallFilterBlackListCollectionRequest($external_call_filter_black_list);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ExternalCallFilterBlackList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postExternalCallFilterBlackListCollectionAsync
     *
     * Creates a ExternalCallFilterBlackList resource.
     *
     * @param  \Ivz\Client\Model\ExternalCallFilterBlackList $external_call_filter_black_list The new ExternalCallFilterBlackList resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postExternalCallFilterBlackListCollectionAsync($external_call_filter_black_list = null)
    {
        return $this->postExternalCallFilterBlackListCollectionAsyncWithHttpInfo($external_call_filter_black_list)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postExternalCallFilterBlackListCollectionAsyncWithHttpInfo
     *
     * Creates a ExternalCallFilterBlackList resource.
     *
     * @param  \Ivz\Client\Model\ExternalCallFilterBlackList $external_call_filter_black_list The new ExternalCallFilterBlackList resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postExternalCallFilterBlackListCollectionAsyncWithHttpInfo($external_call_filter_black_list = null)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterBlackList';
        $request = $this->postExternalCallFilterBlackListCollectionRequest($external_call_filter_black_list);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postExternalCallFilterBlackListCollection'
     *
     * @param  \Ivz\Client\Model\ExternalCallFilterBlackList $external_call_filter_black_list The new ExternalCallFilterBlackList resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postExternalCallFilterBlackListCollectionRequest($external_call_filter_black_list = null)
    {

        $resourcePath = '/external_call_filter_black_lists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($external_call_filter_black_list)) {
            $_tempBody = $external_call_filter_black_list;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postExternalCallFilterCollection
     *
     * Creates a ExternalCallFilter resource.
     *
     * @param  \Ivz\Client\Model\ExternalCallFilter $external_call_filter The new ExternalCallFilter resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ExternalCallFilterWithInverseRelationships
     */
    public function postExternalCallFilterCollection($external_call_filter = null)
    {
        list($response) = $this->postExternalCallFilterCollectionWithHttpInfo($external_call_filter);
        return $response;
    }

    /**
     * Operation postExternalCallFilterCollectionWithHttpInfo
     *
     * Creates a ExternalCallFilter resource.
     *
     * @param  \Ivz\Client\Model\ExternalCallFilter $external_call_filter The new ExternalCallFilter resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ExternalCallFilterWithInverseRelationships, HTTP status code, HTTP response headers (array of strings)
     */
    public function postExternalCallFilterCollectionWithHttpInfo($external_call_filter = null)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterWithInverseRelationships';
        $request = $this->postExternalCallFilterCollectionRequest($external_call_filter);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ExternalCallFilterWithInverseRelationships',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postExternalCallFilterCollectionAsync
     *
     * Creates a ExternalCallFilter resource.
     *
     * @param  \Ivz\Client\Model\ExternalCallFilter $external_call_filter The new ExternalCallFilter resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postExternalCallFilterCollectionAsync($external_call_filter = null)
    {
        return $this->postExternalCallFilterCollectionAsyncWithHttpInfo($external_call_filter)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postExternalCallFilterCollectionAsyncWithHttpInfo
     *
     * Creates a ExternalCallFilter resource.
     *
     * @param  \Ivz\Client\Model\ExternalCallFilter $external_call_filter The new ExternalCallFilter resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postExternalCallFilterCollectionAsyncWithHttpInfo($external_call_filter = null)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterWithInverseRelationships';
        $request = $this->postExternalCallFilterCollectionRequest($external_call_filter);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postExternalCallFilterCollection'
     *
     * @param  \Ivz\Client\Model\ExternalCallFilter $external_call_filter The new ExternalCallFilter resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postExternalCallFilterCollectionRequest($external_call_filter = null)
    {

        $resourcePath = '/external_call_filters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($external_call_filter)) {
            $_tempBody = $external_call_filter;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postExternalCallFilterRelCalendarCollection
     *
     * Creates a ExternalCallFilterRelCalendar resource.
     *
     * @param  \Ivz\Client\Model\ExternalCallFilterRelCalendar $external_call_filter_rel_calendar The new ExternalCallFilterRelCalendar resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ExternalCallFilterRelCalendar
     */
    public function postExternalCallFilterRelCalendarCollection($external_call_filter_rel_calendar = null)
    {
        list($response) = $this->postExternalCallFilterRelCalendarCollectionWithHttpInfo($external_call_filter_rel_calendar);
        return $response;
    }

    /**
     * Operation postExternalCallFilterRelCalendarCollectionWithHttpInfo
     *
     * Creates a ExternalCallFilterRelCalendar resource.
     *
     * @param  \Ivz\Client\Model\ExternalCallFilterRelCalendar $external_call_filter_rel_calendar The new ExternalCallFilterRelCalendar resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ExternalCallFilterRelCalendar, HTTP status code, HTTP response headers (array of strings)
     */
    public function postExternalCallFilterRelCalendarCollectionWithHttpInfo($external_call_filter_rel_calendar = null)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterRelCalendar';
        $request = $this->postExternalCallFilterRelCalendarCollectionRequest($external_call_filter_rel_calendar);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ExternalCallFilterRelCalendar',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postExternalCallFilterRelCalendarCollectionAsync
     *
     * Creates a ExternalCallFilterRelCalendar resource.
     *
     * @param  \Ivz\Client\Model\ExternalCallFilterRelCalendar $external_call_filter_rel_calendar The new ExternalCallFilterRelCalendar resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postExternalCallFilterRelCalendarCollectionAsync($external_call_filter_rel_calendar = null)
    {
        return $this->postExternalCallFilterRelCalendarCollectionAsyncWithHttpInfo($external_call_filter_rel_calendar)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postExternalCallFilterRelCalendarCollectionAsyncWithHttpInfo
     *
     * Creates a ExternalCallFilterRelCalendar resource.
     *
     * @param  \Ivz\Client\Model\ExternalCallFilterRelCalendar $external_call_filter_rel_calendar The new ExternalCallFilterRelCalendar resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postExternalCallFilterRelCalendarCollectionAsyncWithHttpInfo($external_call_filter_rel_calendar = null)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterRelCalendar';
        $request = $this->postExternalCallFilterRelCalendarCollectionRequest($external_call_filter_rel_calendar);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postExternalCallFilterRelCalendarCollection'
     *
     * @param  \Ivz\Client\Model\ExternalCallFilterRelCalendar $external_call_filter_rel_calendar The new ExternalCallFilterRelCalendar resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postExternalCallFilterRelCalendarCollectionRequest($external_call_filter_rel_calendar = null)
    {

        $resourcePath = '/external_call_filter_rel_calendars';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($external_call_filter_rel_calendar)) {
            $_tempBody = $external_call_filter_rel_calendar;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postExternalCallFilterRelScheduleCollection
     *
     * Creates a ExternalCallFilterRelSchedule resource.
     *
     * @param  \Ivz\Client\Model\ExternalCallFilterRelSchedule $external_call_filter_rel_schedule The new ExternalCallFilterRelSchedule resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ExternalCallFilterRelSchedule
     */
    public function postExternalCallFilterRelScheduleCollection($external_call_filter_rel_schedule = null)
    {
        list($response) = $this->postExternalCallFilterRelScheduleCollectionWithHttpInfo($external_call_filter_rel_schedule);
        return $response;
    }

    /**
     * Operation postExternalCallFilterRelScheduleCollectionWithHttpInfo
     *
     * Creates a ExternalCallFilterRelSchedule resource.
     *
     * @param  \Ivz\Client\Model\ExternalCallFilterRelSchedule $external_call_filter_rel_schedule The new ExternalCallFilterRelSchedule resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ExternalCallFilterRelSchedule, HTTP status code, HTTP response headers (array of strings)
     */
    public function postExternalCallFilterRelScheduleCollectionWithHttpInfo($external_call_filter_rel_schedule = null)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterRelSchedule';
        $request = $this->postExternalCallFilterRelScheduleCollectionRequest($external_call_filter_rel_schedule);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ExternalCallFilterRelSchedule',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postExternalCallFilterRelScheduleCollectionAsync
     *
     * Creates a ExternalCallFilterRelSchedule resource.
     *
     * @param  \Ivz\Client\Model\ExternalCallFilterRelSchedule $external_call_filter_rel_schedule The new ExternalCallFilterRelSchedule resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postExternalCallFilterRelScheduleCollectionAsync($external_call_filter_rel_schedule = null)
    {
        return $this->postExternalCallFilterRelScheduleCollectionAsyncWithHttpInfo($external_call_filter_rel_schedule)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postExternalCallFilterRelScheduleCollectionAsyncWithHttpInfo
     *
     * Creates a ExternalCallFilterRelSchedule resource.
     *
     * @param  \Ivz\Client\Model\ExternalCallFilterRelSchedule $external_call_filter_rel_schedule The new ExternalCallFilterRelSchedule resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postExternalCallFilterRelScheduleCollectionAsyncWithHttpInfo($external_call_filter_rel_schedule = null)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterRelSchedule';
        $request = $this->postExternalCallFilterRelScheduleCollectionRequest($external_call_filter_rel_schedule);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postExternalCallFilterRelScheduleCollection'
     *
     * @param  \Ivz\Client\Model\ExternalCallFilterRelSchedule $external_call_filter_rel_schedule The new ExternalCallFilterRelSchedule resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postExternalCallFilterRelScheduleCollectionRequest($external_call_filter_rel_schedule = null)
    {

        $resourcePath = '/external_call_filter_rel_schedules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($external_call_filter_rel_schedule)) {
            $_tempBody = $external_call_filter_rel_schedule;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postExternalCallFilterWhiteListCollection
     *
     * Creates a ExternalCallFilterWhiteList resource.
     *
     * @param  \Ivz\Client\Model\ExternalCallFilterWhiteList $external_call_filter_white_list The new ExternalCallFilterWhiteList resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ExternalCallFilterWhiteList
     */
    public function postExternalCallFilterWhiteListCollection($external_call_filter_white_list = null)
    {
        list($response) = $this->postExternalCallFilterWhiteListCollectionWithHttpInfo($external_call_filter_white_list);
        return $response;
    }

    /**
     * Operation postExternalCallFilterWhiteListCollectionWithHttpInfo
     *
     * Creates a ExternalCallFilterWhiteList resource.
     *
     * @param  \Ivz\Client\Model\ExternalCallFilterWhiteList $external_call_filter_white_list The new ExternalCallFilterWhiteList resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ExternalCallFilterWhiteList, HTTP status code, HTTP response headers (array of strings)
     */
    public function postExternalCallFilterWhiteListCollectionWithHttpInfo($external_call_filter_white_list = null)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterWhiteList';
        $request = $this->postExternalCallFilterWhiteListCollectionRequest($external_call_filter_white_list);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ExternalCallFilterWhiteList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postExternalCallFilterWhiteListCollectionAsync
     *
     * Creates a ExternalCallFilterWhiteList resource.
     *
     * @param  \Ivz\Client\Model\ExternalCallFilterWhiteList $external_call_filter_white_list The new ExternalCallFilterWhiteList resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postExternalCallFilterWhiteListCollectionAsync($external_call_filter_white_list = null)
    {
        return $this->postExternalCallFilterWhiteListCollectionAsyncWithHttpInfo($external_call_filter_white_list)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postExternalCallFilterWhiteListCollectionAsyncWithHttpInfo
     *
     * Creates a ExternalCallFilterWhiteList resource.
     *
     * @param  \Ivz\Client\Model\ExternalCallFilterWhiteList $external_call_filter_white_list The new ExternalCallFilterWhiteList resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postExternalCallFilterWhiteListCollectionAsyncWithHttpInfo($external_call_filter_white_list = null)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterWhiteList';
        $request = $this->postExternalCallFilterWhiteListCollectionRequest($external_call_filter_white_list);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postExternalCallFilterWhiteListCollection'
     *
     * @param  \Ivz\Client\Model\ExternalCallFilterWhiteList $external_call_filter_white_list The new ExternalCallFilterWhiteList resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postExternalCallFilterWhiteListCollectionRequest($external_call_filter_white_list = null)
    {

        $resourcePath = '/external_call_filter_white_lists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($external_call_filter_white_list)) {
            $_tempBody = $external_call_filter_white_list;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postFaxCollection
     *
     * Creates a Fax resource.
     *
     * @param  \Ivz\Client\Model\Fax $fax The new Fax resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\Fax
     */
    public function postFaxCollection($fax = null)
    {
        list($response) = $this->postFaxCollectionWithHttpInfo($fax);
        return $response;
    }

    /**
     * Operation postFaxCollectionWithHttpInfo
     *
     * Creates a Fax resource.
     *
     * @param  \Ivz\Client\Model\Fax $fax The new Fax resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\Fax, HTTP status code, HTTP response headers (array of strings)
     */
    public function postFaxCollectionWithHttpInfo($fax = null)
    {
        $returnType = '\Ivz\Client\Model\Fax';
        $request = $this->postFaxCollectionRequest($fax);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\Fax',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postFaxCollectionAsync
     *
     * Creates a Fax resource.
     *
     * @param  \Ivz\Client\Model\Fax $fax The new Fax resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postFaxCollectionAsync($fax = null)
    {
        return $this->postFaxCollectionAsyncWithHttpInfo($fax)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postFaxCollectionAsyncWithHttpInfo
     *
     * Creates a Fax resource.
     *
     * @param  \Ivz\Client\Model\Fax $fax The new Fax resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postFaxCollectionAsyncWithHttpInfo($fax = null)
    {
        $returnType = '\Ivz\Client\Model\Fax';
        $request = $this->postFaxCollectionRequest($fax);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postFaxCollection'
     *
     * @param  \Ivz\Client\Model\Fax $fax The new Fax resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postFaxCollectionRequest($fax = null)
    {

        $resourcePath = '/faxes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($fax)) {
            $_tempBody = $fax;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postFriendCollection
     *
     * Creates a Friend resource.
     *
     * @param  \Ivz\Client\Model\Friend $friend The new Friend resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\Friend
     */
    public function postFriendCollection($friend = null)
    {
        list($response) = $this->postFriendCollectionWithHttpInfo($friend);
        return $response;
    }

    /**
     * Operation postFriendCollectionWithHttpInfo
     *
     * Creates a Friend resource.
     *
     * @param  \Ivz\Client\Model\Friend $friend The new Friend resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\Friend, HTTP status code, HTTP response headers (array of strings)
     */
    public function postFriendCollectionWithHttpInfo($friend = null)
    {
        $returnType = '\Ivz\Client\Model\Friend';
        $request = $this->postFriendCollectionRequest($friend);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\Friend',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postFriendCollectionAsync
     *
     * Creates a Friend resource.
     *
     * @param  \Ivz\Client\Model\Friend $friend The new Friend resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postFriendCollectionAsync($friend = null)
    {
        return $this->postFriendCollectionAsyncWithHttpInfo($friend)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postFriendCollectionAsyncWithHttpInfo
     *
     * Creates a Friend resource.
     *
     * @param  \Ivz\Client\Model\Friend $friend The new Friend resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postFriendCollectionAsyncWithHttpInfo($friend = null)
    {
        $returnType = '\Ivz\Client\Model\Friend';
        $request = $this->postFriendCollectionRequest($friend);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postFriendCollection'
     *
     * @param  \Ivz\Client\Model\Friend $friend The new Friend resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postFriendCollectionRequest($friend = null)
    {

        $resourcePath = '/friends';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($friend)) {
            $_tempBody = $friend;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postFriendsPatternCollection
     *
     * Creates a FriendsPattern resource.
     *
     * @param  \Ivz\Client\Model\FriendsPattern $friends_pattern The new FriendsPattern resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\FriendsPattern
     */
    public function postFriendsPatternCollection($friends_pattern = null)
    {
        list($response) = $this->postFriendsPatternCollectionWithHttpInfo($friends_pattern);
        return $response;
    }

    /**
     * Operation postFriendsPatternCollectionWithHttpInfo
     *
     * Creates a FriendsPattern resource.
     *
     * @param  \Ivz\Client\Model\FriendsPattern $friends_pattern The new FriendsPattern resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\FriendsPattern, HTTP status code, HTTP response headers (array of strings)
     */
    public function postFriendsPatternCollectionWithHttpInfo($friends_pattern = null)
    {
        $returnType = '\Ivz\Client\Model\FriendsPattern';
        $request = $this->postFriendsPatternCollectionRequest($friends_pattern);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\FriendsPattern',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postFriendsPatternCollectionAsync
     *
     * Creates a FriendsPattern resource.
     *
     * @param  \Ivz\Client\Model\FriendsPattern $friends_pattern The new FriendsPattern resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postFriendsPatternCollectionAsync($friends_pattern = null)
    {
        return $this->postFriendsPatternCollectionAsyncWithHttpInfo($friends_pattern)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postFriendsPatternCollectionAsyncWithHttpInfo
     *
     * Creates a FriendsPattern resource.
     *
     * @param  \Ivz\Client\Model\FriendsPattern $friends_pattern The new FriendsPattern resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postFriendsPatternCollectionAsyncWithHttpInfo($friends_pattern = null)
    {
        $returnType = '\Ivz\Client\Model\FriendsPattern';
        $request = $this->postFriendsPatternCollectionRequest($friends_pattern);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postFriendsPatternCollection'
     *
     * @param  \Ivz\Client\Model\FriendsPattern $friends_pattern The new FriendsPattern resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postFriendsPatternCollectionRequest($friends_pattern = null)
    {

        $resourcePath = '/friends_patterns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($friends_pattern)) {
            $_tempBody = $friends_pattern;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postHolidayDateCollection
     *
     * Creates a HolidayDate resource.
     *
     * @param  \Ivz\Client\Model\HolidayDate $holiday_date The new HolidayDate resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\HolidayDate
     */
    public function postHolidayDateCollection($holiday_date = null)
    {
        list($response) = $this->postHolidayDateCollectionWithHttpInfo($holiday_date);
        return $response;
    }

    /**
     * Operation postHolidayDateCollectionWithHttpInfo
     *
     * Creates a HolidayDate resource.
     *
     * @param  \Ivz\Client\Model\HolidayDate $holiday_date The new HolidayDate resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\HolidayDate, HTTP status code, HTTP response headers (array of strings)
     */
    public function postHolidayDateCollectionWithHttpInfo($holiday_date = null)
    {
        $returnType = '\Ivz\Client\Model\HolidayDate';
        $request = $this->postHolidayDateCollectionRequest($holiday_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\HolidayDate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postHolidayDateCollectionAsync
     *
     * Creates a HolidayDate resource.
     *
     * @param  \Ivz\Client\Model\HolidayDate $holiday_date The new HolidayDate resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postHolidayDateCollectionAsync($holiday_date = null)
    {
        return $this->postHolidayDateCollectionAsyncWithHttpInfo($holiday_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postHolidayDateCollectionAsyncWithHttpInfo
     *
     * Creates a HolidayDate resource.
     *
     * @param  \Ivz\Client\Model\HolidayDate $holiday_date The new HolidayDate resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postHolidayDateCollectionAsyncWithHttpInfo($holiday_date = null)
    {
        $returnType = '\Ivz\Client\Model\HolidayDate';
        $request = $this->postHolidayDateCollectionRequest($holiday_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postHolidayDateCollection'
     *
     * @param  \Ivz\Client\Model\HolidayDate $holiday_date The new HolidayDate resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postHolidayDateCollectionRequest($holiday_date = null)
    {

        $resourcePath = '/holiday_dates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($holiday_date)) {
            $_tempBody = $holiday_date;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postHuntGroupCollection
     *
     * Creates a HuntGroup resource.
     *
     * @param  \Ivz\Client\Model\HuntGroup $hunt_group The new HuntGroup resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\HuntGroup
     */
    public function postHuntGroupCollection($hunt_group = null)
    {
        list($response) = $this->postHuntGroupCollectionWithHttpInfo($hunt_group);
        return $response;
    }

    /**
     * Operation postHuntGroupCollectionWithHttpInfo
     *
     * Creates a HuntGroup resource.
     *
     * @param  \Ivz\Client\Model\HuntGroup $hunt_group The new HuntGroup resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\HuntGroup, HTTP status code, HTTP response headers (array of strings)
     */
    public function postHuntGroupCollectionWithHttpInfo($hunt_group = null)
    {
        $returnType = '\Ivz\Client\Model\HuntGroup';
        $request = $this->postHuntGroupCollectionRequest($hunt_group);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\HuntGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postHuntGroupCollectionAsync
     *
     * Creates a HuntGroup resource.
     *
     * @param  \Ivz\Client\Model\HuntGroup $hunt_group The new HuntGroup resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postHuntGroupCollectionAsync($hunt_group = null)
    {
        return $this->postHuntGroupCollectionAsyncWithHttpInfo($hunt_group)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postHuntGroupCollectionAsyncWithHttpInfo
     *
     * Creates a HuntGroup resource.
     *
     * @param  \Ivz\Client\Model\HuntGroup $hunt_group The new HuntGroup resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postHuntGroupCollectionAsyncWithHttpInfo($hunt_group = null)
    {
        $returnType = '\Ivz\Client\Model\HuntGroup';
        $request = $this->postHuntGroupCollectionRequest($hunt_group);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postHuntGroupCollection'
     *
     * @param  \Ivz\Client\Model\HuntGroup $hunt_group The new HuntGroup resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postHuntGroupCollectionRequest($hunt_group = null)
    {

        $resourcePath = '/hunt_groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($hunt_group)) {
            $_tempBody = $hunt_group;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postHuntGroupsRelUserCollection
     *
     * Creates a HuntGroupsRelUser resource.
     *
     * @param  \Ivz\Client\Model\HuntGroupsRelUser $hunt_groups_rel_user The new HuntGroupsRelUser resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\HuntGroupsRelUser
     */
    public function postHuntGroupsRelUserCollection($hunt_groups_rel_user = null)
    {
        list($response) = $this->postHuntGroupsRelUserCollectionWithHttpInfo($hunt_groups_rel_user);
        return $response;
    }

    /**
     * Operation postHuntGroupsRelUserCollectionWithHttpInfo
     *
     * Creates a HuntGroupsRelUser resource.
     *
     * @param  \Ivz\Client\Model\HuntGroupsRelUser $hunt_groups_rel_user The new HuntGroupsRelUser resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\HuntGroupsRelUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function postHuntGroupsRelUserCollectionWithHttpInfo($hunt_groups_rel_user = null)
    {
        $returnType = '\Ivz\Client\Model\HuntGroupsRelUser';
        $request = $this->postHuntGroupsRelUserCollectionRequest($hunt_groups_rel_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\HuntGroupsRelUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postHuntGroupsRelUserCollectionAsync
     *
     * Creates a HuntGroupsRelUser resource.
     *
     * @param  \Ivz\Client\Model\HuntGroupsRelUser $hunt_groups_rel_user The new HuntGroupsRelUser resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postHuntGroupsRelUserCollectionAsync($hunt_groups_rel_user = null)
    {
        return $this->postHuntGroupsRelUserCollectionAsyncWithHttpInfo($hunt_groups_rel_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postHuntGroupsRelUserCollectionAsyncWithHttpInfo
     *
     * Creates a HuntGroupsRelUser resource.
     *
     * @param  \Ivz\Client\Model\HuntGroupsRelUser $hunt_groups_rel_user The new HuntGroupsRelUser resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postHuntGroupsRelUserCollectionAsyncWithHttpInfo($hunt_groups_rel_user = null)
    {
        $returnType = '\Ivz\Client\Model\HuntGroupsRelUser';
        $request = $this->postHuntGroupsRelUserCollectionRequest($hunt_groups_rel_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postHuntGroupsRelUserCollection'
     *
     * @param  \Ivz\Client\Model\HuntGroupsRelUser $hunt_groups_rel_user The new HuntGroupsRelUser resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postHuntGroupsRelUserCollectionRequest($hunt_groups_rel_user = null)
    {

        $resourcePath = '/hunt_groups_rel_users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($hunt_groups_rel_user)) {
            $_tempBody = $hunt_groups_rel_user;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postIvrCollection
     *
     * Creates a Ivr resource.
     *
     * @param  \Ivz\Client\Model\Ivr $ivr The new Ivr resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\IvrWithExcludedExtensions
     */
    public function postIvrCollection($ivr = null)
    {
        list($response) = $this->postIvrCollectionWithHttpInfo($ivr);
        return $response;
    }

    /**
     * Operation postIvrCollectionWithHttpInfo
     *
     * Creates a Ivr resource.
     *
     * @param  \Ivz\Client\Model\Ivr $ivr The new Ivr resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\IvrWithExcludedExtensions, HTTP status code, HTTP response headers (array of strings)
     */
    public function postIvrCollectionWithHttpInfo($ivr = null)
    {
        $returnType = '\Ivz\Client\Model\IvrWithExcludedExtensions';
        $request = $this->postIvrCollectionRequest($ivr);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\IvrWithExcludedExtensions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postIvrCollectionAsync
     *
     * Creates a Ivr resource.
     *
     * @param  \Ivz\Client\Model\Ivr $ivr The new Ivr resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postIvrCollectionAsync($ivr = null)
    {
        return $this->postIvrCollectionAsyncWithHttpInfo($ivr)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postIvrCollectionAsyncWithHttpInfo
     *
     * Creates a Ivr resource.
     *
     * @param  \Ivz\Client\Model\Ivr $ivr The new Ivr resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postIvrCollectionAsyncWithHttpInfo($ivr = null)
    {
        $returnType = '\Ivz\Client\Model\IvrWithExcludedExtensions';
        $request = $this->postIvrCollectionRequest($ivr);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postIvrCollection'
     *
     * @param  \Ivz\Client\Model\Ivr $ivr The new Ivr resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postIvrCollectionRequest($ivr = null)
    {

        $resourcePath = '/ivrs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($ivr)) {
            $_tempBody = $ivr;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postIvrEntryCollection
     *
     * Creates a IvrEntry resource.
     *
     * @param  \Ivz\Client\Model\IvrEntry $ivr_entry The new IvrEntry resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\IvrEntry
     */
    public function postIvrEntryCollection($ivr_entry = null)
    {
        list($response) = $this->postIvrEntryCollectionWithHttpInfo($ivr_entry);
        return $response;
    }

    /**
     * Operation postIvrEntryCollectionWithHttpInfo
     *
     * Creates a IvrEntry resource.
     *
     * @param  \Ivz\Client\Model\IvrEntry $ivr_entry The new IvrEntry resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\IvrEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function postIvrEntryCollectionWithHttpInfo($ivr_entry = null)
    {
        $returnType = '\Ivz\Client\Model\IvrEntry';
        $request = $this->postIvrEntryCollectionRequest($ivr_entry);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\IvrEntry',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postIvrEntryCollectionAsync
     *
     * Creates a IvrEntry resource.
     *
     * @param  \Ivz\Client\Model\IvrEntry $ivr_entry The new IvrEntry resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postIvrEntryCollectionAsync($ivr_entry = null)
    {
        return $this->postIvrEntryCollectionAsyncWithHttpInfo($ivr_entry)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postIvrEntryCollectionAsyncWithHttpInfo
     *
     * Creates a IvrEntry resource.
     *
     * @param  \Ivz\Client\Model\IvrEntry $ivr_entry The new IvrEntry resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postIvrEntryCollectionAsyncWithHttpInfo($ivr_entry = null)
    {
        $returnType = '\Ivz\Client\Model\IvrEntry';
        $request = $this->postIvrEntryCollectionRequest($ivr_entry);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postIvrEntryCollection'
     *
     * @param  \Ivz\Client\Model\IvrEntry $ivr_entry The new IvrEntry resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postIvrEntryCollectionRequest($ivr_entry = null)
    {

        $resourcePath = '/ivr_entries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($ivr_entry)) {
            $_tempBody = $ivr_entry;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postIvrExcludedExtensionCollection
     *
     * Creates a IvrExcludedExtension resource.
     *
     * @param  \Ivz\Client\Model\IvrExcludedExtension $ivr_excluded_extension The new IvrExcludedExtension resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\IvrExcludedExtension
     */
    public function postIvrExcludedExtensionCollection($ivr_excluded_extension = null)
    {
        list($response) = $this->postIvrExcludedExtensionCollectionWithHttpInfo($ivr_excluded_extension);
        return $response;
    }

    /**
     * Operation postIvrExcludedExtensionCollectionWithHttpInfo
     *
     * Creates a IvrExcludedExtension resource.
     *
     * @param  \Ivz\Client\Model\IvrExcludedExtension $ivr_excluded_extension The new IvrExcludedExtension resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\IvrExcludedExtension, HTTP status code, HTTP response headers (array of strings)
     */
    public function postIvrExcludedExtensionCollectionWithHttpInfo($ivr_excluded_extension = null)
    {
        $returnType = '\Ivz\Client\Model\IvrExcludedExtension';
        $request = $this->postIvrExcludedExtensionCollectionRequest($ivr_excluded_extension);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\IvrExcludedExtension',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postIvrExcludedExtensionCollectionAsync
     *
     * Creates a IvrExcludedExtension resource.
     *
     * @param  \Ivz\Client\Model\IvrExcludedExtension $ivr_excluded_extension The new IvrExcludedExtension resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postIvrExcludedExtensionCollectionAsync($ivr_excluded_extension = null)
    {
        return $this->postIvrExcludedExtensionCollectionAsyncWithHttpInfo($ivr_excluded_extension)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postIvrExcludedExtensionCollectionAsyncWithHttpInfo
     *
     * Creates a IvrExcludedExtension resource.
     *
     * @param  \Ivz\Client\Model\IvrExcludedExtension $ivr_excluded_extension The new IvrExcludedExtension resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postIvrExcludedExtensionCollectionAsyncWithHttpInfo($ivr_excluded_extension = null)
    {
        $returnType = '\Ivz\Client\Model\IvrExcludedExtension';
        $request = $this->postIvrExcludedExtensionCollectionRequest($ivr_excluded_extension);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postIvrExcludedExtensionCollection'
     *
     * @param  \Ivz\Client\Model\IvrExcludedExtension $ivr_excluded_extension The new IvrExcludedExtension resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postIvrExcludedExtensionCollectionRequest($ivr_excluded_extension = null)
    {

        $resourcePath = '/ivr_excluded_extensions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($ivr_excluded_extension)) {
            $_tempBody = $ivr_excluded_extension;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postLocationCollection
     *
     * Creates a Location resource.
     *
     * @param  \Ivz\Client\Model\Location $location The new Location resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\Location
     */
    public function postLocationCollection($location = null)
    {
        list($response) = $this->postLocationCollectionWithHttpInfo($location);
        return $response;
    }

    /**
     * Operation postLocationCollectionWithHttpInfo
     *
     * Creates a Location resource.
     *
     * @param  \Ivz\Client\Model\Location $location The new Location resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\Location, HTTP status code, HTTP response headers (array of strings)
     */
    public function postLocationCollectionWithHttpInfo($location = null)
    {
        $returnType = '\Ivz\Client\Model\Location';
        $request = $this->postLocationCollectionRequest($location);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\Location',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postLocationCollectionAsync
     *
     * Creates a Location resource.
     *
     * @param  \Ivz\Client\Model\Location $location The new Location resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postLocationCollectionAsync($location = null)
    {
        return $this->postLocationCollectionAsyncWithHttpInfo($location)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postLocationCollectionAsyncWithHttpInfo
     *
     * Creates a Location resource.
     *
     * @param  \Ivz\Client\Model\Location $location The new Location resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postLocationCollectionAsyncWithHttpInfo($location = null)
    {
        $returnType = '\Ivz\Client\Model\Location';
        $request = $this->postLocationCollectionRequest($location);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postLocationCollection'
     *
     * @param  \Ivz\Client\Model\Location $location The new Location resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postLocationCollectionRequest($location = null)
    {

        $resourcePath = '/locations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($location)) {
            $_tempBody = $location;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postLocutionCollection
     *
     * Creates a Locution resource.
     *
     * @param  string $locution The new Locution resource (optional)
     * @param  \SplFileObject $original_file original_file (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\Locution
     */
    public function postLocutionCollection($locution = null, $original_file = null)
    {
        list($response) = $this->postLocutionCollectionWithHttpInfo($locution, $original_file);
        return $response;
    }

    /**
     * Operation postLocutionCollectionWithHttpInfo
     *
     * Creates a Locution resource.
     *
     * @param  string $locution The new Locution resource (optional)
     * @param  \SplFileObject $original_file (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\Locution, HTTP status code, HTTP response headers (array of strings)
     */
    public function postLocutionCollectionWithHttpInfo($locution = null, $original_file = null)
    {
        $returnType = '\Ivz\Client\Model\Locution';
        $request = $this->postLocutionCollectionRequest($locution, $original_file);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\Locution',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postLocutionCollectionAsync
     *
     * Creates a Locution resource.
     *
     * @param  string $locution The new Locution resource (optional)
     * @param  \SplFileObject $original_file (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postLocutionCollectionAsync($locution = null, $original_file = null)
    {
        return $this->postLocutionCollectionAsyncWithHttpInfo($locution, $original_file)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postLocutionCollectionAsyncWithHttpInfo
     *
     * Creates a Locution resource.
     *
     * @param  string $locution The new Locution resource (optional)
     * @param  \SplFileObject $original_file (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postLocutionCollectionAsyncWithHttpInfo($locution = null, $original_file = null)
    {
        $returnType = '\Ivz\Client\Model\Locution';
        $request = $this->postLocutionCollectionRequest($locution, $original_file);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postLocutionCollection'
     *
     * @param  string $locution The new Locution resource (optional)
     * @param  \SplFileObject $original_file (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postLocutionCollectionRequest($locution = null, $original_file = null)
    {

        $resourcePath = '/locutions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($locution !== null) {
            $formParams['locution'] = ObjectSerializer::toFormValue($locution);
        }
        // form params
        if ($original_file !== null) {
            $multipart = true;
            $formParams['OriginalFile'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($original_file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['multipart/form-data', 'application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postMatchListCollection
     *
     * Creates a MatchList resource.
     *
     * @param  \Ivz\Client\Model\MatchList $match_list The new MatchList resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\MatchList
     */
    public function postMatchListCollection($match_list = null)
    {
        list($response) = $this->postMatchListCollectionWithHttpInfo($match_list);
        return $response;
    }

    /**
     * Operation postMatchListCollectionWithHttpInfo
     *
     * Creates a MatchList resource.
     *
     * @param  \Ivz\Client\Model\MatchList $match_list The new MatchList resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\MatchList, HTTP status code, HTTP response headers (array of strings)
     */
    public function postMatchListCollectionWithHttpInfo($match_list = null)
    {
        $returnType = '\Ivz\Client\Model\MatchList';
        $request = $this->postMatchListCollectionRequest($match_list);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\MatchList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postMatchListCollectionAsync
     *
     * Creates a MatchList resource.
     *
     * @param  \Ivz\Client\Model\MatchList $match_list The new MatchList resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMatchListCollectionAsync($match_list = null)
    {
        return $this->postMatchListCollectionAsyncWithHttpInfo($match_list)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postMatchListCollectionAsyncWithHttpInfo
     *
     * Creates a MatchList resource.
     *
     * @param  \Ivz\Client\Model\MatchList $match_list The new MatchList resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMatchListCollectionAsyncWithHttpInfo($match_list = null)
    {
        $returnType = '\Ivz\Client\Model\MatchList';
        $request = $this->postMatchListCollectionRequest($match_list);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postMatchListCollection'
     *
     * @param  \Ivz\Client\Model\MatchList $match_list The new MatchList resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postMatchListCollectionRequest($match_list = null)
    {

        $resourcePath = '/match_lists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($match_list)) {
            $_tempBody = $match_list;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postMatchListPatternCollection
     *
     * Creates a MatchListPattern resource.
     *
     * @param  \Ivz\Client\Model\MatchListPattern $match_list_pattern The new MatchListPattern resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\MatchListPattern
     */
    public function postMatchListPatternCollection($match_list_pattern = null)
    {
        list($response) = $this->postMatchListPatternCollectionWithHttpInfo($match_list_pattern);
        return $response;
    }

    /**
     * Operation postMatchListPatternCollectionWithHttpInfo
     *
     * Creates a MatchListPattern resource.
     *
     * @param  \Ivz\Client\Model\MatchListPattern $match_list_pattern The new MatchListPattern resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\MatchListPattern, HTTP status code, HTTP response headers (array of strings)
     */
    public function postMatchListPatternCollectionWithHttpInfo($match_list_pattern = null)
    {
        $returnType = '\Ivz\Client\Model\MatchListPattern';
        $request = $this->postMatchListPatternCollectionRequest($match_list_pattern);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\MatchListPattern',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postMatchListPatternCollectionAsync
     *
     * Creates a MatchListPattern resource.
     *
     * @param  \Ivz\Client\Model\MatchListPattern $match_list_pattern The new MatchListPattern resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMatchListPatternCollectionAsync($match_list_pattern = null)
    {
        return $this->postMatchListPatternCollectionAsyncWithHttpInfo($match_list_pattern)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postMatchListPatternCollectionAsyncWithHttpInfo
     *
     * Creates a MatchListPattern resource.
     *
     * @param  \Ivz\Client\Model\MatchListPattern $match_list_pattern The new MatchListPattern resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMatchListPatternCollectionAsyncWithHttpInfo($match_list_pattern = null)
    {
        $returnType = '\Ivz\Client\Model\MatchListPattern';
        $request = $this->postMatchListPatternCollectionRequest($match_list_pattern);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postMatchListPatternCollection'
     *
     * @param  \Ivz\Client\Model\MatchListPattern $match_list_pattern The new MatchListPattern resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postMatchListPatternCollectionRequest($match_list_pattern = null)
    {

        $resourcePath = '/match_list_patterns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($match_list_pattern)) {
            $_tempBody = $match_list_pattern;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postMusicOnHoldCollection
     *
     * Creates a MusicOnHold resource.
     *
     * @param  string $music_on_hold The new MusicOnHold resource (optional)
     * @param  \SplFileObject $original_file original_file (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\MusicOnHold
     */
    public function postMusicOnHoldCollection($music_on_hold = null, $original_file = null)
    {
        list($response) = $this->postMusicOnHoldCollectionWithHttpInfo($music_on_hold, $original_file);
        return $response;
    }

    /**
     * Operation postMusicOnHoldCollectionWithHttpInfo
     *
     * Creates a MusicOnHold resource.
     *
     * @param  string $music_on_hold The new MusicOnHold resource (optional)
     * @param  \SplFileObject $original_file (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\MusicOnHold, HTTP status code, HTTP response headers (array of strings)
     */
    public function postMusicOnHoldCollectionWithHttpInfo($music_on_hold = null, $original_file = null)
    {
        $returnType = '\Ivz\Client\Model\MusicOnHold';
        $request = $this->postMusicOnHoldCollectionRequest($music_on_hold, $original_file);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\MusicOnHold',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postMusicOnHoldCollectionAsync
     *
     * Creates a MusicOnHold resource.
     *
     * @param  string $music_on_hold The new MusicOnHold resource (optional)
     * @param  \SplFileObject $original_file (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMusicOnHoldCollectionAsync($music_on_hold = null, $original_file = null)
    {
        return $this->postMusicOnHoldCollectionAsyncWithHttpInfo($music_on_hold, $original_file)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postMusicOnHoldCollectionAsyncWithHttpInfo
     *
     * Creates a MusicOnHold resource.
     *
     * @param  string $music_on_hold The new MusicOnHold resource (optional)
     * @param  \SplFileObject $original_file (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMusicOnHoldCollectionAsyncWithHttpInfo($music_on_hold = null, $original_file = null)
    {
        $returnType = '\Ivz\Client\Model\MusicOnHold';
        $request = $this->postMusicOnHoldCollectionRequest($music_on_hold, $original_file);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postMusicOnHoldCollection'
     *
     * @param  string $music_on_hold The new MusicOnHold resource (optional)
     * @param  \SplFileObject $original_file (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postMusicOnHoldCollectionRequest($music_on_hold = null, $original_file = null)
    {

        $resourcePath = '/music_on_holds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($music_on_hold !== null) {
            $formParams['musicOnHold'] = ObjectSerializer::toFormValue($music_on_hold);
        }
        // form params
        if ($original_file !== null) {
            $multipart = true;
            $formParams['OriginalFile'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($original_file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['multipart/form-data', 'application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postOutgoingDdiRuleCollection
     *
     * Creates a OutgoingDdiRule resource.
     *
     * @param  \Ivz\Client\Model\OutgoingDdiRule $outgoing_ddi_rule The new OutgoingDdiRule resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\OutgoingDdiRule
     */
    public function postOutgoingDdiRuleCollection($outgoing_ddi_rule = null)
    {
        list($response) = $this->postOutgoingDdiRuleCollectionWithHttpInfo($outgoing_ddi_rule);
        return $response;
    }

    /**
     * Operation postOutgoingDdiRuleCollectionWithHttpInfo
     *
     * Creates a OutgoingDdiRule resource.
     *
     * @param  \Ivz\Client\Model\OutgoingDdiRule $outgoing_ddi_rule The new OutgoingDdiRule resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\OutgoingDdiRule, HTTP status code, HTTP response headers (array of strings)
     */
    public function postOutgoingDdiRuleCollectionWithHttpInfo($outgoing_ddi_rule = null)
    {
        $returnType = '\Ivz\Client\Model\OutgoingDdiRule';
        $request = $this->postOutgoingDdiRuleCollectionRequest($outgoing_ddi_rule);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\OutgoingDdiRule',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postOutgoingDdiRuleCollectionAsync
     *
     * Creates a OutgoingDdiRule resource.
     *
     * @param  \Ivz\Client\Model\OutgoingDdiRule $outgoing_ddi_rule The new OutgoingDdiRule resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOutgoingDdiRuleCollectionAsync($outgoing_ddi_rule = null)
    {
        return $this->postOutgoingDdiRuleCollectionAsyncWithHttpInfo($outgoing_ddi_rule)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postOutgoingDdiRuleCollectionAsyncWithHttpInfo
     *
     * Creates a OutgoingDdiRule resource.
     *
     * @param  \Ivz\Client\Model\OutgoingDdiRule $outgoing_ddi_rule The new OutgoingDdiRule resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOutgoingDdiRuleCollectionAsyncWithHttpInfo($outgoing_ddi_rule = null)
    {
        $returnType = '\Ivz\Client\Model\OutgoingDdiRule';
        $request = $this->postOutgoingDdiRuleCollectionRequest($outgoing_ddi_rule);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postOutgoingDdiRuleCollection'
     *
     * @param  \Ivz\Client\Model\OutgoingDdiRule $outgoing_ddi_rule The new OutgoingDdiRule resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postOutgoingDdiRuleCollectionRequest($outgoing_ddi_rule = null)
    {

        $resourcePath = '/outgoing_ddi_rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($outgoing_ddi_rule)) {
            $_tempBody = $outgoing_ddi_rule;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postOutgoingDdiRulesPatternCollection
     *
     * Creates a OutgoingDdiRulesPattern resource.
     *
     * @param  \Ivz\Client\Model\OutgoingDdiRulesPattern $outgoing_ddi_rules_pattern The new OutgoingDdiRulesPattern resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\OutgoingDdiRulesPattern
     */
    public function postOutgoingDdiRulesPatternCollection($outgoing_ddi_rules_pattern = null)
    {
        list($response) = $this->postOutgoingDdiRulesPatternCollectionWithHttpInfo($outgoing_ddi_rules_pattern);
        return $response;
    }

    /**
     * Operation postOutgoingDdiRulesPatternCollectionWithHttpInfo
     *
     * Creates a OutgoingDdiRulesPattern resource.
     *
     * @param  \Ivz\Client\Model\OutgoingDdiRulesPattern $outgoing_ddi_rules_pattern The new OutgoingDdiRulesPattern resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\OutgoingDdiRulesPattern, HTTP status code, HTTP response headers (array of strings)
     */
    public function postOutgoingDdiRulesPatternCollectionWithHttpInfo($outgoing_ddi_rules_pattern = null)
    {
        $returnType = '\Ivz\Client\Model\OutgoingDdiRulesPattern';
        $request = $this->postOutgoingDdiRulesPatternCollectionRequest($outgoing_ddi_rules_pattern);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\OutgoingDdiRulesPattern',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postOutgoingDdiRulesPatternCollectionAsync
     *
     * Creates a OutgoingDdiRulesPattern resource.
     *
     * @param  \Ivz\Client\Model\OutgoingDdiRulesPattern $outgoing_ddi_rules_pattern The new OutgoingDdiRulesPattern resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOutgoingDdiRulesPatternCollectionAsync($outgoing_ddi_rules_pattern = null)
    {
        return $this->postOutgoingDdiRulesPatternCollectionAsyncWithHttpInfo($outgoing_ddi_rules_pattern)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postOutgoingDdiRulesPatternCollectionAsyncWithHttpInfo
     *
     * Creates a OutgoingDdiRulesPattern resource.
     *
     * @param  \Ivz\Client\Model\OutgoingDdiRulesPattern $outgoing_ddi_rules_pattern The new OutgoingDdiRulesPattern resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOutgoingDdiRulesPatternCollectionAsyncWithHttpInfo($outgoing_ddi_rules_pattern = null)
    {
        $returnType = '\Ivz\Client\Model\OutgoingDdiRulesPattern';
        $request = $this->postOutgoingDdiRulesPatternCollectionRequest($outgoing_ddi_rules_pattern);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postOutgoingDdiRulesPatternCollection'
     *
     * @param  \Ivz\Client\Model\OutgoingDdiRulesPattern $outgoing_ddi_rules_pattern The new OutgoingDdiRulesPattern resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postOutgoingDdiRulesPatternCollectionRequest($outgoing_ddi_rules_pattern = null)
    {

        $resourcePath = '/outgoing_ddi_rules_patterns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($outgoing_ddi_rules_pattern)) {
            $_tempBody = $outgoing_ddi_rules_pattern;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postPickUpGroupCollection
     *
     * Creates a PickUpGroup resource.
     *
     * @param  \Ivz\Client\Model\PickUpGroup $pick_up_group The new PickUpGroup resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\PickUpGroupWithUsers
     */
    public function postPickUpGroupCollection($pick_up_group = null)
    {
        list($response) = $this->postPickUpGroupCollectionWithHttpInfo($pick_up_group);
        return $response;
    }

    /**
     * Operation postPickUpGroupCollectionWithHttpInfo
     *
     * Creates a PickUpGroup resource.
     *
     * @param  \Ivz\Client\Model\PickUpGroup $pick_up_group The new PickUpGroup resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\PickUpGroupWithUsers, HTTP status code, HTTP response headers (array of strings)
     */
    public function postPickUpGroupCollectionWithHttpInfo($pick_up_group = null)
    {
        $returnType = '\Ivz\Client\Model\PickUpGroupWithUsers';
        $request = $this->postPickUpGroupCollectionRequest($pick_up_group);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\PickUpGroupWithUsers',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postPickUpGroupCollectionAsync
     *
     * Creates a PickUpGroup resource.
     *
     * @param  \Ivz\Client\Model\PickUpGroup $pick_up_group The new PickUpGroup resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postPickUpGroupCollectionAsync($pick_up_group = null)
    {
        return $this->postPickUpGroupCollectionAsyncWithHttpInfo($pick_up_group)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postPickUpGroupCollectionAsyncWithHttpInfo
     *
     * Creates a PickUpGroup resource.
     *
     * @param  \Ivz\Client\Model\PickUpGroup $pick_up_group The new PickUpGroup resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postPickUpGroupCollectionAsyncWithHttpInfo($pick_up_group = null)
    {
        $returnType = '\Ivz\Client\Model\PickUpGroupWithUsers';
        $request = $this->postPickUpGroupCollectionRequest($pick_up_group);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postPickUpGroupCollection'
     *
     * @param  \Ivz\Client\Model\PickUpGroup $pick_up_group The new PickUpGroup resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postPickUpGroupCollectionRequest($pick_up_group = null)
    {

        $resourcePath = '/pick_up_groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($pick_up_group)) {
            $_tempBody = $pick_up_group;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postPickUpRelUserCollection
     *
     * Creates a PickUpRelUser resource.
     *
     * @param  \Ivz\Client\Model\PickUpRelUser $pick_up_rel_user The new PickUpRelUser resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\PickUpRelUser
     */
    public function postPickUpRelUserCollection($pick_up_rel_user = null)
    {
        list($response) = $this->postPickUpRelUserCollectionWithHttpInfo($pick_up_rel_user);
        return $response;
    }

    /**
     * Operation postPickUpRelUserCollectionWithHttpInfo
     *
     * Creates a PickUpRelUser resource.
     *
     * @param  \Ivz\Client\Model\PickUpRelUser $pick_up_rel_user The new PickUpRelUser resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\PickUpRelUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function postPickUpRelUserCollectionWithHttpInfo($pick_up_rel_user = null)
    {
        $returnType = '\Ivz\Client\Model\PickUpRelUser';
        $request = $this->postPickUpRelUserCollectionRequest($pick_up_rel_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\PickUpRelUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postPickUpRelUserCollectionAsync
     *
     * Creates a PickUpRelUser resource.
     *
     * @param  \Ivz\Client\Model\PickUpRelUser $pick_up_rel_user The new PickUpRelUser resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postPickUpRelUserCollectionAsync($pick_up_rel_user = null)
    {
        return $this->postPickUpRelUserCollectionAsyncWithHttpInfo($pick_up_rel_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postPickUpRelUserCollectionAsyncWithHttpInfo
     *
     * Creates a PickUpRelUser resource.
     *
     * @param  \Ivz\Client\Model\PickUpRelUser $pick_up_rel_user The new PickUpRelUser resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postPickUpRelUserCollectionAsyncWithHttpInfo($pick_up_rel_user = null)
    {
        $returnType = '\Ivz\Client\Model\PickUpRelUser';
        $request = $this->postPickUpRelUserCollectionRequest($pick_up_rel_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postPickUpRelUserCollection'
     *
     * @param  \Ivz\Client\Model\PickUpRelUser $pick_up_rel_user The new PickUpRelUser resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postPickUpRelUserCollectionRequest($pick_up_rel_user = null)
    {

        $resourcePath = '/pick_up_rel_users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($pick_up_rel_user)) {
            $_tempBody = $pick_up_rel_user;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postQueueCollection
     *
     * Creates a Queue resource.
     *
     * @param  \Ivz\Client\Model\Queue $queue The new Queue resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\Queue
     */
    public function postQueueCollection($queue = null)
    {
        list($response) = $this->postQueueCollectionWithHttpInfo($queue);
        return $response;
    }

    /**
     * Operation postQueueCollectionWithHttpInfo
     *
     * Creates a Queue resource.
     *
     * @param  \Ivz\Client\Model\Queue $queue The new Queue resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\Queue, HTTP status code, HTTP response headers (array of strings)
     */
    public function postQueueCollectionWithHttpInfo($queue = null)
    {
        $returnType = '\Ivz\Client\Model\Queue';
        $request = $this->postQueueCollectionRequest($queue);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\Queue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postQueueCollectionAsync
     *
     * Creates a Queue resource.
     *
     * @param  \Ivz\Client\Model\Queue $queue The new Queue resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postQueueCollectionAsync($queue = null)
    {
        return $this->postQueueCollectionAsyncWithHttpInfo($queue)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postQueueCollectionAsyncWithHttpInfo
     *
     * Creates a Queue resource.
     *
     * @param  \Ivz\Client\Model\Queue $queue The new Queue resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postQueueCollectionAsyncWithHttpInfo($queue = null)
    {
        $returnType = '\Ivz\Client\Model\Queue';
        $request = $this->postQueueCollectionRequest($queue);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postQueueCollection'
     *
     * @param  \Ivz\Client\Model\Queue $queue The new Queue resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postQueueCollectionRequest($queue = null)
    {

        $resourcePath = '/queues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($queue)) {
            $_tempBody = $queue;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postQueueMemberCollection
     *
     * Creates a QueueMember resource.
     *
     * @param  \Ivz\Client\Model\QueueMember $queue_member The new QueueMember resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\QueueMember
     */
    public function postQueueMemberCollection($queue_member = null)
    {
        list($response) = $this->postQueueMemberCollectionWithHttpInfo($queue_member);
        return $response;
    }

    /**
     * Operation postQueueMemberCollectionWithHttpInfo
     *
     * Creates a QueueMember resource.
     *
     * @param  \Ivz\Client\Model\QueueMember $queue_member The new QueueMember resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\QueueMember, HTTP status code, HTTP response headers (array of strings)
     */
    public function postQueueMemberCollectionWithHttpInfo($queue_member = null)
    {
        $returnType = '\Ivz\Client\Model\QueueMember';
        $request = $this->postQueueMemberCollectionRequest($queue_member);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\QueueMember',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postQueueMemberCollectionAsync
     *
     * Creates a QueueMember resource.
     *
     * @param  \Ivz\Client\Model\QueueMember $queue_member The new QueueMember resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postQueueMemberCollectionAsync($queue_member = null)
    {
        return $this->postQueueMemberCollectionAsyncWithHttpInfo($queue_member)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postQueueMemberCollectionAsyncWithHttpInfo
     *
     * Creates a QueueMember resource.
     *
     * @param  \Ivz\Client\Model\QueueMember $queue_member The new QueueMember resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postQueueMemberCollectionAsyncWithHttpInfo($queue_member = null)
    {
        $returnType = '\Ivz\Client\Model\QueueMember';
        $request = $this->postQueueMemberCollectionRequest($queue_member);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postQueueMemberCollection'
     *
     * @param  \Ivz\Client\Model\QueueMember $queue_member The new QueueMember resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postQueueMemberCollectionRequest($queue_member = null)
    {

        $resourcePath = '/queue_members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($queue_member)) {
            $_tempBody = $queue_member;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postRouteLockCollection
     *
     * Creates a RouteLock resource.
     *
     * @param  \Ivz\Client\Model\RouteLock $route_lock The new RouteLock resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\RouteLock
     */
    public function postRouteLockCollection($route_lock = null)
    {
        list($response) = $this->postRouteLockCollectionWithHttpInfo($route_lock);
        return $response;
    }

    /**
     * Operation postRouteLockCollectionWithHttpInfo
     *
     * Creates a RouteLock resource.
     *
     * @param  \Ivz\Client\Model\RouteLock $route_lock The new RouteLock resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\RouteLock, HTTP status code, HTTP response headers (array of strings)
     */
    public function postRouteLockCollectionWithHttpInfo($route_lock = null)
    {
        $returnType = '\Ivz\Client\Model\RouteLock';
        $request = $this->postRouteLockCollectionRequest($route_lock);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\RouteLock',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postRouteLockCollectionAsync
     *
     * Creates a RouteLock resource.
     *
     * @param  \Ivz\Client\Model\RouteLock $route_lock The new RouteLock resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRouteLockCollectionAsync($route_lock = null)
    {
        return $this->postRouteLockCollectionAsyncWithHttpInfo($route_lock)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postRouteLockCollectionAsyncWithHttpInfo
     *
     * Creates a RouteLock resource.
     *
     * @param  \Ivz\Client\Model\RouteLock $route_lock The new RouteLock resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRouteLockCollectionAsyncWithHttpInfo($route_lock = null)
    {
        $returnType = '\Ivz\Client\Model\RouteLock';
        $request = $this->postRouteLockCollectionRequest($route_lock);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postRouteLockCollection'
     *
     * @param  \Ivz\Client\Model\RouteLock $route_lock The new RouteLock resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postRouteLockCollectionRequest($route_lock = null)
    {

        $resourcePath = '/route_locks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($route_lock)) {
            $_tempBody = $route_lock;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postScheduleCollection
     *
     * Creates a Schedule resource.
     *
     * @param  \Ivz\Client\Model\Schedule $schedule The new Schedule resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\Schedule
     */
    public function postScheduleCollection($schedule = null)
    {
        list($response) = $this->postScheduleCollectionWithHttpInfo($schedule);
        return $response;
    }

    /**
     * Operation postScheduleCollectionWithHttpInfo
     *
     * Creates a Schedule resource.
     *
     * @param  \Ivz\Client\Model\Schedule $schedule The new Schedule resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\Schedule, HTTP status code, HTTP response headers (array of strings)
     */
    public function postScheduleCollectionWithHttpInfo($schedule = null)
    {
        $returnType = '\Ivz\Client\Model\Schedule';
        $request = $this->postScheduleCollectionRequest($schedule);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\Schedule',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postScheduleCollectionAsync
     *
     * Creates a Schedule resource.
     *
     * @param  \Ivz\Client\Model\Schedule $schedule The new Schedule resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postScheduleCollectionAsync($schedule = null)
    {
        return $this->postScheduleCollectionAsyncWithHttpInfo($schedule)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postScheduleCollectionAsyncWithHttpInfo
     *
     * Creates a Schedule resource.
     *
     * @param  \Ivz\Client\Model\Schedule $schedule The new Schedule resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postScheduleCollectionAsyncWithHttpInfo($schedule = null)
    {
        $returnType = '\Ivz\Client\Model\Schedule';
        $request = $this->postScheduleCollectionRequest($schedule);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postScheduleCollection'
     *
     * @param  \Ivz\Client\Model\Schedule $schedule The new Schedule resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postScheduleCollectionRequest($schedule = null)
    {

        $resourcePath = '/schedules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($schedule)) {
            $_tempBody = $schedule;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postTerminalCollection
     *
     * Creates a Terminal resource.
     *
     * @param  \Ivz\Client\Model\Terminal $terminal The new Terminal resource (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\Terminal
     */
    public function postTerminalCollection($terminal = null, $_timezone = null)
    {
        list($response) = $this->postTerminalCollectionWithHttpInfo($terminal, $_timezone);
        return $response;
    }

    /**
     * Operation postTerminalCollectionWithHttpInfo
     *
     * Creates a Terminal resource.
     *
     * @param  \Ivz\Client\Model\Terminal $terminal The new Terminal resource (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\Terminal, HTTP status code, HTTP response headers (array of strings)
     */
    public function postTerminalCollectionWithHttpInfo($terminal = null, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\Terminal';
        $request = $this->postTerminalCollectionRequest($terminal, $_timezone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\Terminal',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postTerminalCollectionAsync
     *
     * Creates a Terminal resource.
     *
     * @param  \Ivz\Client\Model\Terminal $terminal The new Terminal resource (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postTerminalCollectionAsync($terminal = null, $_timezone = null)
    {
        return $this->postTerminalCollectionAsyncWithHttpInfo($terminal, $_timezone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postTerminalCollectionAsyncWithHttpInfo
     *
     * Creates a Terminal resource.
     *
     * @param  \Ivz\Client\Model\Terminal $terminal The new Terminal resource (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postTerminalCollectionAsyncWithHttpInfo($terminal = null, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\Terminal';
        $request = $this->postTerminalCollectionRequest($terminal, $_timezone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postTerminalCollection'
     *
     * @param  \Ivz\Client\Model\Terminal $terminal The new Terminal resource (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postTerminalCollectionRequest($terminal = null, $_timezone = null)
    {

        $resourcePath = '/terminals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_timezone !== null) {
            $queryParams['_timezone'] = ObjectSerializer::toQueryValue($_timezone);
        }


        // body params
        $_tempBody = null;
        if (isset($terminal)) {
            $_tempBody = $terminal;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postUserCollection
     *
     * Creates a User resource.
     *
     * @param  \Ivz\Client\Model\User $user The new User resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\User
     */
    public function postUserCollection($user = null)
    {
        list($response) = $this->postUserCollectionWithHttpInfo($user);
        return $response;
    }

    /**
     * Operation postUserCollectionWithHttpInfo
     *
     * Creates a User resource.
     *
     * @param  \Ivz\Client\Model\User $user The new User resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\User, HTTP status code, HTTP response headers (array of strings)
     */
    public function postUserCollectionWithHttpInfo($user = null)
    {
        $returnType = '\Ivz\Client\Model\User';
        $request = $this->postUserCollectionRequest($user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\User',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postUserCollectionAsync
     *
     * Creates a User resource.
     *
     * @param  \Ivz\Client\Model\User $user The new User resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postUserCollectionAsync($user = null)
    {
        return $this->postUserCollectionAsyncWithHttpInfo($user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postUserCollectionAsyncWithHttpInfo
     *
     * Creates a User resource.
     *
     * @param  \Ivz\Client\Model\User $user The new User resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postUserCollectionAsyncWithHttpInfo($user = null)
    {
        $returnType = '\Ivz\Client\Model\User';
        $request = $this->postUserCollectionRequest($user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postUserCollection'
     *
     * @param  \Ivz\Client\Model\User $user The new User resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postUserCollectionRequest($user = null)
    {

        $resourcePath = '/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($user)) {
            $_tempBody = $user;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putCalendarItem
     *
     * Replaces the Calendar resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\Calendar $calendar The updated Calendar resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\Calendar
     */
    public function putCalendarItem($id, $calendar = null)
    {
        list($response) = $this->putCalendarItemWithHttpInfo($id, $calendar);
        return $response;
    }

    /**
     * Operation putCalendarItemWithHttpInfo
     *
     * Replaces the Calendar resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Calendar $calendar The updated Calendar resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\Calendar, HTTP status code, HTTP response headers (array of strings)
     */
    public function putCalendarItemWithHttpInfo($id, $calendar = null)
    {
        $returnType = '\Ivz\Client\Model\Calendar';
        $request = $this->putCalendarItemRequest($id, $calendar);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\Calendar',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putCalendarItemAsync
     *
     * Replaces the Calendar resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Calendar $calendar The updated Calendar resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCalendarItemAsync($id, $calendar = null)
    {
        return $this->putCalendarItemAsyncWithHttpInfo($id, $calendar)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putCalendarItemAsyncWithHttpInfo
     *
     * Replaces the Calendar resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Calendar $calendar The updated Calendar resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCalendarItemAsyncWithHttpInfo($id, $calendar = null)
    {
        $returnType = '\Ivz\Client\Model\Calendar';
        $request = $this->putCalendarItemRequest($id, $calendar);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putCalendarItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Calendar $calendar The updated Calendar resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putCalendarItemRequest($id, $calendar = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putCalendarItem'
            );
        }

        $resourcePath = '/calendars/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($calendar)) {
            $_tempBody = $calendar;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putCalendarPeriodItem
     *
     * Replaces the CalendarPeriod resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\CalendarPeriod $calendar_period The updated CalendarPeriod resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CalendarPeriod
     */
    public function putCalendarPeriodItem($id, $calendar_period = null)
    {
        list($response) = $this->putCalendarPeriodItemWithHttpInfo($id, $calendar_period);
        return $response;
    }

    /**
     * Operation putCalendarPeriodItemWithHttpInfo
     *
     * Replaces the CalendarPeriod resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\CalendarPeriod $calendar_period The updated CalendarPeriod resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CalendarPeriod, HTTP status code, HTTP response headers (array of strings)
     */
    public function putCalendarPeriodItemWithHttpInfo($id, $calendar_period = null)
    {
        $returnType = '\Ivz\Client\Model\CalendarPeriod';
        $request = $this->putCalendarPeriodItemRequest($id, $calendar_period);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CalendarPeriod',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putCalendarPeriodItemAsync
     *
     * Replaces the CalendarPeriod resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\CalendarPeriod $calendar_period The updated CalendarPeriod resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCalendarPeriodItemAsync($id, $calendar_period = null)
    {
        return $this->putCalendarPeriodItemAsyncWithHttpInfo($id, $calendar_period)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putCalendarPeriodItemAsyncWithHttpInfo
     *
     * Replaces the CalendarPeriod resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\CalendarPeriod $calendar_period The updated CalendarPeriod resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCalendarPeriodItemAsyncWithHttpInfo($id, $calendar_period = null)
    {
        $returnType = '\Ivz\Client\Model\CalendarPeriod';
        $request = $this->putCalendarPeriodItemRequest($id, $calendar_period);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putCalendarPeriodItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\CalendarPeriod $calendar_period The updated CalendarPeriod resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putCalendarPeriodItemRequest($id, $calendar_period = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putCalendarPeriodItem'
            );
        }

        $resourcePath = '/calendar_periods/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($calendar_period)) {
            $_tempBody = $calendar_period;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putCalendarPeriodsRelScheduleItem
     *
     * Replaces the CalendarPeriodsRelSchedule resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\CalendarPeriodsRelSchedule $calendar_periods_rel_schedule The updated CalendarPeriodsRelSchedule resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CalendarPeriodsRelSchedule
     */
    public function putCalendarPeriodsRelScheduleItem($id, $calendar_periods_rel_schedule = null)
    {
        list($response) = $this->putCalendarPeriodsRelScheduleItemWithHttpInfo($id, $calendar_periods_rel_schedule);
        return $response;
    }

    /**
     * Operation putCalendarPeriodsRelScheduleItemWithHttpInfo
     *
     * Replaces the CalendarPeriodsRelSchedule resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\CalendarPeriodsRelSchedule $calendar_periods_rel_schedule The updated CalendarPeriodsRelSchedule resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CalendarPeriodsRelSchedule, HTTP status code, HTTP response headers (array of strings)
     */
    public function putCalendarPeriodsRelScheduleItemWithHttpInfo($id, $calendar_periods_rel_schedule = null)
    {
        $returnType = '\Ivz\Client\Model\CalendarPeriodsRelSchedule';
        $request = $this->putCalendarPeriodsRelScheduleItemRequest($id, $calendar_periods_rel_schedule);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CalendarPeriodsRelSchedule',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putCalendarPeriodsRelScheduleItemAsync
     *
     * Replaces the CalendarPeriodsRelSchedule resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\CalendarPeriodsRelSchedule $calendar_periods_rel_schedule The updated CalendarPeriodsRelSchedule resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCalendarPeriodsRelScheduleItemAsync($id, $calendar_periods_rel_schedule = null)
    {
        return $this->putCalendarPeriodsRelScheduleItemAsyncWithHttpInfo($id, $calendar_periods_rel_schedule)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putCalendarPeriodsRelScheduleItemAsyncWithHttpInfo
     *
     * Replaces the CalendarPeriodsRelSchedule resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\CalendarPeriodsRelSchedule $calendar_periods_rel_schedule The updated CalendarPeriodsRelSchedule resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCalendarPeriodsRelScheduleItemAsyncWithHttpInfo($id, $calendar_periods_rel_schedule = null)
    {
        $returnType = '\Ivz\Client\Model\CalendarPeriodsRelSchedule';
        $request = $this->putCalendarPeriodsRelScheduleItemRequest($id, $calendar_periods_rel_schedule);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putCalendarPeriodsRelScheduleItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\CalendarPeriodsRelSchedule $calendar_periods_rel_schedule The updated CalendarPeriodsRelSchedule resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putCalendarPeriodsRelScheduleItemRequest($id, $calendar_periods_rel_schedule = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putCalendarPeriodsRelScheduleItem'
            );
        }

        $resourcePath = '/calendar_periods_rel_schedules/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($calendar_periods_rel_schedule)) {
            $_tempBody = $calendar_periods_rel_schedule;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putCallAclItem
     *
     * Replaces the CallAcl resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\CallAcl $call_acl The updated CallAcl resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CallAcl
     */
    public function putCallAclItem($id, $call_acl = null)
    {
        list($response) = $this->putCallAclItemWithHttpInfo($id, $call_acl);
        return $response;
    }

    /**
     * Operation putCallAclItemWithHttpInfo
     *
     * Replaces the CallAcl resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\CallAcl $call_acl The updated CallAcl resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CallAcl, HTTP status code, HTTP response headers (array of strings)
     */
    public function putCallAclItemWithHttpInfo($id, $call_acl = null)
    {
        $returnType = '\Ivz\Client\Model\CallAcl';
        $request = $this->putCallAclItemRequest($id, $call_acl);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CallAcl',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putCallAclItemAsync
     *
     * Replaces the CallAcl resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\CallAcl $call_acl The updated CallAcl resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCallAclItemAsync($id, $call_acl = null)
    {
        return $this->putCallAclItemAsyncWithHttpInfo($id, $call_acl)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putCallAclItemAsyncWithHttpInfo
     *
     * Replaces the CallAcl resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\CallAcl $call_acl The updated CallAcl resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCallAclItemAsyncWithHttpInfo($id, $call_acl = null)
    {
        $returnType = '\Ivz\Client\Model\CallAcl';
        $request = $this->putCallAclItemRequest($id, $call_acl);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putCallAclItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\CallAcl $call_acl The updated CallAcl resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putCallAclItemRequest($id, $call_acl = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putCallAclItem'
            );
        }

        $resourcePath = '/call_acls/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($call_acl)) {
            $_tempBody = $call_acl;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putCallAclRelMatchListItem
     *
     * Replaces the CallAclRelMatchList resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\CallAclRelMatchList $call_acl_rel_match_list The updated CallAclRelMatchList resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CallAclRelMatchList
     */
    public function putCallAclRelMatchListItem($id, $call_acl_rel_match_list = null)
    {
        list($response) = $this->putCallAclRelMatchListItemWithHttpInfo($id, $call_acl_rel_match_list);
        return $response;
    }

    /**
     * Operation putCallAclRelMatchListItemWithHttpInfo
     *
     * Replaces the CallAclRelMatchList resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\CallAclRelMatchList $call_acl_rel_match_list The updated CallAclRelMatchList resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CallAclRelMatchList, HTTP status code, HTTP response headers (array of strings)
     */
    public function putCallAclRelMatchListItemWithHttpInfo($id, $call_acl_rel_match_list = null)
    {
        $returnType = '\Ivz\Client\Model\CallAclRelMatchList';
        $request = $this->putCallAclRelMatchListItemRequest($id, $call_acl_rel_match_list);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CallAclRelMatchList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putCallAclRelMatchListItemAsync
     *
     * Replaces the CallAclRelMatchList resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\CallAclRelMatchList $call_acl_rel_match_list The updated CallAclRelMatchList resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCallAclRelMatchListItemAsync($id, $call_acl_rel_match_list = null)
    {
        return $this->putCallAclRelMatchListItemAsyncWithHttpInfo($id, $call_acl_rel_match_list)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putCallAclRelMatchListItemAsyncWithHttpInfo
     *
     * Replaces the CallAclRelMatchList resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\CallAclRelMatchList $call_acl_rel_match_list The updated CallAclRelMatchList resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCallAclRelMatchListItemAsyncWithHttpInfo($id, $call_acl_rel_match_list = null)
    {
        $returnType = '\Ivz\Client\Model\CallAclRelMatchList';
        $request = $this->putCallAclRelMatchListItemRequest($id, $call_acl_rel_match_list);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putCallAclRelMatchListItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\CallAclRelMatchList $call_acl_rel_match_list The updated CallAclRelMatchList resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putCallAclRelMatchListItemRequest($id, $call_acl_rel_match_list = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putCallAclRelMatchListItem'
            );
        }

        $resourcePath = '/call_acl_rel_match_lists/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($call_acl_rel_match_list)) {
            $_tempBody = $call_acl_rel_match_list;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putCallCsvSchedulerItem
     *
     * Replaces the CallCsvScheduler resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\CallCsvScheduler $call_csv_scheduler The updated CallCsvScheduler resource (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CallCsvScheduler
     */
    public function putCallCsvSchedulerItem($id, $call_csv_scheduler = null, $_timezone = null)
    {
        list($response) = $this->putCallCsvSchedulerItemWithHttpInfo($id, $call_csv_scheduler, $_timezone);
        return $response;
    }

    /**
     * Operation putCallCsvSchedulerItemWithHttpInfo
     *
     * Replaces the CallCsvScheduler resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\CallCsvScheduler $call_csv_scheduler The updated CallCsvScheduler resource (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CallCsvScheduler, HTTP status code, HTTP response headers (array of strings)
     */
    public function putCallCsvSchedulerItemWithHttpInfo($id, $call_csv_scheduler = null, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\CallCsvScheduler';
        $request = $this->putCallCsvSchedulerItemRequest($id, $call_csv_scheduler, $_timezone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CallCsvScheduler',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putCallCsvSchedulerItemAsync
     *
     * Replaces the CallCsvScheduler resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\CallCsvScheduler $call_csv_scheduler The updated CallCsvScheduler resource (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCallCsvSchedulerItemAsync($id, $call_csv_scheduler = null, $_timezone = null)
    {
        return $this->putCallCsvSchedulerItemAsyncWithHttpInfo($id, $call_csv_scheduler, $_timezone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putCallCsvSchedulerItemAsyncWithHttpInfo
     *
     * Replaces the CallCsvScheduler resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\CallCsvScheduler $call_csv_scheduler The updated CallCsvScheduler resource (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCallCsvSchedulerItemAsyncWithHttpInfo($id, $call_csv_scheduler = null, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\CallCsvScheduler';
        $request = $this->putCallCsvSchedulerItemRequest($id, $call_csv_scheduler, $_timezone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putCallCsvSchedulerItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\CallCsvScheduler $call_csv_scheduler The updated CallCsvScheduler resource (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putCallCsvSchedulerItemRequest($id, $call_csv_scheduler = null, $_timezone = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putCallCsvSchedulerItem'
            );
        }

        $resourcePath = '/call_csv_schedulers/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_timezone !== null) {
            $queryParams['_timezone'] = ObjectSerializer::toQueryValue($_timezone);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($call_csv_scheduler)) {
            $_tempBody = $call_csv_scheduler;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putCallForwardSettingItem
     *
     * Replaces the CallForwardSetting resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\CallForwardSetting $call_forward_setting The updated CallForwardSetting resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CallForwardSetting
     */
    public function putCallForwardSettingItem($id, $call_forward_setting = null)
    {
        list($response) = $this->putCallForwardSettingItemWithHttpInfo($id, $call_forward_setting);
        return $response;
    }

    /**
     * Operation putCallForwardSettingItemWithHttpInfo
     *
     * Replaces the CallForwardSetting resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\CallForwardSetting $call_forward_setting The updated CallForwardSetting resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CallForwardSetting, HTTP status code, HTTP response headers (array of strings)
     */
    public function putCallForwardSettingItemWithHttpInfo($id, $call_forward_setting = null)
    {
        $returnType = '\Ivz\Client\Model\CallForwardSetting';
        $request = $this->putCallForwardSettingItemRequest($id, $call_forward_setting);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CallForwardSetting',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putCallForwardSettingItemAsync
     *
     * Replaces the CallForwardSetting resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\CallForwardSetting $call_forward_setting The updated CallForwardSetting resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCallForwardSettingItemAsync($id, $call_forward_setting = null)
    {
        return $this->putCallForwardSettingItemAsyncWithHttpInfo($id, $call_forward_setting)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putCallForwardSettingItemAsyncWithHttpInfo
     *
     * Replaces the CallForwardSetting resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\CallForwardSetting $call_forward_setting The updated CallForwardSetting resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCallForwardSettingItemAsyncWithHttpInfo($id, $call_forward_setting = null)
    {
        $returnType = '\Ivz\Client\Model\CallForwardSetting';
        $request = $this->putCallForwardSettingItemRequest($id, $call_forward_setting);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putCallForwardSettingItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\CallForwardSetting $call_forward_setting The updated CallForwardSetting resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putCallForwardSettingItemRequest($id, $call_forward_setting = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putCallForwardSettingItem'
            );
        }

        $resourcePath = '/call_forward_settings/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($call_forward_setting)) {
            $_tempBody = $call_forward_setting;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putCompanyServiceItem
     *
     * Replaces the CompanyService resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\CompanyService $company_service The updated CompanyService resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\CompanyService
     */
    public function putCompanyServiceItem($id, $company_service = null)
    {
        list($response) = $this->putCompanyServiceItemWithHttpInfo($id, $company_service);
        return $response;
    }

    /**
     * Operation putCompanyServiceItemWithHttpInfo
     *
     * Replaces the CompanyService resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\CompanyService $company_service The updated CompanyService resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\CompanyService, HTTP status code, HTTP response headers (array of strings)
     */
    public function putCompanyServiceItemWithHttpInfo($id, $company_service = null)
    {
        $returnType = '\Ivz\Client\Model\CompanyService';
        $request = $this->putCompanyServiceItemRequest($id, $company_service);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\CompanyService',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putCompanyServiceItemAsync
     *
     * Replaces the CompanyService resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\CompanyService $company_service The updated CompanyService resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCompanyServiceItemAsync($id, $company_service = null)
    {
        return $this->putCompanyServiceItemAsyncWithHttpInfo($id, $company_service)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putCompanyServiceItemAsyncWithHttpInfo
     *
     * Replaces the CompanyService resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\CompanyService $company_service The updated CompanyService resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCompanyServiceItemAsyncWithHttpInfo($id, $company_service = null)
    {
        $returnType = '\Ivz\Client\Model\CompanyService';
        $request = $this->putCompanyServiceItemRequest($id, $company_service);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putCompanyServiceItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\CompanyService $company_service The updated CompanyService resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putCompanyServiceItemRequest($id, $company_service = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putCompanyServiceItem'
            );
        }

        $resourcePath = '/company_services/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($company_service)) {
            $_tempBody = $company_service;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putConditionalRouteItem
     *
     * Replaces the ConditionalRoute resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\ConditionalRoute $conditional_route The updated ConditionalRoute resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ConditionalRoute
     */
    public function putConditionalRouteItem($id, $conditional_route = null)
    {
        list($response) = $this->putConditionalRouteItemWithHttpInfo($id, $conditional_route);
        return $response;
    }

    /**
     * Operation putConditionalRouteItemWithHttpInfo
     *
     * Replaces the ConditionalRoute resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ConditionalRoute $conditional_route The updated ConditionalRoute resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ConditionalRoute, HTTP status code, HTTP response headers (array of strings)
     */
    public function putConditionalRouteItemWithHttpInfo($id, $conditional_route = null)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoute';
        $request = $this->putConditionalRouteItemRequest($id, $conditional_route);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ConditionalRoute',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putConditionalRouteItemAsync
     *
     * Replaces the ConditionalRoute resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ConditionalRoute $conditional_route The updated ConditionalRoute resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putConditionalRouteItemAsync($id, $conditional_route = null)
    {
        return $this->putConditionalRouteItemAsyncWithHttpInfo($id, $conditional_route)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putConditionalRouteItemAsyncWithHttpInfo
     *
     * Replaces the ConditionalRoute resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ConditionalRoute $conditional_route The updated ConditionalRoute resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putConditionalRouteItemAsyncWithHttpInfo($id, $conditional_route = null)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoute';
        $request = $this->putConditionalRouteItemRequest($id, $conditional_route);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putConditionalRouteItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ConditionalRoute $conditional_route The updated ConditionalRoute resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putConditionalRouteItemRequest($id, $conditional_route = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putConditionalRouteItem'
            );
        }

        $resourcePath = '/conditional_routes/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($conditional_route)) {
            $_tempBody = $conditional_route;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putConditionalRoutesConditionItem
     *
     * Replaces the ConditionalRoutesCondition resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\ConditionalRoutesCondition $conditional_routes_condition The updated ConditionalRoutesCondition resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ConditionalRoutesConditionWithInverseRelationships
     */
    public function putConditionalRoutesConditionItem($id, $conditional_routes_condition = null)
    {
        list($response) = $this->putConditionalRoutesConditionItemWithHttpInfo($id, $conditional_routes_condition);
        return $response;
    }

    /**
     * Operation putConditionalRoutesConditionItemWithHttpInfo
     *
     * Replaces the ConditionalRoutesCondition resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ConditionalRoutesCondition $conditional_routes_condition The updated ConditionalRoutesCondition resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ConditionalRoutesConditionWithInverseRelationships, HTTP status code, HTTP response headers (array of strings)
     */
    public function putConditionalRoutesConditionItemWithHttpInfo($id, $conditional_routes_condition = null)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoutesConditionWithInverseRelationships';
        $request = $this->putConditionalRoutesConditionItemRequest($id, $conditional_routes_condition);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ConditionalRoutesConditionWithInverseRelationships',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putConditionalRoutesConditionItemAsync
     *
     * Replaces the ConditionalRoutesCondition resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ConditionalRoutesCondition $conditional_routes_condition The updated ConditionalRoutesCondition resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putConditionalRoutesConditionItemAsync($id, $conditional_routes_condition = null)
    {
        return $this->putConditionalRoutesConditionItemAsyncWithHttpInfo($id, $conditional_routes_condition)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putConditionalRoutesConditionItemAsyncWithHttpInfo
     *
     * Replaces the ConditionalRoutesCondition resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ConditionalRoutesCondition $conditional_routes_condition The updated ConditionalRoutesCondition resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putConditionalRoutesConditionItemAsyncWithHttpInfo($id, $conditional_routes_condition = null)
    {
        $returnType = '\Ivz\Client\Model\ConditionalRoutesConditionWithInverseRelationships';
        $request = $this->putConditionalRoutesConditionItemRequest($id, $conditional_routes_condition);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putConditionalRoutesConditionItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ConditionalRoutesCondition $conditional_routes_condition The updated ConditionalRoutesCondition resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putConditionalRoutesConditionItemRequest($id, $conditional_routes_condition = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putConditionalRoutesConditionItem'
            );
        }

        $resourcePath = '/conditional_routes_conditions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($conditional_routes_condition)) {
            $_tempBody = $conditional_routes_condition;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putConferenceRoomItem
     *
     * Replaces the ConferenceRoom resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\ConferenceRoom $conference_room The updated ConferenceRoom resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ConferenceRoom
     */
    public function putConferenceRoomItem($id, $conference_room = null)
    {
        list($response) = $this->putConferenceRoomItemWithHttpInfo($id, $conference_room);
        return $response;
    }

    /**
     * Operation putConferenceRoomItemWithHttpInfo
     *
     * Replaces the ConferenceRoom resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ConferenceRoom $conference_room The updated ConferenceRoom resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ConferenceRoom, HTTP status code, HTTP response headers (array of strings)
     */
    public function putConferenceRoomItemWithHttpInfo($id, $conference_room = null)
    {
        $returnType = '\Ivz\Client\Model\ConferenceRoom';
        $request = $this->putConferenceRoomItemRequest($id, $conference_room);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ConferenceRoom',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putConferenceRoomItemAsync
     *
     * Replaces the ConferenceRoom resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ConferenceRoom $conference_room The updated ConferenceRoom resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putConferenceRoomItemAsync($id, $conference_room = null)
    {
        return $this->putConferenceRoomItemAsyncWithHttpInfo($id, $conference_room)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putConferenceRoomItemAsyncWithHttpInfo
     *
     * Replaces the ConferenceRoom resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ConferenceRoom $conference_room The updated ConferenceRoom resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putConferenceRoomItemAsyncWithHttpInfo($id, $conference_room = null)
    {
        $returnType = '\Ivz\Client\Model\ConferenceRoom';
        $request = $this->putConferenceRoomItemRequest($id, $conference_room);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putConferenceRoomItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ConferenceRoom $conference_room The updated ConferenceRoom resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putConferenceRoomItemRequest($id, $conference_room = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putConferenceRoomItem'
            );
        }

        $resourcePath = '/conference_rooms/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($conference_room)) {
            $_tempBody = $conference_room;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putDdiItem
     *
     * Replaces the Ddi resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\Ddi $ddi The updated Ddi resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\Ddi
     */
    public function putDdiItem($id, $ddi = null)
    {
        list($response) = $this->putDdiItemWithHttpInfo($id, $ddi);
        return $response;
    }

    /**
     * Operation putDdiItemWithHttpInfo
     *
     * Replaces the Ddi resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Ddi $ddi The updated Ddi resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\Ddi, HTTP status code, HTTP response headers (array of strings)
     */
    public function putDdiItemWithHttpInfo($id, $ddi = null)
    {
        $returnType = '\Ivz\Client\Model\Ddi';
        $request = $this->putDdiItemRequest($id, $ddi);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\Ddi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putDdiItemAsync
     *
     * Replaces the Ddi resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Ddi $ddi The updated Ddi resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putDdiItemAsync($id, $ddi = null)
    {
        return $this->putDdiItemAsyncWithHttpInfo($id, $ddi)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putDdiItemAsyncWithHttpInfo
     *
     * Replaces the Ddi resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Ddi $ddi The updated Ddi resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putDdiItemAsyncWithHttpInfo($id, $ddi = null)
    {
        $returnType = '\Ivz\Client\Model\Ddi';
        $request = $this->putDdiItemRequest($id, $ddi);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putDdiItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Ddi $ddi The updated Ddi resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putDdiItemRequest($id, $ddi = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putDdiItem'
            );
        }

        $resourcePath = '/ddis/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($ddi)) {
            $_tempBody = $ddi;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putExtensionItem
     *
     * Replaces the Extension resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\Extension $extension The updated Extension resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\Extension
     */
    public function putExtensionItem($id, $extension = null)
    {
        list($response) = $this->putExtensionItemWithHttpInfo($id, $extension);
        return $response;
    }

    /**
     * Operation putExtensionItemWithHttpInfo
     *
     * Replaces the Extension resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Extension $extension The updated Extension resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\Extension, HTTP status code, HTTP response headers (array of strings)
     */
    public function putExtensionItemWithHttpInfo($id, $extension = null)
    {
        $returnType = '\Ivz\Client\Model\Extension';
        $request = $this->putExtensionItemRequest($id, $extension);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\Extension',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putExtensionItemAsync
     *
     * Replaces the Extension resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Extension $extension The updated Extension resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putExtensionItemAsync($id, $extension = null)
    {
        return $this->putExtensionItemAsyncWithHttpInfo($id, $extension)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putExtensionItemAsyncWithHttpInfo
     *
     * Replaces the Extension resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Extension $extension The updated Extension resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putExtensionItemAsyncWithHttpInfo($id, $extension = null)
    {
        $returnType = '\Ivz\Client\Model\Extension';
        $request = $this->putExtensionItemRequest($id, $extension);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putExtensionItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Extension $extension The updated Extension resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putExtensionItemRequest($id, $extension = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putExtensionItem'
            );
        }

        $resourcePath = '/extensions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($extension)) {
            $_tempBody = $extension;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putExternalCallFilterBlackListItem
     *
     * Replaces the ExternalCallFilterBlackList resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\ExternalCallFilterBlackList $external_call_filter_black_list The updated ExternalCallFilterBlackList resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ExternalCallFilterBlackList
     */
    public function putExternalCallFilterBlackListItem($id, $external_call_filter_black_list = null)
    {
        list($response) = $this->putExternalCallFilterBlackListItemWithHttpInfo($id, $external_call_filter_black_list);
        return $response;
    }

    /**
     * Operation putExternalCallFilterBlackListItemWithHttpInfo
     *
     * Replaces the ExternalCallFilterBlackList resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ExternalCallFilterBlackList $external_call_filter_black_list The updated ExternalCallFilterBlackList resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ExternalCallFilterBlackList, HTTP status code, HTTP response headers (array of strings)
     */
    public function putExternalCallFilterBlackListItemWithHttpInfo($id, $external_call_filter_black_list = null)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterBlackList';
        $request = $this->putExternalCallFilterBlackListItemRequest($id, $external_call_filter_black_list);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ExternalCallFilterBlackList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putExternalCallFilterBlackListItemAsync
     *
     * Replaces the ExternalCallFilterBlackList resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ExternalCallFilterBlackList $external_call_filter_black_list The updated ExternalCallFilterBlackList resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putExternalCallFilterBlackListItemAsync($id, $external_call_filter_black_list = null)
    {
        return $this->putExternalCallFilterBlackListItemAsyncWithHttpInfo($id, $external_call_filter_black_list)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putExternalCallFilterBlackListItemAsyncWithHttpInfo
     *
     * Replaces the ExternalCallFilterBlackList resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ExternalCallFilterBlackList $external_call_filter_black_list The updated ExternalCallFilterBlackList resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putExternalCallFilterBlackListItemAsyncWithHttpInfo($id, $external_call_filter_black_list = null)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterBlackList';
        $request = $this->putExternalCallFilterBlackListItemRequest($id, $external_call_filter_black_list);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putExternalCallFilterBlackListItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ExternalCallFilterBlackList $external_call_filter_black_list The updated ExternalCallFilterBlackList resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putExternalCallFilterBlackListItemRequest($id, $external_call_filter_black_list = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putExternalCallFilterBlackListItem'
            );
        }

        $resourcePath = '/external_call_filter_black_lists/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($external_call_filter_black_list)) {
            $_tempBody = $external_call_filter_black_list;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putExternalCallFilterItem
     *
     * Replaces the ExternalCallFilter resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\ExternalCallFilter $external_call_filter The updated ExternalCallFilter resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ExternalCallFilterWithInverseRelationships
     */
    public function putExternalCallFilterItem($id, $external_call_filter = null)
    {
        list($response) = $this->putExternalCallFilterItemWithHttpInfo($id, $external_call_filter);
        return $response;
    }

    /**
     * Operation putExternalCallFilterItemWithHttpInfo
     *
     * Replaces the ExternalCallFilter resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ExternalCallFilter $external_call_filter The updated ExternalCallFilter resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ExternalCallFilterWithInverseRelationships, HTTP status code, HTTP response headers (array of strings)
     */
    public function putExternalCallFilterItemWithHttpInfo($id, $external_call_filter = null)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterWithInverseRelationships';
        $request = $this->putExternalCallFilterItemRequest($id, $external_call_filter);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ExternalCallFilterWithInverseRelationships',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putExternalCallFilterItemAsync
     *
     * Replaces the ExternalCallFilter resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ExternalCallFilter $external_call_filter The updated ExternalCallFilter resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putExternalCallFilterItemAsync($id, $external_call_filter = null)
    {
        return $this->putExternalCallFilterItemAsyncWithHttpInfo($id, $external_call_filter)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putExternalCallFilterItemAsyncWithHttpInfo
     *
     * Replaces the ExternalCallFilter resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ExternalCallFilter $external_call_filter The updated ExternalCallFilter resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putExternalCallFilterItemAsyncWithHttpInfo($id, $external_call_filter = null)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterWithInverseRelationships';
        $request = $this->putExternalCallFilterItemRequest($id, $external_call_filter);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putExternalCallFilterItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ExternalCallFilter $external_call_filter The updated ExternalCallFilter resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putExternalCallFilterItemRequest($id, $external_call_filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putExternalCallFilterItem'
            );
        }

        $resourcePath = '/external_call_filters/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($external_call_filter)) {
            $_tempBody = $external_call_filter;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putExternalCallFilterRelCalendarItem
     *
     * Replaces the ExternalCallFilterRelCalendar resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\ExternalCallFilterRelCalendar $external_call_filter_rel_calendar The updated ExternalCallFilterRelCalendar resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ExternalCallFilterRelCalendar
     */
    public function putExternalCallFilterRelCalendarItem($id, $external_call_filter_rel_calendar = null)
    {
        list($response) = $this->putExternalCallFilterRelCalendarItemWithHttpInfo($id, $external_call_filter_rel_calendar);
        return $response;
    }

    /**
     * Operation putExternalCallFilterRelCalendarItemWithHttpInfo
     *
     * Replaces the ExternalCallFilterRelCalendar resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ExternalCallFilterRelCalendar $external_call_filter_rel_calendar The updated ExternalCallFilterRelCalendar resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ExternalCallFilterRelCalendar, HTTP status code, HTTP response headers (array of strings)
     */
    public function putExternalCallFilterRelCalendarItemWithHttpInfo($id, $external_call_filter_rel_calendar = null)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterRelCalendar';
        $request = $this->putExternalCallFilterRelCalendarItemRequest($id, $external_call_filter_rel_calendar);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ExternalCallFilterRelCalendar',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putExternalCallFilterRelCalendarItemAsync
     *
     * Replaces the ExternalCallFilterRelCalendar resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ExternalCallFilterRelCalendar $external_call_filter_rel_calendar The updated ExternalCallFilterRelCalendar resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putExternalCallFilterRelCalendarItemAsync($id, $external_call_filter_rel_calendar = null)
    {
        return $this->putExternalCallFilterRelCalendarItemAsyncWithHttpInfo($id, $external_call_filter_rel_calendar)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putExternalCallFilterRelCalendarItemAsyncWithHttpInfo
     *
     * Replaces the ExternalCallFilterRelCalendar resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ExternalCallFilterRelCalendar $external_call_filter_rel_calendar The updated ExternalCallFilterRelCalendar resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putExternalCallFilterRelCalendarItemAsyncWithHttpInfo($id, $external_call_filter_rel_calendar = null)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterRelCalendar';
        $request = $this->putExternalCallFilterRelCalendarItemRequest($id, $external_call_filter_rel_calendar);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putExternalCallFilterRelCalendarItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ExternalCallFilterRelCalendar $external_call_filter_rel_calendar The updated ExternalCallFilterRelCalendar resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putExternalCallFilterRelCalendarItemRequest($id, $external_call_filter_rel_calendar = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putExternalCallFilterRelCalendarItem'
            );
        }

        $resourcePath = '/external_call_filter_rel_calendars/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($external_call_filter_rel_calendar)) {
            $_tempBody = $external_call_filter_rel_calendar;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putExternalCallFilterRelScheduleItem
     *
     * Replaces the ExternalCallFilterRelSchedule resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\ExternalCallFilterRelSchedule $external_call_filter_rel_schedule The updated ExternalCallFilterRelSchedule resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ExternalCallFilterRelSchedule
     */
    public function putExternalCallFilterRelScheduleItem($id, $external_call_filter_rel_schedule = null)
    {
        list($response) = $this->putExternalCallFilterRelScheduleItemWithHttpInfo($id, $external_call_filter_rel_schedule);
        return $response;
    }

    /**
     * Operation putExternalCallFilterRelScheduleItemWithHttpInfo
     *
     * Replaces the ExternalCallFilterRelSchedule resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ExternalCallFilterRelSchedule $external_call_filter_rel_schedule The updated ExternalCallFilterRelSchedule resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ExternalCallFilterRelSchedule, HTTP status code, HTTP response headers (array of strings)
     */
    public function putExternalCallFilterRelScheduleItemWithHttpInfo($id, $external_call_filter_rel_schedule = null)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterRelSchedule';
        $request = $this->putExternalCallFilterRelScheduleItemRequest($id, $external_call_filter_rel_schedule);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ExternalCallFilterRelSchedule',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putExternalCallFilterRelScheduleItemAsync
     *
     * Replaces the ExternalCallFilterRelSchedule resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ExternalCallFilterRelSchedule $external_call_filter_rel_schedule The updated ExternalCallFilterRelSchedule resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putExternalCallFilterRelScheduleItemAsync($id, $external_call_filter_rel_schedule = null)
    {
        return $this->putExternalCallFilterRelScheduleItemAsyncWithHttpInfo($id, $external_call_filter_rel_schedule)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putExternalCallFilterRelScheduleItemAsyncWithHttpInfo
     *
     * Replaces the ExternalCallFilterRelSchedule resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ExternalCallFilterRelSchedule $external_call_filter_rel_schedule The updated ExternalCallFilterRelSchedule resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putExternalCallFilterRelScheduleItemAsyncWithHttpInfo($id, $external_call_filter_rel_schedule = null)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterRelSchedule';
        $request = $this->putExternalCallFilterRelScheduleItemRequest($id, $external_call_filter_rel_schedule);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putExternalCallFilterRelScheduleItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ExternalCallFilterRelSchedule $external_call_filter_rel_schedule The updated ExternalCallFilterRelSchedule resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putExternalCallFilterRelScheduleItemRequest($id, $external_call_filter_rel_schedule = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putExternalCallFilterRelScheduleItem'
            );
        }

        $resourcePath = '/external_call_filter_rel_schedules/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($external_call_filter_rel_schedule)) {
            $_tempBody = $external_call_filter_rel_schedule;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putExternalCallFilterWhiteListItem
     *
     * Replaces the ExternalCallFilterWhiteList resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\ExternalCallFilterWhiteList $external_call_filter_white_list The updated ExternalCallFilterWhiteList resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ExternalCallFilterWhiteList
     */
    public function putExternalCallFilterWhiteListItem($id, $external_call_filter_white_list = null)
    {
        list($response) = $this->putExternalCallFilterWhiteListItemWithHttpInfo($id, $external_call_filter_white_list);
        return $response;
    }

    /**
     * Operation putExternalCallFilterWhiteListItemWithHttpInfo
     *
     * Replaces the ExternalCallFilterWhiteList resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ExternalCallFilterWhiteList $external_call_filter_white_list The updated ExternalCallFilterWhiteList resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ExternalCallFilterWhiteList, HTTP status code, HTTP response headers (array of strings)
     */
    public function putExternalCallFilterWhiteListItemWithHttpInfo($id, $external_call_filter_white_list = null)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterWhiteList';
        $request = $this->putExternalCallFilterWhiteListItemRequest($id, $external_call_filter_white_list);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ExternalCallFilterWhiteList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putExternalCallFilterWhiteListItemAsync
     *
     * Replaces the ExternalCallFilterWhiteList resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ExternalCallFilterWhiteList $external_call_filter_white_list The updated ExternalCallFilterWhiteList resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putExternalCallFilterWhiteListItemAsync($id, $external_call_filter_white_list = null)
    {
        return $this->putExternalCallFilterWhiteListItemAsyncWithHttpInfo($id, $external_call_filter_white_list)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putExternalCallFilterWhiteListItemAsyncWithHttpInfo
     *
     * Replaces the ExternalCallFilterWhiteList resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ExternalCallFilterWhiteList $external_call_filter_white_list The updated ExternalCallFilterWhiteList resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putExternalCallFilterWhiteListItemAsyncWithHttpInfo($id, $external_call_filter_white_list = null)
    {
        $returnType = '\Ivz\Client\Model\ExternalCallFilterWhiteList';
        $request = $this->putExternalCallFilterWhiteListItemRequest($id, $external_call_filter_white_list);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putExternalCallFilterWhiteListItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ExternalCallFilterWhiteList $external_call_filter_white_list The updated ExternalCallFilterWhiteList resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putExternalCallFilterWhiteListItemRequest($id, $external_call_filter_white_list = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putExternalCallFilterWhiteListItem'
            );
        }

        $resourcePath = '/external_call_filter_white_lists/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($external_call_filter_white_list)) {
            $_tempBody = $external_call_filter_white_list;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putFaxItem
     *
     * Replaces the Fax resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\Fax $fax The updated Fax resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\Fax
     */
    public function putFaxItem($id, $fax = null)
    {
        list($response) = $this->putFaxItemWithHttpInfo($id, $fax);
        return $response;
    }

    /**
     * Operation putFaxItemWithHttpInfo
     *
     * Replaces the Fax resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Fax $fax The updated Fax resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\Fax, HTTP status code, HTTP response headers (array of strings)
     */
    public function putFaxItemWithHttpInfo($id, $fax = null)
    {
        $returnType = '\Ivz\Client\Model\Fax';
        $request = $this->putFaxItemRequest($id, $fax);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\Fax',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putFaxItemAsync
     *
     * Replaces the Fax resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Fax $fax The updated Fax resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFaxItemAsync($id, $fax = null)
    {
        return $this->putFaxItemAsyncWithHttpInfo($id, $fax)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putFaxItemAsyncWithHttpInfo
     *
     * Replaces the Fax resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Fax $fax The updated Fax resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFaxItemAsyncWithHttpInfo($id, $fax = null)
    {
        $returnType = '\Ivz\Client\Model\Fax';
        $request = $this->putFaxItemRequest($id, $fax);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putFaxItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Fax $fax The updated Fax resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putFaxItemRequest($id, $fax = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putFaxItem'
            );
        }

        $resourcePath = '/faxes/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($fax)) {
            $_tempBody = $fax;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putFriendItem
     *
     * Replaces the Friend resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\Friend $friend The updated Friend resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\Friend
     */
    public function putFriendItem($id, $friend = null)
    {
        list($response) = $this->putFriendItemWithHttpInfo($id, $friend);
        return $response;
    }

    /**
     * Operation putFriendItemWithHttpInfo
     *
     * Replaces the Friend resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Friend $friend The updated Friend resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\Friend, HTTP status code, HTTP response headers (array of strings)
     */
    public function putFriendItemWithHttpInfo($id, $friend = null)
    {
        $returnType = '\Ivz\Client\Model\Friend';
        $request = $this->putFriendItemRequest($id, $friend);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\Friend',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putFriendItemAsync
     *
     * Replaces the Friend resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Friend $friend The updated Friend resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFriendItemAsync($id, $friend = null)
    {
        return $this->putFriendItemAsyncWithHttpInfo($id, $friend)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putFriendItemAsyncWithHttpInfo
     *
     * Replaces the Friend resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Friend $friend The updated Friend resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFriendItemAsyncWithHttpInfo($id, $friend = null)
    {
        $returnType = '\Ivz\Client\Model\Friend';
        $request = $this->putFriendItemRequest($id, $friend);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putFriendItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Friend $friend The updated Friend resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putFriendItemRequest($id, $friend = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putFriendItem'
            );
        }

        $resourcePath = '/friends/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($friend)) {
            $_tempBody = $friend;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putFriendsPatternItem
     *
     * Replaces the FriendsPattern resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\FriendsPattern $friends_pattern The updated FriendsPattern resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\FriendsPattern
     */
    public function putFriendsPatternItem($id, $friends_pattern = null)
    {
        list($response) = $this->putFriendsPatternItemWithHttpInfo($id, $friends_pattern);
        return $response;
    }

    /**
     * Operation putFriendsPatternItemWithHttpInfo
     *
     * Replaces the FriendsPattern resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\FriendsPattern $friends_pattern The updated FriendsPattern resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\FriendsPattern, HTTP status code, HTTP response headers (array of strings)
     */
    public function putFriendsPatternItemWithHttpInfo($id, $friends_pattern = null)
    {
        $returnType = '\Ivz\Client\Model\FriendsPattern';
        $request = $this->putFriendsPatternItemRequest($id, $friends_pattern);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\FriendsPattern',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putFriendsPatternItemAsync
     *
     * Replaces the FriendsPattern resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\FriendsPattern $friends_pattern The updated FriendsPattern resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFriendsPatternItemAsync($id, $friends_pattern = null)
    {
        return $this->putFriendsPatternItemAsyncWithHttpInfo($id, $friends_pattern)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putFriendsPatternItemAsyncWithHttpInfo
     *
     * Replaces the FriendsPattern resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\FriendsPattern $friends_pattern The updated FriendsPattern resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFriendsPatternItemAsyncWithHttpInfo($id, $friends_pattern = null)
    {
        $returnType = '\Ivz\Client\Model\FriendsPattern';
        $request = $this->putFriendsPatternItemRequest($id, $friends_pattern);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putFriendsPatternItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\FriendsPattern $friends_pattern The updated FriendsPattern resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putFriendsPatternItemRequest($id, $friends_pattern = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putFriendsPatternItem'
            );
        }

        $resourcePath = '/friends_patterns/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($friends_pattern)) {
            $_tempBody = $friends_pattern;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putHolidayDateItem
     *
     * Replaces the HolidayDate resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\HolidayDate $holiday_date The updated HolidayDate resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\HolidayDate
     */
    public function putHolidayDateItem($id, $holiday_date = null)
    {
        list($response) = $this->putHolidayDateItemWithHttpInfo($id, $holiday_date);
        return $response;
    }

    /**
     * Operation putHolidayDateItemWithHttpInfo
     *
     * Replaces the HolidayDate resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\HolidayDate $holiday_date The updated HolidayDate resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\HolidayDate, HTTP status code, HTTP response headers (array of strings)
     */
    public function putHolidayDateItemWithHttpInfo($id, $holiday_date = null)
    {
        $returnType = '\Ivz\Client\Model\HolidayDate';
        $request = $this->putHolidayDateItemRequest($id, $holiday_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\HolidayDate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putHolidayDateItemAsync
     *
     * Replaces the HolidayDate resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\HolidayDate $holiday_date The updated HolidayDate resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putHolidayDateItemAsync($id, $holiday_date = null)
    {
        return $this->putHolidayDateItemAsyncWithHttpInfo($id, $holiday_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putHolidayDateItemAsyncWithHttpInfo
     *
     * Replaces the HolidayDate resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\HolidayDate $holiday_date The updated HolidayDate resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putHolidayDateItemAsyncWithHttpInfo($id, $holiday_date = null)
    {
        $returnType = '\Ivz\Client\Model\HolidayDate';
        $request = $this->putHolidayDateItemRequest($id, $holiday_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putHolidayDateItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\HolidayDate $holiday_date The updated HolidayDate resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putHolidayDateItemRequest($id, $holiday_date = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putHolidayDateItem'
            );
        }

        $resourcePath = '/holiday_dates/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($holiday_date)) {
            $_tempBody = $holiday_date;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putHuntGroupItem
     *
     * Replaces the HuntGroup resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\HuntGroup $hunt_group The updated HuntGroup resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\HuntGroup
     */
    public function putHuntGroupItem($id, $hunt_group = null)
    {
        list($response) = $this->putHuntGroupItemWithHttpInfo($id, $hunt_group);
        return $response;
    }

    /**
     * Operation putHuntGroupItemWithHttpInfo
     *
     * Replaces the HuntGroup resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\HuntGroup $hunt_group The updated HuntGroup resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\HuntGroup, HTTP status code, HTTP response headers (array of strings)
     */
    public function putHuntGroupItemWithHttpInfo($id, $hunt_group = null)
    {
        $returnType = '\Ivz\Client\Model\HuntGroup';
        $request = $this->putHuntGroupItemRequest($id, $hunt_group);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\HuntGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putHuntGroupItemAsync
     *
     * Replaces the HuntGroup resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\HuntGroup $hunt_group The updated HuntGroup resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putHuntGroupItemAsync($id, $hunt_group = null)
    {
        return $this->putHuntGroupItemAsyncWithHttpInfo($id, $hunt_group)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putHuntGroupItemAsyncWithHttpInfo
     *
     * Replaces the HuntGroup resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\HuntGroup $hunt_group The updated HuntGroup resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putHuntGroupItemAsyncWithHttpInfo($id, $hunt_group = null)
    {
        $returnType = '\Ivz\Client\Model\HuntGroup';
        $request = $this->putHuntGroupItemRequest($id, $hunt_group);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putHuntGroupItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\HuntGroup $hunt_group The updated HuntGroup resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putHuntGroupItemRequest($id, $hunt_group = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putHuntGroupItem'
            );
        }

        $resourcePath = '/hunt_groups/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($hunt_group)) {
            $_tempBody = $hunt_group;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putHuntGroupsRelUserItem
     *
     * Replaces the HuntGroupsRelUser resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\HuntGroupsRelUser $hunt_groups_rel_user The updated HuntGroupsRelUser resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\HuntGroupsRelUser
     */
    public function putHuntGroupsRelUserItem($id, $hunt_groups_rel_user = null)
    {
        list($response) = $this->putHuntGroupsRelUserItemWithHttpInfo($id, $hunt_groups_rel_user);
        return $response;
    }

    /**
     * Operation putHuntGroupsRelUserItemWithHttpInfo
     *
     * Replaces the HuntGroupsRelUser resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\HuntGroupsRelUser $hunt_groups_rel_user The updated HuntGroupsRelUser resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\HuntGroupsRelUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function putHuntGroupsRelUserItemWithHttpInfo($id, $hunt_groups_rel_user = null)
    {
        $returnType = '\Ivz\Client\Model\HuntGroupsRelUser';
        $request = $this->putHuntGroupsRelUserItemRequest($id, $hunt_groups_rel_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\HuntGroupsRelUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putHuntGroupsRelUserItemAsync
     *
     * Replaces the HuntGroupsRelUser resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\HuntGroupsRelUser $hunt_groups_rel_user The updated HuntGroupsRelUser resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putHuntGroupsRelUserItemAsync($id, $hunt_groups_rel_user = null)
    {
        return $this->putHuntGroupsRelUserItemAsyncWithHttpInfo($id, $hunt_groups_rel_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putHuntGroupsRelUserItemAsyncWithHttpInfo
     *
     * Replaces the HuntGroupsRelUser resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\HuntGroupsRelUser $hunt_groups_rel_user The updated HuntGroupsRelUser resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putHuntGroupsRelUserItemAsyncWithHttpInfo($id, $hunt_groups_rel_user = null)
    {
        $returnType = '\Ivz\Client\Model\HuntGroupsRelUser';
        $request = $this->putHuntGroupsRelUserItemRequest($id, $hunt_groups_rel_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putHuntGroupsRelUserItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\HuntGroupsRelUser $hunt_groups_rel_user The updated HuntGroupsRelUser resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putHuntGroupsRelUserItemRequest($id, $hunt_groups_rel_user = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putHuntGroupsRelUserItem'
            );
        }

        $resourcePath = '/hunt_groups_rel_users/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($hunt_groups_rel_user)) {
            $_tempBody = $hunt_groups_rel_user;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putIvrEntryItem
     *
     * Replaces the IvrEntry resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\IvrEntry $ivr_entry The updated IvrEntry resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\IvrEntry
     */
    public function putIvrEntryItem($id, $ivr_entry = null)
    {
        list($response) = $this->putIvrEntryItemWithHttpInfo($id, $ivr_entry);
        return $response;
    }

    /**
     * Operation putIvrEntryItemWithHttpInfo
     *
     * Replaces the IvrEntry resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\IvrEntry $ivr_entry The updated IvrEntry resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\IvrEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function putIvrEntryItemWithHttpInfo($id, $ivr_entry = null)
    {
        $returnType = '\Ivz\Client\Model\IvrEntry';
        $request = $this->putIvrEntryItemRequest($id, $ivr_entry);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\IvrEntry',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putIvrEntryItemAsync
     *
     * Replaces the IvrEntry resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\IvrEntry $ivr_entry The updated IvrEntry resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putIvrEntryItemAsync($id, $ivr_entry = null)
    {
        return $this->putIvrEntryItemAsyncWithHttpInfo($id, $ivr_entry)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putIvrEntryItemAsyncWithHttpInfo
     *
     * Replaces the IvrEntry resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\IvrEntry $ivr_entry The updated IvrEntry resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putIvrEntryItemAsyncWithHttpInfo($id, $ivr_entry = null)
    {
        $returnType = '\Ivz\Client\Model\IvrEntry';
        $request = $this->putIvrEntryItemRequest($id, $ivr_entry);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putIvrEntryItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\IvrEntry $ivr_entry The updated IvrEntry resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putIvrEntryItemRequest($id, $ivr_entry = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putIvrEntryItem'
            );
        }

        $resourcePath = '/ivr_entries/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($ivr_entry)) {
            $_tempBody = $ivr_entry;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putIvrExcludedExtensionItem
     *
     * Replaces the IvrExcludedExtension resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\IvrExcludedExtension $ivr_excluded_extension The updated IvrExcludedExtension resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\IvrExcludedExtension
     */
    public function putIvrExcludedExtensionItem($id, $ivr_excluded_extension = null)
    {
        list($response) = $this->putIvrExcludedExtensionItemWithHttpInfo($id, $ivr_excluded_extension);
        return $response;
    }

    /**
     * Operation putIvrExcludedExtensionItemWithHttpInfo
     *
     * Replaces the IvrExcludedExtension resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\IvrExcludedExtension $ivr_excluded_extension The updated IvrExcludedExtension resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\IvrExcludedExtension, HTTP status code, HTTP response headers (array of strings)
     */
    public function putIvrExcludedExtensionItemWithHttpInfo($id, $ivr_excluded_extension = null)
    {
        $returnType = '\Ivz\Client\Model\IvrExcludedExtension';
        $request = $this->putIvrExcludedExtensionItemRequest($id, $ivr_excluded_extension);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\IvrExcludedExtension',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putIvrExcludedExtensionItemAsync
     *
     * Replaces the IvrExcludedExtension resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\IvrExcludedExtension $ivr_excluded_extension The updated IvrExcludedExtension resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putIvrExcludedExtensionItemAsync($id, $ivr_excluded_extension = null)
    {
        return $this->putIvrExcludedExtensionItemAsyncWithHttpInfo($id, $ivr_excluded_extension)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putIvrExcludedExtensionItemAsyncWithHttpInfo
     *
     * Replaces the IvrExcludedExtension resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\IvrExcludedExtension $ivr_excluded_extension The updated IvrExcludedExtension resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putIvrExcludedExtensionItemAsyncWithHttpInfo($id, $ivr_excluded_extension = null)
    {
        $returnType = '\Ivz\Client\Model\IvrExcludedExtension';
        $request = $this->putIvrExcludedExtensionItemRequest($id, $ivr_excluded_extension);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putIvrExcludedExtensionItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\IvrExcludedExtension $ivr_excluded_extension The updated IvrExcludedExtension resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putIvrExcludedExtensionItemRequest($id, $ivr_excluded_extension = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putIvrExcludedExtensionItem'
            );
        }

        $resourcePath = '/ivr_excluded_extensions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($ivr_excluded_extension)) {
            $_tempBody = $ivr_excluded_extension;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putIvrItem
     *
     * Replaces the Ivr resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\Ivr $ivr The updated Ivr resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\IvrWithExcludedExtensions
     */
    public function putIvrItem($id, $ivr = null)
    {
        list($response) = $this->putIvrItemWithHttpInfo($id, $ivr);
        return $response;
    }

    /**
     * Operation putIvrItemWithHttpInfo
     *
     * Replaces the Ivr resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Ivr $ivr The updated Ivr resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\IvrWithExcludedExtensions, HTTP status code, HTTP response headers (array of strings)
     */
    public function putIvrItemWithHttpInfo($id, $ivr = null)
    {
        $returnType = '\Ivz\Client\Model\IvrWithExcludedExtensions';
        $request = $this->putIvrItemRequest($id, $ivr);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\IvrWithExcludedExtensions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putIvrItemAsync
     *
     * Replaces the Ivr resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Ivr $ivr The updated Ivr resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putIvrItemAsync($id, $ivr = null)
    {
        return $this->putIvrItemAsyncWithHttpInfo($id, $ivr)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putIvrItemAsyncWithHttpInfo
     *
     * Replaces the Ivr resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Ivr $ivr The updated Ivr resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putIvrItemAsyncWithHttpInfo($id, $ivr = null)
    {
        $returnType = '\Ivz\Client\Model\IvrWithExcludedExtensions';
        $request = $this->putIvrItemRequest($id, $ivr);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putIvrItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Ivr $ivr The updated Ivr resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putIvrItemRequest($id, $ivr = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putIvrItem'
            );
        }

        $resourcePath = '/ivrs/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($ivr)) {
            $_tempBody = $ivr;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putLocationItem
     *
     * Replaces the Location resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\Location $location The updated Location resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\Location
     */
    public function putLocationItem($id, $location = null)
    {
        list($response) = $this->putLocationItemWithHttpInfo($id, $location);
        return $response;
    }

    /**
     * Operation putLocationItemWithHttpInfo
     *
     * Replaces the Location resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Location $location The updated Location resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\Location, HTTP status code, HTTP response headers (array of strings)
     */
    public function putLocationItemWithHttpInfo($id, $location = null)
    {
        $returnType = '\Ivz\Client\Model\Location';
        $request = $this->putLocationItemRequest($id, $location);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\Location',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putLocationItemAsync
     *
     * Replaces the Location resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Location $location The updated Location resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putLocationItemAsync($id, $location = null)
    {
        return $this->putLocationItemAsyncWithHttpInfo($id, $location)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putLocationItemAsyncWithHttpInfo
     *
     * Replaces the Location resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Location $location The updated Location resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putLocationItemAsyncWithHttpInfo($id, $location = null)
    {
        $returnType = '\Ivz\Client\Model\Location';
        $request = $this->putLocationItemRequest($id, $location);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putLocationItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Location $location The updated Location resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putLocationItemRequest($id, $location = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putLocationItem'
            );
        }

        $resourcePath = '/locations/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($location)) {
            $_tempBody = $location;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putLocutionItem
     *
     * Replaces the Locution resource.
     *
     * @param  string $id id (required)
     * @param  string $locution The updated Locution resource (optional)
     * @param  \SplFileObject $original_file original_file (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\Locution
     */
    public function putLocutionItem($id, $locution = null, $original_file = null)
    {
        list($response) = $this->putLocutionItemWithHttpInfo($id, $locution, $original_file);
        return $response;
    }

    /**
     * Operation putLocutionItemWithHttpInfo
     *
     * Replaces the Locution resource.
     *
     * @param  string $id (required)
     * @param  string $locution The updated Locution resource (optional)
     * @param  \SplFileObject $original_file (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\Locution, HTTP status code, HTTP response headers (array of strings)
     */
    public function putLocutionItemWithHttpInfo($id, $locution = null, $original_file = null)
    {
        $returnType = '\Ivz\Client\Model\Locution';
        $request = $this->putLocutionItemRequest($id, $locution, $original_file);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\Locution',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putLocutionItemAsync
     *
     * Replaces the Locution resource.
     *
     * @param  string $id (required)
     * @param  string $locution The updated Locution resource (optional)
     * @param  \SplFileObject $original_file (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putLocutionItemAsync($id, $locution = null, $original_file = null)
    {
        return $this->putLocutionItemAsyncWithHttpInfo($id, $locution, $original_file)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putLocutionItemAsyncWithHttpInfo
     *
     * Replaces the Locution resource.
     *
     * @param  string $id (required)
     * @param  string $locution The updated Locution resource (optional)
     * @param  \SplFileObject $original_file (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putLocutionItemAsyncWithHttpInfo($id, $locution = null, $original_file = null)
    {
        $returnType = '\Ivz\Client\Model\Locution';
        $request = $this->putLocutionItemRequest($id, $locution, $original_file);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putLocutionItem'
     *
     * @param  string $id (required)
     * @param  string $locution The updated Locution resource (optional)
     * @param  \SplFileObject $original_file (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putLocutionItemRequest($id, $locution = null, $original_file = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putLocutionItem'
            );
        }

        $resourcePath = '/locutions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($locution !== null) {
            $formParams['locution'] = ObjectSerializer::toFormValue($locution);
        }
        // form params
        if ($original_file !== null) {
            $multipart = true;
            $formParams['OriginalFile'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($original_file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['multipart/form-data', 'application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putMatchListItem
     *
     * Replaces the MatchList resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\MatchList $match_list The updated MatchList resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\MatchList
     */
    public function putMatchListItem($id, $match_list = null)
    {
        list($response) = $this->putMatchListItemWithHttpInfo($id, $match_list);
        return $response;
    }

    /**
     * Operation putMatchListItemWithHttpInfo
     *
     * Replaces the MatchList resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\MatchList $match_list The updated MatchList resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\MatchList, HTTP status code, HTTP response headers (array of strings)
     */
    public function putMatchListItemWithHttpInfo($id, $match_list = null)
    {
        $returnType = '\Ivz\Client\Model\MatchList';
        $request = $this->putMatchListItemRequest($id, $match_list);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\MatchList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putMatchListItemAsync
     *
     * Replaces the MatchList resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\MatchList $match_list The updated MatchList resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putMatchListItemAsync($id, $match_list = null)
    {
        return $this->putMatchListItemAsyncWithHttpInfo($id, $match_list)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putMatchListItemAsyncWithHttpInfo
     *
     * Replaces the MatchList resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\MatchList $match_list The updated MatchList resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putMatchListItemAsyncWithHttpInfo($id, $match_list = null)
    {
        $returnType = '\Ivz\Client\Model\MatchList';
        $request = $this->putMatchListItemRequest($id, $match_list);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putMatchListItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\MatchList $match_list The updated MatchList resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putMatchListItemRequest($id, $match_list = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putMatchListItem'
            );
        }

        $resourcePath = '/match_lists/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($match_list)) {
            $_tempBody = $match_list;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putMatchListPatternItem
     *
     * Replaces the MatchListPattern resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\MatchListPattern $match_list_pattern The updated MatchListPattern resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\MatchListPattern
     */
    public function putMatchListPatternItem($id, $match_list_pattern = null)
    {
        list($response) = $this->putMatchListPatternItemWithHttpInfo($id, $match_list_pattern);
        return $response;
    }

    /**
     * Operation putMatchListPatternItemWithHttpInfo
     *
     * Replaces the MatchListPattern resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\MatchListPattern $match_list_pattern The updated MatchListPattern resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\MatchListPattern, HTTP status code, HTTP response headers (array of strings)
     */
    public function putMatchListPatternItemWithHttpInfo($id, $match_list_pattern = null)
    {
        $returnType = '\Ivz\Client\Model\MatchListPattern';
        $request = $this->putMatchListPatternItemRequest($id, $match_list_pattern);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\MatchListPattern',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putMatchListPatternItemAsync
     *
     * Replaces the MatchListPattern resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\MatchListPattern $match_list_pattern The updated MatchListPattern resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putMatchListPatternItemAsync($id, $match_list_pattern = null)
    {
        return $this->putMatchListPatternItemAsyncWithHttpInfo($id, $match_list_pattern)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putMatchListPatternItemAsyncWithHttpInfo
     *
     * Replaces the MatchListPattern resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\MatchListPattern $match_list_pattern The updated MatchListPattern resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putMatchListPatternItemAsyncWithHttpInfo($id, $match_list_pattern = null)
    {
        $returnType = '\Ivz\Client\Model\MatchListPattern';
        $request = $this->putMatchListPatternItemRequest($id, $match_list_pattern);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putMatchListPatternItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\MatchListPattern $match_list_pattern The updated MatchListPattern resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putMatchListPatternItemRequest($id, $match_list_pattern = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putMatchListPatternItem'
            );
        }

        $resourcePath = '/match_list_patterns/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($match_list_pattern)) {
            $_tempBody = $match_list_pattern;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putMusicOnHoldItem
     *
     * Replaces the MusicOnHold resource.
     *
     * @param  string $id id (required)
     * @param  string $music_on_hold The updated MusicOnHold resource (optional)
     * @param  \SplFileObject $original_file original_file (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\MusicOnHold
     */
    public function putMusicOnHoldItem($id, $music_on_hold = null, $original_file = null)
    {
        list($response) = $this->putMusicOnHoldItemWithHttpInfo($id, $music_on_hold, $original_file);
        return $response;
    }

    /**
     * Operation putMusicOnHoldItemWithHttpInfo
     *
     * Replaces the MusicOnHold resource.
     *
     * @param  string $id (required)
     * @param  string $music_on_hold The updated MusicOnHold resource (optional)
     * @param  \SplFileObject $original_file (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\MusicOnHold, HTTP status code, HTTP response headers (array of strings)
     */
    public function putMusicOnHoldItemWithHttpInfo($id, $music_on_hold = null, $original_file = null)
    {
        $returnType = '\Ivz\Client\Model\MusicOnHold';
        $request = $this->putMusicOnHoldItemRequest($id, $music_on_hold, $original_file);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\MusicOnHold',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putMusicOnHoldItemAsync
     *
     * Replaces the MusicOnHold resource.
     *
     * @param  string $id (required)
     * @param  string $music_on_hold The updated MusicOnHold resource (optional)
     * @param  \SplFileObject $original_file (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putMusicOnHoldItemAsync($id, $music_on_hold = null, $original_file = null)
    {
        return $this->putMusicOnHoldItemAsyncWithHttpInfo($id, $music_on_hold, $original_file)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putMusicOnHoldItemAsyncWithHttpInfo
     *
     * Replaces the MusicOnHold resource.
     *
     * @param  string $id (required)
     * @param  string $music_on_hold The updated MusicOnHold resource (optional)
     * @param  \SplFileObject $original_file (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putMusicOnHoldItemAsyncWithHttpInfo($id, $music_on_hold = null, $original_file = null)
    {
        $returnType = '\Ivz\Client\Model\MusicOnHold';
        $request = $this->putMusicOnHoldItemRequest($id, $music_on_hold, $original_file);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putMusicOnHoldItem'
     *
     * @param  string $id (required)
     * @param  string $music_on_hold The updated MusicOnHold resource (optional)
     * @param  \SplFileObject $original_file (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putMusicOnHoldItemRequest($id, $music_on_hold = null, $original_file = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putMusicOnHoldItem'
            );
        }

        $resourcePath = '/music_on_holds/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($music_on_hold !== null) {
            $formParams['musicOnHold'] = ObjectSerializer::toFormValue($music_on_hold);
        }
        // form params
        if ($original_file !== null) {
            $multipart = true;
            $formParams['OriginalFile'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($original_file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['multipart/form-data', 'application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putOutgoingDdiRuleItem
     *
     * Replaces the OutgoingDdiRule resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\OutgoingDdiRule $outgoing_ddi_rule The updated OutgoingDdiRule resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\OutgoingDdiRule
     */
    public function putOutgoingDdiRuleItem($id, $outgoing_ddi_rule = null)
    {
        list($response) = $this->putOutgoingDdiRuleItemWithHttpInfo($id, $outgoing_ddi_rule);
        return $response;
    }

    /**
     * Operation putOutgoingDdiRuleItemWithHttpInfo
     *
     * Replaces the OutgoingDdiRule resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\OutgoingDdiRule $outgoing_ddi_rule The updated OutgoingDdiRule resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\OutgoingDdiRule, HTTP status code, HTTP response headers (array of strings)
     */
    public function putOutgoingDdiRuleItemWithHttpInfo($id, $outgoing_ddi_rule = null)
    {
        $returnType = '\Ivz\Client\Model\OutgoingDdiRule';
        $request = $this->putOutgoingDdiRuleItemRequest($id, $outgoing_ddi_rule);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\OutgoingDdiRule',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putOutgoingDdiRuleItemAsync
     *
     * Replaces the OutgoingDdiRule resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\OutgoingDdiRule $outgoing_ddi_rule The updated OutgoingDdiRule resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putOutgoingDdiRuleItemAsync($id, $outgoing_ddi_rule = null)
    {
        return $this->putOutgoingDdiRuleItemAsyncWithHttpInfo($id, $outgoing_ddi_rule)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putOutgoingDdiRuleItemAsyncWithHttpInfo
     *
     * Replaces the OutgoingDdiRule resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\OutgoingDdiRule $outgoing_ddi_rule The updated OutgoingDdiRule resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putOutgoingDdiRuleItemAsyncWithHttpInfo($id, $outgoing_ddi_rule = null)
    {
        $returnType = '\Ivz\Client\Model\OutgoingDdiRule';
        $request = $this->putOutgoingDdiRuleItemRequest($id, $outgoing_ddi_rule);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putOutgoingDdiRuleItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\OutgoingDdiRule $outgoing_ddi_rule The updated OutgoingDdiRule resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putOutgoingDdiRuleItemRequest($id, $outgoing_ddi_rule = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putOutgoingDdiRuleItem'
            );
        }

        $resourcePath = '/outgoing_ddi_rules/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($outgoing_ddi_rule)) {
            $_tempBody = $outgoing_ddi_rule;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putOutgoingDdiRulesPatternItem
     *
     * Replaces the OutgoingDdiRulesPattern resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\OutgoingDdiRulesPattern $outgoing_ddi_rules_pattern The updated OutgoingDdiRulesPattern resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\OutgoingDdiRulesPattern
     */
    public function putOutgoingDdiRulesPatternItem($id, $outgoing_ddi_rules_pattern = null)
    {
        list($response) = $this->putOutgoingDdiRulesPatternItemWithHttpInfo($id, $outgoing_ddi_rules_pattern);
        return $response;
    }

    /**
     * Operation putOutgoingDdiRulesPatternItemWithHttpInfo
     *
     * Replaces the OutgoingDdiRulesPattern resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\OutgoingDdiRulesPattern $outgoing_ddi_rules_pattern The updated OutgoingDdiRulesPattern resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\OutgoingDdiRulesPattern, HTTP status code, HTTP response headers (array of strings)
     */
    public function putOutgoingDdiRulesPatternItemWithHttpInfo($id, $outgoing_ddi_rules_pattern = null)
    {
        $returnType = '\Ivz\Client\Model\OutgoingDdiRulesPattern';
        $request = $this->putOutgoingDdiRulesPatternItemRequest($id, $outgoing_ddi_rules_pattern);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\OutgoingDdiRulesPattern',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putOutgoingDdiRulesPatternItemAsync
     *
     * Replaces the OutgoingDdiRulesPattern resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\OutgoingDdiRulesPattern $outgoing_ddi_rules_pattern The updated OutgoingDdiRulesPattern resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putOutgoingDdiRulesPatternItemAsync($id, $outgoing_ddi_rules_pattern = null)
    {
        return $this->putOutgoingDdiRulesPatternItemAsyncWithHttpInfo($id, $outgoing_ddi_rules_pattern)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putOutgoingDdiRulesPatternItemAsyncWithHttpInfo
     *
     * Replaces the OutgoingDdiRulesPattern resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\OutgoingDdiRulesPattern $outgoing_ddi_rules_pattern The updated OutgoingDdiRulesPattern resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putOutgoingDdiRulesPatternItemAsyncWithHttpInfo($id, $outgoing_ddi_rules_pattern = null)
    {
        $returnType = '\Ivz\Client\Model\OutgoingDdiRulesPattern';
        $request = $this->putOutgoingDdiRulesPatternItemRequest($id, $outgoing_ddi_rules_pattern);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putOutgoingDdiRulesPatternItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\OutgoingDdiRulesPattern $outgoing_ddi_rules_pattern The updated OutgoingDdiRulesPattern resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putOutgoingDdiRulesPatternItemRequest($id, $outgoing_ddi_rules_pattern = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putOutgoingDdiRulesPatternItem'
            );
        }

        $resourcePath = '/outgoing_ddi_rules_patterns/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($outgoing_ddi_rules_pattern)) {
            $_tempBody = $outgoing_ddi_rules_pattern;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putPickUpGroupItem
     *
     * Replaces the PickUpGroup resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\PickUpGroup $pick_up_group The updated PickUpGroup resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\PickUpGroupWithUsers
     */
    public function putPickUpGroupItem($id, $pick_up_group = null)
    {
        list($response) = $this->putPickUpGroupItemWithHttpInfo($id, $pick_up_group);
        return $response;
    }

    /**
     * Operation putPickUpGroupItemWithHttpInfo
     *
     * Replaces the PickUpGroup resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\PickUpGroup $pick_up_group The updated PickUpGroup resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\PickUpGroupWithUsers, HTTP status code, HTTP response headers (array of strings)
     */
    public function putPickUpGroupItemWithHttpInfo($id, $pick_up_group = null)
    {
        $returnType = '\Ivz\Client\Model\PickUpGroupWithUsers';
        $request = $this->putPickUpGroupItemRequest($id, $pick_up_group);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\PickUpGroupWithUsers',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putPickUpGroupItemAsync
     *
     * Replaces the PickUpGroup resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\PickUpGroup $pick_up_group The updated PickUpGroup resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putPickUpGroupItemAsync($id, $pick_up_group = null)
    {
        return $this->putPickUpGroupItemAsyncWithHttpInfo($id, $pick_up_group)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putPickUpGroupItemAsyncWithHttpInfo
     *
     * Replaces the PickUpGroup resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\PickUpGroup $pick_up_group The updated PickUpGroup resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putPickUpGroupItemAsyncWithHttpInfo($id, $pick_up_group = null)
    {
        $returnType = '\Ivz\Client\Model\PickUpGroupWithUsers';
        $request = $this->putPickUpGroupItemRequest($id, $pick_up_group);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putPickUpGroupItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\PickUpGroup $pick_up_group The updated PickUpGroup resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putPickUpGroupItemRequest($id, $pick_up_group = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putPickUpGroupItem'
            );
        }

        $resourcePath = '/pick_up_groups/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($pick_up_group)) {
            $_tempBody = $pick_up_group;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putPickUpRelUserItem
     *
     * Replaces the PickUpRelUser resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\PickUpRelUser $pick_up_rel_user The updated PickUpRelUser resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\PickUpRelUser
     */
    public function putPickUpRelUserItem($id, $pick_up_rel_user = null)
    {
        list($response) = $this->putPickUpRelUserItemWithHttpInfo($id, $pick_up_rel_user);
        return $response;
    }

    /**
     * Operation putPickUpRelUserItemWithHttpInfo
     *
     * Replaces the PickUpRelUser resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\PickUpRelUser $pick_up_rel_user The updated PickUpRelUser resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\PickUpRelUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function putPickUpRelUserItemWithHttpInfo($id, $pick_up_rel_user = null)
    {
        $returnType = '\Ivz\Client\Model\PickUpRelUser';
        $request = $this->putPickUpRelUserItemRequest($id, $pick_up_rel_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\PickUpRelUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putPickUpRelUserItemAsync
     *
     * Replaces the PickUpRelUser resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\PickUpRelUser $pick_up_rel_user The updated PickUpRelUser resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putPickUpRelUserItemAsync($id, $pick_up_rel_user = null)
    {
        return $this->putPickUpRelUserItemAsyncWithHttpInfo($id, $pick_up_rel_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putPickUpRelUserItemAsyncWithHttpInfo
     *
     * Replaces the PickUpRelUser resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\PickUpRelUser $pick_up_rel_user The updated PickUpRelUser resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putPickUpRelUserItemAsyncWithHttpInfo($id, $pick_up_rel_user = null)
    {
        $returnType = '\Ivz\Client\Model\PickUpRelUser';
        $request = $this->putPickUpRelUserItemRequest($id, $pick_up_rel_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putPickUpRelUserItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\PickUpRelUser $pick_up_rel_user The updated PickUpRelUser resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putPickUpRelUserItemRequest($id, $pick_up_rel_user = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putPickUpRelUserItem'
            );
        }

        $resourcePath = '/pick_up_rel_users/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($pick_up_rel_user)) {
            $_tempBody = $pick_up_rel_user;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putQueueItem
     *
     * Replaces the Queue resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\Queue $queue The updated Queue resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\Queue
     */
    public function putQueueItem($id, $queue = null)
    {
        list($response) = $this->putQueueItemWithHttpInfo($id, $queue);
        return $response;
    }

    /**
     * Operation putQueueItemWithHttpInfo
     *
     * Replaces the Queue resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Queue $queue The updated Queue resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\Queue, HTTP status code, HTTP response headers (array of strings)
     */
    public function putQueueItemWithHttpInfo($id, $queue = null)
    {
        $returnType = '\Ivz\Client\Model\Queue';
        $request = $this->putQueueItemRequest($id, $queue);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\Queue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putQueueItemAsync
     *
     * Replaces the Queue resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Queue $queue The updated Queue resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putQueueItemAsync($id, $queue = null)
    {
        return $this->putQueueItemAsyncWithHttpInfo($id, $queue)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putQueueItemAsyncWithHttpInfo
     *
     * Replaces the Queue resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Queue $queue The updated Queue resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putQueueItemAsyncWithHttpInfo($id, $queue = null)
    {
        $returnType = '\Ivz\Client\Model\Queue';
        $request = $this->putQueueItemRequest($id, $queue);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putQueueItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Queue $queue The updated Queue resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putQueueItemRequest($id, $queue = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putQueueItem'
            );
        }

        $resourcePath = '/queues/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($queue)) {
            $_tempBody = $queue;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putQueueMemberItem
     *
     * Replaces the QueueMember resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\QueueMember $queue_member The updated QueueMember resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\QueueMember
     */
    public function putQueueMemberItem($id, $queue_member = null)
    {
        list($response) = $this->putQueueMemberItemWithHttpInfo($id, $queue_member);
        return $response;
    }

    /**
     * Operation putQueueMemberItemWithHttpInfo
     *
     * Replaces the QueueMember resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\QueueMember $queue_member The updated QueueMember resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\QueueMember, HTTP status code, HTTP response headers (array of strings)
     */
    public function putQueueMemberItemWithHttpInfo($id, $queue_member = null)
    {
        $returnType = '\Ivz\Client\Model\QueueMember';
        $request = $this->putQueueMemberItemRequest($id, $queue_member);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\QueueMember',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putQueueMemberItemAsync
     *
     * Replaces the QueueMember resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\QueueMember $queue_member The updated QueueMember resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putQueueMemberItemAsync($id, $queue_member = null)
    {
        return $this->putQueueMemberItemAsyncWithHttpInfo($id, $queue_member)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putQueueMemberItemAsyncWithHttpInfo
     *
     * Replaces the QueueMember resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\QueueMember $queue_member The updated QueueMember resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putQueueMemberItemAsyncWithHttpInfo($id, $queue_member = null)
    {
        $returnType = '\Ivz\Client\Model\QueueMember';
        $request = $this->putQueueMemberItemRequest($id, $queue_member);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putQueueMemberItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\QueueMember $queue_member The updated QueueMember resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putQueueMemberItemRequest($id, $queue_member = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putQueueMemberItem'
            );
        }

        $resourcePath = '/queue_members/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($queue_member)) {
            $_tempBody = $queue_member;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putResidentialDeviceItem
     *
     * Replaces the ResidentialDevice resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\ResidentialDevice $residential_device The updated ResidentialDevice resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\ResidentialDevice
     */
    public function putResidentialDeviceItem($id, $residential_device = null)
    {
        list($response) = $this->putResidentialDeviceItemWithHttpInfo($id, $residential_device);
        return $response;
    }

    /**
     * Operation putResidentialDeviceItemWithHttpInfo
     *
     * Replaces the ResidentialDevice resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ResidentialDevice $residential_device The updated ResidentialDevice resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\ResidentialDevice, HTTP status code, HTTP response headers (array of strings)
     */
    public function putResidentialDeviceItemWithHttpInfo($id, $residential_device = null)
    {
        $returnType = '\Ivz\Client\Model\ResidentialDevice';
        $request = $this->putResidentialDeviceItemRequest($id, $residential_device);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\ResidentialDevice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putResidentialDeviceItemAsync
     *
     * Replaces the ResidentialDevice resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ResidentialDevice $residential_device The updated ResidentialDevice resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putResidentialDeviceItemAsync($id, $residential_device = null)
    {
        return $this->putResidentialDeviceItemAsyncWithHttpInfo($id, $residential_device)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putResidentialDeviceItemAsyncWithHttpInfo
     *
     * Replaces the ResidentialDevice resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ResidentialDevice $residential_device The updated ResidentialDevice resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putResidentialDeviceItemAsyncWithHttpInfo($id, $residential_device = null)
    {
        $returnType = '\Ivz\Client\Model\ResidentialDevice';
        $request = $this->putResidentialDeviceItemRequest($id, $residential_device);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putResidentialDeviceItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\ResidentialDevice $residential_device The updated ResidentialDevice resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putResidentialDeviceItemRequest($id, $residential_device = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putResidentialDeviceItem'
            );
        }

        $resourcePath = '/residential_devices/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($residential_device)) {
            $_tempBody = $residential_device;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putRetailAccountItem
     *
     * Replaces the RetailAccount resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\RetailAccount $retail_account The updated RetailAccount resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\RetailAccount
     */
    public function putRetailAccountItem($id, $retail_account = null)
    {
        list($response) = $this->putRetailAccountItemWithHttpInfo($id, $retail_account);
        return $response;
    }

    /**
     * Operation putRetailAccountItemWithHttpInfo
     *
     * Replaces the RetailAccount resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\RetailAccount $retail_account The updated RetailAccount resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\RetailAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function putRetailAccountItemWithHttpInfo($id, $retail_account = null)
    {
        $returnType = '\Ivz\Client\Model\RetailAccount';
        $request = $this->putRetailAccountItemRequest($id, $retail_account);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\RetailAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putRetailAccountItemAsync
     *
     * Replaces the RetailAccount resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\RetailAccount $retail_account The updated RetailAccount resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putRetailAccountItemAsync($id, $retail_account = null)
    {
        return $this->putRetailAccountItemAsyncWithHttpInfo($id, $retail_account)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putRetailAccountItemAsyncWithHttpInfo
     *
     * Replaces the RetailAccount resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\RetailAccount $retail_account The updated RetailAccount resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putRetailAccountItemAsyncWithHttpInfo($id, $retail_account = null)
    {
        $returnType = '\Ivz\Client\Model\RetailAccount';
        $request = $this->putRetailAccountItemRequest($id, $retail_account);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putRetailAccountItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\RetailAccount $retail_account The updated RetailAccount resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putRetailAccountItemRequest($id, $retail_account = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putRetailAccountItem'
            );
        }

        $resourcePath = '/retail_accounts/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($retail_account)) {
            $_tempBody = $retail_account;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putRouteLockItem
     *
     * Replaces the RouteLock resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\RouteLock $route_lock The updated RouteLock resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\RouteLock
     */
    public function putRouteLockItem($id, $route_lock = null)
    {
        list($response) = $this->putRouteLockItemWithHttpInfo($id, $route_lock);
        return $response;
    }

    /**
     * Operation putRouteLockItemWithHttpInfo
     *
     * Replaces the RouteLock resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\RouteLock $route_lock The updated RouteLock resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\RouteLock, HTTP status code, HTTP response headers (array of strings)
     */
    public function putRouteLockItemWithHttpInfo($id, $route_lock = null)
    {
        $returnType = '\Ivz\Client\Model\RouteLock';
        $request = $this->putRouteLockItemRequest($id, $route_lock);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\RouteLock',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putRouteLockItemAsync
     *
     * Replaces the RouteLock resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\RouteLock $route_lock The updated RouteLock resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putRouteLockItemAsync($id, $route_lock = null)
    {
        return $this->putRouteLockItemAsyncWithHttpInfo($id, $route_lock)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putRouteLockItemAsyncWithHttpInfo
     *
     * Replaces the RouteLock resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\RouteLock $route_lock The updated RouteLock resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putRouteLockItemAsyncWithHttpInfo($id, $route_lock = null)
    {
        $returnType = '\Ivz\Client\Model\RouteLock';
        $request = $this->putRouteLockItemRequest($id, $route_lock);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putRouteLockItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\RouteLock $route_lock The updated RouteLock resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putRouteLockItemRequest($id, $route_lock = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putRouteLockItem'
            );
        }

        $resourcePath = '/route_locks/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($route_lock)) {
            $_tempBody = $route_lock;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putScheduleItem
     *
     * Replaces the Schedule resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\Schedule $schedule The updated Schedule resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\Schedule
     */
    public function putScheduleItem($id, $schedule = null)
    {
        list($response) = $this->putScheduleItemWithHttpInfo($id, $schedule);
        return $response;
    }

    /**
     * Operation putScheduleItemWithHttpInfo
     *
     * Replaces the Schedule resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Schedule $schedule The updated Schedule resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\Schedule, HTTP status code, HTTP response headers (array of strings)
     */
    public function putScheduleItemWithHttpInfo($id, $schedule = null)
    {
        $returnType = '\Ivz\Client\Model\Schedule';
        $request = $this->putScheduleItemRequest($id, $schedule);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\Schedule',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putScheduleItemAsync
     *
     * Replaces the Schedule resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Schedule $schedule The updated Schedule resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putScheduleItemAsync($id, $schedule = null)
    {
        return $this->putScheduleItemAsyncWithHttpInfo($id, $schedule)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putScheduleItemAsyncWithHttpInfo
     *
     * Replaces the Schedule resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Schedule $schedule The updated Schedule resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putScheduleItemAsyncWithHttpInfo($id, $schedule = null)
    {
        $returnType = '\Ivz\Client\Model\Schedule';
        $request = $this->putScheduleItemRequest($id, $schedule);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putScheduleItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Schedule $schedule The updated Schedule resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putScheduleItemRequest($id, $schedule = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putScheduleItem'
            );
        }

        $resourcePath = '/schedules/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($schedule)) {
            $_tempBody = $schedule;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putTerminalItem
     *
     * Replaces the Terminal resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\Terminal $terminal The updated Terminal resource (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\Terminal
     */
    public function putTerminalItem($id, $terminal = null, $_timezone = null)
    {
        list($response) = $this->putTerminalItemWithHttpInfo($id, $terminal, $_timezone);
        return $response;
    }

    /**
     * Operation putTerminalItemWithHttpInfo
     *
     * Replaces the Terminal resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Terminal $terminal The updated Terminal resource (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\Terminal, HTTP status code, HTTP response headers (array of strings)
     */
    public function putTerminalItemWithHttpInfo($id, $terminal = null, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\Terminal';
        $request = $this->putTerminalItemRequest($id, $terminal, $_timezone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\Terminal',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putTerminalItemAsync
     *
     * Replaces the Terminal resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Terminal $terminal The updated Terminal resource (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putTerminalItemAsync($id, $terminal = null, $_timezone = null)
    {
        return $this->putTerminalItemAsyncWithHttpInfo($id, $terminal, $_timezone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putTerminalItemAsyncWithHttpInfo
     *
     * Replaces the Terminal resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Terminal $terminal The updated Terminal resource (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putTerminalItemAsyncWithHttpInfo($id, $terminal = null, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\Terminal';
        $request = $this->putTerminalItemRequest($id, $terminal, $_timezone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putTerminalItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\Terminal $terminal The updated Terminal resource (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putTerminalItemRequest($id, $terminal = null, $_timezone = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putTerminalItem'
            );
        }

        $resourcePath = '/terminals/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_timezone !== null) {
            $queryParams['_timezone'] = ObjectSerializer::toQueryValue($_timezone);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($terminal)) {
            $_tempBody = $terminal;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putUserItem
     *
     * Replaces the User resource.
     *
     * @param  string $id id (required)
     * @param  \Ivz\Client\Model\User $user The updated User resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\User
     */
    public function putUserItem($id, $user = null)
    {
        list($response) = $this->putUserItemWithHttpInfo($id, $user);
        return $response;
    }

    /**
     * Operation putUserItemWithHttpInfo
     *
     * Replaces the User resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\User $user The updated User resource (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\User, HTTP status code, HTTP response headers (array of strings)
     */
    public function putUserItemWithHttpInfo($id, $user = null)
    {
        $returnType = '\Ivz\Client\Model\User';
        $request = $this->putUserItemRequest($id, $user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\User',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putUserItemAsync
     *
     * Replaces the User resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\User $user The updated User resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putUserItemAsync($id, $user = null)
    {
        return $this->putUserItemAsyncWithHttpInfo($id, $user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putUserItemAsyncWithHttpInfo
     *
     * Replaces the User resource.
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\User $user The updated User resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putUserItemAsyncWithHttpInfo($id, $user = null)
    {
        $returnType = '\Ivz\Client\Model\User';
        $request = $this->putUserItemRequest($id, $user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putUserItem'
     *
     * @param  string $id (required)
     * @param  \Ivz\Client\Model\User $user The updated User resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putUserItemRequest($id, $user = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putUserItem'
            );
        }

        $resourcePath = '/users/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($user)) {
            $_tempBody = $user;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recordingRecordedfileRecordingItem
     *
     * Retrieves a Recording resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function recordingRecordedfileRecordingItem($id)
    {
        $this->recordingRecordedfileRecordingItemWithHttpInfo($id);
    }

    /**
     * Operation recordingRecordedfileRecordingItemWithHttpInfo
     *
     * Retrieves a Recording resource.
     *
     * @param  string $id (required)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function recordingRecordedfileRecordingItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->recordingRecordedfileRecordingItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation recordingRecordedfileRecordingItemAsync
     *
     * Retrieves a Recording resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recordingRecordedfileRecordingItemAsync($id)
    {
        return $this->recordingRecordedfileRecordingItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recordingRecordedfileRecordingItemAsyncWithHttpInfo
     *
     * Retrieves a Recording resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recordingRecordedfileRecordingItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->recordingRecordedfileRecordingItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recordingRecordedfileRecordingItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function recordingRecordedfileRecordingItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling recordingRecordedfileRecordingItem'
            );
        }

        $resourcePath = '/recordings/{id}/recordedfile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
