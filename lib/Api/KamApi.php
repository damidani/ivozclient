<?php
/**
 * KamApi
 * PHP version 5
 *
 * @category Class
 * @package  Ivz\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ivoz Provider
 *
 * Client REST API
 *
 * OpenAPI spec version: 2.20.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.31
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ivz\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Ivz\Client\ApiException;
use Ivz\Client\Configuration;
use Ivz\Client\HeaderSelector;
use Ivz\Client\ObjectSerializer;

/**
 * KamApi Class Doc Comment
 *
 * @category Class
 * @package  Ivz\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class KamApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getUsersCdrCollection
     *
     * Retrieves the collection of UsersCdr resources.
     *
     * @param  string $callee callee (optional)
     * @param  string $callee_end callee_end (optional)
     * @param  string $callee_exact callee_exact (optional)
     * @param  bool $callee_exists callee_exists (optional)
     * @param  string $callee_partial callee_partial (optional)
     * @param  string $callee_start callee_start (optional)
     * @param  string $caller caller (optional)
     * @param  string $caller_end caller_end (optional)
     * @param  string $caller_exact caller_exact (optional)
     * @param  bool $caller_exists caller_exists (optional)
     * @param  string $caller_partial caller_partial (optional)
     * @param  string $caller_start caller_start (optional)
     * @param  string $direction direction (optional)
     * @param  string $direction_end direction_end (optional)
     * @param  string $direction_exact direction_exact (optional)
     * @param  bool $direction_exists direction_exists (optional)
     * @param  string $direction_partial direction_partial (optional)
     * @param  string $direction_start direction_start (optional)
     * @param  float $duration duration (optional)
     * @param  string $duration_between duration_between (optional)
     * @param  string $duration_gt duration_gt (optional)
     * @param  string $duration_gte duration_gte (optional)
     * @param  string $duration_lt duration_lt (optional)
     * @param  string $duration_lte duration_lte (optional)
     * @param  string $end_time end_time (optional)
     * @param  string $end_time_after end_time_after (optional)
     * @param  string $end_time_before end_time_before (optional)
     * @param  string $end_time_start end_time_start (optional)
     * @param  string $end_time_strictly_after end_time_strictly_after (optional)
     * @param  string $end_time_strictly_before end_time_strictly_before (optional)
     * @param  string $friend friend (optional)
     * @param  string $friend2 friend2 (optional)
     * @param  bool $friend_exists friend_exists (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $residential_device residential_device (optional)
     * @param  string $residential_device2 residential_device2 (optional)
     * @param  bool $residential_device_exists residential_device_exists (optional)
     * @param  string $retail_account retail_account (optional)
     * @param  string $retail_account2 retail_account2 (optional)
     * @param  bool $retail_account_exists retail_account_exists (optional)
     * @param  string $start_time start_time (optional)
     * @param  string $start_time_after start_time_after (optional)
     * @param  string $start_time_before start_time_before (optional)
     * @param  string $start_time_start start_time_start (optional)
     * @param  string $start_time_strictly_after start_time_strictly_after (optional)
     * @param  string $start_time_strictly_before start_time_strictly_before (optional)
     * @param  string $user user (optional)
     * @param  string $user2 user2 (optional)
     * @param  bool $user_exists user_exists (optional)
     * @param  string $_order_callee _order_callee (optional)
     * @param  string $_order_caller _order_caller (optional)
     * @param  string $_order_direction _order_direction (optional)
     * @param  string $_order_duration _order_duration (optional)
     * @param  string $_order_end_time _order_end_time (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_start_time _order_start_time (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     * @param  bool $_pagination _pagination (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\UsersCdrCollection[]
     */
    public function getUsersCdrCollection($callee = null, $callee_end = null, $callee_exact = null, $callee_exists = null, $callee_partial = null, $callee_start = null, $caller = null, $caller_end = null, $caller_exact = null, $caller_exists = null, $caller_partial = null, $caller_start = null, $direction = null, $direction_end = null, $direction_exact = null, $direction_exists = null, $direction_partial = null, $direction_start = null, $duration = null, $duration_between = null, $duration_gt = null, $duration_gte = null, $duration_lt = null, $duration_lte = null, $end_time = null, $end_time_after = null, $end_time_before = null, $end_time_start = null, $end_time_strictly_after = null, $end_time_strictly_before = null, $friend = null, $friend2 = null, $friend_exists = null, $id_exact = null, $residential_device = null, $residential_device2 = null, $residential_device_exists = null, $retail_account = null, $retail_account2 = null, $retail_account_exists = null, $start_time = null, $start_time_after = null, $start_time_before = null, $start_time_start = null, $start_time_strictly_after = null, $start_time_strictly_before = null, $user = null, $user2 = null, $user_exists = null, $_order_callee = null, $_order_caller = null, $_order_direction = null, $_order_duration = null, $_order_end_time = null, $_order_id = null, $_order_start_time = null, $_items_per_page = null, $_page = null, $_properties = null, $_pagination = null, $_timezone = null)
    {
        list($response) = $this->getUsersCdrCollectionWithHttpInfo($callee, $callee_end, $callee_exact, $callee_exists, $callee_partial, $callee_start, $caller, $caller_end, $caller_exact, $caller_exists, $caller_partial, $caller_start, $direction, $direction_end, $direction_exact, $direction_exists, $direction_partial, $direction_start, $duration, $duration_between, $duration_gt, $duration_gte, $duration_lt, $duration_lte, $end_time, $end_time_after, $end_time_before, $end_time_start, $end_time_strictly_after, $end_time_strictly_before, $friend, $friend2, $friend_exists, $id_exact, $residential_device, $residential_device2, $residential_device_exists, $retail_account, $retail_account2, $retail_account_exists, $start_time, $start_time_after, $start_time_before, $start_time_start, $start_time_strictly_after, $start_time_strictly_before, $user, $user2, $user_exists, $_order_callee, $_order_caller, $_order_direction, $_order_duration, $_order_end_time, $_order_id, $_order_start_time, $_items_per_page, $_page, $_properties, $_pagination, $_timezone);
        return $response;
    }

    /**
     * Operation getUsersCdrCollectionWithHttpInfo
     *
     * Retrieves the collection of UsersCdr resources.
     *
     * @param  string $callee (optional)
     * @param  string $callee_end (optional)
     * @param  string $callee_exact (optional)
     * @param  bool $callee_exists (optional)
     * @param  string $callee_partial (optional)
     * @param  string $callee_start (optional)
     * @param  string $caller (optional)
     * @param  string $caller_end (optional)
     * @param  string $caller_exact (optional)
     * @param  bool $caller_exists (optional)
     * @param  string $caller_partial (optional)
     * @param  string $caller_start (optional)
     * @param  string $direction (optional)
     * @param  string $direction_end (optional)
     * @param  string $direction_exact (optional)
     * @param  bool $direction_exists (optional)
     * @param  string $direction_partial (optional)
     * @param  string $direction_start (optional)
     * @param  float $duration (optional)
     * @param  string $duration_between (optional)
     * @param  string $duration_gt (optional)
     * @param  string $duration_gte (optional)
     * @param  string $duration_lt (optional)
     * @param  string $duration_lte (optional)
     * @param  string $end_time (optional)
     * @param  string $end_time_after (optional)
     * @param  string $end_time_before (optional)
     * @param  string $end_time_start (optional)
     * @param  string $end_time_strictly_after (optional)
     * @param  string $end_time_strictly_before (optional)
     * @param  string $friend (optional)
     * @param  string $friend2 (optional)
     * @param  bool $friend_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $residential_device (optional)
     * @param  string $residential_device2 (optional)
     * @param  bool $residential_device_exists (optional)
     * @param  string $retail_account (optional)
     * @param  string $retail_account2 (optional)
     * @param  bool $retail_account_exists (optional)
     * @param  string $start_time (optional)
     * @param  string $start_time_after (optional)
     * @param  string $start_time_before (optional)
     * @param  string $start_time_start (optional)
     * @param  string $start_time_strictly_after (optional)
     * @param  string $start_time_strictly_before (optional)
     * @param  string $user (optional)
     * @param  string $user2 (optional)
     * @param  bool $user_exists (optional)
     * @param  string $_order_callee (optional)
     * @param  string $_order_caller (optional)
     * @param  string $_order_direction (optional)
     * @param  string $_order_duration (optional)
     * @param  string $_order_end_time (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_start_time (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  bool $_pagination (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\UsersCdrCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getUsersCdrCollectionWithHttpInfo($callee = null, $callee_end = null, $callee_exact = null, $callee_exists = null, $callee_partial = null, $callee_start = null, $caller = null, $caller_end = null, $caller_exact = null, $caller_exists = null, $caller_partial = null, $caller_start = null, $direction = null, $direction_end = null, $direction_exact = null, $direction_exists = null, $direction_partial = null, $direction_start = null, $duration = null, $duration_between = null, $duration_gt = null, $duration_gte = null, $duration_lt = null, $duration_lte = null, $end_time = null, $end_time_after = null, $end_time_before = null, $end_time_start = null, $end_time_strictly_after = null, $end_time_strictly_before = null, $friend = null, $friend2 = null, $friend_exists = null, $id_exact = null, $residential_device = null, $residential_device2 = null, $residential_device_exists = null, $retail_account = null, $retail_account2 = null, $retail_account_exists = null, $start_time = null, $start_time_after = null, $start_time_before = null, $start_time_start = null, $start_time_strictly_after = null, $start_time_strictly_before = null, $user = null, $user2 = null, $user_exists = null, $_order_callee = null, $_order_caller = null, $_order_direction = null, $_order_duration = null, $_order_end_time = null, $_order_id = null, $_order_start_time = null, $_items_per_page = null, $_page = null, $_properties = null, $_pagination = null, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\UsersCdrCollection[]';
        $request = $this->getUsersCdrCollectionRequest($callee, $callee_end, $callee_exact, $callee_exists, $callee_partial, $callee_start, $caller, $caller_end, $caller_exact, $caller_exists, $caller_partial, $caller_start, $direction, $direction_end, $direction_exact, $direction_exists, $direction_partial, $direction_start, $duration, $duration_between, $duration_gt, $duration_gte, $duration_lt, $duration_lte, $end_time, $end_time_after, $end_time_before, $end_time_start, $end_time_strictly_after, $end_time_strictly_before, $friend, $friend2, $friend_exists, $id_exact, $residential_device, $residential_device2, $residential_device_exists, $retail_account, $retail_account2, $retail_account_exists, $start_time, $start_time_after, $start_time_before, $start_time_start, $start_time_strictly_after, $start_time_strictly_before, $user, $user2, $user_exists, $_order_callee, $_order_caller, $_order_direction, $_order_duration, $_order_end_time, $_order_id, $_order_start_time, $_items_per_page, $_page, $_properties, $_pagination, $_timezone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\UsersCdrCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUsersCdrCollectionAsync
     *
     * Retrieves the collection of UsersCdr resources.
     *
     * @param  string $callee (optional)
     * @param  string $callee_end (optional)
     * @param  string $callee_exact (optional)
     * @param  bool $callee_exists (optional)
     * @param  string $callee_partial (optional)
     * @param  string $callee_start (optional)
     * @param  string $caller (optional)
     * @param  string $caller_end (optional)
     * @param  string $caller_exact (optional)
     * @param  bool $caller_exists (optional)
     * @param  string $caller_partial (optional)
     * @param  string $caller_start (optional)
     * @param  string $direction (optional)
     * @param  string $direction_end (optional)
     * @param  string $direction_exact (optional)
     * @param  bool $direction_exists (optional)
     * @param  string $direction_partial (optional)
     * @param  string $direction_start (optional)
     * @param  float $duration (optional)
     * @param  string $duration_between (optional)
     * @param  string $duration_gt (optional)
     * @param  string $duration_gte (optional)
     * @param  string $duration_lt (optional)
     * @param  string $duration_lte (optional)
     * @param  string $end_time (optional)
     * @param  string $end_time_after (optional)
     * @param  string $end_time_before (optional)
     * @param  string $end_time_start (optional)
     * @param  string $end_time_strictly_after (optional)
     * @param  string $end_time_strictly_before (optional)
     * @param  string $friend (optional)
     * @param  string $friend2 (optional)
     * @param  bool $friend_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $residential_device (optional)
     * @param  string $residential_device2 (optional)
     * @param  bool $residential_device_exists (optional)
     * @param  string $retail_account (optional)
     * @param  string $retail_account2 (optional)
     * @param  bool $retail_account_exists (optional)
     * @param  string $start_time (optional)
     * @param  string $start_time_after (optional)
     * @param  string $start_time_before (optional)
     * @param  string $start_time_start (optional)
     * @param  string $start_time_strictly_after (optional)
     * @param  string $start_time_strictly_before (optional)
     * @param  string $user (optional)
     * @param  string $user2 (optional)
     * @param  bool $user_exists (optional)
     * @param  string $_order_callee (optional)
     * @param  string $_order_caller (optional)
     * @param  string $_order_direction (optional)
     * @param  string $_order_duration (optional)
     * @param  string $_order_end_time (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_start_time (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  bool $_pagination (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUsersCdrCollectionAsync($callee = null, $callee_end = null, $callee_exact = null, $callee_exists = null, $callee_partial = null, $callee_start = null, $caller = null, $caller_end = null, $caller_exact = null, $caller_exists = null, $caller_partial = null, $caller_start = null, $direction = null, $direction_end = null, $direction_exact = null, $direction_exists = null, $direction_partial = null, $direction_start = null, $duration = null, $duration_between = null, $duration_gt = null, $duration_gte = null, $duration_lt = null, $duration_lte = null, $end_time = null, $end_time_after = null, $end_time_before = null, $end_time_start = null, $end_time_strictly_after = null, $end_time_strictly_before = null, $friend = null, $friend2 = null, $friend_exists = null, $id_exact = null, $residential_device = null, $residential_device2 = null, $residential_device_exists = null, $retail_account = null, $retail_account2 = null, $retail_account_exists = null, $start_time = null, $start_time_after = null, $start_time_before = null, $start_time_start = null, $start_time_strictly_after = null, $start_time_strictly_before = null, $user = null, $user2 = null, $user_exists = null, $_order_callee = null, $_order_caller = null, $_order_direction = null, $_order_duration = null, $_order_end_time = null, $_order_id = null, $_order_start_time = null, $_items_per_page = null, $_page = null, $_properties = null, $_pagination = null, $_timezone = null)
    {
        return $this->getUsersCdrCollectionAsyncWithHttpInfo($callee, $callee_end, $callee_exact, $callee_exists, $callee_partial, $callee_start, $caller, $caller_end, $caller_exact, $caller_exists, $caller_partial, $caller_start, $direction, $direction_end, $direction_exact, $direction_exists, $direction_partial, $direction_start, $duration, $duration_between, $duration_gt, $duration_gte, $duration_lt, $duration_lte, $end_time, $end_time_after, $end_time_before, $end_time_start, $end_time_strictly_after, $end_time_strictly_before, $friend, $friend2, $friend_exists, $id_exact, $residential_device, $residential_device2, $residential_device_exists, $retail_account, $retail_account2, $retail_account_exists, $start_time, $start_time_after, $start_time_before, $start_time_start, $start_time_strictly_after, $start_time_strictly_before, $user, $user2, $user_exists, $_order_callee, $_order_caller, $_order_direction, $_order_duration, $_order_end_time, $_order_id, $_order_start_time, $_items_per_page, $_page, $_properties, $_pagination, $_timezone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUsersCdrCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of UsersCdr resources.
     *
     * @param  string $callee (optional)
     * @param  string $callee_end (optional)
     * @param  string $callee_exact (optional)
     * @param  bool $callee_exists (optional)
     * @param  string $callee_partial (optional)
     * @param  string $callee_start (optional)
     * @param  string $caller (optional)
     * @param  string $caller_end (optional)
     * @param  string $caller_exact (optional)
     * @param  bool $caller_exists (optional)
     * @param  string $caller_partial (optional)
     * @param  string $caller_start (optional)
     * @param  string $direction (optional)
     * @param  string $direction_end (optional)
     * @param  string $direction_exact (optional)
     * @param  bool $direction_exists (optional)
     * @param  string $direction_partial (optional)
     * @param  string $direction_start (optional)
     * @param  float $duration (optional)
     * @param  string $duration_between (optional)
     * @param  string $duration_gt (optional)
     * @param  string $duration_gte (optional)
     * @param  string $duration_lt (optional)
     * @param  string $duration_lte (optional)
     * @param  string $end_time (optional)
     * @param  string $end_time_after (optional)
     * @param  string $end_time_before (optional)
     * @param  string $end_time_start (optional)
     * @param  string $end_time_strictly_after (optional)
     * @param  string $end_time_strictly_before (optional)
     * @param  string $friend (optional)
     * @param  string $friend2 (optional)
     * @param  bool $friend_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $residential_device (optional)
     * @param  string $residential_device2 (optional)
     * @param  bool $residential_device_exists (optional)
     * @param  string $retail_account (optional)
     * @param  string $retail_account2 (optional)
     * @param  bool $retail_account_exists (optional)
     * @param  string $start_time (optional)
     * @param  string $start_time_after (optional)
     * @param  string $start_time_before (optional)
     * @param  string $start_time_start (optional)
     * @param  string $start_time_strictly_after (optional)
     * @param  string $start_time_strictly_before (optional)
     * @param  string $user (optional)
     * @param  string $user2 (optional)
     * @param  bool $user_exists (optional)
     * @param  string $_order_callee (optional)
     * @param  string $_order_caller (optional)
     * @param  string $_order_direction (optional)
     * @param  string $_order_duration (optional)
     * @param  string $_order_end_time (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_start_time (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  bool $_pagination (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUsersCdrCollectionAsyncWithHttpInfo($callee = null, $callee_end = null, $callee_exact = null, $callee_exists = null, $callee_partial = null, $callee_start = null, $caller = null, $caller_end = null, $caller_exact = null, $caller_exists = null, $caller_partial = null, $caller_start = null, $direction = null, $direction_end = null, $direction_exact = null, $direction_exists = null, $direction_partial = null, $direction_start = null, $duration = null, $duration_between = null, $duration_gt = null, $duration_gte = null, $duration_lt = null, $duration_lte = null, $end_time = null, $end_time_after = null, $end_time_before = null, $end_time_start = null, $end_time_strictly_after = null, $end_time_strictly_before = null, $friend = null, $friend2 = null, $friend_exists = null, $id_exact = null, $residential_device = null, $residential_device2 = null, $residential_device_exists = null, $retail_account = null, $retail_account2 = null, $retail_account_exists = null, $start_time = null, $start_time_after = null, $start_time_before = null, $start_time_start = null, $start_time_strictly_after = null, $start_time_strictly_before = null, $user = null, $user2 = null, $user_exists = null, $_order_callee = null, $_order_caller = null, $_order_direction = null, $_order_duration = null, $_order_end_time = null, $_order_id = null, $_order_start_time = null, $_items_per_page = null, $_page = null, $_properties = null, $_pagination = null, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\UsersCdrCollection[]';
        $request = $this->getUsersCdrCollectionRequest($callee, $callee_end, $callee_exact, $callee_exists, $callee_partial, $callee_start, $caller, $caller_end, $caller_exact, $caller_exists, $caller_partial, $caller_start, $direction, $direction_end, $direction_exact, $direction_exists, $direction_partial, $direction_start, $duration, $duration_between, $duration_gt, $duration_gte, $duration_lt, $duration_lte, $end_time, $end_time_after, $end_time_before, $end_time_start, $end_time_strictly_after, $end_time_strictly_before, $friend, $friend2, $friend_exists, $id_exact, $residential_device, $residential_device2, $residential_device_exists, $retail_account, $retail_account2, $retail_account_exists, $start_time, $start_time_after, $start_time_before, $start_time_start, $start_time_strictly_after, $start_time_strictly_before, $user, $user2, $user_exists, $_order_callee, $_order_caller, $_order_direction, $_order_duration, $_order_end_time, $_order_id, $_order_start_time, $_items_per_page, $_page, $_properties, $_pagination, $_timezone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUsersCdrCollection'
     *
     * @param  string $callee (optional)
     * @param  string $callee_end (optional)
     * @param  string $callee_exact (optional)
     * @param  bool $callee_exists (optional)
     * @param  string $callee_partial (optional)
     * @param  string $callee_start (optional)
     * @param  string $caller (optional)
     * @param  string $caller_end (optional)
     * @param  string $caller_exact (optional)
     * @param  bool $caller_exists (optional)
     * @param  string $caller_partial (optional)
     * @param  string $caller_start (optional)
     * @param  string $direction (optional)
     * @param  string $direction_end (optional)
     * @param  string $direction_exact (optional)
     * @param  bool $direction_exists (optional)
     * @param  string $direction_partial (optional)
     * @param  string $direction_start (optional)
     * @param  float $duration (optional)
     * @param  string $duration_between (optional)
     * @param  string $duration_gt (optional)
     * @param  string $duration_gte (optional)
     * @param  string $duration_lt (optional)
     * @param  string $duration_lte (optional)
     * @param  string $end_time (optional)
     * @param  string $end_time_after (optional)
     * @param  string $end_time_before (optional)
     * @param  string $end_time_start (optional)
     * @param  string $end_time_strictly_after (optional)
     * @param  string $end_time_strictly_before (optional)
     * @param  string $friend (optional)
     * @param  string $friend2 (optional)
     * @param  bool $friend_exists (optional)
     * @param  int $id_exact (optional)
     * @param  string $residential_device (optional)
     * @param  string $residential_device2 (optional)
     * @param  bool $residential_device_exists (optional)
     * @param  string $retail_account (optional)
     * @param  string $retail_account2 (optional)
     * @param  bool $retail_account_exists (optional)
     * @param  string $start_time (optional)
     * @param  string $start_time_after (optional)
     * @param  string $start_time_before (optional)
     * @param  string $start_time_start (optional)
     * @param  string $start_time_strictly_after (optional)
     * @param  string $start_time_strictly_before (optional)
     * @param  string $user (optional)
     * @param  string $user2 (optional)
     * @param  bool $user_exists (optional)
     * @param  string $_order_callee (optional)
     * @param  string $_order_caller (optional)
     * @param  string $_order_direction (optional)
     * @param  string $_order_duration (optional)
     * @param  string $_order_end_time (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_start_time (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     * @param  bool $_pagination (optional)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getUsersCdrCollectionRequest($callee = null, $callee_end = null, $callee_exact = null, $callee_exists = null, $callee_partial = null, $callee_start = null, $caller = null, $caller_end = null, $caller_exact = null, $caller_exists = null, $caller_partial = null, $caller_start = null, $direction = null, $direction_end = null, $direction_exact = null, $direction_exists = null, $direction_partial = null, $direction_start = null, $duration = null, $duration_between = null, $duration_gt = null, $duration_gte = null, $duration_lt = null, $duration_lte = null, $end_time = null, $end_time_after = null, $end_time_before = null, $end_time_start = null, $end_time_strictly_after = null, $end_time_strictly_before = null, $friend = null, $friend2 = null, $friend_exists = null, $id_exact = null, $residential_device = null, $residential_device2 = null, $residential_device_exists = null, $retail_account = null, $retail_account2 = null, $retail_account_exists = null, $start_time = null, $start_time_after = null, $start_time_before = null, $start_time_start = null, $start_time_strictly_after = null, $start_time_strictly_before = null, $user = null, $user2 = null, $user_exists = null, $_order_callee = null, $_order_caller = null, $_order_direction = null, $_order_duration = null, $_order_end_time = null, $_order_id = null, $_order_start_time = null, $_items_per_page = null, $_page = null, $_properties = null, $_pagination = null, $_timezone = null)
    {

        $resourcePath = '/users_cdrs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($callee !== null) {
            $queryParams['callee'] = ObjectSerializer::toQueryValue($callee);
        }
        // query params
        if ($callee_end !== null) {
            $queryParams['callee[end]'] = ObjectSerializer::toQueryValue($callee_end);
        }
        // query params
        if ($callee_exact !== null) {
            $queryParams['callee[exact]'] = ObjectSerializer::toQueryValue($callee_exact);
        }
        // query params
        if ($callee_exists !== null) {
            $queryParams['callee[exists]'] = ObjectSerializer::toQueryValue($callee_exists);
        }
        // query params
        if ($callee_partial !== null) {
            $queryParams['callee[partial]'] = ObjectSerializer::toQueryValue($callee_partial);
        }
        // query params
        if ($callee_start !== null) {
            $queryParams['callee[start]'] = ObjectSerializer::toQueryValue($callee_start);
        }
        // query params
        if ($caller !== null) {
            $queryParams['caller'] = ObjectSerializer::toQueryValue($caller);
        }
        // query params
        if ($caller_end !== null) {
            $queryParams['caller[end]'] = ObjectSerializer::toQueryValue($caller_end);
        }
        // query params
        if ($caller_exact !== null) {
            $queryParams['caller[exact]'] = ObjectSerializer::toQueryValue($caller_exact);
        }
        // query params
        if ($caller_exists !== null) {
            $queryParams['caller[exists]'] = ObjectSerializer::toQueryValue($caller_exists);
        }
        // query params
        if ($caller_partial !== null) {
            $queryParams['caller[partial]'] = ObjectSerializer::toQueryValue($caller_partial);
        }
        // query params
        if ($caller_start !== null) {
            $queryParams['caller[start]'] = ObjectSerializer::toQueryValue($caller_start);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($direction_end !== null) {
            $queryParams['direction[end]'] = ObjectSerializer::toQueryValue($direction_end);
        }
        // query params
        if ($direction_exact !== null) {
            $queryParams['direction[exact]'] = ObjectSerializer::toQueryValue($direction_exact);
        }
        // query params
        if ($direction_exists !== null) {
            $queryParams['direction[exists]'] = ObjectSerializer::toQueryValue($direction_exists);
        }
        // query params
        if ($direction_partial !== null) {
            $queryParams['direction[partial]'] = ObjectSerializer::toQueryValue($direction_partial);
        }
        // query params
        if ($direction_start !== null) {
            $queryParams['direction[start]'] = ObjectSerializer::toQueryValue($direction_start);
        }
        // query params
        if ($duration !== null) {
            $queryParams['duration'] = ObjectSerializer::toQueryValue($duration);
        }
        // query params
        if ($duration_between !== null) {
            $queryParams['duration[between]'] = ObjectSerializer::toQueryValue($duration_between);
        }
        // query params
        if ($duration_gt !== null) {
            $queryParams['duration[gt]'] = ObjectSerializer::toQueryValue($duration_gt);
        }
        // query params
        if ($duration_gte !== null) {
            $queryParams['duration[gte]'] = ObjectSerializer::toQueryValue($duration_gte);
        }
        // query params
        if ($duration_lt !== null) {
            $queryParams['duration[lt]'] = ObjectSerializer::toQueryValue($duration_lt);
        }
        // query params
        if ($duration_lte !== null) {
            $queryParams['duration[lte]'] = ObjectSerializer::toQueryValue($duration_lte);
        }
        // query params
        if ($end_time !== null) {
            $queryParams['endTime'] = ObjectSerializer::toQueryValue($end_time);
        }
        // query params
        if ($end_time_after !== null) {
            $queryParams['endTime[after]'] = ObjectSerializer::toQueryValue($end_time_after);
        }
        // query params
        if ($end_time_before !== null) {
            $queryParams['endTime[before]'] = ObjectSerializer::toQueryValue($end_time_before);
        }
        // query params
        if ($end_time_start !== null) {
            $queryParams['endTime[start]'] = ObjectSerializer::toQueryValue($end_time_start);
        }
        // query params
        if ($end_time_strictly_after !== null) {
            $queryParams['endTime[strictly_after]'] = ObjectSerializer::toQueryValue($end_time_strictly_after);
        }
        // query params
        if ($end_time_strictly_before !== null) {
            $queryParams['endTime[strictly_before]'] = ObjectSerializer::toQueryValue($end_time_strictly_before);
        }
        // query params
        if ($friend !== null) {
            $queryParams['friend'] = ObjectSerializer::toQueryValue($friend);
        }
        // query params
        if ($friend2 !== null) {
            $queryParams['friend[]'] = ObjectSerializer::toQueryValue($friend2);
        }
        // query params
        if ($friend_exists !== null) {
            $queryParams['friend[exists]'] = ObjectSerializer::toQueryValue($friend_exists);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($residential_device !== null) {
            $queryParams['residentialDevice'] = ObjectSerializer::toQueryValue($residential_device);
        }
        // query params
        if ($residential_device2 !== null) {
            $queryParams['residentialDevice[]'] = ObjectSerializer::toQueryValue($residential_device2);
        }
        // query params
        if ($residential_device_exists !== null) {
            $queryParams['residentialDevice[exists]'] = ObjectSerializer::toQueryValue($residential_device_exists);
        }
        // query params
        if ($retail_account !== null) {
            $queryParams['retailAccount'] = ObjectSerializer::toQueryValue($retail_account);
        }
        // query params
        if ($retail_account2 !== null) {
            $queryParams['retailAccount[]'] = ObjectSerializer::toQueryValue($retail_account2);
        }
        // query params
        if ($retail_account_exists !== null) {
            $queryParams['retailAccount[exists]'] = ObjectSerializer::toQueryValue($retail_account_exists);
        }
        // query params
        if ($start_time !== null) {
            $queryParams['startTime'] = ObjectSerializer::toQueryValue($start_time);
        }
        // query params
        if ($start_time_after !== null) {
            $queryParams['startTime[after]'] = ObjectSerializer::toQueryValue($start_time_after);
        }
        // query params
        if ($start_time_before !== null) {
            $queryParams['startTime[before]'] = ObjectSerializer::toQueryValue($start_time_before);
        }
        // query params
        if ($start_time_start !== null) {
            $queryParams['startTime[start]'] = ObjectSerializer::toQueryValue($start_time_start);
        }
        // query params
        if ($start_time_strictly_after !== null) {
            $queryParams['startTime[strictly_after]'] = ObjectSerializer::toQueryValue($start_time_strictly_after);
        }
        // query params
        if ($start_time_strictly_before !== null) {
            $queryParams['startTime[strictly_before]'] = ObjectSerializer::toQueryValue($start_time_strictly_before);
        }
        // query params
        if ($user !== null) {
            $queryParams['user'] = ObjectSerializer::toQueryValue($user);
        }
        // query params
        if ($user2 !== null) {
            $queryParams['user[]'] = ObjectSerializer::toQueryValue($user2);
        }
        // query params
        if ($user_exists !== null) {
            $queryParams['user[exists]'] = ObjectSerializer::toQueryValue($user_exists);
        }
        // query params
        if ($_order_callee !== null) {
            $queryParams['_order[callee]'] = ObjectSerializer::toQueryValue($_order_callee);
        }
        // query params
        if ($_order_caller !== null) {
            $queryParams['_order[caller]'] = ObjectSerializer::toQueryValue($_order_caller);
        }
        // query params
        if ($_order_direction !== null) {
            $queryParams['_order[direction]'] = ObjectSerializer::toQueryValue($_order_direction);
        }
        // query params
        if ($_order_duration !== null) {
            $queryParams['_order[duration]'] = ObjectSerializer::toQueryValue($_order_duration);
        }
        // query params
        if ($_order_end_time !== null) {
            $queryParams['_order[endTime]'] = ObjectSerializer::toQueryValue($_order_end_time);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_start_time !== null) {
            $queryParams['_order[startTime]'] = ObjectSerializer::toQueryValue($_order_start_time);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }
        // query params
        if ($_pagination !== null) {
            $queryParams['_pagination'] = ObjectSerializer::toQueryValue($_pagination);
        }
        // query params
        if ($_timezone !== null) {
            $queryParams['_timezone'] = ObjectSerializer::toQueryValue($_timezone);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json', 'text/csv']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json', 'text/csv'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUsersCdrItem
     *
     * Retrieves a UsersCdr resource.
     *
     * @param  string $id id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ivz\Client\Model\UsersCdrDetailed
     */
    public function getUsersCdrItem($id, $_timezone = null)
    {
        list($response) = $this->getUsersCdrItemWithHttpInfo($id, $_timezone);
        return $response;
    }

    /**
     * Operation getUsersCdrItemWithHttpInfo
     *
     * Retrieves a UsersCdr resource.
     *
     * @param  string $id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \Ivz\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ivz\Client\Model\UsersCdrDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUsersCdrItemWithHttpInfo($id, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\UsersCdrDetailed';
        $request = $this->getUsersCdrItemRequest($id, $_timezone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ivz\Client\Model\UsersCdrDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUsersCdrItemAsync
     *
     * Retrieves a UsersCdr resource.
     *
     * @param  string $id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUsersCdrItemAsync($id, $_timezone = null)
    {
        return $this->getUsersCdrItemAsyncWithHttpInfo($id, $_timezone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUsersCdrItemAsyncWithHttpInfo
     *
     * Retrieves a UsersCdr resource.
     *
     * @param  string $id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUsersCdrItemAsyncWithHttpInfo($id, $_timezone = null)
    {
        $returnType = '\Ivz\Client\Model\UsersCdrDetailed';
        $request = $this->getUsersCdrItemRequest($id, $_timezone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUsersCdrItem'
     *
     * @param  string $id (required)
     * @param  string $_timezone Use a time zone of choice instead of the token user one (Applies to both input and output) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getUsersCdrItemRequest($id, $_timezone = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getUsersCdrItem'
            );
        }

        $resourcePath = '/users_cdrs/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_timezone !== null) {
            $queryParams['_timezone'] = ObjectSerializer::toQueryValue($_timezone);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
