<?php
/**
 * RecordingDetailed
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ivz\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ivoz Provider
 *
 * Client REST API
 *
 * OpenAPI spec version: 2.20.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.31
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ivz\Client\Model;

use \ArrayAccess;
use \Ivz\Client\ObjectSerializer;

/**
 * RecordingDetailed Class Doc Comment
 *
 * @category Class
 * @package  Ivz\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RecordingDetailed implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Recording-detailed';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'callid' => 'string',
        'calldate' => '\DateTime',
        'type' => 'string',
        'duration' => 'float',
        'caller' => 'string',
        'callee' => 'string',
        'recorder' => 'string',
        'id' => 'int',
        'recorded_file' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'callid' => null,
        'calldate' => 'date-time',
        'type' => null,
        'duration' => 'float',
        'caller' => null,
        'callee' => null,
        'recorder' => null,
        'id' => null,
        'recorded_file' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'callid' => 'callid',
        'calldate' => 'calldate',
        'type' => 'type',
        'duration' => 'duration',
        'caller' => 'caller',
        'callee' => 'callee',
        'recorder' => 'recorder',
        'id' => 'id',
        'recorded_file' => 'recordedFile'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'callid' => 'setCallid',
        'calldate' => 'setCalldate',
        'type' => 'setType',
        'duration' => 'setDuration',
        'caller' => 'setCaller',
        'callee' => 'setCallee',
        'recorder' => 'setRecorder',
        'id' => 'setId',
        'recorded_file' => 'setRecordedFile'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'callid' => 'getCallid',
        'calldate' => 'getCalldate',
        'type' => 'getType',
        'duration' => 'getDuration',
        'caller' => 'getCaller',
        'callee' => 'getCallee',
        'recorder' => 'getRecorder',
        'id' => 'getId',
        'recorded_file' => 'getRecordedFile'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_ONDEMAND = 'ondemand';
    const TYPE_DDI = 'ddi';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ONDEMAND,
            self::TYPE_DDI,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['callid'] = isset($data['callid']) ? $data['callid'] : null;
        $this->container['calldate'] = isset($data['calldate']) ? $data['calldate'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : 'ddi';
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : 0.0;
        $this->container['caller'] = isset($data['caller']) ? $data['caller'] : null;
        $this->container['callee'] = isset($data['callee']) ? $data['callee'] : null;
        $this->container['recorder'] = isset($data['recorder']) ? $data['recorder'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['recorded_file'] = isset($data['recorded_file']) ? $data['recorded_file'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['callid']) && (mb_strlen($this->container['callid']) > 255)) {
            $invalidProperties[] = "invalid value for 'callid', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['calldate'] === null) {
            $invalidProperties[] = "'calldate' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['duration'] === null) {
            $invalidProperties[] = "'duration' can't be null";
        }
        if (!is_null($this->container['caller']) && (mb_strlen($this->container['caller']) > 128)) {
            $invalidProperties[] = "invalid value for 'caller', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['callee']) && (mb_strlen($this->container['callee']) > 128)) {
            $invalidProperties[] = "invalid value for 'callee', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['recorder']) && (mb_strlen($this->container['recorder']) > 128)) {
            $invalidProperties[] = "invalid value for 'recorder', the character length must be smaller than or equal to 128.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets callid
     *
     * @return string
     */
    public function getCallid()
    {
        return $this->container['callid'];
    }

    /**
     * Sets callid
     *
     * @param string $callid 
     *
     * @return $this
     */
    public function setCallid($callid)
    {
        if (!is_null($callid) && (mb_strlen($callid) > 255)) {
            throw new \InvalidArgumentException('invalid length for $callid when calling RecordingDetailed., must be smaller than or equal to 255.');
        }

        $this->container['callid'] = $callid;

        return $this;
    }

    /**
     * Gets calldate
     *
     * @return \DateTime
     */
    public function getCalldate()
    {
        return $this->container['calldate'];
    }

    /**
     * Sets calldate
     *
     * @param \DateTime $calldate 
     *
     * @return $this
     */
    public function setCalldate($calldate)
    {
        $this->container['calldate'] = $calldate;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type 
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return float
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param float $duration 
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets caller
     *
     * @return string
     */
    public function getCaller()
    {
        return $this->container['caller'];
    }

    /**
     * Sets caller
     *
     * @param string $caller 
     *
     * @return $this
     */
    public function setCaller($caller)
    {
        if (!is_null($caller) && (mb_strlen($caller) > 128)) {
            throw new \InvalidArgumentException('invalid length for $caller when calling RecordingDetailed., must be smaller than or equal to 128.');
        }

        $this->container['caller'] = $caller;

        return $this;
    }

    /**
     * Gets callee
     *
     * @return string
     */
    public function getCallee()
    {
        return $this->container['callee'];
    }

    /**
     * Sets callee
     *
     * @param string $callee 
     *
     * @return $this
     */
    public function setCallee($callee)
    {
        if (!is_null($callee) && (mb_strlen($callee) > 128)) {
            throw new \InvalidArgumentException('invalid length for $callee when calling RecordingDetailed., must be smaller than or equal to 128.');
        }

        $this->container['callee'] = $callee;

        return $this;
    }

    /**
     * Gets recorder
     *
     * @return string
     */
    public function getRecorder()
    {
        return $this->container['recorder'];
    }

    /**
     * Sets recorder
     *
     * @param string $recorder 
     *
     * @return $this
     */
    public function setRecorder($recorder)
    {
        if (!is_null($recorder) && (mb_strlen($recorder) > 128)) {
            throw new \InvalidArgumentException('invalid length for $recorder when calling RecordingDetailed., must be smaller than or equal to 128.');
        }

        $this->container['recorder'] = $recorder;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets recorded_file
     *
     * @return string
     */
    public function getRecordedFile()
    {
        return $this->container['recorded_file'];
    }

    /**
     * Sets recorded_file
     *
     * @param string $recorded_file 
     *
     * @return $this
     */
    public function setRecordedFile($recorded_file)
    {
        $this->container['recorded_file'] = $recorded_file;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


