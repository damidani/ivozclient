<?php
/**
 * FaxesInOutDetailed
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ivz\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ivoz Provider
 *
 * Client REST API
 *
 * OpenAPI spec version: 2.20.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.31
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ivz\Client\Model;

use \ArrayAccess;
use \Ivz\Client\ObjectSerializer;

/**
 * FaxesInOutDetailed Class Doc Comment
 *
 * @category Class
 * @package  Ivz\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FaxesInOutDetailed implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FaxesInOut-detailed';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'calldate' => '\DateTime',
        'src' => 'string',
        'dst' => 'string',
        'type' => 'string',
        'pages' => 'string',
        'status' => 'string',
        'id' => 'int',
        'file' => 'string',
        'fax' => '\Ivz\Client\Model\Fax',
        'dst_country' => '\Ivz\Client\Model\Country'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'calldate' => 'date-time',
        'src' => null,
        'dst' => null,
        'type' => null,
        'pages' => null,
        'status' => null,
        'id' => null,
        'file' => null,
        'fax' => null,
        'dst_country' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'calldate' => 'calldate',
        'src' => 'src',
        'dst' => 'dst',
        'type' => 'type',
        'pages' => 'pages',
        'status' => 'status',
        'id' => 'id',
        'file' => 'file',
        'fax' => 'fax',
        'dst_country' => 'dstCountry'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'calldate' => 'setCalldate',
        'src' => 'setSrc',
        'dst' => 'setDst',
        'type' => 'setType',
        'pages' => 'setPages',
        'status' => 'setStatus',
        'id' => 'setId',
        'file' => 'setFile',
        'fax' => 'setFax',
        'dst_country' => 'setDstCountry'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'calldate' => 'getCalldate',
        'src' => 'getSrc',
        'dst' => 'getDst',
        'type' => 'getType',
        'pages' => 'getPages',
        'status' => 'getStatus',
        'id' => 'getId',
        'file' => 'getFile',
        'fax' => 'getFax',
        'dst_country' => 'getDstCountry'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_IN = 'In';
    const TYPE_OUT = 'Out';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_IN,
            self::TYPE_OUT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['calldate'] = isset($data['calldate']) ? $data['calldate'] : null;
        $this->container['src'] = isset($data['src']) ? $data['src'] : null;
        $this->container['dst'] = isset($data['dst']) ? $data['dst'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : 'Out';
        $this->container['pages'] = isset($data['pages']) ? $data['pages'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['file'] = isset($data['file']) ? $data['file'] : null;
        $this->container['fax'] = isset($data['fax']) ? $data['fax'] : null;
        $this->container['dst_country'] = isset($data['dst_country']) ? $data['dst_country'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['calldate'] === null) {
            $invalidProperties[] = "'calldate' can't be null";
        }
        if (!is_null($this->container['src']) && (mb_strlen($this->container['src']) > 128)) {
            $invalidProperties[] = "invalid value for 'src', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['dst']) && (mb_strlen($this->container['dst']) > 128)) {
            $invalidProperties[] = "invalid value for 'dst', the character length must be smaller than or equal to 128.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['type']) && (mb_strlen($this->container['type']) > 20)) {
            $invalidProperties[] = "invalid value for 'type', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['pages']) && (mb_strlen($this->container['pages']) > 64)) {
            $invalidProperties[] = "invalid value for 'pages', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['fax'] === null) {
            $invalidProperties[] = "'fax' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets calldate
     *
     * @return \DateTime
     */
    public function getCalldate()
    {
        return $this->container['calldate'];
    }

    /**
     * Sets calldate
     *
     * @param \DateTime $calldate 
     *
     * @return $this
     */
    public function setCalldate($calldate)
    {
        $this->container['calldate'] = $calldate;

        return $this;
    }

    /**
     * Gets src
     *
     * @return string
     */
    public function getSrc()
    {
        return $this->container['src'];
    }

    /**
     * Sets src
     *
     * @param string $src 
     *
     * @return $this
     */
    public function setSrc($src)
    {
        if (!is_null($src) && (mb_strlen($src) > 128)) {
            throw new \InvalidArgumentException('invalid length for $src when calling FaxesInOutDetailed., must be smaller than or equal to 128.');
        }

        $this->container['src'] = $src;

        return $this;
    }

    /**
     * Gets dst
     *
     * @return string
     */
    public function getDst()
    {
        return $this->container['dst'];
    }

    /**
     * Sets dst
     *
     * @param string $dst 
     *
     * @return $this
     */
    public function setDst($dst)
    {
        if (!is_null($dst) && (mb_strlen($dst) > 128)) {
            throw new \InvalidArgumentException('invalid length for $dst when calling FaxesInOutDetailed., must be smaller than or equal to 128.');
        }

        $this->container['dst'] = $dst;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type 
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        if (!is_null($type) && (mb_strlen($type) > 20)) {
            throw new \InvalidArgumentException('invalid length for $type when calling FaxesInOutDetailed., must be smaller than or equal to 20.');
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets pages
     *
     * @return string
     */
    public function getPages()
    {
        return $this->container['pages'];
    }

    /**
     * Sets pages
     *
     * @param string $pages 
     *
     * @return $this
     */
    public function setPages($pages)
    {
        if (!is_null($pages) && (mb_strlen($pages) > 64)) {
            throw new \InvalidArgumentException('invalid length for $pages when calling FaxesInOutDetailed., must be smaller than or equal to 64.');
        }

        $this->container['pages'] = $pages;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status 
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets file
     *
     * @return string
     */
    public function getFile()
    {
        return $this->container['file'];
    }

    /**
     * Sets file
     *
     * @param string $file 
     *
     * @return $this
     */
    public function setFile($file)
    {
        $this->container['file'] = $file;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return \Ivz\Client\Model\Fax
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param \Ivz\Client\Model\Fax $fax fax
     *
     * @return $this
     */
    public function setFax($fax)
    {
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets dst_country
     *
     * @return \Ivz\Client\Model\Country
     */
    public function getDstCountry()
    {
        return $this->container['dst_country'];
    }

    /**
     * Sets dst_country
     *
     * @param \Ivz\Client\Model\Country $dst_country dst_country
     *
     * @return $this
     */
    public function setDstCountry($dst_country)
    {
        $this->container['dst_country'] = $dst_country;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


