<?php
/**
 * OutgoingDdiRulesPatternDetailedCollection
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ivz\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ivoz Provider
 *
 * Client REST API
 *
 * OpenAPI spec version: 2.20.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.31
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ivz\Client\Model;

use \ArrayAccess;
use \Ivz\Client\ObjectSerializer;

/**
 * OutgoingDdiRulesPatternDetailedCollection Class Doc Comment
 *
 * @category Class
 * @package  Ivz\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OutgoingDdiRulesPatternDetailedCollection implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OutgoingDdiRulesPattern-detailedCollection';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'prefix' => 'string',
        'action' => 'string',
        'priority' => 'int',
        'id' => 'int',
        'outgoing_ddi_rule' => '\Ivz\Client\Model\OutgoingDdiRule',
        'match_list' => '\Ivz\Client\Model\MatchList',
        'forced_ddi' => '\Ivz\Client\Model\Ddi'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
        'prefix' => null,
        'action' => null,
        'priority' => null,
        'id' => null,
        'outgoing_ddi_rule' => null,
        'match_list' => null,
        'forced_ddi' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'prefix' => 'prefix',
        'action' => 'action',
        'priority' => 'priority',
        'id' => 'id',
        'outgoing_ddi_rule' => 'outgoingDdiRule',
        'match_list' => 'matchList',
        'forced_ddi' => 'forcedDdi'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'prefix' => 'setPrefix',
        'action' => 'setAction',
        'priority' => 'setPriority',
        'id' => 'setId',
        'outgoing_ddi_rule' => 'setOutgoingDdiRule',
        'match_list' => 'setMatchList',
        'forced_ddi' => 'setForcedDdi'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'prefix' => 'getPrefix',
        'action' => 'getAction',
        'priority' => 'getPriority',
        'id' => 'getId',
        'outgoing_ddi_rule' => 'getOutgoingDdiRule',
        'match_list' => 'getMatchList',
        'forced_ddi' => 'getForcedDdi'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_PREFIX = 'prefix';
    const TYPE_DESTINATION = 'destination';
    const ACTION_KEEP = 'keep';
    const ACTION_FORCE = 'force';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_PREFIX,
            self::TYPE_DESTINATION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionAllowableValues()
    {
        return [
            self::ACTION_KEEP,
            self::ACTION_FORCE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['prefix'] = isset($data['prefix']) ? $data['prefix'] : null;
        $this->container['action'] = isset($data['action']) ? $data['action'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['outgoing_ddi_rule'] = isset($data['outgoing_ddi_rule']) ? $data['outgoing_ddi_rule'] : null;
        $this->container['match_list'] = isset($data['match_list']) ? $data['match_list'] : null;
        $this->container['forced_ddi'] = isset($data['forced_ddi']) ? $data['forced_ddi'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['type']) > 20)) {
            $invalidProperties[] = "invalid value for 'type', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['prefix']) && (mb_strlen($this->container['prefix']) > 10)) {
            $invalidProperties[] = "invalid value for 'prefix', the character length must be smaller than or equal to 10.";
        }

        if ($this->container['action'] === null) {
            $invalidProperties[] = "'action' can't be null";
        }
        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($this->container['action']) && !in_array($this->container['action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'action', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['action']) > 10)) {
            $invalidProperties[] = "invalid value for 'action', the character length must be smaller than or equal to 10.";
        }

        if ($this->container['priority'] === null) {
            $invalidProperties[] = "'priority' can't be null";
        }
        if ($this->container['outgoing_ddi_rule'] === null) {
            $invalidProperties[] = "'outgoing_ddi_rule' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type 
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($type) > 20)) {
            throw new \InvalidArgumentException('invalid length for $type when calling OutgoingDdiRulesPatternDetailedCollection., must be smaller than or equal to 20.');
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets prefix
     *
     * @return string
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     *
     * @param string $prefix 
     *
     * @return $this
     */
    public function setPrefix($prefix)
    {
        if (!is_null($prefix) && (mb_strlen($prefix) > 10)) {
            throw new \InvalidArgumentException('invalid length for $prefix when calling OutgoingDdiRulesPatternDetailedCollection., must be smaller than or equal to 10.');
        }

        $this->container['prefix'] = $prefix;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string $action 
     *
     * @return $this
     */
    public function setAction($action)
    {
        $allowedValues = $this->getActionAllowableValues();
        if (!in_array($action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'action', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($action) > 10)) {
            throw new \InvalidArgumentException('invalid length for $action when calling OutgoingDdiRulesPatternDetailedCollection., must be smaller than or equal to 10.');
        }

        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority 
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets outgoing_ddi_rule
     *
     * @return \Ivz\Client\Model\OutgoingDdiRule
     */
    public function getOutgoingDdiRule()
    {
        return $this->container['outgoing_ddi_rule'];
    }

    /**
     * Sets outgoing_ddi_rule
     *
     * @param \Ivz\Client\Model\OutgoingDdiRule $outgoing_ddi_rule outgoing_ddi_rule
     *
     * @return $this
     */
    public function setOutgoingDdiRule($outgoing_ddi_rule)
    {
        $this->container['outgoing_ddi_rule'] = $outgoing_ddi_rule;

        return $this;
    }

    /**
     * Gets match_list
     *
     * @return \Ivz\Client\Model\MatchList
     */
    public function getMatchList()
    {
        return $this->container['match_list'];
    }

    /**
     * Sets match_list
     *
     * @param \Ivz\Client\Model\MatchList $match_list match_list
     *
     * @return $this
     */
    public function setMatchList($match_list)
    {
        $this->container['match_list'] = $match_list;

        return $this;
    }

    /**
     * Gets forced_ddi
     *
     * @return \Ivz\Client\Model\Ddi
     */
    public function getForcedDdi()
    {
        return $this->container['forced_ddi'];
    }

    /**
     * Sets forced_ddi
     *
     * @param \Ivz\Client\Model\Ddi $forced_ddi forced_ddi
     *
     * @return $this
     */
    public function setForcedDdi($forced_ddi)
    {
        $this->container['forced_ddi'] = $forced_ddi;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


