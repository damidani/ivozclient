<?php
/**
 * CallCsvSchedulerCollection
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ivz\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ivoz Provider
 *
 * Client REST API
 *
 * OpenAPI spec version: 2.20.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.31
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ivz\Client\Model;

use \ArrayAccess;
use \Ivz\Client\ObjectSerializer;

/**
 * CallCsvSchedulerCollection Class Doc Comment
 *
 * @category Class
 * @package  Ivz\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CallCsvSchedulerCollection implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CallCsvScheduler-collection';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'frequency' => 'int',
        'unit' => 'string',
        'call_direction' => 'string',
        'email' => 'string',
        'last_execution' => '\DateTime',
        'last_execution_error' => 'string',
        'next_execution' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'frequency' => null,
        'unit' => null,
        'call_direction' => null,
        'email' => null,
        'last_execution' => 'date-time',
        'last_execution_error' => null,
        'next_execution' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'frequency' => 'frequency',
        'unit' => 'unit',
        'call_direction' => 'callDirection',
        'email' => 'email',
        'last_execution' => 'lastExecution',
        'last_execution_error' => 'lastExecutionError',
        'next_execution' => 'nextExecution'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'frequency' => 'setFrequency',
        'unit' => 'setUnit',
        'call_direction' => 'setCallDirection',
        'email' => 'setEmail',
        'last_execution' => 'setLastExecution',
        'last_execution_error' => 'setLastExecutionError',
        'next_execution' => 'setNextExecution'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'frequency' => 'getFrequency',
        'unit' => 'getUnit',
        'call_direction' => 'getCallDirection',
        'email' => 'getEmail',
        'last_execution' => 'getLastExecution',
        'last_execution_error' => 'getLastExecutionError',
        'next_execution' => 'getNextExecution'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const UNIT_DAY = 'day';
    const UNIT_WEEK = 'week';
    const UNIT_MONTH = 'month';
    const CALL_DIRECTION_INBOUND = 'inbound';
    const CALL_DIRECTION_OUTBOUND = 'outbound';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnitAllowableValues()
    {
        return [
            self::UNIT_DAY,
            self::UNIT_WEEK,
            self::UNIT_MONTH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCallDirectionAllowableValues()
    {
        return [
            self::CALL_DIRECTION_INBOUND,
            self::CALL_DIRECTION_OUTBOUND,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['frequency'] = isset($data['frequency']) ? $data['frequency'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : 'month';
        $this->container['call_direction'] = isset($data['call_direction']) ? $data['call_direction'] : 'outbound';
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['last_execution'] = isset($data['last_execution']) ? $data['last_execution'] : null;
        $this->container['last_execution_error'] = isset($data['last_execution_error']) ? $data['last_execution_error'] : null;
        $this->container['next_execution'] = isset($data['next_execution']) ? $data['next_execution'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 40)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 40.";
        }

        if ($this->container['frequency'] === null) {
            $invalidProperties[] = "'frequency' can't be null";
        }
        if (($this->container['frequency'] < 0)) {
            $invalidProperties[] = "invalid value for 'frequency', must be bigger than or equal to 0.";
        }

        if ($this->container['unit'] === null) {
            $invalidProperties[] = "'unit' can't be null";
        }
        $allowedValues = $this->getUnitAllowableValues();
        if (!is_null($this->container['unit']) && !in_array($this->container['unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'unit', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['unit']) > 30)) {
            $invalidProperties[] = "invalid value for 'unit', the character length must be smaller than or equal to 30.";
        }

        $allowedValues = $this->getCallDirectionAllowableValues();
        if (!is_null($this->container['call_direction']) && !in_array($this->container['call_direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'call_direction', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ((mb_strlen($this->container['email']) > 140)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 140.";
        }

        if (!is_null($this->container['last_execution_error']) && (mb_strlen($this->container['last_execution_error']) > 300)) {
            $invalidProperties[] = "invalid value for 'last_execution_error', the character length must be smaller than or equal to 300.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name 
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CallCsvSchedulerCollection., must be smaller than or equal to 40.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets frequency
     *
     * @return int
     */
    public function getFrequency()
    {
        return $this->container['frequency'];
    }

    /**
     * Sets frequency
     *
     * @param int $frequency 
     *
     * @return $this
     */
    public function setFrequency($frequency)
    {

        if (($frequency < 0)) {
            throw new \InvalidArgumentException('invalid value for $frequency when calling CallCsvSchedulerCollection., must be bigger than or equal to 0.');
        }

        $this->container['frequency'] = $frequency;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string $unit 
     *
     * @return $this
     */
    public function setUnit($unit)
    {
        $allowedValues = $this->getUnitAllowableValues();
        if (!in_array($unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'unit', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($unit) > 30)) {
            throw new \InvalidArgumentException('invalid length for $unit when calling CallCsvSchedulerCollection., must be smaller than or equal to 30.');
        }

        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets call_direction
     *
     * @return string
     */
    public function getCallDirection()
    {
        return $this->container['call_direction'];
    }

    /**
     * Sets call_direction
     *
     * @param string $call_direction 
     *
     * @return $this
     */
    public function setCallDirection($call_direction)
    {
        $allowedValues = $this->getCallDirectionAllowableValues();
        if (!is_null($call_direction) && !in_array($call_direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'call_direction', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['call_direction'] = $call_direction;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email 
     *
     * @return $this
     */
    public function setEmail($email)
    {
        if ((mb_strlen($email) > 140)) {
            throw new \InvalidArgumentException('invalid length for $email when calling CallCsvSchedulerCollection., must be smaller than or equal to 140.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets last_execution
     *
     * @return \DateTime
     */
    public function getLastExecution()
    {
        return $this->container['last_execution'];
    }

    /**
     * Sets last_execution
     *
     * @param \DateTime $last_execution 
     *
     * @return $this
     */
    public function setLastExecution($last_execution)
    {
        $this->container['last_execution'] = $last_execution;

        return $this;
    }

    /**
     * Gets last_execution_error
     *
     * @return string
     */
    public function getLastExecutionError()
    {
        return $this->container['last_execution_error'];
    }

    /**
     * Sets last_execution_error
     *
     * @param string $last_execution_error 
     *
     * @return $this
     */
    public function setLastExecutionError($last_execution_error)
    {
        if (!is_null($last_execution_error) && (mb_strlen($last_execution_error) > 300)) {
            throw new \InvalidArgumentException('invalid length for $last_execution_error when calling CallCsvSchedulerCollection., must be smaller than or equal to 300.');
        }

        $this->container['last_execution_error'] = $last_execution_error;

        return $this;
    }

    /**
     * Gets next_execution
     *
     * @return \DateTime
     */
    public function getNextExecution()
    {
        return $this->container['next_execution'];
    }

    /**
     * Sets next_execution
     *
     * @param \DateTime $next_execution 
     *
     * @return $this
     */
    public function setNextExecution($next_execution)
    {
        $this->container['next_execution'] = $next_execution;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


