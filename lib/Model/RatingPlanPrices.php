<?php
/**
 * RatingPlanPrices
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ivz\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ivoz Provider
 *
 * Client REST API
 *
 * OpenAPI spec version: 2.20.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.31
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ivz\Client\Model;

use \ArrayAccess;
use \Ivz\Client\ObjectSerializer;

/**
 * RatingPlanPrices Class Doc Comment
 *
 * @category Class
 * @package  Ivz\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RatingPlanPrices implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RatingPlanPrices';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'rating_plan' => 'string',
        'name' => 'string',
        'prefix' => 'string',
        'connect_fee' => 'float',
        'cost' => 'float',
        'rate_increment' => 'string',
        'group_interval_start' => 'string',
        'time_in' => 'string',
        'days' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'rating_plan' => null,
        'name' => null,
        'prefix' => null,
        'connect_fee' => null,
        'cost' => null,
        'rate_increment' => null,
        'group_interval_start' => null,
        'time_in' => null,
        'days' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rating_plan' => 'ratingPlan',
        'name' => 'name',
        'prefix' => 'prefix',
        'connect_fee' => 'connectFee',
        'cost' => 'cost',
        'rate_increment' => 'rateIncrement',
        'group_interval_start' => 'groupIntervalStart',
        'time_in' => 'timeIn',
        'days' => 'days'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rating_plan' => 'setRatingPlan',
        'name' => 'setName',
        'prefix' => 'setPrefix',
        'connect_fee' => 'setConnectFee',
        'cost' => 'setCost',
        'rate_increment' => 'setRateIncrement',
        'group_interval_start' => 'setGroupIntervalStart',
        'time_in' => 'setTimeIn',
        'days' => 'setDays'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rating_plan' => 'getRatingPlan',
        'name' => 'getName',
        'prefix' => 'getPrefix',
        'connect_fee' => 'getConnectFee',
        'cost' => 'getCost',
        'rate_increment' => 'getRateIncrement',
        'group_interval_start' => 'getGroupIntervalStart',
        'time_in' => 'getTimeIn',
        'days' => 'getDays'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rating_plan'] = isset($data['rating_plan']) ? $data['rating_plan'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['prefix'] = isset($data['prefix']) ? $data['prefix'] : null;
        $this->container['connect_fee'] = isset($data['connect_fee']) ? $data['connect_fee'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['rate_increment'] = isset($data['rate_increment']) ? $data['rate_increment'] : null;
        $this->container['group_interval_start'] = isset($data['group_interval_start']) ? $data['group_interval_start'] : null;
        $this->container['time_in'] = isset($data['time_in']) ? $data['time_in'] : null;
        $this->container['days'] = isset($data['days']) ? $data['days'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rating_plan
     *
     * @return string
     */
    public function getRatingPlan()
    {
        return $this->container['rating_plan'];
    }

    /**
     * Sets rating_plan
     *
     * @param string $rating_plan rating_plan
     *
     * @return $this
     */
    public function setRatingPlan($rating_plan)
    {
        $this->container['rating_plan'] = $rating_plan;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets prefix
     *
     * @return string
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     *
     * @param string $prefix prefix
     *
     * @return $this
     */
    public function setPrefix($prefix)
    {
        $this->container['prefix'] = $prefix;

        return $this;
    }

    /**
     * Gets connect_fee
     *
     * @return float
     */
    public function getConnectFee()
    {
        return $this->container['connect_fee'];
    }

    /**
     * Sets connect_fee
     *
     * @param float $connect_fee connect_fee
     *
     * @return $this
     */
    public function setConnectFee($connect_fee)
    {
        $this->container['connect_fee'] = $connect_fee;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return float
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param float $cost cost
     *
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets rate_increment
     *
     * @return string
     */
    public function getRateIncrement()
    {
        return $this->container['rate_increment'];
    }

    /**
     * Sets rate_increment
     *
     * @param string $rate_increment rate_increment
     *
     * @return $this
     */
    public function setRateIncrement($rate_increment)
    {
        $this->container['rate_increment'] = $rate_increment;

        return $this;
    }

    /**
     * Gets group_interval_start
     *
     * @return string
     */
    public function getGroupIntervalStart()
    {
        return $this->container['group_interval_start'];
    }

    /**
     * Sets group_interval_start
     *
     * @param string $group_interval_start group_interval_start
     *
     * @return $this
     */
    public function setGroupIntervalStart($group_interval_start)
    {
        $this->container['group_interval_start'] = $group_interval_start;

        return $this;
    }

    /**
     * Gets time_in
     *
     * @return string
     */
    public function getTimeIn()
    {
        return $this->container['time_in'];
    }

    /**
     * Sets time_in
     *
     * @param string $time_in time_in
     *
     * @return $this
     */
    public function setTimeIn($time_in)
    {
        $this->container['time_in'] = $time_in;

        return $this;
    }

    /**
     * Gets days
     *
     * @return string
     */
    public function getDays()
    {
        return $this->container['days'];
    }

    /**
     * Sets days
     *
     * @param string $days days
     *
     * @return $this
     */
    public function setDays($days)
    {
        $this->container['days'] = $days;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


