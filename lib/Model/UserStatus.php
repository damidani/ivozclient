<?php
/**
 * UserStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ivz\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ivoz Provider
 *
 * Client REST API
 *
 * OpenAPI spec version: 2.20.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.31
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ivz\Client\Model;

use \ArrayAccess;
use \Ivz\Client\ObjectSerializer;

/**
 * UserStatus Class Doc Comment
 *
 * @category Class
 * @package  Ivz\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserStatus implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'user_name' => 'string',
        'company_name' => 'string',
        'company_domain' => 'string',
        'language' => 'string',
        'voice_mail' => 'string',
        'gs_qr_code' => 'string',
        'user_agent' => 'string',
        'ip_registered' => 'string',
        'status_terminal' => 'string',
        'terminal_name' => 'string',
        'terminal_password' => 'string',
        'extension_number' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'user_name' => null,
        'company_name' => null,
        'company_domain' => null,
        'language' => null,
        'voice_mail' => null,
        'gs_qr_code' => null,
        'user_agent' => null,
        'ip_registered' => null,
        'status_terminal' => null,
        'terminal_name' => null,
        'terminal_password' => null,
        'extension_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user_name' => 'userName',
        'company_name' => 'companyName',
        'company_domain' => 'companyDomain',
        'language' => 'language',
        'voice_mail' => 'voiceMail',
        'gs_qr_code' => 'gsQRCode',
        'user_agent' => 'userAgent',
        'ip_registered' => 'ipRegistered',
        'status_terminal' => 'statusTerminal',
        'terminal_name' => 'terminalName',
        'terminal_password' => 'terminalPassword',
        'extension_number' => 'extensionNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user_name' => 'setUserName',
        'company_name' => 'setCompanyName',
        'company_domain' => 'setCompanyDomain',
        'language' => 'setLanguage',
        'voice_mail' => 'setVoiceMail',
        'gs_qr_code' => 'setGsQrCode',
        'user_agent' => 'setUserAgent',
        'ip_registered' => 'setIpRegistered',
        'status_terminal' => 'setStatusTerminal',
        'terminal_name' => 'setTerminalName',
        'terminal_password' => 'setTerminalPassword',
        'extension_number' => 'setExtensionNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user_name' => 'getUserName',
        'company_name' => 'getCompanyName',
        'company_domain' => 'getCompanyDomain',
        'language' => 'getLanguage',
        'voice_mail' => 'getVoiceMail',
        'gs_qr_code' => 'getGsQrCode',
        'user_agent' => 'getUserAgent',
        'ip_registered' => 'getIpRegistered',
        'status_terminal' => 'getStatusTerminal',
        'terminal_name' => 'getTerminalName',
        'terminal_password' => 'getTerminalPassword',
        'extension_number' => 'getExtensionNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['user_name'] = isset($data['user_name']) ? $data['user_name'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['company_domain'] = isset($data['company_domain']) ? $data['company_domain'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['voice_mail'] = isset($data['voice_mail']) ? $data['voice_mail'] : null;
        $this->container['gs_qr_code'] = isset($data['gs_qr_code']) ? $data['gs_qr_code'] : null;
        $this->container['user_agent'] = isset($data['user_agent']) ? $data['user_agent'] : null;
        $this->container['ip_registered'] = isset($data['ip_registered']) ? $data['ip_registered'] : null;
        $this->container['status_terminal'] = isset($data['status_terminal']) ? $data['status_terminal'] : null;
        $this->container['terminal_name'] = isset($data['terminal_name']) ? $data['terminal_name'] : null;
        $this->container['terminal_password'] = isset($data['terminal_password']) ? $data['terminal_password'] : null;
        $this->container['extension_number'] = isset($data['extension_number']) ? $data['extension_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name user_name
     *
     * @return $this
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name company_name
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets company_domain
     *
     * @return string
     */
    public function getCompanyDomain()
    {
        return $this->container['company_domain'];
    }

    /**
     * Sets company_domain
     *
     * @param string $company_domain company_domain
     *
     * @return $this
     */
    public function setCompanyDomain($company_domain)
    {
        $this->container['company_domain'] = $company_domain;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language language
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets voice_mail
     *
     * @return string
     */
    public function getVoiceMail()
    {
        return $this->container['voice_mail'];
    }

    /**
     * Sets voice_mail
     *
     * @param string $voice_mail voice_mail
     *
     * @return $this
     */
    public function setVoiceMail($voice_mail)
    {
        $this->container['voice_mail'] = $voice_mail;

        return $this;
    }

    /**
     * Gets gs_qr_code
     *
     * @return string
     */
    public function getGsQrCode()
    {
        return $this->container['gs_qr_code'];
    }

    /**
     * Sets gs_qr_code
     *
     * @param string $gs_qr_code gs_qr_code
     *
     * @return $this
     */
    public function setGsQrCode($gs_qr_code)
    {
        $this->container['gs_qr_code'] = $gs_qr_code;

        return $this;
    }

    /**
     * Gets user_agent
     *
     * @return string
     */
    public function getUserAgent()
    {
        return $this->container['user_agent'];
    }

    /**
     * Sets user_agent
     *
     * @param string $user_agent user_agent
     *
     * @return $this
     */
    public function setUserAgent($user_agent)
    {
        $this->container['user_agent'] = $user_agent;

        return $this;
    }

    /**
     * Gets ip_registered
     *
     * @return string
     */
    public function getIpRegistered()
    {
        return $this->container['ip_registered'];
    }

    /**
     * Sets ip_registered
     *
     * @param string $ip_registered ip_registered
     *
     * @return $this
     */
    public function setIpRegistered($ip_registered)
    {
        $this->container['ip_registered'] = $ip_registered;

        return $this;
    }

    /**
     * Gets status_terminal
     *
     * @return string
     */
    public function getStatusTerminal()
    {
        return $this->container['status_terminal'];
    }

    /**
     * Sets status_terminal
     *
     * @param string $status_terminal status_terminal
     *
     * @return $this
     */
    public function setStatusTerminal($status_terminal)
    {
        $this->container['status_terminal'] = $status_terminal;

        return $this;
    }

    /**
     * Gets terminal_name
     *
     * @return string
     */
    public function getTerminalName()
    {
        return $this->container['terminal_name'];
    }

    /**
     * Sets terminal_name
     *
     * @param string $terminal_name terminal_name
     *
     * @return $this
     */
    public function setTerminalName($terminal_name)
    {
        $this->container['terminal_name'] = $terminal_name;

        return $this;
    }

    /**
     * Gets terminal_password
     *
     * @return string
     */
    public function getTerminalPassword()
    {
        return $this->container['terminal_password'];
    }

    /**
     * Sets terminal_password
     *
     * @param string $terminal_password terminal_password
     *
     * @return $this
     */
    public function setTerminalPassword($terminal_password)
    {
        $this->container['terminal_password'] = $terminal_password;

        return $this;
    }

    /**
     * Gets extension_number
     *
     * @return int
     */
    public function getExtensionNumber()
    {
        return $this->container['extension_number'];
    }

    /**
     * Sets extension_number
     *
     * @param int $extension_number extension_number
     *
     * @return $this
     */
    public function setExtensionNumber($extension_number)
    {
        $this->container['extension_number'] = $extension_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


