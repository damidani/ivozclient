<?php
/**
 * BillableCallCollection
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ivz\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ivoz Provider
 *
 * Client REST API
 *
 * OpenAPI spec version: 2.20.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.31
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ivz\Client\Model;

use \ArrayAccess;
use \Ivz\Client\ObjectSerializer;

/**
 * BillableCallCollection Class Doc Comment
 *
 * @category Class
 * @package  Ivz\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BillableCallCollection implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BillableCall-collection';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'start_time' => '\DateTime',
        'direction' => 'string',
        'duration' => 'float',
        'caller' => 'string',
        'callee' => 'string',
        'id' => 'int',
        'price' => 'float',
        'callid' => 'string',
        'endpoint_type' => 'string',
        'endpoint_id' => 'int',
        'endpoint_name' => 'string',
        'ddi' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'start_time' => 'date-time',
        'direction' => null,
        'duration' => 'float',
        'caller' => null,
        'callee' => null,
        'id' => null,
        'price' => 'float',
        'callid' => null,
        'endpoint_type' => null,
        'endpoint_id' => null,
        'endpoint_name' => null,
        'ddi' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start_time' => 'startTime',
        'direction' => 'direction',
        'duration' => 'duration',
        'caller' => 'caller',
        'callee' => 'callee',
        'id' => 'id',
        'price' => 'price',
        'callid' => 'callid',
        'endpoint_type' => 'endpointType',
        'endpoint_id' => 'endpointId',
        'endpoint_name' => 'endpointName',
        'ddi' => 'ddi'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start_time' => 'setStartTime',
        'direction' => 'setDirection',
        'duration' => 'setDuration',
        'caller' => 'setCaller',
        'callee' => 'setCallee',
        'id' => 'setId',
        'price' => 'setPrice',
        'callid' => 'setCallid',
        'endpoint_type' => 'setEndpointType',
        'endpoint_id' => 'setEndpointId',
        'endpoint_name' => 'setEndpointName',
        'ddi' => 'setDdi'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start_time' => 'getStartTime',
        'direction' => 'getDirection',
        'duration' => 'getDuration',
        'caller' => 'getCaller',
        'callee' => 'getCallee',
        'id' => 'getId',
        'price' => 'getPrice',
        'callid' => 'getCallid',
        'endpoint_type' => 'getEndpointType',
        'endpoint_id' => 'getEndpointId',
        'endpoint_name' => 'getEndpointName',
        'ddi' => 'getDdi'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DIRECTION_INBOUND = 'inbound';
    const DIRECTION_OUTBOUND = 'outbound';
    const ENDPOINT_TYPE_RETAIL_ACCOUNT = 'RetailAccount';
    const ENDPOINT_TYPE_RESIDENTIAL_DEVICE = 'ResidentialDevice';
    const ENDPOINT_TYPE_USER = 'User';
    const ENDPOINT_TYPE_FRIEND = 'Friend';
    const ENDPOINT_TYPE_FAX = 'Fax';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDirectionAllowableValues()
    {
        return [
            self::DIRECTION_INBOUND,
            self::DIRECTION_OUTBOUND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEndpointTypeAllowableValues()
    {
        return [
            self::ENDPOINT_TYPE_RETAIL_ACCOUNT,
            self::ENDPOINT_TYPE_RESIDENTIAL_DEVICE,
            self::ENDPOINT_TYPE_USER,
            self::ENDPOINT_TYPE_FRIEND,
            self::ENDPOINT_TYPE_FAX,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['direction'] = isset($data['direction']) ? $data['direction'] : 'outbound';
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : 0.0;
        $this->container['caller'] = isset($data['caller']) ? $data['caller'] : null;
        $this->container['callee'] = isset($data['callee']) ? $data['callee'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['callid'] = isset($data['callid']) ? $data['callid'] : null;
        $this->container['endpoint_type'] = isset($data['endpoint_type']) ? $data['endpoint_type'] : null;
        $this->container['endpoint_id'] = isset($data['endpoint_id']) ? $data['endpoint_id'] : null;
        $this->container['endpoint_name'] = isset($data['endpoint_name']) ? $data['endpoint_name'] : null;
        $this->container['ddi'] = isset($data['ddi']) ? $data['ddi'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDirectionAllowableValues();
        if (!is_null($this->container['direction']) && !in_array($this->container['direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'direction', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['duration'] === null) {
            $invalidProperties[] = "'duration' can't be null";
        }
        if (!is_null($this->container['caller']) && (mb_strlen($this->container['caller']) > 128)) {
            $invalidProperties[] = "invalid value for 'caller', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['callee']) && (mb_strlen($this->container['callee']) > 128)) {
            $invalidProperties[] = "invalid value for 'callee', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['callid']) && (mb_strlen($this->container['callid']) > 255)) {
            $invalidProperties[] = "invalid value for 'callid', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getEndpointTypeAllowableValues();
        if (!is_null($this->container['endpoint_type']) && !in_array($this->container['endpoint_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'endpoint_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['endpoint_type']) && (mb_strlen($this->container['endpoint_type']) > 55)) {
            $invalidProperties[] = "invalid value for 'endpoint_type', the character length must be smaller than or equal to 55.";
        }

        if (!is_null($this->container['endpoint_id']) && ($this->container['endpoint_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'endpoint_id', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['endpoint_name']) && (mb_strlen($this->container['endpoint_name']) > 65)) {
            $invalidProperties[] = "invalid value for 'endpoint_name', the character length must be smaller than or equal to 65.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets start_time
     *
     * @return \DateTime
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param \DateTime $start_time 
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return string
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string $direction 
     *
     * @return $this
     */
    public function setDirection($direction)
    {
        $allowedValues = $this->getDirectionAllowableValues();
        if (!is_null($direction) && !in_array($direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'direction', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return float
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param float $duration 
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets caller
     *
     * @return string
     */
    public function getCaller()
    {
        return $this->container['caller'];
    }

    /**
     * Sets caller
     *
     * @param string $caller 
     *
     * @return $this
     */
    public function setCaller($caller)
    {
        if (!is_null($caller) && (mb_strlen($caller) > 128)) {
            throw new \InvalidArgumentException('invalid length for $caller when calling BillableCallCollection., must be smaller than or equal to 128.');
        }

        $this->container['caller'] = $caller;

        return $this;
    }

    /**
     * Gets callee
     *
     * @return string
     */
    public function getCallee()
    {
        return $this->container['callee'];
    }

    /**
     * Sets callee
     *
     * @param string $callee 
     *
     * @return $this
     */
    public function setCallee($callee)
    {
        if (!is_null($callee) && (mb_strlen($callee) > 128)) {
            throw new \InvalidArgumentException('invalid length for $callee when calling BillableCallCollection., must be smaller than or equal to 128.');
        }

        $this->container['callee'] = $callee;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price 
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets callid
     *
     * @return string
     */
    public function getCallid()
    {
        return $this->container['callid'];
    }

    /**
     * Sets callid
     *
     * @param string $callid 
     *
     * @return $this
     */
    public function setCallid($callid)
    {
        if (!is_null($callid) && (mb_strlen($callid) > 255)) {
            throw new \InvalidArgumentException('invalid length for $callid when calling BillableCallCollection., must be smaller than or equal to 255.');
        }

        $this->container['callid'] = $callid;

        return $this;
    }

    /**
     * Gets endpoint_type
     *
     * @return string
     */
    public function getEndpointType()
    {
        return $this->container['endpoint_type'];
    }

    /**
     * Sets endpoint_type
     *
     * @param string $endpoint_type 
     *
     * @return $this
     */
    public function setEndpointType($endpoint_type)
    {
        $allowedValues = $this->getEndpointTypeAllowableValues();
        if (!is_null($endpoint_type) && !in_array($endpoint_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'endpoint_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        if (!is_null($endpoint_type) && (mb_strlen($endpoint_type) > 55)) {
            throw new \InvalidArgumentException('invalid length for $endpoint_type when calling BillableCallCollection., must be smaller than or equal to 55.');
        }

        $this->container['endpoint_type'] = $endpoint_type;

        return $this;
    }

    /**
     * Gets endpoint_id
     *
     * @return int
     */
    public function getEndpointId()
    {
        return $this->container['endpoint_id'];
    }

    /**
     * Sets endpoint_id
     *
     * @param int $endpoint_id 
     *
     * @return $this
     */
    public function setEndpointId($endpoint_id)
    {

        if (!is_null($endpoint_id) && ($endpoint_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $endpoint_id when calling BillableCallCollection., must be bigger than or equal to 0.');
        }

        $this->container['endpoint_id'] = $endpoint_id;

        return $this;
    }

    /**
     * Gets endpoint_name
     *
     * @return string
     */
    public function getEndpointName()
    {
        return $this->container['endpoint_name'];
    }

    /**
     * Sets endpoint_name
     *
     * @param string $endpoint_name 
     *
     * @return $this
     */
    public function setEndpointName($endpoint_name)
    {
        if (!is_null($endpoint_name) && (mb_strlen($endpoint_name) > 65)) {
            throw new \InvalidArgumentException('invalid length for $endpoint_name when calling BillableCallCollection., must be smaller than or equal to 65.');
        }

        $this->container['endpoint_name'] = $endpoint_name;

        return $this;
    }

    /**
     * Gets ddi
     *
     * @return int
     */
    public function getDdi()
    {
        return $this->container['ddi'];
    }

    /**
     * Sets ddi
     *
     * @param int $ddi 
     *
     * @return $this
     */
    public function setDdi($ddi)
    {
        $this->container['ddi'] = $ddi;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


